<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解Rust所有权与借用</title>
      <link href="/2020/08/22/Rust/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Rust%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E5%80%9F%E7%94%A8/"/>
      <url>/2020/08/22/Rust/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Rust%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E5%80%9F%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在 rust 中，一个变量的状态只可能是两种，一种是拥有变量的所有权，一种是拥有该变量的借用。当我们想使用变量但是又不想转移变量的所有权时我们会使用借用。有什么区别呢？如果一个变量拥有对该变量的所有权，代表可以对该变量进行任何操作，可以将旧的变量隐藏，重新声明一个可变或者不可变的变量，又或者重新转移给新的一个变量。但是借用变量不可能将一个可变变量或者不可变量重新变为其对抗的属性，也就是说，借用变量不能拥有该变量的全部控制权。</p><a id="more"></a><h1 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h1><p>使用所有权隐藏一个旧变量，将其由一个不可变变量变为一个可变的变量。</p><h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = a;</span><br><span class="line">    a.push_str(<span class="hljs-string">"d"</span>);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<code>&quot;abcd&quot;</code></p><h4 id="重新声明"><a href="#重新声明" class="headerlink" title="重新声明"></a>重新声明</h4><p>使用所有权重新声明一个变量，将其由一个不可变变量变为一个可变的变量。</p><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = a;</span><br><span class="line">    a.push_str(<span class="hljs-string">"d"</span>);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<code>&quot;abcd&quot;</code></p><p>上面两种情况下旧的变量旧不能使用了，因为他们的所有权已经被转移，这样是为了防止一个变量被释放两次。</p><h4 id="可变转为不可变"><a href="#可变转为不可变" class="headerlink" title="可变转为不可变"></a>可变转为不可变</h4><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> b = &amp; a;</span><br><span class="line">    b.push_str(<span class="hljs-string">"d"</span>);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><pre><code>error[E0596]: cannot borrow `*b` as mutable, as it is behind a `&amp;` reference--&gt; src/main.rs:295:5    |294 |     let b = &amp; a;    |             --- help: consider changing this to be a mutable reference: `&amp;mut  a`295 |     b.push_str(&quot;d&quot;);    |     ^ `b` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable</code></pre><h1 id="借用"><a href="#借用" class="headerlink" title="借用"></a>借用</h1><h4 id="一个owner下有多个的不可变借用的情况"><a href="#一个owner下有多个的不可变借用的情况" class="headerlink" title="一个owner下有多个的不可变借用的情况"></a>一个owner下有多个的不可变借用的情况</h4><p>rust 中的借用很像读写锁，可以同时被多个不可变变量持有借用或者只被一个可变变量借用。但是假如owner变量本身就是不可变的那么被借用后也一定是不可变的。</p><p>正确:</p><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> b = &amp;a;</span><br><span class="line">    <span class="hljs-keyword">let</span> c = &amp;a;</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<code>// &quot;abc&quot; // &quot;abc&quot;</code></p><h4 id="一个owner下有多个的可变借用的情况"><a href="#一个owner下有多个的可变借用的情况" class="headerlink" title="一个owner下有多个的可变借用的情况"></a>一个owner下有多个的可变借用的情况</h4><p>错误:</p><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> b = &amp;<span class="hljs-keyword">mut</span> a;</span><br><span class="line">    <span class="hljs-keyword">let</span> c = &amp;<span class="hljs-keyword">mut</span> a;</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><pre><code>error[E0499]: cannot borrow `a` as mutable more than once at a time--&gt; src/main.rs:302:13    |301 |     let b = &amp;mut a;    |             ------ first mutable borrow occurs here302 |     let c = &amp;mut a;    |             ^^^^^^ second mutable borrow occurs here303 |     println!(&quot;{:?}&quot;, b);    |                      - first borrow later used here</code></pre><h4 id="一个owner下有一个的可变借用和一个不可变变借用的情况"><a href="#一个owner下有一个的可变借用和一个不可变变借用的情况" class="headerlink" title="一个owner下有一个的可变借用和一个不可变变借用的情况"></a>一个owner下有一个的可变借用和一个不可变变借用的情况</h4><figure class="highlight rust hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> a = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> b = &amp;<span class="hljs-keyword">mut</span> a;</span><br><span class="line">    <span class="hljs-keyword">let</span> c = &amp;a;</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><pre><code>error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable--&gt; src/main.rs:302:13    |301 |     let b = &amp;mut a;    |             ------ mutable borrow occurs here302 |     let c = &amp;a;    |             ^^ immutable borrow occurs here303 |     println!(&quot;{:?}&quot;, b);    |                      - mutable borrow later used here</code></pre><h4 id="一个owner下有一个的可变借用"><a href="#一个owner下有一个的可变借用" class="headerlink" title="一个owner下有一个的可变借用"></a>一个owner下有一个的可变借用</h4> <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> fn main() &#123;</span><br><span class="line">    let mut a = String::from(<span class="hljs-string">"abc"</span>);</span><br><span class="line">    let b = &amp;mut a;</span><br><span class="line">    b.push_str(<span class="hljs-string">"d"</span>);</span><br><span class="line">    <span class="hljs-built_in">println</span>!(<span class="hljs-string">"&#123;:?&#125;"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果：<code>&quot;abcd&quot;</code></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>rust 所有权是与借用机制可以帮助rust避免使用gc回收，通过在变量在函数作用结束时来结束变量的声明周期，通过该机制可以做到不使用gc。借用机制可以防止我们在编写多线程的时候能够避免竞态，从根源上来避免错误。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manacher算法</title>
      <link href="/2020/07/29/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Manacher%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/29/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Manacher%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在计算机科学中，最长回文子串或最长对称因子问题是在一个<a href="https://zh.wikipedia.org/wiki/字符串" target="_blank" rel="noopener">字符串</a>中查找一个最长的连续的<a href="https://zh.wikipedia.org/wiki/回文" target="_blank" rel="noopener">回文</a>的子串，例如“banana”最长回文子串是“anana”。最长回文子串并不一定是唯一的，比如“abracadabra”，没有超过3的回文子串，但是有两个回文字串长度都是3：“ada”和“aca”。在一些应用中，我们求出全部的极大回文子串（不被其他回文串包含的回文子串）。</p><a id="more"></a><h1 id="一、算法由来"><a href="#一、算法由来" class="headerlink" title="一、算法由来"></a>一、算法由来</h1><p>Manacher于<a href="https://zh.wikipedia.org/wiki/最长回文子串#cite_note-1" target="_blank" rel="noopener">[1]</a>发现了一种线性时间算法，可以在列出给定字符串中从任意位置开始的所有回文子串。并且，Apostolico, Breslauer &amp; Galil <a href="https://zh.wikipedia.org/wiki/最长回文子串#cite_note-2" target="_blank" rel="noopener">[2]</a>发现，同样的算法也可以在任意位置查找全部极大回文子串，并且时间复杂度是线性的。因此，他们提供了一种时间复杂度为线性的最长回文子串解法。另外，Jeuring (1994)<a href="https://zh.wikipedia.org/wiki/最长回文子串#cite_note-3" target="_blank" rel="noopener">[3]</a>, Gusfield (1997)<a href="https://zh.wikipedia.org/wiki/最长回文子串#cite_note-4" target="_blank" rel="noopener">[4]</a>发现了基于后缀树的算法。也存在已知的高效并行算法。</p><p>在不使用Manacher算法的情况下，使用暴力方法对每一个字符进行向外扩的操作（中心扩展法），直到遇到不匹配的字符就停下来，继续查看下一个字符串，Mancher算法则是基于中心扩展法的基础之上，对扩出来的信息进行处理，这里是 Manacher 算法的精髓。</p><h1 id="二、算法思想"><a href="#二、算法思想" class="headerlink" title="二、算法思想"></a>二、算法思想</h1><p>Manacher核心步骤有三步:</p><ol><li>处理字符串奇偶数之间的差异，统一都变为奇数字符串。</li><li>是否有通过中心扩展法记录的最大边界直接能够得到当前字符串的最大回文字符串（加速扩过程）。</li><li>进行中心扩展法。</li></ol><h2 id="处理字符串奇偶数之间的差异"><a href="#处理字符串奇偶数之间的差异" class="headerlink" title="处理字符串奇偶数之间的差异"></a>处理字符串奇偶数之间的差异</h2><p><strong>如果不处理字符串的奇偶之间的差异会怎么样？</strong></p><p>我们举个例子<code>ababa</code>这是一个奇数，我们通过中心扩展法，向外不断扩展，直到找到不匹配的位置。在 0 位置的时候我们无法向外扩展因此直接得到 s[0] 的位置最远能扩 0 个位置。在 1 位置的时候， 由字符串 <code>b</code>向外扩展 ，s[0]  <code>a</code> 和 s[2] <code>a</code> 相等，得到 s[1] 位置最远能扩 1 个位置。在 2 位置的时候， 由字符串 <code>b</code>向外扩展 ，s[1]  <code>b</code> 和 s[3] <code>b</code> 相等，s[0]  <code>a</code> 和 s[4] <code>a</code> 相等，得到 s[2] 位置最远能扩 2 个位置。s[3]的情况和s[1]相同，s[4]的情况和s[0]相同，因此<code>ababa</code>最大回文字符串为<code>ababa</code>。</p><p>我们再来举一个偶数的例子 <code>abba</code>。在 0 位置的时候我们无法向外扩展因此直接得到 s[0] 的位置最远能扩 0 个位置。在 1 位置的时候我们无法向外扩展因此直接得到 s[1] 的位置最远能扩 0 个位置。在 2 位置的时候我们无法向外扩展因此直接得到 s[2] 的位置最远能扩 0 个位置。在 3 位置的时候我们无法向外扩展因此直接得到 s[3] 的位置最远能扩 0 个位置。实际上我们这个字符串的最大回文字符串是<code>abba</code>!因此我们需要做奇偶处理。</p><p><strong>怎么进行做奇偶处理？</strong></p><p>在字符串的开头，中间，结尾插入特殊标记符<code>#</code>，用任何不常用的字符都可以，并不会影响结果。例如字符串<code>abba</code>进行处理之后，为<code>#a#b#b#a#</code>。 </p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">manacherSring</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">rune</span></span> &#123;</span><br><span class="line">runes := []<span class="hljs-keyword">rune</span>(s)</span><br><span class="line">res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">rune</span>, <span class="hljs-built_in">len</span>(s)*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> index, i := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(res); i++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> &#123;</span><br><span class="line">res[i] = <span class="hljs-string">'#'</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">res[i] = runes[index]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加速扩过程"><a href="#加速扩过程" class="headerlink" title="加速扩过程"></a>加速扩过程</h2><p><strong>加速扩过程，我们需要记录三个变量。</strong></p><ul><li><p>维护一个数组 pArr,该数组维护了一个当前字符串所能扩的最大位置。例如<code>#a#b#a#b#a#</code>对应的 pArr 数组为 <code>{1,2,1,4,1,6,1,4,1,2,1}</code></p></li><li><p>维护一个 pR 变量，这个变量记录当前扩展能扩展到最远地方，例如<code>#a#b#a#b#a#</code>， 在没有遍历之前初始值为 -1，当 s[0] 时，<code>#</code>的最长回文半径为1,最多向外扩展0个位置，因此 pR 为1。当 s[1] 时，<code>a</code>的最长回文半径为2,最多向外扩展2个位置，因此 pR 为3。当 s[2] 时，<code>#</code>的最长回文半径为1,最多向外扩展0个位置，因此 pR 为3,pR不必之前的大,保持不变。当 s[3] 时，<code>b</code>的最长回文半径为4,最多向外扩展3个位置，因此 pR 为7。当 s[4] 时，<code>#</code>的最长回文半径为1,最多向外扩展0个位置，因此 pR 为5,pR比之前的小,保持不变。当 s[5] 时，<code>a</code>的最长回文半径为6,最多向外扩展5个位置，因此 pR 为11,此时已经到达整个字符数组的结尾，所以之后的过程中pR将不再变化。当 s[7] 时，<code>#</code>的最长回文半径为1,最多向外扩展0个位置，因此 pR 为8,pR比之前的小,保持不变。当 s[8] 时，<code>b</code>的最长回文半径为4,最多向外扩展3个位置，因此 pR 为8,pR比之前的小,保持不变。当 s[9] 时，<code>#</code>的最长回文半径为1,最多向外扩展0个位置，因此 pR 为10,pR比之前的小,保持不变。当 s[10] 时，<code>a</code>的最长回文半径为2,最多向外扩展1个位置，因此 pR 为11,pR不必之前的大,保持不变。</p></li><li>整数index。这个变量表示最近一次更新pR时（pR只会在有更大的pR时才会更新），可以说index就是当前能扩到最有边界的回文中心。</li></ul><p><strong>如何用这三个变量进行扩过程呢？</strong></p><p><img src="https://md.ulovecode.com/static/posts/20200729010146.png" alt="image-20200729010146305" style="zoom: 50%;"></p><p>index 是当前包括i的最大扩展的中心位置，其边界我们叫做左大和右大，i 是当前要扩展的位置，因为 i 在扩展中心内，index是一个大回文字符串，那么 i 的回文字符串也应该有 i’ 镜像的回文字符串。在情况 1 下，以 i 为中心的回文字符串被完全包括在大字符串内，那么 i 的扩展到最大的位置一定是 i 的右小边界，不可能超过右小边界，因为 i 字符串完全以 index 为中心扩展，如果可以再向右扩，镜像 i’ 早就应该扩了。在情况 2 下， i 的镜像 i’ 的左小’超过了左大边界，i的字符串最多能扩到右大边界，因为 i 以 index 为镜像，如果 i 能扩到超出右大的边界，同时 i‘ 镜像和 i 的字符串是回文的，index 为什么不继续向外扩展了，因为当前能扩展的最大最位置为右大，因此 i 必定不能向外扩展，i能扩展到的最大值为右大位置。情况下，i’  的 镜像左小‘ 和左大重叠的时候，这个时候 i 以右大为边界可能可以继续向外扩展，这种情况是左小‘的左边一个字符不等于右小’的右边一个字符，整个index字符串没有向外扩，说明左大左边一个字符不等于右大右边一个字符，但是因为右小没有超过右大，左小左边的字符串是有可能等于右小右边的字符串，向外扩展的情况是未知的。</p><h2 id="进行中心扩展法"><a href="#进行中心扩展法" class="headerlink" title="进行中心扩展法"></a>进行中心扩展法</h2><p>进行处理之后，我们就可以进行扩展</p><h1 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h1><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxLcpsLength</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> s == <span class="hljs-string">""</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line">runes := manacherSring(s)</span><br><span class="line">pArr := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(runes))</span><br><span class="line"><span class="hljs-keyword">var</span> index, pR, max = <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, math.MinInt32</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(runes); i++ &#123;</span><br><span class="line">pArr[i] = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">if</span> pR &gt; i &#123;</span><br><span class="line">pArr[i] = pArr[<span class="hljs-number">2</span>*index-i]</span><br><span class="line"><span class="hljs-keyword">if</span> pArr[<span class="hljs-number">2</span>*index-i] &gt; pR-i &#123;</span><br><span class="line">pArr[i] = pR - i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> ; i+pArr[i] &lt; <span class="hljs-built_in">len</span>(runes) &amp;&amp; i-pArr[i] &gt; <span class="hljs-number">-1</span> &amp;&amp; runes[i+pArr[i]] == runes[i-pArr[i]]; pArr[i]++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> i+pArr[i] &gt; pR &#123;</span><br><span class="line">pR = i + pArr[i]</span><br><span class="line">index = i</span><br><span class="line">&#125;</span><br><span class="line">max = <span class="hljs-keyword">int</span>(math.Max(<span class="hljs-keyword">float64</span>(max), <span class="hljs-keyword">float64</span>(pArr[i])))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> max<span class="hljs-number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2*index-i</code> 找到镜像位置，假如 j 是 i的镜像位置，那么  <code>i + j = 2 * index</code> , <code>j = 2 * index-i</code></p><h1 id="四、Manacher-算法的复杂度"><a href="#四、Manacher-算法的复杂度" class="headerlink" title="四、Manacher 算法的复杂度"></a>四、Manacher 算法的复杂度</h1><p>每次迭代均会使pR增加 ，在算法运行过程中从不减小。所以扩出去检查的次数就是O（N）的级别。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) 如何优雅的关闭Go Channel</title>
      <link href="/2020/07/14/Go/Golang%E8%AF%91%E6%96%87/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%ADGo-Channel/"/>
      <url>/2020/07/14/Go/Golang%E8%AF%91%E6%96%87/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%ADGo-Channel/</url>
      
        <content type="html"><![CDATA[<h2 id="Channel关闭原则"><a href="#Channel关闭原则" class="headerlink" title="Channel关闭原则"></a>Channel关闭原则</h2><blockquote><p>不要在消费端关闭channel，不要在有多个并行的生产者时对channel执行关闭操作。</p></blockquote><p>也就是说应该只在[唯一的或者最后唯一剩下]的生产者协程中关闭channel，来通知消费者已经没有值可以继续读了。只要坚持这个原则，就可以确保向一个已经关闭的channel发送数据的情况不可能发生。</p><a id="more"></a><h2 id="暴力关闭channel的正确方法"><a href="#暴力关闭channel的正确方法" class="headerlink" title="暴力关闭channel的正确方法"></a>暴力关闭channel的正确方法</h2><p>如果想要在消费端关闭channel，或者在多个生产者端关闭channel，可以使用recover机制来上个保险，避免程序因为panic而崩溃。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SafeClose</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> T)</span> <span class="hljs-params">(justClosed <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">recover</span>() != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">justClosed = <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// assume ch != nil here.</span></span><br><span class="line"><span class="hljs-built_in">close</span>(ch) <span class="hljs-comment">// panic if ch is closed</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// &lt;=&gt; justClosed = true; return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方法明显违背了上面的channel关闭原则，然后性能还可以，毕竟在每个协程只会调用一次SafeClose，性能损失很小。</p><p>同样也可以在生产消息的时候使用recover方法。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SafeSend</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> T, value T)</span> <span class="hljs-params">(closed <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">recover</span>() != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The return result can be altered </span></span><br><span class="line"><span class="hljs-comment">// in a defer function call.</span></span><br><span class="line">closed = <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ch &lt;- value <span class="hljs-comment">// panic if ch is closed</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">// &lt;=&gt; closed = false; return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="礼貌地关闭channel方法"><a href="#礼貌地关闭channel方法" class="headerlink" title="礼貌地关闭channel方法"></a>礼貌地关闭channel方法</h2><p>还有不少人经常使用用sync.Once来关闭channel，这样可以确保只会关闭一次</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> MyChannel <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">C    <span class="hljs-keyword">chan</span> T</span><br><span class="line">once sync.Once</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMyChannel</span><span class="hljs-params">()</span> *<span class="hljs-title">MyChannel</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;MyChannel&#123;C: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> T)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mc *MyChannel)</span> <span class="hljs-title">SafeClose</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mc.once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-built_in">close</span>(mc.C)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样我们也可以使用sync.Mutex达到同样的目的。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> MyChannel <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">C      <span class="hljs-keyword">chan</span> T</span><br><span class="line">closed <span class="hljs-keyword">bool</span></span><br><span class="line">mutex  sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMyChannel</span><span class="hljs-params">()</span> *<span class="hljs-title">MyChannel</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;MyChannel&#123;C: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> T)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mc *MyChannel)</span> <span class="hljs-title">SafeClose</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mc.mutex.Lock()</span><br><span class="line"><span class="hljs-keyword">if</span> !mc.closed &#123;</span><br><span class="line"><span class="hljs-built_in">close</span>(mc.C)</span><br><span class="line">mc.closed = <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">mc.mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mc *MyChannel)</span> <span class="hljs-title">IsClosed</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">mc.mutex.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> mc.mutex.Unlock()</span><br><span class="line"><span class="hljs-keyword">return</span> mc.closed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要知道golang的设计者不提供SafeClose或者SafeSend方法是有原因的，他们本来就不推荐在消费端或者在并发的多个生产端关闭channel，比如关闭只读channel在语法上就彻底被禁止使用了。</p><h2 id="优雅地关闭channel的方法"><a href="#优雅地关闭channel的方法" class="headerlink" title="优雅地关闭channel的方法"></a>优雅地关闭channel的方法</h2><p>上文的SafeSend方法一个很大的劣势在于它不能用在select块的case语句中。而另一个很重要的劣势在于像我这样对代码有洁癖的人来说，使用panic/recover和sync/mutex来搞定不是那么的优雅。下面我们引入在不同的场景下可以使用的纯粹的优雅的解决方法。</p><p>多个消费者，单个生产者。这种情况最简单，直接让生产者关闭channel好了。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"><span class="hljs-string">"math/rand"</span></span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">log.SetFlags(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> MaxRandomNumber = <span class="hljs-number">100000</span></span><br><span class="line"><span class="hljs-keyword">const</span> NumReceivers = <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line">wgReceivers := sync.WaitGroup&#123;&#125;</span><br><span class="line">wgReceivers.Add(NumReceivers)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">dataCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// the sender</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> value := rand.Intn(MaxRandomNumber); value == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The only sender can close the channel safely.</span></span><br><span class="line"><span class="hljs-built_in">close</span>(dataCh)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">dataCh &lt;- value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// receivers</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; NumReceivers; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wgReceivers.Done()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Receive values until dataCh is closed and</span></span><br><span class="line"><span class="hljs-comment">// the value buffer queue of dataCh is empty.</span></span><br><span class="line"><span class="hljs-keyword">for</span> value := <span class="hljs-keyword">range</span> dataCh &#123;</span><br><span class="line">log.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wgReceivers.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个生产者，单个消费者。这种情况要比上面的复杂一点。我们不能在消费端关闭channel，因为这违背了channel关闭原则。但是我们可以让消费端关闭一个附加的信号来通知发送端停止生产数据。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"><span class="hljs-string">"math/rand"</span></span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">log.SetFlags(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> MaxRandomNumber = <span class="hljs-number">100000</span></span><br><span class="line"><span class="hljs-keyword">const</span> NumSenders = <span class="hljs-number">1000</span></span><br><span class="line"></span><br><span class="line">wgReceivers := sync.WaitGroup&#123;&#125;</span><br><span class="line">wgReceivers.Add(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">dataCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">100</span>)</span><br><span class="line">stopCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="hljs-comment">// stopCh is an additional signal channel.</span></span><br><span class="line"><span class="hljs-comment">// Its sender is the receiver of channel dataCh.</span></span><br><span class="line"><span class="hljs-comment">// Its reveivers are the senders of channel dataCh.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// senders</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; NumSenders; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The first select here is to try to exit the goroutine</span></span><br><span class="line"><span class="hljs-comment">// as early as possible. In fact, it is not essential</span></span><br><span class="line"><span class="hljs-comment">// for this example, so it can be omitted.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Even if stopCh is closed, the first branch in the</span></span><br><span class="line"><span class="hljs-comment">// second select may be still not selected for some</span></span><br><span class="line"><span class="hljs-comment">// loops if the send to dataCh is also unblocked.</span></span><br><span class="line"><span class="hljs-comment">// But this is acceptable, so the first select</span></span><br><span class="line"><span class="hljs-comment">// can be omitted.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">case</span> dataCh &lt;- rand.Intn(MaxRandomNumber):</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// the receiver</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wgReceivers.Done()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> value := <span class="hljs-keyword">range</span> dataCh &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> value == MaxRandomNumber<span class="hljs-number">-1</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The receiver of the dataCh channel is</span></span><br><span class="line"><span class="hljs-comment">// also the sender of the stopCh cahnnel.</span></span><br><span class="line"><span class="hljs-comment">// It is safe to close the stop channel here.</span></span><br><span class="line"><span class="hljs-built_in">close</span>(stopCh)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">wgReceivers.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就上面这个例子，生产者同时也是退出信号channel的接受者，退出信号channel仍然是由它的生产端关闭的，所以这仍然没有违背channel关闭原则。值得注意的是，这个例子中生产端和接受端都没有关闭消息数据的channel，channel在没有任何goroutine引用的时候会自行关闭，而不需要显示进行关闭。</p><h2 id="多个生产者，多个消费者"><a href="#多个生产者，多个消费者" class="headerlink" title="多个生产者，多个消费者"></a>多个生产者，多个消费者</h2><p>这是最复杂的一种情况，我们既不能让接受端也不能让发送端关闭channel。我们甚至都不能让接受者关闭一个退出信号来通知生产者停止生产。因为我们不能违反channel关闭原则。但是我们可以引入一个额外的协调者来关闭附加的退出信号channel。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"><span class="hljs-string">"math/rand"</span></span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">log.SetFlags(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> MaxRandomNumber = <span class="hljs-number">100000</span></span><br><span class="line"><span class="hljs-keyword">const</span> NumReceivers = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">const</span> NumSenders = <span class="hljs-number">1000</span></span><br><span class="line"></span><br><span class="line">wgReceivers := sync.WaitGroup&#123;&#125;</span><br><span class="line">wgReceivers.Add(NumReceivers)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">dataCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">100</span>)</span><br><span class="line">stopCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="hljs-comment">// stopCh is an additional signal channel.</span></span><br><span class="line"><span class="hljs-comment">// Its sender is the moderator goroutine shown below.</span></span><br><span class="line"><span class="hljs-comment">// Its reveivers are all senders and receivers of dataCh.</span></span><br><span class="line">toStop := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-comment">// The channel toStop is used to notify the moderator</span></span><br><span class="line"><span class="hljs-comment">// to close the additional signal channel (stopCh).</span></span><br><span class="line"><span class="hljs-comment">// Its senders are any senders and receivers of dataCh.</span></span><br><span class="line"><span class="hljs-comment">// Its reveiver is the moderator goroutine shown below.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> stoppedBy <span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// moderator</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">stoppedBy = &lt;- toStop</span><br><span class="line"><span class="hljs-built_in">close</span>(stopCh)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// senders</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; NumSenders; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">value := rand.Intn(MaxRandomNumber)</span><br><span class="line"><span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Here, a trick is used to notify the moderator</span></span><br><span class="line"><span class="hljs-comment">// to close the additional signal channel.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> toStop &lt;- <span class="hljs-string">"sender#"</span> + id:</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// The first select here is to try to exit the goroutine</span></span><br><span class="line"><span class="hljs-comment">// as early as possible. This select blocks with one</span></span><br><span class="line"><span class="hljs-comment">// receive operation case and one default branches will</span></span><br><span class="line"><span class="hljs-comment">// be optimized as a try-receive operation by the</span></span><br><span class="line"><span class="hljs-comment">// official Go compiler.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Even if stopCh is closed, the first branch in the</span></span><br><span class="line"><span class="hljs-comment">// second select may be still not selected for some</span></span><br><span class="line"><span class="hljs-comment">// loops (and for ever in theory) if the send to</span></span><br><span class="line"><span class="hljs-comment">// dataCh is also unblocked.</span></span><br><span class="line"><span class="hljs-comment">// This is why the first select block is needed.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">case</span> dataCh &lt;- value:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(strconv.Itoa(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// receivers</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; NumReceivers; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wgReceivers.Done()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Same as the sender goroutine, the first select here</span></span><br><span class="line"><span class="hljs-comment">// is to try to exit the goroutine as early as possible.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Even if stopCh is closed, the first branch in the</span></span><br><span class="line"><span class="hljs-comment">// second select may be still not selected for some</span></span><br><span class="line"><span class="hljs-comment">// loops (and for ever in theory) if the receive from</span></span><br><span class="line"><span class="hljs-comment">// dataCh is also unblocked.</span></span><br><span class="line"><span class="hljs-comment">// This is why the first select block is needed.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stopCh:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">case</span> value := &lt;-dataCh:</span><br><span class="line"><span class="hljs-keyword">if</span> value == MaxRandomNumber<span class="hljs-number">-1</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The same trick is used to notify</span></span><br><span class="line"><span class="hljs-comment">// the moderator to close the</span></span><br><span class="line"><span class="hljs-comment">// additional signal channel.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> toStop &lt;- <span class="hljs-string">"receiver#"</span> + id:</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(strconv.Itoa(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">wgReceivers.Wait()</span><br><span class="line">log.Println(<span class="hljs-string">"stopped by"</span>, stoppedBy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种场景不能涵盖全部，但是它们是最常见最通用的三种场景，基本上所有的场景都可以划分为以上三类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先从三种场景中我们可以得到的结论是永远都是从生产者那边驱动关闭channel，即使不在生产者那边去关闭，也是生产者发送一个关闭的驱动的信息，然后消费者在那边根据回应的消息做出是否要关闭channel，这样才可以channel是被正常关闭。</p><p>在多对多的模式中，也是通过生产者驱动channel关闭，但是中间多了一个协调者。为什么要多一个协调者？</p><blockquote><p>因为我们要保证channel仅只被关闭一次，如果是多个生产者的话，谁来做这个关闭操作呢？因此只能是由一个第三方中间人去做这个事情。</p></blockquote><h5 id="情况一：生产者根据条件主动发送事件channel"><a href="#情况一：生产者根据条件主动发送事件channel" class="headerlink" title="情况一：生产者根据条件主动发送事件channel"></a>情况一：生产者根据条件主动发送事件channel</h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// Here, a trick is used to notify the moderator</span></span><br><span class="line">  <span class="hljs-comment">// to close the additional signal channel.</span></span><br><span class="line">  <span class="hljs-keyword">select</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> toStop &lt;- <span class="hljs-string">"sender#"</span> + id:</span><br><span class="line">  <span class="hljs-keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="情况二：消费者根据生产者的数据条件被动发送事件关闭channel"><a href="#情况二：消费者根据生产者的数据条件被动发送事件关闭channel" class="headerlink" title="情况二：消费者根据生产者的数据条件被动发送事件关闭channel"></a>情况二：消费者根据生产者的数据条件被动发送事件关闭channel</h5><p>不过是那边驱动消息发送过来，我认为关闭的条件仍然是由生产者决定，因为多对多的情况下，消费者依然要根据生产者的数据来做出判断，所以决定channel是否关闭，仍然取决于生产者来控制。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">case</span> value := &lt;-dataCh:</span><br><span class="line"><span class="hljs-keyword">if</span> value == MaxRandomNumber<span class="hljs-number">-1</span> &#123;</span><br><span class="line"><span class="hljs-comment">// The same trick is used to notify</span></span><br><span class="line"><span class="hljs-comment">// the moderator to close the</span></span><br><span class="line"><span class="hljs-comment">// additional signal channel.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> toStop &lt;- <span class="hljs-string">"receiver#"</span> + id:</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  再来看看channel的关闭原则<code>不要在消费端关闭channel，不要在有多个并行的生产者时对channel执行关闭操作</code>，似乎是印证了我的想法。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go的工具概述</title>
      <link href="/2020/06/18/Go/Golang%E8%AF%91%E6%96%87/Go%E7%9A%84%E5%B7%A5%E5%85%B7%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/06/18/Go/Golang%E8%AF%91%E6%96%87/Go%E7%9A%84%E5%B7%A5%E5%85%B7%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>有时我会被问到<em>“你为什么喜欢使用Go？”</em> 我经常提到的一件事是作为<code>go</code>命令的一部分与语言一起存在的周到工具。我每天都会使用一些工具（例如<code>go fmt</code>和）<code>go build</code>，而其他类似工具<code>go tool pprof</code>仅用于帮助解决特定问题。但是在所有情况下，我都很欣赏它们使我的项目管理和维护更加容易的事实。</p><a id="more"></a><p>在这篇文章中，我希望提供一些有关我发现最有用的工具的背景知识和背景知识，并且重要的是，说明它们如何适合典型项目的工作流程。如果你是Go的新手，希望它能给你一个良好的开端。</p><p>或者，如果你使用Go已有一段时间，并且该内容不适用于你，则希望你仍会发现以前不知道的命令或标志：）</p><p>这篇文章中的信息是为Go 1.12编写的，并假定你正在一个<a href="https://github.com/golang/go/wiki/Modules#quick-start" target="_blank" rel="noopener">启用了模块</a>的项目中。</p><ol><li><strong><a href="#installing-tooling">安装工具</a></strong></li><li><strong><a href="#viewing-environment-information">查看环境信息</a></strong></li><li><p><strong><a href="#development">发展历程</a></strong></p><ul><li><a href="#running-code">运行代码</a></li><li><a href="#fetching-dependencies">获取依赖项</a></li><li><a href="#refactoring-code">重构代码</a></li><li><a href="#viewing-go-documentation">查看Go文档</a></li></ul></li><li><p><strong><a href="#testing">测试中</a></strong></p><ul><li><a href="#running-tests">运行测试</a></li><li><a href="#profiling-test-coverage">分析测试覆盖率</a></li><li><a href="#stress-testing">压力测试</a></li><li><a href="#testing-all-dependencies">测试所有依赖项</a></li></ul></li><li><p><strong><a href="#pre-commit-checks">提交前检查</a></strong></p><ul><li><a href="#formatting-code">格式化代码</a></li><li><a href="#performing-static-analysis">执行静态分析</a></li><li><a href="#linting-code">整理代码</a></li><li><a href="#tidying-and-verifying-your-dependencies">整理和验证依赖项</a></li></ul></li><li><p><strong><a href="#build-and-deployment">构建和部署</a></strong></p><ul><li><a href="#building-an-executable">建立可执行文件</a></li><li><a href="#cross-compilation">交叉编译</a></li><li><a href="#using-compiler-and-linker-flags">使用编译器和链接器标志</a></li></ul></li><li><p><strong><a href="#diagnosing-problems-and-making-optimizations">诊断问题并进行优化</a></strong></p><ul><li><a href="#running-and-comparing-benchmarks">运行和比较基准</a></li><li><a href="#profiling-and-tracing">分析和跟踪</a></li><li><a href="#checking-for-race-conditions">检查比赛条件</a></li></ul></li><li><p><strong><a href="#managing-dependencies">管理依赖关系</a></strong></p></li><li><strong><a href="#upgrading-to-a-new-go-release">升级到新的Go版本</a></strong></li><li><strong><a href="#reporting-bugs">报告错误</a></strong></li><li><strong><a href="#cheatsheet">备忘单</a></strong></li></ol><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>在这篇文章中，我将主要关注作为<code>go</code>命令一部分的工具。但是我将要提到的一些内容不是标准Go 1.12版本的一部分。</p><p>要在使用Go 1.12时安装这些程序，首先需要确保你_不在_模块启用的目录中（我通常只是更改为<code>/tmp</code>）。然后，你可以使用<code>GO111MODULE=on go get</code>命令安装该工具。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/cmd/stress</span><br></pre></td></tr></table></figure><p>这将下载相关的软件包和依赖项，生成可执行文件并将其添加到你的<code>GOBIN</code>目录中。如果你尚未明确设置<code>GOBIN</code>目录，则可执行文件将添加到你的<code>GOPATH/bin</code>文件夹中。无论哪种方式，都应确保系统路径上有适当的目录。</p><p>注意：此过程有点笨拙，并有望在以后的Go版本中改进。<a href="https://github.com/golang/go/issues/30515" target="_blank" rel="noopener">问题30515</a>正在跟踪有关此<a href="https://github.com/golang/go/issues/30515" target="_blank" rel="noopener">问题</a>的讨论。</p><h2 id="查看环境信息"><a href="#查看环境信息" class="headerlink" title="查看环境信息"></a>查看环境信息</h2><p>你可以使用该<code>go env</code>工具显示有关当前Go操作环境的信息。如果你在不熟悉的计算机上工作，这可能特别有用。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOARCH=<span class="hljs-string">"amd64"</span></span><br><span class="line">GOBIN=<span class="hljs-string">""</span></span><br><span class="line">GOCACHE=<span class="hljs-string">"/home/alex/.cache/go-build"</span></span><br><span class="line">GOEXE=<span class="hljs-string">""</span></span><br><span class="line">GOFLAGS=<span class="hljs-string">""</span></span><br><span class="line">GOHOSTARCH=<span class="hljs-string">"amd64"</span></span><br><span class="line">GOHOSTOS=<span class="hljs-string">"linux"</span></span><br><span class="line">GOOS=<span class="hljs-string">"linux"</span></span><br><span class="line">GOPATH=<span class="hljs-string">"/home/alex/go"</span></span><br><span class="line">GOPROXY=<span class="hljs-string">""</span></span><br><span class="line">GORACE=<span class="hljs-string">""</span></span><br><span class="line">GOROOT=<span class="hljs-string">"/usr/local/go"</span></span><br><span class="line">GOTMPDIR=<span class="hljs-string">""</span></span><br><span class="line">GOTOOLDIR=<span class="hljs-string">"/usr/local/go/pkg/tool/linux_amd64"</span></span><br><span class="line">GCCGO=<span class="hljs-string">"gccgo"</span></span><br><span class="line">CC=<span class="hljs-string">"gcc"</span></span><br><span class="line">CXX=<span class="hljs-string">"g++"</span></span><br><span class="line">CGO_ENABLED=<span class="hljs-string">"1"</span></span><br><span class="line">GOMOD=<span class="hljs-string">""</span></span><br><span class="line">CGO_CFLAGS=<span class="hljs-string">"-g -O2"</span></span><br><span class="line">CGO_CPPFLAGS=<span class="hljs-string">""</span></span><br><span class="line">CGO_CXXFLAGS=<span class="hljs-string">"-g -O2"</span></span><br><span class="line">CGO_FFLAGS=<span class="hljs-string">"-g -O2"</span></span><br><span class="line">CGO_LDFLAGS=<span class="hljs-string">"-g -O2"</span></span><br><span class="line">PKG_CONFIG=<span class="hljs-string">"pkg-config"</span></span><br><span class="line">GOGCCFLAGS=<span class="hljs-string">"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build245740092=/tmp/go-build -gno-record-gcc-switches"</span></span><br></pre></td></tr></table></figure><p>如果你需要特定的值，可以将它们作为参数传递给<code>go env</code>。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go env GOPATH GOOS GOARCH</span><br><span class="line">/home/alex/go</span><br><span class="line">linux</span><br><span class="line">amd64</span><br></pre></td></tr></table></figure><p>要显示所有<code>go env</code>变量和值的文档，可以运行：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">help</span> environment</span><br></pre></td></tr></table></figure><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>在开发过程中，该<code>go run</code>工具是试用代码的便捷方式。从本质上讲，它是一种编译代码，在<code>/tmp</code>目录中创建可执行二进制文件然后一步运行此二进制文件的快捷方式。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run .          <span class="hljs-comment"># Run the package in the current directory</span></span><br><span class="line">$ go run ./cmd/foo  <span class="hljs-comment"># Run the package in the ./cmd/foo directory</span></span><br></pre></td></tr></table></figure><p>注意：从Go 1.11开始，你可以像上面一样<a href="https://golang.org/doc/go1.11#run" target="_blank" rel="noopener">将包</a>的<a href="https://golang.org/doc/go1.11#run" target="_blank" rel="noopener">路径</a>传递到<code>go run</code>。这意味着你不再需要使用<code>go run *.go</code>通配符扩展之类的变通办法来运行多个文件。我非常喜欢这种改进！</p><h3 id="获取依赖项"><a href="#获取依赖项" class="headerlink" title="获取依赖项"></a>获取依赖项</h3><p>假设你有<a href="https://github.com/golang/go/wiki/Modules#quick-start" target="_blank" rel="noopener">启用的模块</a>，当你使用<code>go run</code>（或<code>go test</code>或<code>go build</code>与此有关的）任何外部的依赖关系会自动（和递归）下载到符合<code>import</code>你的代码语句。默认情况下，将下载依赖项的最新标记版本，或者如果没有可用的标记版本，则在最新提交时依赖项。</p><p>如果你事先知道需要特定版本的依赖项（而不是Go默认会获取的<code>go get</code>版本），则可以使用相关的版本号或提交哈希。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/foo/bar@v1.2.3</span><br><span class="line">$ go get github.com/foo/bar@8e1b8d3</span><br></pre></td></tr></table></figure><p>如果相关性被提取有<code>go.mod</code>文件，那么<em>它的依赖</em>不会列出_你的_ <code>go.mod</code>文件。相反，如果要下载的依赖项没有<code>go.mod</code>文件，则该依赖项_将_在<code>go.mod</code>文件中列出，并在其<code>// indirect</code>旁边带有注释。</p><p>因此，这意味着你的<code>go.mod</code>文件不一定会在一处显示项目的所有依赖关系。相反，你可以使用以下<code>go list</code>工具查看所有内容：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m all</span><br></pre></td></tr></table></figure><p>有时你可能会问，<em>为什么是一个依赖？</em>你可以使用<code>go mod why</code>命令回答此问题，该命令将显示从主模块中的软件包到给定依赖项的最短路径。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go mod why -m golang.org/x/sys</span><br><span class="line"><span class="hljs-comment"># golang.org/x/sys</span></span><br><span class="line">github.com/alexedwards/argon2id</span><br><span class="line">golang.org/x/crypto/argon2</span><br><span class="line">golang.org/x/sys/cpu</span><br></pre></td></tr></table></figure><p>注意：该<code>go mod why</code>命令将为大多数（但不是全部）依赖项返回答案。<a href="https://github.com/golang/go/issues/27900" target="_blank" rel="noopener">问题27900</a>正在对此进行跟踪。</p><p>如果你有兴趣分析或可视化应用程序的依赖关系，那么你可能还需要签出该<code>go mod graph</code>工具。还有用于生成可视化一个伟大的教程和示例代码<a href="https://github.com/go-modules-by-example/index/tree/master/018_go_list_mod_graph_why" target="_blank" rel="noopener">在这里</a>。</p><p>最后，下载的依赖项存储在位于的<em>模块缓存</em>中<code>GOPATH/pkg/mod</code>。如果你需要清除模块缓存，则可以使用该<code>go clean</code>工具。但是请注意：这将删除计算机上<em>所有项目</em>的下载依赖关系。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go clean -modcache</span><br></pre></td></tr></table></figure><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><p>你可能对使用该<code>gofmt</code>工具自动设置代码格式很熟悉。但它也支持<em>重写规则</em>，可用于帮助重构代码。我会示范。</p><p>假设你具有以下代码，并且想要将<code>foo</code>变量更改为<code>Foo</code>以便将其导出。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> foo <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    foo = <span class="hljs-number">1</span></span><br><span class="line">fmt.Println(<span class="hljs-string">"foo"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为此，你可以<code>gofmt</code> 与<code>-r</code>标志一起使用以实现重写规则，<code>-d</code>标志可以显示更改的差异，<code>-w</code>标志可以<em>在适当的位置</em>进行更改，如下所示：</p> <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gofmt -d -w -r <span class="hljs-string">'foo -&gt; Foo'</span> .</span><br><span class="line">-<span class="hljs-keyword">var</span> foo <span class="hljs-keyword">int</span></span><br><span class="line">+<span class="hljs-keyword">var</span> Foo <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">-foo = <span class="hljs-number">1</span></span><br><span class="line">+Foo = <span class="hljs-number">1</span></span><br><span class="line"> fmt.Println(<span class="hljs-string">"foo"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意，这比查找和替换聪明吗？该<code>foo</code>变量已发生变化，但<code>&quot;foo&quot;</code>在串<code>fmt.Println()</code>语句已保持不变。需要注意的另一件事是该<code>gofmt</code>命令是递归工作的，因此上述命令将<code>*.go</code>在当前目录和子目录中的所有文件上运行。</p><p>如果要使用此功能，我建议运行重写规则<em>，而不</em>该<code>-w</code>标志第一次，第一次检查diff来确保该修改的代码是你期望的。</p><p>让我们看一个稍微复杂的例子。假设你要更新代码以使用新的Go 1.12 <a href="https://golang.org/pkg/strings/#ReplaceAll" target="_blank" rel="noopener">strings.ReplaceAll（）</a>函数而不是<a href="https://golang.org/pkg/strings/#Replace" target="_blank" rel="noopener">strings.Replace（）</a>。要进行此更改，你可以运行：</p> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gofmt -w -r <span class="hljs-string">'strings.Replace(a, b, c, -1) -&gt; strings.ReplaceAll(a, b, c)'</span> .</span><br></pre></td></tr></table></figure><p>在重写规则中，单个小写字符充当与任意表达式匹配的通配符，并且这些表达式将在替换中被替换。</p><h3 id="查看Go文档"><a href="#查看Go文档" class="headerlink" title="查看Go文档"></a>查看Go文档</h3><p>你可以使用<code>go doc</code>工具通过终端查看标准库软件包的文档。在开发过程中，我经常使用它来快速检查某些内容，例如特定功能的名称或签名。我发现它比浏览<a href="https://golang.org/pkg" target="_blank" rel="noopener">基于Web的文档</a>更快，并且它始终也可以脱机使用。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go doc strings            <span class="hljs-comment"># View simplified documentation for the strings package</span></span><br><span class="line">$ go doc -all strings       <span class="hljs-comment"># View full documentation for the strings package</span></span><br><span class="line">$ go doc strings.Replace    <span class="hljs-comment"># View documentation for the strings.Replace function</span></span><br><span class="line">$ go doc sql.DB             <span class="hljs-comment"># View documentation for the database/sql.DB type</span></span><br><span class="line">$ go doc sql.DB.Query       <span class="hljs-comment"># View documentation for the database/sql.DB.Query method</span></span><br></pre></td></tr></table></figure><p>你还可以包括该<code>-src</code>标志以显示相关的Go源代码。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go doc -src strings.Replace   <span class="hljs-comment"># View the source code for the strings.Replace function</span></span><br></pre></td></tr></table></figure><h2 id="测试中"><a href="#测试中" class="headerlink" title="测试中"></a>测试中</h2><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>你可以使用该<code>go test</code>工具在项目中运行测试，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> .          <span class="hljs-comment"># Run all tests in the current directory</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> ./...      <span class="hljs-comment"># Run all tests in the current directory and sub-directories</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> ./foo/bar  <span class="hljs-comment"># Run all tests in the ./foo/bar directory</span></span><br></pre></td></tr></table></figure><p>通常，我会在启用Go的<a href="https://golang.org/doc/articles/race_detector.html" target="_blank" rel="noopener">竞争检测器的</a>情况下运行测试，这可以帮助拾取现实使用中可能发生的_一些_数据<a href="https://golang.org/doc/articles/race_detector.html" target="_blank" rel="noopener">竞争</a>。像这样：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="hljs-built_in">test</span> -race ./...</span><br></pre></td></tr></table></figure><p>重要的是要注意，启用竞赛检测器会增加测试的总体运行时间。因此，如果你经常在TDD工作流程中运行测试，则可能更愿意将其保存为仅用于预提交测试运行。</p><p>从1.10开始，Go 在程序包级别<a href="https://golang.org/doc/go1.10#test" target="_blank" rel="noopener">缓存测试结果</a>。如果程序包在两次测试运行之间没有变化（并且你使用的是可<code>go test</code>缓存的相同标志），则将显示缓存的测试结果并在其<code>&quot;(cached)&quot;</code>旁边显示。这对于加快大型代码库的测试运行时间非常有帮助。如果要强制测试完全运行（并避免缓存），则可以使用该<code>-count=1</code>标志，也可以使用该<code>go clean</code>工具清除所有缓存的测试结果。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -count=1 ./...    <span class="hljs-comment"># Bypass the test cache when running tests</span></span><br><span class="line">$ go clean -testcache       <span class="hljs-comment"># Delete all cached test results</span></span><br></pre></td></tr></table></figure><p>注意：缓存的测试结果与缓存的构建结果一起存储在你的<code>GOCACHE</code>目录中。检查<code>go env GOCACHE</code>你不确定机器上的位置。</p><p>你可以<code>go test</code>通过使用<code>-run</code> 标志来限制运行特定的测试（和子测试）。这将接受一个正则表达式，并且仅运行名称与该正则表达式匹配的测试。我喜欢将其与<code>-v</code>标志结合使用以启用详细模式，因此将显示正在运行的测试和子测试的名称。这是一种有用的方法，可以确保我没有搞砸正则表达式，并且确实可以运行我期望的测试！</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ go <span class="hljs-built_in">test</span> -v -run=^TestFooBar$ .          <span class="hljs-comment"># Run the test with the exact name TestFooBar</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -v -run=^TestFoo .              <span class="hljs-comment"># Run tests whose names start with TestFoo</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -v -run=^TestFooBar$/^Baz$ .    <span class="hljs-comment"># Run the Baz subtest of the TestFooBar test only</span></span><br></pre></td></tr></table></figure><p>最好注意几个标记<code>-short</code>（可以用来<a href="https://golang.org/pkg/testing/#hdr-Skipping" target="_blank" rel="noopener">跳过长时间运行的测试</a>）和<code>-failfast</code>（在第一次失败后将停止运行进一步的测试）。请注意，这<code>-failfast</code>将防止缓存测试结果。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -short ./...      <span class="hljs-comment"># Skip long running tests</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -failfast ./...   <span class="hljs-comment"># Don't run further tests after a failure.</span></span><br></pre></td></tr></table></figure><h3 id="分析测试覆盖率"><a href="#分析测试覆盖率" class="headerlink" title="分析测试覆盖率"></a>分析测试覆盖率</h3><p>你可以使用该<code>-cover</code>标志在运行测试时启用覆盖率分析。这将显示每个包的输出中测试覆盖的代码百分比，类似于以下内容：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -cover ./...</span><br><span class="line">ok  github.com/alexedwards/argon2id0.467scoverage: 78.6% of statements</span><br></pre></td></tr></table></figure><p>你还可以使用标志生成<em>coverage配置文件</em>，<code>-coverprofile</code>并使用以下<code>go tool cover -html</code>命令在Web浏览器中查看它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -coverprofile=/tmp/profile.out ./...</span><br><span class="line">$ go tool cover -html=/tmp/profile.out`</span><br></pre></td></tr></table></figure><p><img src="/static/images/tooling-1.png" alt=""></p><p>这将为你提供所有测试文件的可导航列表，测试覆盖的代码以绿色显示，未覆盖的代码以红色显示。</p><p>如果需要，可以更进一步，设置<code>-covermode=count</code>标志以使coverage配置文件记录测试期间每个语句执行的确切_次数_。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -covermode=count -coverprofile=/tmp/profile.out ./...</span><br><span class="line">$ go tool cover -html=/tmp/profile.out</span><br></pre></td></tr></table></figure><p>在浏览器中查看时，执行频率更高的语句以更加饱和的绿色阴影显示，类似于：</p><p><img src="https://www.alexedwards.net/static/images/tooling-2.png" alt=""></p><p>注意：如果<code>t.Parallel()</code>在任何测试中都使用该命令，则应使用该标志<code>-covermode=atomic</code>代替，<code>-covermode=count</code>以确保计数准确。</p><p>最后，如果你没有可用于查看覆盖范围配置文件的网络浏览器，则可以使用以下命令在终端中按功能/方法查看测试覆盖率的细分：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go tool cover -func=/tmp/profile.out</span><br><span class="line">github.com/alexedwards/argon2id/argon2id.go:77:CreateHash87.5%</span><br><span class="line">github.com/alexedwards/argon2id/argon2id.go:96:ComparePasswordAndHash85.7%</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><p>你可以使用该<code>go test -count</code>命令连续运行测试多次，如果你要检查偶发性或间歇性故障，这将很有用。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="hljs-built_in">test</span> -run=^TestFooBar$ -count=500 .</span><br></pre></td></tr></table></figure><p>在此示例中，<code>TestFooBar</code>测试将连续重复500次。但重要的是要注意，测试将连续<em>串行进行</em> -即使它包含<code>t.Parallel()</code>指令。因此，如果你的测试运行相对较慢，例如往返数据库，硬盘或Internet，则运行大量测试可能会花费很长时间。</p><p>在这种情况下，你可能希望使用该<a href="https://godoc.org/golang.org/x/tools/cmd/stress" target="_blank" rel="noopener"><code>stress</code></a>工具<em>并行并行</em>重复多次相同的测试。你可以这样安装它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/cmd/stress</span><br></pre></td></tr></table></figure><p>要使用该<code>stress</code>工具，你首先需要为要_测试<em>的特定程序包编译一个</em>测试二进制文件_。你可以使用<code>go test -c</code>命令来完成。例如，要在当前目录中为程序包创建一个测试二进制文件：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="hljs-built_in">test</span> -c -o=/tmp/foo.test .</span><br></pre></td></tr></table></figure><p>在此示例中，测试二进制文件将输出到<code>/tmp/foo.test</code>。然后，你可以使用该<code>stress</code>工具在测试二进制文件中执行特定的测试，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ stress -p=4 /tmp/foo.test -test.run=^TestFooBar$</span><br><span class="line">60 runs so far, 0 failures</span><br><span class="line">120 runs so far, 0 failures</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：在上面的示例中，我使用了<code>-p</code>标志将所使用的并行进程数限制<code>stress</code>为4。没有该标志，该工具将默认使用等于的进程数<code>runtime.NumCPU()</code>。</p><h3 id="测试所有依赖项"><a href="#测试所有依赖项" class="headerlink" title="测试所有依赖项"></a>测试所有依赖项</h3><p>在构建用于发布或部署的可执行文件或公开分发代码之前，可能需要运行以下<code>go test all</code>命令：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> all</span><br></pre></td></tr></table></figure><p>这将对模块中的所有软件包以及所有依赖项（包括测试<em>测试依赖项</em>和必要的<em>标准库软件包）</em>运行测试，并且可以帮助验证所使用的依赖项的确切版本是否相互兼容。这可能需要很长时间才能运行，但是结果缓存良好，因此以后的任何后续测试都应该更快。如果需要，还可以使用<code>go test -short all</code>跳过任何长时间运行的测试。</p><h2 id="提交前检查"><a href="#提交前检查" class="headerlink" title="提交前检查"></a>提交前检查</h2><h3 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h3><p>Go提供了两种工具，可以根据Go约定自动设置代码格式：<code>gofmt</code>和<code>go fmt</code>。使用这些有助于使代码在文件和项目之间保持一致，并且-如果在提交代码之前使用它们-有助于减少检查文件版本之间的差异时的噪音。</p><p>我喜欢将<code>gofmt</code>工具与以下标志一起使用：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gofmt -w -s -d foo.go  <span class="hljs-comment"># Format the foo.go file</span></span><br><span class="line">$ gofmt -w -s -d .       <span class="hljs-comment"># Recursively format all files in the current directory and sub-directories</span></span><br></pre></td></tr></table></figure><p>在这些命令中，该<code>-w</code>标志指示该工具在适当的位置重写文件，<code>-s</code>指示该工具在可能的情况下对代码进行<a href="https://golang.org/cmd/gofmt/#hdr-The_simplify_command" target="_blank" rel="noopener">简化</a>，该<code>-d</code>标志指示该工具输出更改的差异（因为我很想知道是什么）更改）。如果你只想显示已更改文件的名称，而不是差异，则可以将其交换为<code>-l</code>标志。</p><p>注意：该<code>gofmt</code>命令以递归方式工作。如果你将目录传递给，则它会格式化<code>.</code>或<code>./cmd/foo</code>格式化<code>.go</code>该目录下的所有文件。</p><p>另一个格式化工具- <code>go fmt</code>工具是包装器，本质上调用<code>gofmt -l -w</code>指定的文件或目录。你可以像这样使用它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go fmt ./...</span><br></pre></td></tr></table></figure><h3 id="执行静态分析"><a href="#执行静态分析" class="headerlink" title="执行静态分析"></a>执行静态分析</h3><p>该<code>go vet</code>工具_会对<em>你的代码进行静态分析，并警告你某些</em>可能_与你的代码有误，但编译器不会处理的问题。诸如无法访问的代码，不必要的分配和格式错误的构建标签之类的问题。你可以这样使用它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go vet foo.go     <span class="hljs-comment"># Vet the foo.go file</span></span><br><span class="line">$ go vet .          <span class="hljs-comment"># Vet all files in the current directory</span></span><br><span class="line">$ go vet ./...      <span class="hljs-comment"># Vet all files in the current directory and sub-directories</span></span><br><span class="line">$ go vet ./foo/bar  <span class="hljs-comment"># Vet all files in the ./foo/bar directory</span></span><br></pre></td></tr></table></figure><p>在幕后，<code>go vet</code>运行一堆不同的分析仪，这些分析仪<a href="https://golang.org/cmd/vet/" target="_blank" rel="noopener">在此处列出</a>，你可以根据情况禁用特定的分析仪。例如，要禁用<code>composite</code>分析仪，可以使用：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go vet -composites=<span class="hljs-literal">false</span> ./...</span><br></pre></td></tr></table></figure><p>有一对夫妇的实验分析仪<a href="https://godoc.org/golang.org/x/tools" target="_blank" rel="noopener">golang.org/x/tools</a>，你可能会想尝试：<a href="https://godoc.org/golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness" target="_blank" rel="noopener">nilness</a>（这对于冗余或不可能为零比较检查）和<a href="https://godoc.org/golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow" target="_blank" rel="noopener">阴影</a>（其检查的变数可能出现的意外阴影）。如果要使用它们，则需要单独安装和运行它们。例如，要安装，<code>nilness</code>请运行：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness</span><br></pre></td></tr></table></figure><p>然后你可以像这样使用它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go vet -vettool=$(<span class="hljs-built_in">which</span> nilness) ./...</span><br></pre></td></tr></table></figure><p>注意：使用该<code>-vettool</code> 标志时，它将_仅_运行指定的分析器-其他所有<code>go vet</code>分析器将不会运行。</p><p>附带一提，自Go 1.10起，该<code>go test</code>工具会<code>go vet</code>在运行任何测试之前自动执行小的，高可信度的部分检查。你可以在运行如下测试时关闭此行为：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -vet=off ./...</span><br></pre></td></tr></table></figure><h3 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h3><p>你可以使用该<code>golint</code>工具来识别代码中的<em>样式错误</em>。与<code>go vet</code>有所不同，这与代码的<em>正确性</em>无关，但是可以帮助你使代码与<a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a>和Go <a href="https://golang.org/wiki/CodeReviewComments" target="_blank" rel="noopener">CodeReviewComments中</a>的样式约定对齐。</p><p>它不是标准库的一部分，因此你需要像这样安装它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ GO111MODULE=on go get golang.org/x/lint/golint</span><br></pre></td></tr></table></figure><p>然后可以按以下方式运行它：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ golint foo.go     <span class="hljs-comment"># Lint the foo.go file</span></span><br><span class="line">$ golint .          <span class="hljs-comment"># Lint all files in the current directory</span></span><br><span class="line">$ golint ./...      <span class="hljs-comment"># Lint all files in the current directory and sub-directories</span></span><br><span class="line">$ golint ./foo/bar  <span class="hljs-comment"># Lint all files in the ./foo/bar directory</span></span><br></pre></td></tr></table></figure></p><h3 id="整理和验证依赖项"><a href="#整理和验证依赖项" class="headerlink" title="整理和验证依赖项"></a>整理和验证依赖项</h3><p>在提交对代码的任何更改之前，我建议运行以下两个命令来整理和验证依赖关系：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy</span><br><span class="line">$ go mod verify</span><br></pre></td></tr></table></figure><p>该<code>go mod tidy</code>命令将修剪任何未使用的依赖从你<code>go.mod</code>和<code>go.sum</code>文件，并更新文件，包括所有可能的构建标签/ OS /建筑组合的依赖关系（注：<code>go run</code>，<code>go test</code>，<code>go build</code>等都是“懒惰”，将只取所需当前构建标签包/ OS /体系结构）。在每次提交之前运行此命令，可以更轻松地确定在查看版本控制历史记录时哪些代码更改负责添加或删除哪些依赖项。</p><p>我还建议你使用<code>go mod verify</code>命令检查自下载后对计算机的依赖项是否有意外（或有意）更改，并且它们与<code>go.sum</code>文件中的加密哈希值匹配。运行此命令有助于确保所使用的依赖项与你期望的依赖项完全相同，并且该提交的任何构建都可以在以后重现。</p><h2 id="构建和部署"><a href="#构建和部署" class="headerlink" title="构建和部署"></a>构建和部署</h2><h3 id="建立可执行文件"><a href="#建立可执行文件" class="headerlink" title="建立可执行文件"></a>建立可执行文件</h3><p>要编译<code>main</code>软件包并创建可执行二进制文件，可以使用该<code>go build</code>工具。通常，我将其与<code>-o</code>标志结合使用，让你显式设置输出目录和二进制文件名称，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build -o=/tmp/foo .            <span class="hljs-comment"># Compile the package in the current directory</span></span><br><span class="line">$ go build -o=/tmp/foo ./cmd/foo    <span class="hljs-comment"># Compile the package in the ./cmd/foo directory</span></span><br></pre></td></tr></table></figure><p>在这些示例中，<code>go build</code>将_编译<em>指定的程序包（和所有相关程序包），然后调用</em>链接器_以生成可执行二进制文件，并将其输出到<code>/tmp/foo</code>。</p><p>重要的是要注意，从Go 1.10开始，该<code>go build</code>工具将构建输出缓存在_<a href="https://golang.org/cmd/go/#hdr-Build_and_test_caching" target="_blank" rel="noopener">构建缓存中</a>_。此缓存的输出将在以后的适当版本中再次重用，这可以显着缩短总体生成时间。这种新的缓存行为方式的<a href="https://peter.bourgon.org/go-best-practices-2016/#build-and-deploy" target="_blank" rel="noopener">古训</a>的“宁可<code>go install</code>要<code>go build</code>以提高缓存”不再适用。</p><p>如果不确定构建缓存在哪里，可以通过运行以下<code>go env GOCACHE</code>命令进行检查：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env GOCACHE</span><br><span class="line">/home/alex/.cache/go-build</span><br></pre></td></tr></table></figure><p>使用构建缓存有一个<a href="https://golang.org/pkg/cmd/go/internal/help/" target="_blank" rel="noopener">重要的警告</a> -它不会检测到使用导入的C库的更改<code>cgo</code>。因此，如果你的代码通过导入了C库，<code>cgo</code>并且自上次构建以来已对其进行了更改，则需要使用<code>-a</code>标志来强制重新构建所有软件包。另外，你可以使用<code>go clean</code>清除缓存：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build -a -o=/tmp/foo .     <span class="hljs-comment"># Force all packages to be rebuilt</span></span><br><span class="line">$ go clean -cache               <span class="hljs-comment"># Remove everything from the build cache</span></span><br></pre></td></tr></table></figure><p>注意：运行<code>go clean -cache</code>也会删除缓存的测试结果。</p><p>如果你对<code>go build</code>幕后操作感兴趣，则可以使用以下命令：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -deps . | sort -u     <span class="hljs-comment"># List all packages that are used to build the executable</span></span><br><span class="line">$ go build -a -x -o=/tmp/foo .  <span class="hljs-comment"># Rebuild everything and show the commands that are run</span></span><br></pre></td></tr></table></figure><p>最后，如果你<code>go build</code>在非<code>main</code>软件包上运行，它将在一个临时位置进行编译，然后再次将结果存储在构建缓存中。没有可执行文件。</p><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>这是我最喜欢的Go功能之一。</p><p>默认情况下，<code>go build</code>将输出适合在你当前的操作系统和体系结构上使用的二进制文件。但是它也支持交叉编译，因此你可以生成适合在另一台计算机上使用的二进制文件。如果你要在一个操作系统上进行开发，而在另一个操作系统上进行部署，这将特别有用。</p><p>你可以通过分别设置<code>GOOS</code>和<code>GOARCH</code>环境变量来指定要为其创建二进制文件的操作系统和体系结构。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build -o=/tmp/linux_amd64/foo .</span><br><span class="line">$ GOOS=windows GOARCH=amd64 go build -o=/tmp/windows_amd64/foo.exe .</span><br></pre></td></tr></table></figure><p>要查看所有受支持的操作系统/体系结构组合的列表，可以运行<code>go tool dist list</code>：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ go tool dist list</span><br><span class="line">aix/ppc64</span><br><span class="line">android/386</span><br><span class="line">android/amd64</span><br><span class="line">android/arm</span><br><span class="line">android/arm64</span><br><span class="line">darwin/386</span><br><span class="line">darwin/amd64</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>提示：你可以使用Go的交叉编译来<a href="https://github.com/golang/go/wiki/WebAssembly" target="_blank" rel="noopener">创建WebAssembly二进制文件</a>。</p><p>有关交叉编译的更深入的信息，我建议阅读<a href="https://rakyll.org/cross-compilation/" target="_blank" rel="noopener">这篇出色的文章</a>。</p><h3 id="使用编译器和链接器标志"><a href="#使用编译器和链接器标志" class="headerlink" title="使用编译器和链接器标志"></a>使用编译器和链接器标志</h3><p>在生成可执行文件时，你可以使用该<code>-gcflags</code>标志来更改编译器的行为，并查看有关其工作方式的更多信息。你可以通过运行以下命令查看可用编译器标志的完整列表：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool compile -<span class="hljs-built_in">help</span></span><br></pre></td></tr></table></figure><p>你可能会发现一个有趣的标志<code>-m</code>，它会触发打印有关在编译过程中做出的优化决策的信息。你可以像这样使用它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags=<span class="hljs-string">"-m -m"</span> -o=/tmp/foo . <span class="hljs-comment"># Print information about optimization decisions</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我<code>-m</code>两次使用该标志来指示我想将决策信息打印为两层。你只需使用一个就可以得到更简单的输出。</p><p>另外，从Go 1.10开始，编译器标志仅适用于传递给的特定程序包<code>go build</code>-在上例中，该程序包是当前目录中的程序包（由表示<code>.</code>）。如果要打印所有程序包（包括依赖项）的优化决策，可以改用以下命令：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags=<span class="hljs-string">"all=-m"</span> -o=/tmp/foo .</span><br></pre></td></tr></table></figure><p>从Go 1.11开始，你应该发现<a href="https://golang.org/doc/go1.11#debugging" target="_blank" rel="noopener">调试优化的二进制文件</a>比以前<a href="https://golang.org/doc/go1.11#debugging" target="_blank" rel="noopener">更容易</a>。但是，如果需要，你仍然可以使用这些标志<code>-N</code>来禁用优化和<code>-l</code>禁用内联。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags=<span class="hljs-string">"all=-N -l"</span> -o=/tmp/foo .  <span class="hljs-comment"># Disable optimizations and inlining</span></span><br></pre></td></tr></table></figure><p>你可以通过运行以下命令查看可用的链接器标志列表：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool link -<span class="hljs-built_in">help</span></span><br></pre></td></tr></table></figure><p>其中最著名的可能是<code>-X</code>标志，它允许你将（字符串）值“烧入”应用程序中的特定变量。通常用于<a href="https://blog.alexellis.io/inject-build-time-vars-golang/" target="_blank" rel="noopener">添加版本号或提交哈希</a>。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -ldflags=<span class="hljs-string">"-X main.version=1.2.3"</span> -o=/tmp/foo .</span><br></pre></td></tr></table></figure><p>有关该<code>-X</code>标志的更多信息和一些示例代码，请参见此<a href="https://stackoverflow.com/questions/11354518/golang-application-auto-build-versioning" target="_blank" rel="noopener">StackOverflow问题</a>以及本帖子和<a href="https://blog.alexellis.io/inject-build-time-vars-golang/" target="_blank" rel="noopener">本帖子</a>。</p><p>你可能还对使用<code>-s</code>和<code>-w</code>标志从二进制文件中删除调试信息感兴趣。这通常会将最终尺寸减少约25％。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -ldflags=<span class="hljs-string">"-s -w"</span> -o=/tmp/foo .  <span class="hljs-comment"># Strip debug information from the binary</span></span><br></pre></td></tr></table></figure><p>注意：如果你需要优化二进制大小，则可能需要使用<a href="https://upx.github.io/" target="_blank" rel="noopener">upx对其</a>进行压缩。有关更多信息，请参<a href="https://blog.filippo.io/shrink-your-go-binaries-with-this-one-weird-trick/" target="_blank" rel="noopener">见此帖子</a>。</p><h2 id="诊断问题并进行优化"><a href="#诊断问题并进行优化" class="headerlink" title="诊断问题并进行优化"></a>诊断问题并进行优化</h2><h3 id="运行和比较基准"><a href="#运行和比较基准" class="headerlink" title="运行和比较基准"></a>运行和比较基准</h3><p>Go的一个不错的功能是，它使基准测试变得容易。如果你不熟悉编写基准测试的一般过程，<a href="https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go" target="_blank" rel="noopener">这里</a>和<a href="https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go" target="_blank" rel="noopener">这里</a>都有很好的指南。</p><p>要运行基准测试，你将需要使用该<code>go test</code>工具，并将<code>-bench</code>标志设置为与要执行的基准匹配的正则表达式。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. ./...                        <span class="hljs-comment"># Run all benchmarks and tests</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=. ./...                <span class="hljs-comment"># Run all benchmarks (and no tests)</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ ./...   <span class="hljs-comment"># Run only the BenchmarkFoo benchmark (and no tests)</span></span><br></pre></td></tr></table></figure><p>我几乎总是使用该<code>-benchmem</code>标志运行基准测试，该标志会强制将内存分配统计信息包含在输出中。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. -benchmem ./...</span><br></pre></td></tr></table></figure><p>默认情况下，每一个基准测试将为运行_最少_ 1次，只有一次的。你可以使用<code>-benchtime</code>和<code>-count</code>标志进行更改：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. -benchtime=5s ./...       <span class="hljs-comment"># Run each benchmark test for at least 5 seconds</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. -benchtime=500x ./...     <span class="hljs-comment"># Run each benchmark test for exactly 500 iterations</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. -count=3 ./...            <span class="hljs-comment"># Repeat each benchmark test 3 times over</span></span><br></pre></td></tr></table></figure><p>如果基准测试的代码使用并发性，则可以使用该<code>-cpu</code>标志来查看更改<code>GOMAXPROCS</code>值（实际上是可以同时执行G​​o代码的OS线程数）对性能的影响。例如，运行<code>GOMAXPROCS</code>设置为1、4和8的基准测试：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -bench=. -cpu=1,4,8 ./...</span><br></pre></td></tr></table></figure><p>要比较基准之间的更改，你可能需要使用<a href="https://godoc.org/golang.org/x/tools/cmd/benchcmp" target="_blank" rel="noopener">Benchcmp</a>工具。这不是标准<code>go</code>命令的一部分，因此你需要像这样安装它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">cd</span> /tmp</span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/cmd/benchcmp</span><br></pre></td></tr></table></figure><p>然后可以像这样使用它：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=. -benchmem ./... &gt; /tmp/old.txt</span><br><span class="line"><span class="hljs-comment"># make changes</span></span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=. -benchmem ./... &gt; /tmp/new.txt</span><br><span class="line">$ benchcmp /tmp/old.txt /tmp/new.txt</span><br><span class="line">benchmark              old ns/op     new ns/op     delta</span><br><span class="line">BenchmarkExample-8     21234         5510          -74.05%</span><br><span class="line"></span><br><span class="line">benchmark              old allocs     new allocs     delta</span><br><span class="line">BenchmarkExample-8     17             11             -35.29%</span><br><span class="line"></span><br><span class="line">benchmark              old bytes     new bytes     delta</span><br><span class="line">BenchmarkExample-8     8240          3808          -53.79%</span><br></pre></td></tr></table></figure><h3 id="分析和跟踪"><a href="#分析和跟踪" class="headerlink" title="分析和跟踪"></a>分析和跟踪</h3><p>Go使创建用于CPU使用，内存使用，goroutine阻止和互斥锁争用的诊断<em>配置文件</em>成为可能。你可以使用它们进行更深入的了解，并确切地了解你的应用程序如何使用（或等待）资源。</p><p>有三种方法可以生成配置文件：</p><ul><li>如果你有Web应用程序，则可以导入<a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener"><code>net/http/pprof</code></a>软件包。这将向中注册一些处理程序，<code>http.DefaultServeMux</code>然后你可以使用这些处理程序为正在运行的应用程序生成和下载配置文件。<a href="https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/" target="_blank" rel="noopener">这篇文章</a>提供了很好的解释和一些示例代码。</li><li>对于其他类型的应用程序，你可以使用<code>pprof.StartCPUProfile()</code>和<code>pprof.WriteHeapProfile()</code>函数来分析正在运行的应用程序。请参阅<a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener"><code>runtime/pprof</code></a>文档以获取示例代码。</li><li>或者，你可以在运行基准测试或测试时通过使用各种<code>-***profile</code>标志来生成概要文件，如下所示：</li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -cpuprofile=/tmp/cpuprofile.out .</span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -memprofile=/tmp/memprofile.out .</span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -blockprofile=/tmp/blockprofile.out .</span><br><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -mutexprofile=/tmp/mutexprofile.out .</span><br></pre></td></tr></table></figure><p>注意：<code>-***profile</code>在运行基准测试或测试时使用这些标志将导致测试二进制文件输出到你的当前目录。如果要将其输出到其他位置，则应使用如下<code>-o</code>标记：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -o=/tmp/foo.test -cpuprofile=/tmp/cpuprofile.out .</span><br></pre></td></tr></table></figure><p>无论选择哪种方式创建配置文件，启用概要分析后，你的Go程序都将每秒停止约100次，并在该时刻进行快照。将这些_样本<em>收集在一起以形成一个</em>配置文件_，你可以使用该<code>pprof</code>工具进行分析。</p><p>我最喜欢的检查配置文件的方法是使用<code>go tool pprof -http</code>命令在Web浏览器中将其打开。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool pprof -http=:5000 /tmp/cpuprofile.out</span><br></pre></td></tr></table></figure><p><img src="https://www.alexedwards.net/static/images/tooling-3.png" alt=""></p><p>这将默认为显示一个_图形_，该_图形_显示了应用程序采样方面的执行树，这使你可以快速了解任何资源使用“热点”。在上图中，我们可以看到，就CPU使用率而言，热点是源自的两个系统调用<code>ioutil.ReadFile()</code>。</p><p>你还可以导航到配置文件的其他_视图_，包括按功能和源代码列出的最高使用率。</p><p><img src="https://www.alexedwards.net/static/images/tooling-4.png" alt=""></p><p>如果信息量不胜枚举，则你可能希望使用该<code>--nodefraction</code>标志来忽略占少于一定百分比样本的节点。例如，要忽略少于10％的样本中使用的节点，可以这样运行<code>pprof</code>：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool pprof --nodefraction=0.1 -http=:5000 /tmp/cpuprofile.out</span><br></pre></td></tr></table></figure><p><img src="https://www.alexedwards.net/static/images/tooling-5.png" alt=""></p><p>这使图形的“噪点”少了很多，如果<a href="https://www.alexedwards.net/static/images/tooling-5b.svg" target="_blank" rel="noopener">放大此屏幕截图</a>，现在可以更加清楚地看到并了解CPU使用率热点所在的位置。</p><p>分析和优化资源使用情况是一个很大，细微的话题，而我在这里几乎没有涉及到任何表面。如果你有兴趣了解更多信息，那么我建议你阅读以下博客文章：</p><ul><li><a href="https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/" target="_blank" rel="noopener">分析和优化Go Web应用程序</a></li><li><a href="https://github.com/golang/go/wiki/Performance" target="_blank" rel="noopener">调试Go程序中的性能问题</a></li><li><a href="https://medium.com/@hackintoshrao/daily-code-optimization-using-benchmarks-and-profiling-in-golang-gophercon-india-2016-talk-874c8b4dc3c5" target="_blank" rel="noopener">使用基准和性能分析进行每日代码优化</a></li><li><a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/" target="_blank" rel="noopener">用pprof分析Go程序</a></li></ul><p>可以用来帮助诊断问题的另一个工具是<em>运行时执行跟踪程序</em>。这使你可以了解Go如何创建和调度goroutine，以及何时运行垃圾回收器，以及有关阻止syscall / network / sync操作的信息。</p><p>同样，你可以从测试或基准测试中生成跟踪，或者用于<code>net/http/pprof</code>创建和下载Web应用程序的跟踪。然后，你可以使用<code>go tool trace</code>来在Web浏览器中查看输出，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="hljs-built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -trace=/tmp/trace.out .</span><br><span class="line">$ go tool trace /tmp/trace.out</span><br></pre></td></tr></table></figure><p>重要提示：目前仅在Chrome / Chromium中可见。</p><p><img src="https://www.alexedwards.net/static/images/tooling-6.png" alt=""></p><p>有关Go的执行跟踪器以及如何解释输出的更多信息，请参见<a href="https://www.youtube.com/watch?v=mmqDlbWk_XA" target="_blank" rel="noopener">Rhys Hiltner的dotGo 2016演讲</a>和这篇<a href="https://making.pusher.com/go-tool-trace/" target="_blank" rel="noopener">出色的博客文章</a>。</p><h3 id="检查比赛条件"><a href="#检查比赛条件" class="headerlink" title="检查比赛条件"></a>检查比赛条件</h3><p>我之前谈到过在测试过程中使用启用Go的竞态检测器<code>go test -race</code>。但是你也可以在构建可执行文件时启用它以运行程序，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -race -o=/tmp/foo .</span><br></pre></td></tr></table></figure><p>需要特别注意的是，启用了竞争检测器的二进制文件将比<code>-race</code>正常情况下使用更多的CPU和内存，因此，在正常情况下为生产构建二进制文件时，不应使用该标志。</p><p>但是你可能希望在多个池中的一台服务器上部署启用了竞争检测器的二进制文件。或通过使用负载测试工具将流量并发到启用了种族检测器的二进制文件上，同时使用它来帮助查找可疑的竞争状况。</p><p>默认情况下，如果在二进制文件运行时检测到任何竞争，则会将日志写入<code>stderr</code>。你可以<code>GORACE</code>根据需要使用环境变量来更改它。例如，要运行位于的二进制文件<code>/tmp/foo</code>并向其输出任何种族日志，<code>/tmp/race.&lt;pid&gt;</code>可以使用：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GORACE=<span class="hljs-string">"log_path=/tmp/race"</span> /tmp/foo</span><br></pre></td></tr></table></figure><h2 id="管理依赖关系"><a href="#管理依赖关系" class="headerlink" title="管理依赖关系"></a>管理依赖关系</h2><p>你可以使用该<code>go list</code>工具检查特定依赖项是否具有可用的较新版本，如下所示：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m -u github.com/alecthomas/chroma</span><br><span class="line">github.com/alecthomas/chroma v0.6.2 [v0.6.3]</span><br></pre></td></tr></table></figure><p>这将输出你当前正在使用的依赖项名称和版本<code>[]</code>，如果存在较新的版本，则会在方括号中输出最新版本。你还可以<code>go list</code>像这样检查所有依赖项（和子依赖项）的更新：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m -u all</span><br></pre></td></tr></table></figure><p>你可以使用以下<code>go get</code>命令将依赖项升级（或降级）为最新版本，特定的标记发布或提交哈希：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/foo/bar@latest</span><br><span class="line">$ go get github.com/foo/bar@v1.2.3</span><br><span class="line">$ go get github.com/foo/bar@7e0369f</span><br></pre></td></tr></table></figure><p>如果要更新的依赖项有一个<code>go.mod</code>文件，则根据此<code>go.mod</code>文件中的信息，如有必要，还将下载对任何子<em>依赖项的</em>更新。如果使用该<code>go get -u</code>标志，则<code>go.mod</code>文件的内容将被忽略，所有子依赖项都将升级到其最新的次要版本/修补程序版本，即使<code>go.mod</code>指定了其他版本也是如此。</p><p>升级或降级任何依赖项后，最好整理一下modfile。你可能还想对所有软件包运行测试以帮助检查不兼容性。像这样：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy</span><br><span class="line">$ go <span class="hljs-built_in">test</span> all</span><br></pre></td></tr></table></figure><p>有时，你可能希望使用依赖项的本地版本（例如，在补丁合并到上游之前，你需要使用本地派生）。为此，可以使用<code>go mod edit</code>命令将<code>go.mod</code>文件中的依赖项替换为本地版本。例如：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod edit -replace=github.com/alexedwards/argon2id=/home/alex/code/argon2id</span><br></pre></td></tr></table></figure><p>这将添加一个<em>替换规则</em>，以你的<code>go.mod</code>文件像这样，和任何未来的调用<code>go run</code>，<code>go build</code>等将使用本地版本。</p><p>档案：go.mod</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module alexedwards.net/example</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-number">1.12</span></span><br><span class="line"></span><br><span class="line">require github.com/alexedwards/argon2id v0<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">-20190109181859</span><span class="hljs-number">-24206601</span>af6c</span><br><span class="line"></span><br><span class="line">replace github.com/alexedwards/argon2id =&gt; /home/alex/Projects/playground/argon2id</span><br></pre></td></tr></table></figure><p>一旦不再需要，你可以使用以下命令删除替换规则：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod edit -dropreplace=github.com/alexedwards/argon2id</span><br></pre></td></tr></table></figure><p>你可以使用<a href="https://github.com/golang/go/wiki/Modules#can-i-work-entirely-outside-of-vcs-on-my-local-filesystem" target="_blank" rel="noopener">相同的通用技术</a>来导入_仅存_在于你自己的文件系统上的软件包。如果你同时在开发中处理多个模块，而其中一个依赖于另一个模块，则这很有用。</p><p>注意：如果你不想使用该<code>go mod edit</code>命令，则可以<code>go.mod</code>手动编辑文件以进行这些更改。无论哪种方式都可以。</p><h2 id="升级到新的Go版本"><a href="#升级到新的Go版本" class="headerlink" title="升级到新的Go版本"></a>升级到新的Go版本</h2><p>该<code>go fix</code>工具最初于2011年发布（当时仍在对Go’s API进行定期更改），以帮助用户自动更新其旧代码以与Go的最新版本兼容。从那时起，Go的<a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">兼容性承诺</a>意味着，如果你从一个Go 1.x版本升级到一个新的1.x版本，则一切正常工作和使用<code>go fix</code>通常都是不必要的。</p><p>但是，它确实处理了一些非常具体的问题。你可以通过运行来查看它们的摘要<code>go tool fix -help</code>。如果你决定<code>go fix</code>升级后要运行，则应运行以下命令，然后在提交更改之前先检查一下差异。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go fix ./...</span><br></pre></td></tr></table></figure><h2 id="报告错误"><a href="#报告错误" class="headerlink" title="报告错误"></a>报告错误</h2><p>如果你确信已发现Go的标准库，工具或文档中未报告的问题，则可以使用该<code>go bug</code>命令来创建新的Github问题。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go bug</span><br></pre></td></tr></table></figure><p>这将打开一个浏览器窗口，其中包含一个预填有你的系统信息和报告模板的问题。</p><h2 id="备忘单"><a href="#备忘单" class="headerlink" title="备忘单"></a>备忘单</h2><p><em>更新2019-04-19：<a href="https://twitter.com/FedirFR" target="_blank" rel="noopener">@FedirFR</a>已经根据这篇文章做了一个<a href="https://twitter.com/FedirFR" target="_blank" rel="noopener">备忘单</a>。你可以<a href="https://github.com/fedir/go-tooling-cheat-sheet/blob/master/go-tooling-cheat-sheet.pdf" target="_blank" rel="noopener">在这里下载</a>。</em></p><p><a href="https://github.com/fedir/go-tooling-cheat-sheet/blob/master/go-tooling-cheat-sheet.pdf" target="_blank" rel="noopener"><img src="https://www.alexedwards.net/static/images/tooling-7.png" alt=""></a></p><p>如果你喜欢这篇博客文章，请不要忘记阅读有关如何<a href="https://lets-go.alexedwards.net/" target="_blank" rel="noopener">使用Go构建专​​业Web应用程序的</a>新书！</p><p>在Twitter <a href="https://twitter.com/ajmedwards" target="_blank" rel="noopener">@ajmedwards</a>上关注我。</p><p>根据<a href="http://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT许可证</a>，本文中的所有代码段均可免费使用。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 神级版本管理工具</title>
      <link href="/2020/06/12/Go/Golang%E7%A5%9E%E7%BA%A7%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/06/12/Go/Golang%E7%A5%9E%E7%BA%A7%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>对于 Golang 开发而言,Golang 语言版本的迭代速度是惊人的,几乎每几个月就需要更新一次小版本。对于 Golang 程序员来说,最渴望的特性莫过于 Go 2.0 的新特性,现在 Go 的版本已经是 1.14,相信在不久的将来会盼望到 2.0 的到来。但是 Golang 采用的是逐步迭代小版本,最终演化为最终版本,作为 Golang 程序员需要对每一个小版本的特性进行学习,因此管理 Go 版本的工具是迫在眉睫的问题,现在为大家介绍一个神级版本管理工具。</p><a id="more"></a><h1 id="一、GVM"><a href="#一、GVM" class="headerlink" title="一、GVM"></a>一、GVM</h1><p>要介绍一个开源项目为 <a href="https://github.com/moovweb/gvm" target="_blank" rel="noopener">gvm</a>,在 github 上有5000 star。使用 gvm 不需要在关心下载完新版本的 Go 后,自己还需要手动配置环境变量。</p><h3 id="1-安装-gvm"><a href="#1-安装-gvm" class="headerlink" title="1.安装 gvm"></a>1.安装 <strong>gvm</strong></h3><p>安装 gvm 的前置条件是我们已经有之前的 go 版本,假如你和我是一样的操作系统,可以运行<code>brew install go</code>先安装一个较老的版本。然后运行下面的 bash 命令。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure><p>或者,如果你正在使用的zsh只是改变bash到zsh。</p><h3 id="2-命令介绍"><a href="#2-命令介绍" class="headerlink" title="2.命令介绍"></a>2.命令介绍</h3><h5 id="运行gvm-list查看已经安装的版本-和当前使用的版本"><a href="#运行gvm-list查看已经安装的版本-和当前使用的版本" class="headerlink" title="运行gvm list查看已经安装的版本,和当前使用的版本"></a><strong>运行<code>gvm list</code>查看已经安装的版本,和当前使用的版本</strong></h5><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gvm gos (installed)</span><br><span class="line"></span><br><span class="line">   go1.12.6</span><br><span class="line">=&gt; go1.13</span><br><span class="line">   go1.14</span><br><span class="line">   system</span><br></pre></td></tr></table></figure><h5 id="运行gvm-listall命令-查看当前-Go-所有的版本"><a href="#运行gvm-listall命令-查看当前-Go-所有的版本" class="headerlink" title="运行gvm listall命令,查看当前 Go 所有的版本"></a><strong>运行<code>gvm listall</code>命令,查看当前 Go 所有的版本</strong></h5><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gvm gos (available)</span><br><span class="line">   go1</span><br><span class="line">   go1.0.1</span><br><span class="line">   go1.0.2</span><br><span class="line">   ....</span><br><span class="line">   ....</span><br><span class="line">   go1.14</span><br><span class="line">   go1.14beta1</span><br><span class="line">   go1.14rc1</span><br><span class="line">   go1.14.1</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure><h5 id="运行gvm-install-go1-14命令安装当前最新的稳定版本。这里需要注意一下的是最好让-vpn-代理命令行-可以更快的下载-Go"><a href="#运行gvm-install-go1-14命令安装当前最新的稳定版本。这里需要注意一下的是最好让-vpn-代理命令行-可以更快的下载-Go" class="headerlink" title="运行gvm install go1.14命令安装当前最新的稳定版本。这里需要注意一下的是最好让 vpn 代理命令行,可以更快的下载 Go"></a><strong>运行<code>gvm install go1.14</code>命令安装当前最新的稳定版本。这里需要注意一下的是最好让 vpn 代理命令行,可以更快的下载 Go</strong></h5><ul><li><strong>让vpn 代理命令行</strong></li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><ul><li><strong>安装 go1.14</strong></li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜ ~ gvm install go1.14</span><br><span class="line">Updating Go <span class="hljs-built_in">source</span>...</span><br><span class="line">Installing go1.14...</span><br><span class="line"> * Compiling...</span><br><span class="line">go1.14 successfully installed!</span><br></pre></td></tr></table></figure><p>安装成功了!</p><p><strong>运行<code>go env</code>查看当前版本信息,看看我们是否已经安装成功。</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GO111MODULE=<span class="hljs-string">""</span></span><br><span class="line">GOARCH=<span class="hljs-string">"amd64"</span></span><br><span class="line">GOBIN=<span class="hljs-string">"/Users/zhubowen/go/bin/"</span></span><br><span class="line">GOCACHE=<span class="hljs-string">"/Users/zhubowen/Library/Caches/go-build"</span></span><br><span class="line">GOENV=<span class="hljs-string">"/Users/zhubowen/Library/Application Support/go/env"</span></span><br><span class="line">GOEXE=<span class="hljs-string">""</span></span><br><span class="line">GOFLAGS=<span class="hljs-string">""</span></span><br><span class="line">GOHOSTARCH=<span class="hljs-string">"amd64"</span></span><br><span class="line">GOHOSTOS=<span class="hljs-string">"darwin"</span></span><br><span class="line">GONOPROXY=<span class="hljs-string">""</span></span><br><span class="line">GONOSUMDB=<span class="hljs-string">""</span></span><br><span class="line">GOOS=<span class="hljs-string">"darwin"</span></span><br><span class="line">GOPATH=<span class="hljs-string">"/Users/zhubowen/go"</span></span><br><span class="line">GOPRIVATE=<span class="hljs-string">""</span></span><br><span class="line">GOPROXY=<span class="hljs-string">"https://goproxy.io"</span></span><br><span class="line">GOROOT=<span class="hljs-string">"/Users/zhubowen/.gvm/gos/go1.13"</span></span><br><span class="line">GOSUMDB=<span class="hljs-string">"sum.golang.org"</span></span><br><span class="line">GOTMPDIR=<span class="hljs-string">""</span></span><br><span class="line">GOTOOLDIR=<span class="hljs-string">"/Users/zhubowen/.gvm/gos/go1.13/pkg/tool/darwin_amd64"</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>看到环境变量还是原先之前的,没有变化。因为我们还没有使用 go1.14。</p><h5 id="运行命令gvm-use-go1-14"><a href="#运行命令gvm-use-go1-14" class="headerlink" title="运行命令gvm use go1.14"></a><strong>运行命令<code>gvm use go1.14</code></strong></h5><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gvm use go1.14</span><br><span class="line">Now using version go1.14</span><br></pre></td></tr></table></figure><p>用<code>go env</code>查看我们是否使用成功。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOPATH=<span class="hljs-string">"/Users/zhubowen/.gvm/pkgsets/go1.14/global"</span></span><br></pre></td></tr></table></figure><p>看到了里面一点变化,这如果不是你想要的,因为我之前的 GOPATH 目录都有已经下好的东西,还有兼容之前版本的项目。</p><h5 id="运行命令gvm-pkgenv"><a href="#运行命令gvm-pkgenv" class="headerlink" title="运行命令gvm pkgenv"></a><strong>运行命令<code>gvm pkgenv</code></strong></h5><p>该命令默认是设置的system空间目录下的环境变量，设置如下：</p><p><img src="https://md.ulovecode.com/static/images/posts/image-20200612231441480.png?imageView2/2/w/1280/h/847" alt="image-20200612231441480"></p><p>将我们自己的环境变量往下面假如，覆盖上面的一些配置即可</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># go settings</span></span><br><span class="line"><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-string">"/Users/zhubowen/go"</span></span><br><span class="line"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="hljs-built_in">export</span> GOPRIVATE=<span class="hljs-string">"github.com/echoingtech/*"</span></span><br><span class="line"><span class="hljs-built_in">export</span> GOSUMDB=off</span><br><span class="line"><span class="hljs-built_in">export</span> GOBIN=<span class="hljs-string">"<span class="hljs-variable">$&#123;GOPATH&#125;</span>/bin"</span></span><br></pre></td></tr></table></figure><p>再次运行<code>go env</code>运行结果如下:</p><p><img src="https://md.ulovecode.com/static/images/posts/image-20200612231629066.png?imageView2/2/w/1280/h/847" alt="image-20200612231629066"></p><p>同时将如下配置写入到 <code>~/.bash_profile</code> 文件中，让 GVM 开机自启。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># gvm settings</span></span><br><span class="line">[[ -s <span class="hljs-string">"/Users/zhubowen/.gvm/scripts/gvm"</span> ]] &amp;&amp; <span class="hljs-built_in">source</span> <span class="hljs-string">"/Users/zhubowen/.gvm/scripts/gvm"</span></span><br><span class="line"><span class="hljs-built_in">export</span> GOVERSION=go1.14</span><br><span class="line">gvm install <span class="hljs-variable">$&#123;GOVERSION&#125;</span></span><br><span class="line">gvm use <span class="hljs-variable">$&#123;GOVERSION&#125;</span></span><br></pre></td></tr></table></figure><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>以上就是我对 gvm 的实践。非常简单和实用的工具,gvm 工具可以节省我们很多时间管理和配置 Go 的版本,值得每一个人花费一点小小的时间去学习它。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译)自定义Go Json的序列化方法</title>
      <link href="/2020/06/12/Go/Golang%E8%AF%91%E6%96%87/%E8%87%AA%E5%AE%9A%E4%B9%89Go-Json%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/12/Go/Golang%E8%AF%91%E6%96%87/%E8%87%AA%E5%AE%9A%E4%B9%89Go-Json%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>翻译自 <a href="http://choly.ca/post/go-json-marshalling/" target="_blank" rel="noopener">Custom JSON Marshalling in Go</a>。</p><a id="more"></a><p>Go的 <code>encoding/json</code>序列化<code>strcut</code>到JSON数据:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"encoding/json"</span></span><br><span class="line"><span class="hljs-string">"os"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="hljs-keyword">type</span> MyUser <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">ID       <span class="hljs-keyword">int64</span>     <span class="hljs-string">`json:"id"`</span></span><br><span class="line">Name     <span class="hljs-keyword">string</span>    <span class="hljs-string">`json:"name"`</span></span><br><span class="line">LastSeen time.Time <span class="hljs-string">`json:"lastSeen"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">_ = json.NewEncoder(os.Stdout).Encode(</span><br><span class="line">&amp;MyUser&#123;<span class="hljs-number">1</span>, <span class="hljs-string">"Ken"</span>, time.Now()&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的结果:</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="hljs-attr">"id"</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">"name"</span>:<span class="hljs-string">"Ken"</span>,<span class="hljs-attr">"lastSeen"</span>:<span class="hljs-string">"2009-11-10T23:00:00Z"</span>&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们想改变一个字段的显示结果我们要怎么做呢？例如，我们想把<code>LastSeen</code>显示为unix时间戳。</p><p>最简单的方式是引入另外一个辅助struct,在<code>MarshalJSON</code>中使用它进行正确的格式化：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *MyUser)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> json.Marshal(&amp;<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">ID       <span class="hljs-keyword">int64</span>  <span class="hljs-string">`json:"id"`</span></span><br><span class="line">Name     <span class="hljs-keyword">string</span> <span class="hljs-string">`json:"name"`</span></span><br><span class="line">LastSeen <span class="hljs-keyword">int64</span>  <span class="hljs-string">`json:"lastSeen"`</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">ID:       u.ID,</span><br><span class="line">Name:     u.Name,</span><br><span class="line">LastSeen: u.LastSeen.Unix(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做当然没有问题，但是如果有很多字段的话就会很麻烦，如果我们能把原始struct嵌入到新的struct中，并让它继承所有不需要改变的字段就太好了:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *MyUser)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> json.Marshal(&amp;<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">LastSeen <span class="hljs-keyword">int64</span> <span class="hljs-string">`json:"lastSeen"`</span></span><br><span class="line">*MyUser</span><br><span class="line">&#125;&#123;</span><br><span class="line">LastSeen: u.LastSeen.Unix(),</span><br><span class="line">MyUser:   u,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是等等，问题是这个辅助struct也会继承原始struct的<code>MarshalJSON</code>方法，这会导致这个方法进入无限循环中，最后堆栈溢出。</p><p>解决办法就是为原始类型起一个别名，别名会有原始struct所有的字段，但是不会继承它的方法：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *MyUser)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">type</span> Alias MyUser</span><br><span class="line"><span class="hljs-keyword">return</span> json.Marshal(&amp;<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">LastSeen <span class="hljs-keyword">int64</span> <span class="hljs-string">`json:"lastSeen"`</span></span><br><span class="line">*Alias</span><br><span class="line">&#125;&#123;</span><br><span class="line">LastSeen: u.LastSeen.Unix(),</span><br><span class="line">Alias:    (*Alias)(u),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的技术也可以应用于<code>UnmarshalJSON</code>方法:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *MyUser)</span> <span class="hljs-title">UnmarshalJSON</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">type</span> Alias MyUser</span><br><span class="line">aux := &amp;<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">LastSeen <span class="hljs-keyword">int64</span> <span class="hljs-string">`json:"lastSeen"`</span></span><br><span class="line">*Alias</span><br><span class="line">&#125;&#123;</span><br><span class="line">Alias: (*Alias)(u),</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := json.Unmarshal(data, &amp;aux); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">u.LastSeen = time.Unix(aux.LastSeen, <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go如何编写Grpc测试</title>
      <link href="/2020/06/05/Go/Go%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99Grpc%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/06/05/Go/Go%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99Grpc%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>我重写了公司原有的代码，对pb文件进行了更改，为了保持原有的功能保持正确性，我不得不进行测试，但是我没有找到任何一个关于Golang Grpc的测试，通过查找，可以不用开启Grcp客户端进行测试，只需要通过反射就可以调用到Grcp的方法，并进行测试。</p><a id="more"></a><h2 id="一、导包"><a href="#一、导包" class="headerlink" title="一、导包"></a>一、导包</h2><p>导入我们编写的文件，他们都在同一目录下</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> pb_test</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"context"</span></span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"testing"</span></span><br><span class="line"></span><br><span class="line">pb2 <span class="hljs-string">"github.com/echoingtech/uc/proto"</span></span><br><span class="line"><span class="hljs-string">"github.com/echoingtech/uc/service/user"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/echoingtech/uc/config"</span></span><br><span class="line"><span class="hljs-string">"github.com/echoingtech/uc/domain"</span></span><br><span class="line"><span class="hljs-string">"github.com/echoingtech/uc/presentation/mysql"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/micro/go-micro/registry/memory"</span></span><br><span class="line"><span class="hljs-string">"github.com/micro/go-micro/server"</span></span><br><span class="line"><span class="hljs-string">"github.com/micro/go-micro/server/grpc"</span></span><br><span class="line">gc <span class="hljs-string">"google.golang.org/grpc"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="二、初始化配置文件"><a href="#二、初始化配置文件" class="headerlink" title="二、初始化配置文件"></a>二、初始化配置文件</h2><p>初始化配置文件，我们可以在<code>init</code>方法中进行初始化，或者使用<code>TestMain</code>方法进行测试化。我选择了<code>init</code>方法，因为我不要那么复杂的初始化，并且比较容易编写。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> userHandler pb2.UserHandler</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">config.LoadConfig()</span><br><span class="line">engineGroup := config.GetDB()</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">userRepository   domain.UserRepository</span><br><span class="line">qqRepository     domain.QQRepository</span><br><span class="line">wechatRepository domain.WechatRepository</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">userRepository = mysql.NewUserRepository(engineGroup)</span><br><span class="line">qqRepository = mysql.NewQqRepository(engineGroup)</span><br><span class="line">wechatRepository = mysql.NewWechatRepository(engineGroup)</span><br><span class="line">&#125;</span><br><span class="line">userService := user.NewService(userRepository, qqRepository, wechatRepository)</span><br><span class="line">userHandler = NewUserAdapter</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释一下<code>userHandler</code>是我们通过pb文件生成的接口，而<code>NewUserAdapter</code>则是我们的实现类。通过依赖注入的方式使我们可以很方便的测试任何方法。</p><h2 id="三、编写测试服务"><a href="#三、编写测试服务" class="headerlink" title="三、编写测试服务"></a>三、编写测试服务</h2><p>我们注册一个服务，这个服务不需要通过网络。我们只需要在内存中通信就可以了，这可以的节省资源，并且启动很迅速。开启服务后我们通过<code>s.Start()</code>启动服务，并通过<code>gc.Dial(s.Options().Address, gc.WithInsecure())</code>进行拨号。现在我们可以进行测试了。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestGRPCServer</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">r := memory.NewRegistry()</span><br><span class="line">s := grpc.NewServer(</span><br><span class="line">server.Name(<span class="hljs-string">"foo"</span>),</span><br><span class="line">server.Registry(r),</span><br><span class="line">)</span><br><span class="line"><span class="hljs-keyword">if</span> err := pb2.RegisterUserHandler(s, userHandler); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"failed to start: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := s.Start(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"failed to start: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// check registration</span></span><br><span class="line">services, err := r.GetService(<span class="hljs-string">"foo"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(services) == <span class="hljs-number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"failed to get service: %v # %d"</span>, err, <span class="hljs-built_in">len</span>(services))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := s.Stop(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"failed to stop: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">cc, err := gc.Dial(s.Options().Address, gc.WithInsecure())</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"failed to dial server: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> getUserInfo(t, &amp;wg, cc)</span><br><span class="line">wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> getQQInfo(t, &amp;wg, cc)</span><br><span class="line">wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> getWechatInfo(t, &amp;wg, cc)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、通过异步的方式加速测试"><a href="#四、通过异步的方式加速测试" class="headerlink" title="四、通过异步的方式加速测试"></a>四、通过异步的方式加速测试</h2><p>我们通过<code>sync.WaitGroup</code>或者是用<code>goroutine</code>和<code>chan</code>的组合，可以轻易的编写出异步的测试代码。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getUserInfo</span><span class="hljs-params">(t *testing.T, wg *sync.WaitGroup, cc *gc.ClientConn)</span></span> &#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wg.Done()</span><br><span class="line">userRsp := pb2.UserResponse&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := cc.Invoke(context.Background(), <span class="hljs-string">"/User/GetUser"</span>, &amp;pb2.GetUserRequest&#123;UserId: <span class="hljs-number">86617739354963979</span>&#125;, &amp;userRsp); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"error calling server: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> userRsp.Code == <span class="hljs-number">1</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"Got unexpected response %v"</span>, userRsp.Data)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Log(userRsp.Data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getQQInfo</span><span class="hljs-params">(t *testing.T, wg *sync.WaitGroup, cc *gc.ClientConn)</span></span> &#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wg.Done()</span><br><span class="line">userRsp := pb2.GetOpenIdResponse&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := cc.Invoke(context.Background(), <span class="hljs-string">"/User/GetOpenId"</span>, &amp;pb2.GetOpenIdRequest&#123;</span><br><span class="line">UserId: <span class="hljs-number">86617739354963979</span>,</span><br><span class="line">Source: pb2.LoginSource_QQ,</span><br><span class="line">AppId:  <span class="hljs-string">"1109882002"</span>,</span><br><span class="line">&#125;, &amp;userRsp); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"error calling server: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> userRsp.Code == <span class="hljs-number">1</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"Got unexpected response %v"</span>, userRsp.Message)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Log(userRsp.OpenId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getWechatInfo</span><span class="hljs-params">(t *testing.T, wg *sync.WaitGroup, cc *gc.ClientConn)</span></span> &#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> wg.Done()</span><br><span class="line">userRsp := pb2.GetOpenIdResponse&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := cc.Invoke(context.Background(), <span class="hljs-string">"/User/GetOpenId"</span>, &amp;pb2.GetOpenIdRequest&#123;</span><br><span class="line">UserId: <span class="hljs-number">86617739354963979</span>,</span><br><span class="line">Source: pb2.LoginSource_Weixin,</span><br><span class="line">AppId:  <span class="hljs-string">"wxaf7362726f135b5c"</span>,</span><br><span class="line">&#125;, &amp;userRsp); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"error calling server: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> userRsp.Code == <span class="hljs-number">1</span> &#123;</span><br><span class="line">t.Fatalf(<span class="hljs-string">"Got unexpected response %v"</span>, userRsp.Message)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">t.Log(userRsp.OpenId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射规则调用，规则是<code>文件名/方法名</code>，并且开头字母大写。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>到现在为止，已经不错了。我们可以很方便的测试我们编写的pb文件，并且这种测试是可以进行一次配置，多次测试的。通过异步使得测试更有效率，但是异步看起来还有些丑陋，可以使用<code>goroutine</code>和<code>chan</code>模式做一些简化。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五月面试指南</title>
      <link href="/2020/05/18/%E9%9D%A2%E8%AF%95/%E4%BA%94%E6%9C%88%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
      <url>/2020/05/18/%E9%9D%A2%E8%AF%95/%E4%BA%94%E6%9C%88%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>五月份关于序章科技,腾讯云和腾讯视频,晓信科技的面试题以及答案,抽空整理成博文与大家分享一下。</p><a id="more"></a><h3 id="一-、TCP相关基础知识"><a href="#一-、TCP相关基础知识" class="headerlink" title="一 、TCP相关基础知识"></a>一 、TCP相关基础知识</h3><h5 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h5><p>刚开始客户端处于 Closed 的状态,服务端处于 Listen 状态,进行三次握手：</p><p>第一次握手：客户端给服务端发一个 SYN 报文,并指明客户端的初始化序列号 ISN(c)。此时客户端处于<code>SYN_SENT</code>状态。</p><ul><li>首部的同步位SYN=1,初始序号seq=x,SYN=1的报文段不能携带数据,但要消耗掉一个序号。</li></ul><p>第二次握手：服务器收到客户端的 SYN 报文之后,会以自己的 SYN 报文作为应答,并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值,表示自己已经收到了客户端的 SYN,此时服务器处于<code>SYN_RCVD</code>的状态。</p><ul><li>在确认报文段中SYN=1,ACK=1,确认号ack=x+1,初始序号seq=y。</li></ul><p>第三次握手：客户端收到 SYN 报文之后,会发送一个 ACK 报文,当然,也是一样把服务器的 ISN + 1 作为 ACK 的值,表示已经收到了服务端的 SYN 报文,此时客户端处于<code>ESTABLISHED</code>状态。服务器收到 ACK 报文之后,也处于<code>ESTABLISHED</code>状态,此时,双方已建立起了连接。</p><ul><li>确认报文段ACK=1,确认号ack=y+1,序号seq=x+1（初始为seq=x,第二个报文段所以要+1）,ACK报文段可以携带数据,不携带数据则不消耗序号。</li></ul><p><img src="https://md.ulovecode.com/static/images/posts/1460000020610340.png?imageView2/2/w/1280/h/847" alt="三次握手.png"></p><h5 id="四次挥手的过程"><a href="#四次挥手的过程" class="headerlink" title="四次挥手的过程"></a>四次挥手的过程</h5><p>刚开始双方都处于 ESTABLISHED 状态,假如是客户端先发起关闭请求。四次挥手的过程如下：</p><p>第一次挥手：客户端发送一个 FIN 报文,报文中会指定一个序列号。此时客户端处于<code>FIN_WAIT1</code>状态。</p><ul><li>即发出连接释放报文段（FIN=1,序号seq=u）,并停止再发送数据,主动关闭TCP连接,进入<code>FIN_WAIT1</code>（终止等待1）状态,等待服务端的确认。</li></ul><p>第二次挥手：服务端收到 FIN 之后,会发送 ACK 报文,且把客户端的序列号值 +1 作为 ACK 报文的序列号值,表明已经收到客户端的报文了,此时服务端处于<code>CLOSE_WAIT</code>状态。</p><ul><li>即服务端收到连接释放报文段后即发出<strong>确认报文段</strong>（ACK=1,确认号ack=u+1,序号seq=v）,服务端进入<code>CLOSE_WAIT</code>（关闭等待）状态,此时的TCP处于半关闭状态,客户端到服务端的连接释放。客户端收到服务端的确认后,进入<code>FIN_WAIT2</code>（终止等待2）状态,等待服务端发出的连接释放报文段。</li></ul><p>第三次挥手：如果服务端也想断开连接了,和客户端的第一次挥手一样,发给 FIN 报文,且指定一个序列号。此时服务端处于<code>LAST_ACK</code>的状态。</p><ul><li>即服务端没有要向客户端发出的数据,服务端发出<strong>连接释放报文段</strong>（FIN=1,ACK=1,序号seq=w,确认号ack=u+1）,服务端进入<code>LAST_ACK</code>（最后确认）状态,等待客户端的确认。</li></ul><p>第四次挥手：客户端收到 FIN 之后,一样发送一个 ACK 报文作为应答,且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值,此时客户端处于<code>TIME_WAIT</code>状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入<code>CLOSED</code>状态,服务端收到 ACK 报文之后,就处于关闭连接了,处于<code>CLOSED</code>状态。</p><ul><li>即客户端收到服务端的连接释放报文段后,对此发出<strong>确认报文段</strong>（ACK=1,seq=u+1,ack=w+1）,客户端进入<code>TIME_WAIT</code>（时间等待）状态。此时TCP未释放掉,需要经过时间等待计时器设置的时间2MSL后,客户端才进入<code>CLOSED</code>状态。</li></ul><p><img src="https://md.ulovecode.com/static/images/posts/1460000020610341.png?imageView2/2/w/1280/h/847" alt="image.png"></p><h5 id="三次握手过程中可以携带数据吗？"><a href="#三次握手过程中可以携带数据吗？" class="headerlink" title="三次握手过程中可以携带数据吗？"></a>三次握手过程中可以携带数据吗？</h5><p>第一次握手不可以放数据,其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话,此时客户端已经处于 ESTABLISHED 状态。对于客户端来说,他已经建立起连接了,并且也已经知道服务器的接收、发送能力是正常的了,所以能携带数据。</p><h5 id="什么是半连接队列？"><a href="#什么是半连接队列？" class="headerlink" title="什么是半连接队列？"></a>什么是半连接队列？</h5><p>服务器第一次收到客户端的 SYN 之后,就会处于<code>SYN_RCVD</code>状态,此时双方还没有完全建立其连接,服务器会把此种状态下请求连接放在一个队列里,我们把这种队列称之为半连接队列。</p><h5 id="TCP是通过什么机制保障可靠性的"><a href="#TCP是通过什么机制保障可靠性的" class="headerlink" title="TCP是通过什么机制保障可靠性的?"></a>TCP是通过什么机制保障可靠性的?</h5><ol><li>应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同,应用程序产生的数据报长度将保持不变。</li><li>超时重传</li><li>需要确认</li><li>保持首部和数据的检验和</li><li>数据后重新排序</li><li>丢弃重复</li><li>流量控制</li></ol><p>从四个方面进行回答,ACK确认机制、超时重传、滑动窗口以及流量控制,深入的话要求详细讲出流量控制的机制。</p><h5 id="tcp为什么要三次握手和四次挥手？"><a href="#tcp为什么要三次握手和四次挥手？" class="headerlink" title="tcp为什么要三次握手和四次挥手？"></a>tcp为什么要三次握手和四次挥手？</h5><p>三次握手：</p><ul><li>第一次握手: 确认客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手: 客户端可以知道客户端的接收,发送能力正常,服务器自己的发送、接收能力也正常。但是服务器端还不知道。</li><li>第三次握手: 服务端可以知道客户端的接收,能力正常,服务器自己的发送、接收能力也正常。</li></ul><p>四次挥手：</p><ul><li>原因是因为tcp是<strong>全双工模式</strong> ，<strong>接收到FIN时意味将没有数据再发来,但是还是可以继续发送数据。</strong></li></ul><h5 id="tcp怎么保证有序传输的？"><a href="#tcp怎么保证有序传输的？" class="headerlink" title="tcp怎么保证有序传输的？"></a>tcp怎么保证有序传输的？</h5><ol><li><p>为了保证数据包的可靠传递,发送方必须把已发送的数据包保留在缓冲区；</p></li><li><p>并为每个已发送的数据包启动一个超时定时器；</p></li><li><p>如在定时器超时之前收到了对方发来的应答信息（可能是对本包的应答,也可以是对本包后续包的应答）,则释放该数据包占用的缓冲区;</p></li><li><p>否则,重传该数据包,直到收到应答或重传次数超过规定的最大次数为止。</p></li><li><p>接收方收到数据包后,先进行CRC校验,如果正确则把数据交给上层协议,然后给发送方发送一个累计应答包,表明该数据已收到,并且可以携带数据。</p></li></ol><h5 id="ISN-Initial-Sequence-Number-是怎么生成的？"><a href="#ISN-Initial-Sequence-Number-是怎么生成的？" class="headerlink" title="ISN(Initial Sequence Number)是怎么生成的？"></a>ISN(Initial Sequence Number)是怎么生成的？</h5><p><strong>ISN = M + F(localhost, localport, remotehost, remoteport).</strong></p><p><strong>M</strong>是一个计时器,这个计时器每隔4毫秒加1。</p><p><strong>F</strong>是一个Hash算法,根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出,用<strong>MD5</strong>算法是一个比较好的选择。</p><p>TCP初始化序列号不能设置为一个固定值,因为这样容易被攻击者猜出后续序列号,从而遭到攻击。</p><h3 id="二、-操作系统"><a href="#二、-操作系统" class="headerlink" title="二、 操作系统"></a>二、 操作系统</h3><h5 id="描述线程、进程以及协程的区别-描述线程、进程以及协程的定义和区别-顺便描述Go语言中三者的使用。"><a href="#描述线程、进程以及协程的区别-描述线程、进程以及协程的定义和区别-顺便描述Go语言中三者的使用。" class="headerlink" title="描述线程、进程以及协程的区别? 描述线程、进程以及协程的定义和区别,顺便描述Go语言中三者的使用。"></a>描述线程、进程以及协程的区别? 描述线程、进程以及协程的定义和区别,顺便描述Go语言中三者的使用。</h5><p>一、定义</p><p>1、进程</p><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的<strong>独立内存空间</strong>,不同进程通过进程间通信来通信。由于进程比较重量,占据独立的内存,所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大,但相对比较稳定安全。</p><p>2、线程</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过<strong>共享内存</strong>,上下文切换很快,资源开销较少,但相比进程不够稳定容易丢失数据。</p><p>3、协程</p><p>协程是一种用户态的轻量级线程,协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时,将寄存器上下文和栈保存到其他地方,在切回来的时候,恢复先前保存的寄存器上下文和栈,直接操作栈则基本<strong>没有内核切换的开销</strong>,可以不加锁的访问全局变量,所以上下文的切换非常快。</p><p>二、区别：</p><p>1、进程多与线程比较</p><p>线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:<br>1) 地址空间:线程是进程内的一个执行单元,进程内至少有一个线程,它们共享进程的地址空间,而进程有自己独立的地址空间<br>2) 资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源<br>3) 线程是处理器调度的基本单位,但进程不是<br>4) 二者均可并发执行</p><p>5) 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口,但是线程不能够独立执行,必须依存在应用程序中,由应用程序提供多个线程执行控制</p><p>2、协程多与线程进行比较</p><p>1) 协程能保留上一次调用时的状态,每次过程重入时,就相当于进入上一次调用的状态。</p><p>2)协程切换<strong>完全在用户空间进行</strong>,线程切换涉及<strong>特权模式切换,需要在内核空间完成</strong>。</p><h5 id="为什么在用户态和内核态之间切换调度成本比较高？"><a href="#为什么在用户态和内核态之间切换调度成本比较高？" class="headerlink" title="为什么在用户态和内核态之间切换调度成本比较高？"></a>为什么在用户态和内核态之间切换调度成本比较高？</h5><h3 id="三、-网络编程相关基础"><a href="#三、-网络编程相关基础" class="headerlink" title="三、 网络编程相关基础"></a>三、 网络编程相关基础</h3><h5 id="网络IO模型有哪些"><a href="#网络IO模型有哪些" class="headerlink" title="网络IO模型有哪些?"></a>网络IO模型有哪些?</h5><ol><li><strong>同步模型（synchronous IO）</strong></li><li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li><li><strong>异步IO（asynchronous IO）</strong></li></ol><p>具体描述：</p><blockquote><p><a href="https://www.jianshu.com/p/486b0965c296" target="_blank" rel="noopener">https://www.jianshu.com/p/486b0965c296</a></p></blockquote><h5 id="I-O多路复用中select-poll-epoll的区别？"><a href="#I-O多路复用中select-poll-epoll的区别？" class="headerlink" title="I/O多路复用中select/poll/epoll的区别？"></a>I/O多路复用中select/poll/epoll的区别？</h5><ol><li><strong>Select</strong></li></ol><ul><li><p><strong>工作原理:</strong></p><ol><li><p>从用户空间拷贝fd_set到内核空间,也即从当前程序拷贝fd_set数组进内核。</p></li><li><p>对所有的fd进行一次poll操作,即把当前进程挂载到fd上。</p></li><li><p>poll操作过程中select会唤醒所有的队列中节点,进行遍历,得到它们的掩码（不同的掩码表示不同的就绪状态）。</p></li><li><p>如果所有设备返回的掩码都没有显示任何的事件触发,就去掉回调函数的函数指针,进入有限时的睡眠状态,再恢复和不断做poll,再作有限时的睡眠,直到其中一个设备有事件触发为止。</p></li><li>只要有事件触发,系统调用返回,将fd_set从内核空间拷贝到用户空间,回到用户态,用户就可以对相关的fd作进一步的读或者写操作了。</li></ol></li><li><p><strong>三个缺点：</strong></p><ol><li><p>select最大的缺陷就是单个进程所打开的FD是有一定限制的,它由FD_SETSIZE设置,默认值是1024。</p></li><li><p>对socket进行扫描时是线性扫描,即采用轮询的方法,效率较低。</p></li><li><p>需要维护一个用来存放大量fd的数据结构,这样会使得用户空间和内核空间在传递该结构时复制开销大。</p></li></ol></li></ul><ol start="2"><li><p><strong>poll</strong></p><p>poll本质上和select没有区别,但它没有最大连接数的限制,原因是它是基于链表来存储的。<code>poll还有一个特点是“水平触发”</code>,如果报告了fd后,没有被处理,那么下次poll时会再次报告该fd。</p></li><li><p><strong>epoll</strong></p></li></ol><ul><li><strong>基本原理：</strong></li></ul><p><code>epoll支持水平触发和边缘触发,最大的特点在于边缘触发,它只告诉进程哪些fd刚刚变为就绪态,并且只会通知一次</code>。还有一个特点是,<code>epoll使用“事件”的就绪通知方式</code>,通过epoll_ctl注册fd,<code>一旦该fd就绪,内核就会采用类似callback的回调机制来激活该fd</code>,epoll_wait便可以收到通知。</p><ul><li><p><strong>优点</strong>：</p><ol><li><p><code>没有最大并发连接的限制</code>,能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。</p></li><li><p><code>效率提升,不是轮询的方式,不会随着FD数目的增加效率下降</code>。只有活跃可用的FD才会调用callback函数；<code>即Epoll最大的优点就在于它只管你“活跃”的连接,而跟连接总数无关</code>,因此在实际的网络环境中,Epoll的效率就会远远高于select和poll。</p></li><li><p><code>内存拷贝</code>,利用mmap()文件映射内存加速与内核空间的消息传递；<code>即epoll使用mmap减少复制开销</code>。</p></li></ol></li><li><p><strong><code>LT（level trigger）和ET（edge trigger）</code></strong></p><ol><li><p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序,<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时,会再次响应应用程序并通知此事件。</p></li><li><p>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序,<code>应用程序必须立即处理该事件</code>。如果不处理,下次调用epoll_wait时,不会再次响应应用程序并通知此事件。</p></li></ol></li></ul><h3 id="四、-HTTP-相关基础"><a href="#四、-HTTP-相关基础" class="headerlink" title="四、 HTTP 相关基础"></a>四、 HTTP 相关基础</h3><h5 id="客户端访问url到服务器-整个过程会经历哪些？"><a href="#客户端访问url到服务器-整个过程会经历哪些？" class="headerlink" title="客户端访问url到服务器,整个过程会经历哪些？"></a>客户端访问url到服务器,整个过程会经历哪些？</h5><blockquote><p> <a href="https://blog.fundebug.com/2019/02/28/what-happens-from-url-to-webpage/" target="_blank" rel="noopener">https://blog.fundebug.com/2019/02/28/what-happens-from-url-to-webpage/</a></p></blockquote><h5 id="描述HTTPS和HTTP的区别。"><a href="#描述HTTPS和HTTP的区别。" class="headerlink" title="描述HTTPS和HTTP的区别。"></a>描述HTTPS和HTTP的区别。</h5><blockquote><p> <a href="https://juejin.im/entry/58d7635e5c497d0057fae036" target="_blank" rel="noopener">https://juejin.im/entry/58d7635e5c497d0057fae036</a></p></blockquote><h5 id="HTTP1-0、HTTP1-1-和-HTTP2-0-的区别。"><a href="#HTTP1-0、HTTP1-1-和-HTTP2-0-的区别。" class="headerlink" title="HTTP1.0、HTTP1.1 和 HTTP2.0 的区别。"></a>HTTP1.0、HTTP1.1 和 HTTP2.0 的区别。</h5><blockquote><p><a href="https://juejin.im/entry/5981c5df518825359a2b9476" target="_blank" rel="noopener">https://juejin.im/entry/5981c5df518825359a2b9476</a></p></blockquote><h5 id="RESTful-风格-API-有什么优点和缺点"><a href="#RESTful-风格-API-有什么优点和缺点" class="headerlink" title="RESTful 风格 API 有什么优点和缺点"></a>RESTful 风格 API 有什么优点和缺点</h5><blockquote><p><a href="https://www.lanhusoft.com/Article/626.html" target="_blank" rel="noopener">https://www.lanhusoft.com/Article/626.html</a></p></blockquote><h5 id="对比-GraphQL-与RESTFUL两种HTTP-API的差异"><a href="#对比-GraphQL-与RESTFUL两种HTTP-API的差异" class="headerlink" title="对比 GraphQL 与RESTFUL两种HTTP API的差异"></a>对比 GraphQL 与RESTFUL两种HTTP API的差异</h5><blockquote><p><a href="https://www.jianshu.com/p/2ad286397f7a" target="_blank" rel="noopener">https://www.jianshu.com/p/2ad286397f7a</a></p></blockquote><h3 id="五、-数据库和中间件的基础知识"><a href="#五、-数据库和中间件的基础知识" class="headerlink" title="五、 数据库和中间件的基础知识"></a>五、 数据库和中间件的基础知识</h3><h5 id="5-1-Redis"><a href="#5-1-Redis" class="headerlink" title="5.1 Redis"></a>5.1 Redis</h5><h6 id="描述一下redis有哪些数据结构。"><a href="#描述一下redis有哪些数据结构。" class="headerlink" title="描述一下redis有哪些数据结构。"></a>描述一下redis有哪些数据结构。</h6><p>基础的数据结构有5种,String/List/Hash/Set/Zset,高级数据结构HyperLogLog/BitMap/BloomFilter/GeoHash。</p><h6 id="Redis的LRU实现"><a href="#Redis的LRU实现" class="headerlink" title="Redis的LRU实现"></a>Redis的LRU实现</h6><blockquote><p><a href="https://zhuanlan.zhihu.com/p/34133067" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34133067</a></p></blockquote><h6 id="Redis的持久化机制"><a href="#Redis的持久化机制" class="headerlink" title="Redis的持久化机制"></a>Redis的持久化机制</h6><blockquote><p><a href="https://juejin.im/post/5befacfa5188254e3b31934e" target="_blank" rel="noopener">https://juejin.im/post/5befacfa5188254e3b31934e</a></p></blockquote><h6 id="zset跳表的数据结构"><a href="#zset跳表的数据结构" class="headerlink" title="zset跳表的数据结构"></a>zset跳表的数据结构</h6><blockquote><p><a href="https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html" target="_blank" rel="noopener">https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html</a></p><p><a href="https://www.ulovecode.com/2019/06/02/Algorithm/数据结构与算法/跳跃表实现/#more">跳跃表实现</a></p></blockquote><h6 id="Redis的分布式锁"><a href="#Redis的分布式锁" class="headerlink" title="Redis的分布式锁"></a>Redis的分布式锁</h6><blockquote><p><a href="https://juejin.im/post/5cc165816fb9a03202221dd5" target="_blank" rel="noopener">https://juejin.im/post/5cc165816fb9a03202221dd5</a></p></blockquote><h5 id="5-2-Mysql"><a href="#5-2-Mysql" class="headerlink" title="5.2 Mysql"></a>5.2 Mysql</h5><h6 id="MVCC-实现原理"><a href="#MVCC-实现原理" class="headerlink" title="MVCC 实现原理?"></a>MVCC 实现原理?</h6><p>   通过在每行记录后面保存两个隐藏的列来实现的。</p><ul><li>行的创建时间。</li><li><p>行的过期时间（或删除时间）。</p><blockquote><p>当然存储的并不是实际的时间值,而是系统版本号（system version number）。每开始一个新的事务,系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号,用来和查询到的每行记录的版本号进行比较。</p></blockquote><h5 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h5></li><li><p>只查找版本早于当前事务版本的数据行。</p></li><li><p>行的删除版本要么未定义,要么大于当前事务版本号。</p><h5 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h5><p>为新插入的每一行保存当前系统版本号作为行版本号。</p><h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><p>为删除的每一行保存当前系统版本号作为行删除标识。</p><h5 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h5><p>为插入一行新记录,保存当前系统版本号作为行版本号,同时保存当前系统版本号到原来的行作为行删除标识。</p></li></ul><h6 id="Sql-如何优化"><a href="#Sql-如何优化" class="headerlink" title="Sql 如何优化?"></a>Sql 如何优化?</h6><blockquote><p><a href="https://www.ulovecode.com/2020/05/03/数据库/mysql/高性能mysql(4)/#more">https://www.ulovecode.com/2020/05/03/数据库/mysql/高性能mysql(4)/#more</a></p></blockquote><h5 id="5-3-Kafak"><a href="#5-3-Kafak" class="headerlink" title="5.3 Kafak"></a>5.3 Kafak</h5><h6 id="Kafka的复制机制"><a href="#Kafka的复制机制" class="headerlink" title="Kafka的复制机制"></a>Kafka的复制机制</h6><blockquote><p><a href="https://colobu.com/2017/11/02/kafka-replication/" target="_blank" rel="noopener">https://colobu.com/2017/11/02/kafka-replication/</a></p></blockquote><h6 id="消息中间件选型分析"><a href="#消息中间件选型分析" class="headerlink" title="消息中间件选型分析"></a>消息中间件选型分析</h6><blockquote><p><a href="https://www.infoq.cn/article/kafka-vs-rabbitmq" target="_blank" rel="noopener">https://www.infoq.cn/article/kafka-vs-rabbitmq</a></p></blockquote><h6 id="Kafka中的选举"><a href="#Kafka中的选举" class="headerlink" title="Kafka中的选举"></a>Kafka中的选举</h6><blockquote><p><a href="https://xie.infoq.cn/article/e64e4881675ca585b67ab914a" target="_blank" rel="noopener">https://xie.infoq.cn/article/e64e4881675ca585b67ab914a</a></p></blockquote><h6 id="Kafka为什么吞吐量大、速度快？"><a href="#Kafka为什么吞吐量大、速度快？" class="headerlink" title="Kafka为什么吞吐量大、速度快？"></a>Kafka为什么吞吐量大、速度快？</h6><blockquote><p><a href="https://blog.csdn.net/kzadmxz/article/details/101576401" target="_blank" rel="noopener">https://blog.csdn.net/kzadmxz/article/details/101576401</a></p></blockquote><h6 id="HW机制"><a href="#HW机制" class="headerlink" title="HW机制"></a>HW机制</h6><blockquote><p><a href="http://objcoding.com/2019/10/31/kafka-hw/" target="_blank" rel="noopener">http://objcoding.com/2019/10/31/kafka-hw/</a></p></blockquote><h3 id="六、-算法以及数学题及智力题"><a href="#六、-算法以及数学题及智力题" class="headerlink" title="六、 算法以及数学题及智力题"></a>六、 算法以及数学题及智力题</h3><ol><li><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener"> K 个一组翻转链表</a></p></li><li><p>随机打乱一个数组</p></li><li><p><a href="https://www.nowcoder.com/discuss/413599?type=1" target="_blank" rel="noopener">毒蘑菇最大体力</a></p></li><li><p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">两数相加</a></p></li><li><p>给出一个数字 n,代表 n 个人的序号,偶数是女生奇数是男生,假设 n 人想出去团建,行政需要帮忙订房间每个房间 2 个人,男女不能同房,要写一个函数 randomRoom 随机出配出所有房间的人。</p></li><li><p>一个路口30分钟内有车通过的概率是90%,则5分钟内有车通过的概率是多少？</p></li><li><p>12箱黄金,每箱100块,每块一两。有个贪官,把某一箱的每块都磨去一钱。请称一次找到不足量的那个箱子。</p></li></ol><h3 id="七、-架构"><a href="#七、-架构" class="headerlink" title="七、 架构"></a>七、 架构</h3><h5 id="秒杀业务"><a href="#秒杀业务" class="headerlink" title="秒杀业务"></a>秒杀业务</h5><blockquote><p>如何设计秒杀系统？ - 网易云的回答 - 知乎 <a href="https://www.zhihu.com/question/54895548/answer/259218876" target="_blank" rel="noopener">https://www.zhihu.com/question/54895548/answer/259218876</a></p></blockquote><h5 id="DNS-负载均衡算法"><a href="#DNS-负载均衡算法" class="headerlink" title="DNS 负载均衡算法"></a><em>DNS 负载均衡</em>算法</h5><blockquote><p><a href="https://blog.csdn.net/lonelymanontheway/article/details/89222159" target="_blank" rel="noopener">https://blog.csdn.net/lonelymanontheway/article/details/89222159</a></p></blockquote><h5 id="水平扩展和垂直扩展"><a href="#水平扩展和垂直扩展" class="headerlink" title="水平扩展和垂直扩展"></a>水平扩展和垂直扩展</h5><blockquote><p><a href="https://zhuanlan.zhihu.com/p/24830094" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24830094</a></p></blockquote><h5 id="每秒100W请求-架构如何优化"><a href="#每秒100W请求-架构如何优化" class="headerlink" title="每秒100W请求,架构如何优化"></a>每秒100W请求,架构如何优化</h5><blockquote><p><a href="https://blog.csdn.net/shenjian58/article/details/100681683" target="_blank" rel="noopener">https://blog.csdn.net/shenjian58/article/details/100681683</a></p></blockquote><h5 id="Redis分布式锁服务器挂了怎么办"><a href="#Redis分布式锁服务器挂了怎么办" class="headerlink" title="Redis分布式锁服务器挂了怎么办?"></a>Redis分布式锁服务器挂了怎么办?</h5><blockquote><p><a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/" target="_blank" rel="noopener">https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 限流算法实战</title>
      <link href="/2020/05/06/Go/Go%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98/"/>
      <url>/2020/05/06/Go/Go%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>由于 API 接口无法控制调用方的行为,因此当遇到瞬时请求量激增时,会导致接口占用过多服务器资源,使得其他请求响应速度降低或是超时,更有甚者可能导致服务器宕机。</p><p>限流指对应用服务的请求进行限制,例如某一接口的请求限制为 100 个每秒, 对超过限制的请求则进行快速失败或丢弃。</p><p>限流可以应对：</p><ul><li>热点业务带来的突发请求；</li><li>调用方 bug 导致的突发请求；</li><li>恶意攻击请求。</li></ul><p>因此,对于公开的接口最好采取限流措施。</p><a id="more"></a><h2 id="一、限流的算法"><a href="#一、限流的算法" class="headerlink" title="一、限流的算法"></a>一、限流的算法</h2><p>实现限流有很多办法,在程序中时通常是根据每秒处理的事务数 (Transactionpersecond) 来衡量接口的流量。</p><p>本文介绍几种最常用的限流算法：</p><ul><li>固定窗口计数器；</li><li>滑动窗口计数器；</li><li>漏桶；</li><li>令牌桶。</li></ul><h3 id="1、固定窗口计数器算法"><a href="#1、固定窗口计数器算法" class="headerlink" title="1、固定窗口计数器算法"></a>1、固定窗口计数器算法</h3><p><img src="https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png" alt=""></p><p>固定窗口计数器算法概念如下：</p><ul><li>将时间划分为多个窗口；</li><li>在每个窗口内每有一次请求就将计数器加一；</li><li>如果计数器超过了限制数量,则本窗口内所有的请求都被丢弃当时间到达下一个窗口时,计数器重置。</li></ul><p>固定窗口计数器是最为简单的算法,但这个算法有时会让通过请求量允许为限制的两倍。考虑如下情况：限制 1 秒内最多通过 5 个请求,在第一个窗口的最后半秒内通过了 5 个请求,第二个窗口的前半秒内又通过了 5 个请求。这样看来就是在 1 秒内通过了 10 个请求。</p><p><img src="https://static001.infoq.cn/resource/image/4d/f4/4d03e8e43a8edc3f32376d90e52b85f4.png" alt=""></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> fixed_window_counter</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"sync/atomic"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line">ratelimit_kit <span class="hljs-string">"github.com/ulovecode/ratelimit-kit"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _ ratelimit_kit.RateLimiter = &amp;fixedWindowCounter&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> fixedWindowCounter <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">snippet         time.Duration</span><br><span class="line">currentRequests <span class="hljs-keyword">int32</span></span><br><span class="line">allowRequests   <span class="hljs-keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(snippet time.Duration, allowRequests <span class="hljs-keyword">int32</span>)</span> *<span class="hljs-title">fixedWindowCounter</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;fixedWindowCounter&#123;snippet: snippet, allowRequests: allowRequests&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *fixedWindowCounter)</span> <span class="hljs-title">Take</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(l.snippet):</span><br><span class="line">atomic.StoreInt32(&amp;l.currentRequests, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">curRequest := atomic.LoadInt32(&amp;l.currentRequests)</span><br><span class="line"><span class="hljs-keyword">if</span> curRequest &gt;= l.allowRequests &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !atomic.CompareAndSwapInt32(&amp;l.currentRequests, curRequest, curRequest+<span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、滑动窗口计数器算法"><a href="#2、滑动窗口计数器算法" class="headerlink" title="2、滑动窗口计数器算法"></a>2、滑动窗口计数器算法</h3><p><img src="https://static001.infoq.cn/resource/image/ae/15/ae4d3cd14efb8dc7046d691c90264715.png" alt=""></p><p>滑动窗口计数器算法概念如下：</p><ul><li>将时间划分为多个区间；</li><li>在每个区间内每有一次请求就将计数器加一维持一个时间窗口,占据多个区间；</li><li>每经过一个区间的时间,则抛弃最老的一个区间,并纳入最新的一个区间；</li><li>如果当前窗口内区间的请求计数总和超过了限制数量,则本窗口内所有的请求都被丢弃。</li></ul><p>滑动窗口计数器是通过将窗口再细分,并且按照时间 “ 滑动 “,这种算法避免了固定窗口计数器带来的双倍突发请求,但时间区间的精度越高,算法所需的空间容量就越大。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> sliding_window_counter</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"sync/atomic"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line">ratelimit_kit <span class="hljs-string">"github.com/ulovecode/ratelimit-kit"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _ ratelimit_kit.RateLimiter = &amp;slidingWindowCounter&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> slidingWindowCounter <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">incurRequests    <span class="hljs-keyword">int32</span></span><br><span class="line">durationRequests <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int32</span></span><br><span class="line">accuracy         time.Duration</span><br><span class="line">snippet          time.Duration</span><br><span class="line">currentRequests  <span class="hljs-keyword">int32</span></span><br><span class="line">allowRequests    <span class="hljs-keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(accuracy time.Duration, snippet time.Duration, allowRequests <span class="hljs-keyword">int32</span>)</span> *<span class="hljs-title">slidingWindowCounter</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;slidingWindowCounter&#123;durationRequests: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int32</span>, snippet/accuracy/<span class="hljs-number">1000</span>), accuracy: accuracy, snippet: snippet, allowRequests: allowRequests&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *slidingWindowCounter)</span> <span class="hljs-title">Take</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> sliding(l)</span><br><span class="line"><span class="hljs-keyword">go</span> calculate(l)</span><br><span class="line">&#125;)</span><br><span class="line">curRequest := atomic.LoadInt32(&amp;l.currentRequests)</span><br><span class="line"><span class="hljs-keyword">if</span> curRequest &gt;= l.allowRequests &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !atomic.CompareAndSwapInt32(&amp;l.currentRequests, curRequest, curRequest+<span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br><span class="line">atomic.AddInt32(&amp;l.incurRequests, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliding</span><span class="hljs-params">(l *slidingWindowCounter)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(l.accuracy):</span><br><span class="line">t := atomic.SwapInt32(&amp;l.incurRequests, <span class="hljs-number">0</span>)</span><br><span class="line">l.durationRequests &lt;- t</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calculate</span><span class="hljs-params">(l *slidingWindowCounter)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">&lt;-time.After(l.accuracy)</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l.durationRequests) == <span class="hljs-built_in">cap</span>(l.durationRequests) &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">&lt;-time.After(l.accuracy)</span><br><span class="line">t := &lt;-l.durationRequests</span><br><span class="line"><span class="hljs-keyword">if</span> t != <span class="hljs-number">0</span> &#123;</span><br><span class="line">atomic.AddInt32(&amp;l.currentRequests, -t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、漏桶算法"><a href="#3、漏桶算法" class="headerlink" title="3、漏桶算法"></a>3、漏桶算法</h3><p><img src="https://static001.infoq.cn/resource/image/75/03/75938d1010138ce66e38c6ed0392f103.png" alt=""></p><p>漏桶算法概念如下：</p><ul><li>将每个请求视作 “ 水滴 “ 放入 “ 漏桶 “ 进行存储；</li><li>“漏桶 “ 以固定速率向外 “ 漏 “ 出请求来执行如果 “ 漏桶 “ 空了则停止 “ 漏水”；</li><li>如果 “ 漏桶 “ 满了则多余的 “ 水滴 “ 会被直接丢弃。</li></ul><p>漏桶算法多使用队列实现,服务的请求会存到队列中,服务的提供方则按照固定的速率从队列中取出请求并执行,过多的请求则放在队列中排队或直接拒绝。</p><p>漏桶算法的缺陷也很明显,当短时间内有大量的突发请求时,即便此时服务器没有任何负载,每个请求也都得在队列中等待一段时间才能被响应。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> leaky_barrel</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line">ratelimit_kit <span class="hljs-string">"github.com/ulovecode/ratelimit-kit"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _ ratelimit_kit.RateLimiter = &amp;leakyBarrel&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> leakyBarrel <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">snippet       time.Duration</span><br><span class="line">allowRequests <span class="hljs-keyword">int32</span></span><br><span class="line">barrelSize    <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(snippet time.Duration, barrelSize <span class="hljs-keyword">int</span>, allowRequests <span class="hljs-keyword">int32</span>)</span> *<span class="hljs-title">leakyBarrel</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;leakyBarrel&#123;snippet: snippet, barrelSize: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-keyword">int</span>(allowRequests)/barrelSize), allowRequests: allowRequests&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *leakyBarrel)</span> <span class="hljs-title">Take</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(time.Duration(t.snippet.Nanoseconds() / <span class="hljs-keyword">int64</span>(t.allowRequests))):</span><br><span class="line">t.barrelSize &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-t.barrelSize:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、令牌桶算法"><a href="#4、令牌桶算法" class="headerlink" title="4、令牌桶算法"></a>4、令牌桶算法</h3><p><img src="https://static001.infoq.cn/resource/image/ec/93/eca0e5eaa35dac938c673fecf2ec9a93.png" alt=""></p><p>令牌桶算法概念如下：</p><ul><li>令牌以固定速率生成；</li><li>生成的令牌放入令牌桶中存放,如果令牌桶满了则多余的令牌会直接丢弃,当请求到达时,会尝试从令牌桶中取令牌,取到了令牌的请求可以执行；</li><li>如果桶空了,那么尝试取令牌的请求会被直接丢弃。</li></ul><p>令牌桶算法既能够将所有的请求平均分布到时间区间内,又能接受服务器能够承受范围内的突发请求,因此是目前使用较为广泛的一种限流算法。</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> token_bucket</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"sync"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line">ratelimit_kit <span class="hljs-string">"github.com/ulovecode/ratelimit-kit"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _ ratelimit_kit.RateLimiter = &amp;tokenBucket&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> tokenBucket <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">snippet       time.Duration</span><br><span class="line">token         <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line">allowRequests <span class="hljs-keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(snippet time.Duration, allowRequests <span class="hljs-keyword">int32</span>)</span> *<span class="hljs-title">tokenBucket</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;tokenBucket&#123;snippet: snippet, token: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, allowRequests), allowRequests: allowRequests&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *tokenBucket)</span> <span class="hljs-title">Take</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(time.Duration(t.snippet.Nanoseconds() / <span class="hljs-keyword">int64</span>(t.allowRequests))):</span><br><span class="line">t.token &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-t.token:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ratelimit_kit.ErrExceededLimit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>全部代码在github地址如下<code>https://github.com/ulovecode/ratelimit-kit</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人性的弱点</title>
      <link href="/2020/05/05/%E8%BD%AF%E6%8A%80%E8%83%BD/%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
      <url>/2020/05/05/%E8%BD%AF%E6%8A%80%E8%83%BD/%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB/%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>学习了很多技术,无论工作还是生活需要的并不仅仅只是技术,99%的工作都需要和人打交道,与人相处是非常重要的事情,我们也并不例外,今天想整理一下关于人性的弱点的笔记,很多人认为是鸡汤,本质上他们大多对这类书不屑一顾。</p><p>我现在经历了不少也不经想感叹一句：</p><blockquote><p>气傲皆因经历少,心平只为折磨多。</p></blockquote><a id="more"></a><h2 id="一、笔记内容"><a href="#一、笔记内容" class="headerlink" title="一、笔记内容"></a>一、笔记内容</h2><h3 id="1-与人相处的技巧"><a href="#1-与人相处的技巧" class="headerlink" title="1.与人相处的技巧"></a>1.与人相处的技巧</h3><ul><li>不要批评,责怪或抱怨他人,而是去了解别人</li><li>真心诚意的赞美别人</li><li>设身处地为他人着想</li></ul><h3 id="2-平安快乐的要诀"><a href="#2-平安快乐的要诀" class="headerlink" title="2.平安快乐的要诀"></a>2.平安快乐的要诀</h3><ul><li>无须模仿他人,发现自我</li><li>养成良好的工作习惯<ul><li>让我们晕头转向的不是繁重的工作,而是我们没有搞清楚自己有多少工作,应该先做什么工作<ol><li>将你桌上所有的纸张收拾好,只留下你正要处理的问题</li><li>根据事情的重要程度来安排做事的先后顺序</li><li>当你遇到必须当场做决定的问题时,就当场解决,不要犹豫不决</li><li>学会如何组织,分级负责和监督</li></ol></li></ul></li><li>没人愿意踢一只死狗,他人之所以对你作出令人不愉快的反应,可能是因为你所说的话以及你说这些话的方式或态度不当</li><li>永远不要对敌人心存报复,这样对你自己的伤害将大过对别人的</li><li>享受付出的快乐,不要期望他人感恩</li><li>牢记你所得的恩惠</li><li>在人生中反败为胜,遇到挫折,从<strong>为什么是我遇到这些挫折？</strong> 转变为 <strong>我可以从这些挫折中学到什么</strong></li><li>每天都要给别人快乐,只有帮助别人,并付出我们的爱,才能克服忧虑,悲伤以及自怜</li><li>懂得欣赏别人对自己的评价,凡事尽力,不必太在意指责</li><li>记下自己干的蠢事,自我批评</li></ul><h3 id="3-如何使别人喜欢你"><a href="#3-如何使别人喜欢你" class="headerlink" title="3.如何使别人喜欢你"></a>3.如何使别人喜欢你</h3><ul><li>真诚地关心别人</li><li>别忘记带上你的微笑</li><li>记住他人的姓名,这将有助于加深对方对你的印象</li><li>学会倾听他人说话</li><li>谈论他人感兴趣的话题</li><li>让他人感到自身的重要性</li></ul><h3 id="4-如何赢得他人的赞同"><a href="#4-如何赢得他人的赞同" class="headerlink" title="4.如何赢得他人的赞同"></a>4.如何赢得他人的赞同</h3><ul><li>避免与人争论</li><li>千万不要指责他人的错误,对他人的意见表示尊重,别说“你错了”</li><li>你错了,就迅速而真诚地承认</li><li>待人为善</li><li>使对方一开始就说<strong>是</strong></li><li>让对方多表现自己</li><li>把你的意见变成对方的</li><li>换位思考,从对方的立场看问题</li><li>真诚的同情他人</li><li>激发他人高尚的动机</li><li>巧妙地表达你的意愿</li><li>给他人提出挑战</li></ul><h3 id="5-如何更好的说服他人"><a href="#5-如何更好的说服他人" class="headerlink" title="5.如何更好的说服他人"></a>5.如何更好的说服他人</h3><ul><li>从赞美和欣赏他人开始</li><li>间接而委婉的提醒对方的错点</li><li>指责别人前,先想想自己的错误</li><li>不要命令别人</li><li>给对方留面子</li><li>激励赞赏创造最伟大的力量</li><li>让他人有个好名声</li><li>鼓励使他人更易改正错误</li><li>善于向他人授权：给别人一个头衔,使他有一种权威的感觉,那他便会乐意去做你所建议的事情</li></ul><h3 id="6-让你的家庭生活幸福快乐"><a href="#6-让你的家庭生活幸福快乐" class="headerlink" title="6.让你的家庭生活幸福快乐"></a>6.让你的家庭生活幸福快乐</h3><ul><li>切勿喋喋不休</li><li>不要试图改变你到伴侣</li><li>在家庭中杜绝批评</li><li>发自内心的欣赏别人</li><li>对家人殷勤有礼</li><li>掌握基本的婚姻婚姻:<ul><li>婚姻失败的四种原因:<ol><li>性生活不和谐</li><li>彼此意见不同</li><li>经济困难</li><li>心理,身体或情绪的反常现象</li></ol></li></ul></li><li>不要忽略家中小事</li></ul><h3 id="7-如何使你变得成熟"><a href="#7-如何使你变得成熟" class="headerlink" title="7.如何使你变得成熟"></a>7.如何使你变得成熟</h3><ul><li>为自己的行为负责</li><li>不要在乎困难,或许它也是一种机遇</li><li>摆脱不幸福:<ul><li>原因<br>  生活中的种种苦难,都是人生必经的阶段,只有是实实在在的面对才是成熟的表现。</li><li>方法<br>  提升自我帮助别人</li></ul></li><li>坚定的信念付诸行动</li><li>做独一无二的自己<ul><li>先了解自己,再了解别人</li><li>不喜欢自己的人,表现出来的症状之一就是过度挑剔</li></ul></li><li>学会喜欢自己,要想获得健康,成熟,喜欢自己是必备的条件之一</li><li>不要盲从因袭,听从你内心的声音</li><li>不要做让人生厌的人<ol><li>不停谈论小孩或宠物</li><li>谈话没有重点</li><li>完全不理会他人的话题</li><li>不要一直争论不休</li><li>永远唱反调的人</li></ol></li><li>要让别人喜欢你,先得使自己让人喜欢</li></ul><h3 id="8-走出孤独忧虑的人生"><a href="#8-走出孤独忧虑的人生" class="headerlink" title="8.走出孤独忧虑的人生"></a>8.走出孤独忧虑的人生</h3><ul><li>摆脱孤独的方法：首先伸出友谊只手,将自己的快乐尽量与别人分享</li><li>幸福不来自于他人的布施,而是你自己去赢得别人对你的需求和喜爱</li><li>不要让忧虑扼杀幸福的生活</li><li>活在今天</li><li>对于忧虑的问题,考虑最坏情况,接受这种可能,冷静处理善后</li><li>克服忧虑的四个步骤：<ol><li>清楚的写下我们所担心的是什么</li><li>写下我们可以怎么办以及发生的结果</li><li>决定怎么办</li><li>马上按照决定去做</li></ol></li><li>在繁忙中遗忘忧虑：工作</li><li>不要为小事烦恼。摒弃愚蠢的担忧</li><li>接受并适应不可避免的事实</li></ul><h3 id="9-不要为工作和金钱烦恼"><a href="#9-不要为工作和金钱烦恼" class="headerlink" title="9.不要为工作和金钱烦恼"></a>9.不要为工作和金钱烦恼</h3><ul><li>将工作的忧虑减半的四个步骤:<ol><li>问题是什么？</li><li>问题的起因是什么？</li><li>解决问题的方法有那些?</li><li>你建议用哪一种办法</li></ol></li><li>选择自己的喜欢的工作</li><li>正确处理金钱的烦恼：记录开销并做预算：存应急的钱</li><li>解决夫妻的职业冲突：互相支持<ol><li>把事实记在纸上</li><li>拟出一个合适你的预算</li><li>学习如何聪明地花钱</li><li>不要为你的收入增加而头痛</li><li>如果需要借贷,选择银行贷款</li><li>投保意外保险</li><li>人寿保险的收益不要一次现金付给受益人</li><li>教导子女对金钱养成负责任的态度</li><li>不要赌博-永远不要</li></ol></li><li>合理规划你的收入,杜绝浪费,量入为出</li></ul><h3 id="10-防止疲劳-永葆活力"><a href="#10-防止疲劳-永葆活力" class="headerlink" title="10.防止疲劳,永葆活力"></a>10.防止疲劳,永葆活力</h3><ul><li>经常休息,在你感到倦怠之前</li><li>和你信任的人说出自己的心事</li><li>消除烦闷心理</li><li>摆脱失眠的困扰：让自己身体达到疲劳的程度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人际关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能  MySQL  ｜ 查询性能优化</title>
      <link href="/2020/05/03/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(4)/"/>
      <url>/2020/05/03/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(4)/</url>
      
        <content type="html"><![CDATA[<p> MySQL 查询性能的优化涉及多个方面,其中包括库表结构、建立合理的索引、设计合理的查询。库表结构包括如何设计表之间的关联、表字段的数据类型等。这需要依据具体的场景进行设计。如下我们从数据库的索引和查询语句的设计两个角度介绍如何提高 MySQL 查询性能。</p><a id="more"></a><h1 id="一、为什么查询速度会慢"><a href="#一、为什么查询速度会慢" class="headerlink" title="一、为什么查询速度会慢?"></a>一、为什么查询速度会慢?</h1><h3 id="查询的生命周期"><a href="#查询的生命周期" class="headerlink" title="查询的生命周期"></a>查询的生命周期</h3><ol><li>从客户端,到服务器</li><li>生成执行计划</li><li>执行<ul><li>数据处理</li><li>包括排序</li><li>分组</li></ul></li><li>返回结果给客户端</li></ol><h3 id="查询需要在不同的地方花费时间"><a href="#查询需要在不同的地方花费时间" class="headerlink" title="查询需要在不同的地方花费时间"></a>查询需要在不同的地方花费时间</h3><ul><li>网络</li><li>CPU计算</li><li>生成统计信息和执行计划</li><li>锁等待（互斥等待）</li><li>向底层存储引擎检索数据的调用操作</li><li>根据存储引擎不同,可能还会产生大量的上下文切换以及系统调用</li></ul><h1 id="二、慢查询基础：优化数据访问"><a href="#二、慢查询基础：优化数据访问" class="headerlink" title="二、慢查询基础：优化数据访问"></a>二、慢查询基础：优化数据访问</h1><h3 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h3><ol><li><strong>确认应用程序是否在检索大量超过需要的数据。这通常意味着访问了太多的行,但有时候也可能是访问了太多的列</strong></li><li><strong>确认 MySQL 服务器层是否在分析大量超过需要的数据行</strong></li><li><strong>是否向数据库请求了不需要的数据</strong></li></ol><p><strong>几种示例:</strong></p><ul><li>查询不需要的记录</li><li>多表关联时返回全部列</li><li>总是取出全部列</li><li>重复查询相同的数据</li></ul><blockquote><p>适用范围:人们会告诉我们说这种有点浪费数据库资源的方式可以简化开发,因为能提高相同代码片段的复用性,如果清楚这样做的性能影响,那么这种做法也是值得考虑的。</p></blockquote><ol start="4"><li><strong>MySQL 是否在扫描额外的记录</strong></li></ol><h3 id="最简单的衡量查询开销的三个指标如下"><a href="#最简单的衡量查询开销的三个指标如下" class="headerlink" title="最简单的衡量查询开销的三个指标如下"></a>最简单的衡量查询开销的三个指标如下</h3><ul><li><p><strong>响应时间</strong></p><p>  实际上可以使用<code>快速上限估计</code>法来估算查询的响应时间</p></li><li><p><strong>服务时间</strong></p><p>数据库处理这个查询真正花了多长时间</p></li><li><p><strong>排队时间</strong></p><p>服务器因为等待某些资源而没有真正执行查询的时间——可能是等I/O操作完成,也可能是等待行锁,等等。</p><ul><li><p>扫描的行数</p></li><li><p>返回的行数</p></li></ul></li></ul><h3 id="一般-MySQL-能够使用如下三种方式应用WHERE条件-从好到坏依次为"><a href="#一般-MySQL-能够使用如下三种方式应用WHERE条件-从好到坏依次为" class="headerlink" title="一般 MySQL 能够使用如下三种方式应用WHERE条件,从好到坏依次为"></a>一般 MySQL 能够使用如下三种方式应用WHERE条件,从好到坏依次为</h3><ul><li>在索引中使用WHERE条件来过滤不匹配的记录。这是在存储引擎层完成的。</li><li>使用索引覆盖扫描（在Extra列中出现了Using index）来返回记录,直接从索引中过滤不需要的记录并返回命中的结果。这是在 MySQL 服务器层完成的,但无须再回表查询记录。</li><li>从数据表中返回数据,然后过滤不满足条件的记录（在Extra列中出现Using Where）。这在 MySQL 服务器层完成, MySQL 需要先从数据表读出记录然后过滤。</li></ul><h3 id="如果发现查询需要扫描大量的数据但只返回少数的行"><a href="#如果发现查询需要扫描大量的数据但只返回少数的行" class="headerlink" title="如果发现查询需要扫描大量的数据但只返回少数的行"></a>如果发现查询需要扫描大量的数据但只返回少数的行</h3><ul><li>重写这条 sql</li><li>使用索引覆盖扫描,把所有需要用的列都放到索引中,这样存储引擎无须回表获取对应行就可以返回结果了（在前面的章节中我们已经讨论过了）。</li><li>改变库表结构。例如使用单独的汇总表（这是我们在第4章中讨论的办法）。</li></ul><h1 id="三、重构查询的方式"><a href="#三、重构查询的方式" class="headerlink" title="三、重构查询的方式"></a>三、重构查询的方式</h1><h3 id="一个复杂查询还是多个简单查询"><a href="#一个复杂查询还是多个简单查询" class="headerlink" title="一个复杂查询还是多个简单查询"></a>一个复杂查询还是多个简单查询</h3><p>将一个大查询分解为多个小查询是很有必要的,不过,在应用设计的时候,如果一个查询能够胜任时还写成多个独立查询是不明智的。</p><h3 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h3><p><strong>原因</strong></p><p>如果用一个大的语句一次性完成的话,则可能需要一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询</p><p><strong>好处</strong></p><p>这样也可以将服务器上原本一次性的压力分散到一个很长的时间段中,就可以大大降低对服务器的影响,还可以大大减少删除时锁的持有时间</p><h3 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h3><p><strong>好处</strong></p><ul><li><p>让缓存的效率更高。许多应用程序可以方便地缓存单表查询对应的结果对象。如果关联中的某个表发生了变化,那么就无法使用查询缓存了,而拆分后,如果某个表很少改变,那么基于该表的查询就可以重复利用查询缓存结果了</p><p>例如,上面查询中的tag已经被缓存了,那么应用就可以跳过第一个查询。再例如,应用中已经缓存了ID为123、567、9098的内容,那么第三个查询的IN()中就可以少几个ID。另外,对 MySQL 的查询缓存来说(6)。</p></li><li><p>将查询分解后,执行单个查询可以减少锁的竞争。</p></li><li><p>在应用层做关联,可以更容易对数据库进行拆分,更容易做到高性能和可扩展。</p></li><li><p>查询本身效率也可能会有所提升。这个例子中,使用IN()代替关联查询,可以让 MySQL 按照ID顺序进行查询,这可能比随机的关联要更高效。我们后续将详细介绍这点。</p></li><li><p>可以减少冗余记录的查询。在应用层做关联查询,意味着对于某条记录应用只需要查询一次,而在数据库中做关联查询,则可能需要重复地访问一部分数据。从这点看,这样的重构还可能会减少网络和内存的消耗。</p></li><li><p>更进一步,这样做相当于在应用中实现了哈希关联,而不是使用 MySQL 的嵌套循环关联。某些场景哈希关联的效率要高很多（本章后续我们将讨论这点）。</p></li></ul><h1 id="四、查询执行的基础"><a href="#四、查询执行的基础" class="headerlink" title="四、查询执行的基础"></a>四、查询执行的基础</h1><h3 id="MySQL-到底做了些什么"><a href="#MySQL-到底做了些什么" class="headerlink" title="MySQL 到底做了些什么"></a>MySQL 到底做了些什么</h3><ol><li>客户端发送一条查询给服务器。</li><li>服务器先检查查询缓存,如果命中了缓存,则立刻返回存储在缓存中的结果。否则进入下一阶段。</li><li>服务器端进行SQL解析、预处理,再由优化器生成对应的执行计划。</li><li>MySQL 根据优化器生成的执行计划,调用存储引擎的API来执行查询。</li><li>将结果返回给客户端。</li></ol><h3 id="MySQL-客户端-服务器通信协议"><a href="#MySQL-客户端-服务器通信协议" class="headerlink" title="MySQL 客户端/服务器通信协议"></a>MySQL 客户端/服务器通信协议</h3><p>MySQL 客户端和服务器之间的通信协议是<code>半双工</code></p><p>这意味着,在任何一个时刻,要么是由服务器向客户端发送数据,要么是由客户端向服务器发送数据,这两个动作不能同时发生。所以,我们无法也无须将一个消息切成小块独立来发送。</p><blockquote><p>参数<code>max_allowed_packet</code>控制包长度</p></blockquote><h3 id="查询状态"><a href="#查询状态" class="headerlink" title="查询状态"></a>查询状态</h3><p><strong><code>Sleep</code></strong></p><p>线程正在等待客户端发送新的请求。</p><p><strong><code>Query</code></strong></p><p>线程正在执行查询或者正在将结果发送给客户端。</p><p><strong><code>Locked</code></strong></p><p>在 MySQL 服务器层,该线程正在等待表锁。在存储引擎级别实现的锁,例如 InnoDB 的行锁,并不会体现在线程状态中。对于 MyISAM 来说这是一个比较典型的状态,但在其他没有行锁的引擎中也经常会出现。</p><p><strong><code>Analyzing and statistics</code></strong></p><p>线程正在收集存储引擎的统计信息,并生成查询的执行计划。</p><p><strong><code>Copying to tmp table [on disk]</code></strong></p><p>线程正在执行查询,并且将其结果集都复制到一个临时表中,这种状态一般要么是在做<code>group by</code>操作,要么是文件排序操作,或者是<code>UNION</code>操作。如果这个状态后面还有<code>on disk</code>标记,那表示 MySQL 正在将一个内存临时表放到磁盘上。</p><p><strong><code>Sorting result</code></strong></p><p>线程正在对结果集进行排序。</p><p><strong><code>Sending data</code></strong></p><p>这表示多种情况：线程可能在多个状态之间传送数据,或者在生成结果集,或者在向客户端返回数据。</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p><strong>实现原理</strong></p><p>这个检查是通过一个对大小写敏感的哈希查找实现的</p><p><strong>执行步骤</strong></p><ol><li>如果当前的查询恰好命中了查询缓存</li><li>检查一次用户权限(无须解析查询SQL语句的)</li><li>如果权限没有问题, MySQL 会跳过所有其他阶段,直接从缓存中拿到结果并返回给客户端</li></ol><h3 id="查询优化处理"><a href="#查询优化处理" class="headerlink" title="查询优化处理"></a>查询优化处理</h3><p><strong>MySQL 依照这个执行计划和存储引擎进行交互的过程</strong></p><ul><li>解析SQL</li><li>预处理</li><li>优化SQL执行计划</li></ul><p><strong>语法解析器和预处理</strong></p><ol><li>MySQL 通过关键字将SQL语句进行解析,并生成一棵对应的<code>解析树</code>。</li><li>MySQL 解析器将使用 MySQL 语法规则验证和解析查询。</li><li>预处理器则根据一些 MySQL 规则进一步检查解析树是否合法</li><li>下一步预处理器会验证权限。这通常很快,除非服务器上有非常多的权限配置。</li></ol><h3 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h3><p><strong>类型</strong></p><p>  MySQL 使用基于成本的优化器</p><p><strong>实现原理</strong></p><p> 它将尝试预测一个查询使用某种执行计划时的成本,并选择其中成本最小的一个。</p><p><strong>成本因素</strong></p><p>每个表或者索引的页面个数、索引的基数（索引中不同值的数量）、索引和数据行的长度、索引分布情况。优化器在评估成本的时候并不考虑任何层面的缓存,它假设读取任何数据都需要一次磁盘I/O。</p><p>最初,成本的最小单位是随机读取一个4K数据页的成本,后来（成本计算公式）变得更加复杂,并且引入了一些<code>因子</code>来估算某些操作的代价,如当执行一次WHERE条件比较的成本。可以通过查询当前会话的<code>Last_query_cost</code>的值来得知 MySQL 计算的当前查询的成本。</p><blockquote><p><code>SHOW STATUS LIKE &#39;last_query_cost&#39;</code>;</p></blockquote><p> <strong>会导致 MySQL 优化器选择错误的执行计划的原因</strong></p><ul><li>统计信息不准确。 MySQL 依赖存储引擎提供的统计信息来评估成本,但是有的存储引擎提供的信息是准确的,有的偏差可能非常大。例如, InnoDB 因为其MVCC的架构,并不能维护一个数据表的行数的精确统计信息。</li><li>执行计划中的成本估算不等同于实际执行的成本。所以即使统计信息精准,优化器给出的执行计划也可能不是最优的。例如有时候某个执行计划虽然需要读取更多的页面,但是它的成本却更小。因为如果这些页面都是顺序读或者这些页面都已经在内存中的话,那么它的访问成本将很小。 MySQL 层面并不知道哪些页面在内存中、哪些在磁盘上,所以查询实际执行过程中到底需要多少次物理I/O是无法得知的。</li><li>MySQL 的最优可能和你想的最优不一样。你可能希望执行时间尽可能的短,但是  MySQL 只是基于其成本模型选择最优的执行计划,而有些时候这并不是最快的执行方式。所以,这里我们看到根据执行成本来选择执行计划并不是完美的模型。</li><li>MySQL 从不考虑其他并发执行的查询,这可能会影响到当前查询的速度。</li><li>MySQL 也并不是任何时候都是基于成本的优化。有时也会基于一些固定的规则,例如,如果存在全文搜索的<code>MATCH()</code>子句,则在存在全文索引的时候就使用全文索引。即使有时候使用别的索引和WHERE条件可以远比这种方式要快, MySQL 也仍然会使用对应的全文索引。</li><li>MySQL 不会考虑不受其控制的操作的成本,例如执行存储过程或者用户自定义函数的成本。</li><li>后面我们还会看到,优化器有时候无法去估算所有可能的执行计划,所以它可能错过实际上最优的执行计划。</li></ul><p><strong>优化策略可以简单地分为两种</strong></p><ul><li><p><strong>静态优化</strong></p><p>  例如,优化器可以通过一些简单的代数变换将WHERE条件转换成另一种等价形式。静态优化不依赖于特别的数值,如WHERE条件中带入的一些常数等。静态优化在第一次完成后就一直有效,即使使用不同的参数重复执行查询也不会发生变化。可以认为这是一种<code>编译时优化</code>。</p><blockquote><p>可以直接对解析树进行分析,并完成优化。</p></blockquote></li><li><p><strong>动态优化</strong></p><p>  动态优化则和查询的上下文有关,也可能和很多其他因素有关,例如WHERE条件中的取值、索引中条目对应的数据行数等。这需要在每次查询的时候都重新评估,可以认为这是<code>运行时优化</code>。</p></li></ul><p><strong>一些 MySQL 能够处理的优化类型</strong></p><ul><li><p><strong>重新定义关联表的顺序</strong></p><p>  数据表的关联并不总是按照在查询中指定的顺序进行。决定关联的顺序是优化器很重要的一部分功能,</p></li><li><p><strong>将外连接转化成内连接</strong></p><p>  并不是所有的<code>OUTER JOIN</code>语句都必须以外连接的方式执行。诸多因素,例如WHERE条件、库表结构都可能会让外连接等价于一个内连接。 MySQL 能够识别这点并重写查询,让其可以调整关联顺序。</p></li><li><p><strong>使用等价变换规则</strong></p><p>   MySQL 可以使用一些等价变换来简化并规范表达式。它可以合并和减少一些比较,还可以移除一些恒成立和一些恒不成立的判断。例如,<code>（5=5 AND a&gt;5）</code>将被改写为<code>a&gt;5</code>。类似的,如果有<code>（a&lt;b AND b=c） AND a=5</code>则会改写为<code>b&gt;5 AND b=c AND a=5</code>。这些规则对于我们编写条件语句很有用,我们将在本章后续继续讨论。</p><ul><li><p><strong>优化<code>COUNT()</code>、<code>MIN()</code>和<code>MAX()</code></strong></p><p>例如,要找到某一列的最小值,只需要查询对应B-Tree索引最左端的记录, MySQL 可以直接获取索引的第一行记录。在优化器生成执行计划的时候就可以利用这一点,在B-Tree索引中,优化器会将这个表达式作为一个常数对待。类似的,如果要查找一个最大值,也只需读取B-Tree索引的最后一条记录。如果 MySQL 使用了这种类型的优化,那么在 EXPLAIN 中就可以看到<code>Select tables optimized away</code>。从字面意思可以看出,它表示优化器已经从执行计划中移除了该表,并以一个常数取而代之。类似的,没有任何WHERE条件的<code>COUNT（*）</code>查询通常也可以使用存储引擎提供的一些优化（例如, MyISAM 维护了一个变量来存放数据表的行数）。</p><blockquote><p>索引和列是否可为空通常可以帮助 MySQL 优化这类表达式。</p></blockquote></li><li><p><strong>预估并转化为常数表达式</strong></p><p>例如,一个用户自定义变量在查询中没有发生变化时就可以转换为一个常数。数学表达式则是另一种典型的例子。这可以通过WHERE、USING或者ON语句来限制某列取值为常数。在上面的例子中,因为使用了USING子句,优化器知道这也限制了film_id在整个查询过程中都始终是一个常量。</p><blockquote><p>当 MySQL 检测到一个表达式可以转化为常数的时候,就会一直把该表达式作为常数进行优化处理。</p></blockquote></li><li><p><strong>覆盖索引扫描</strong></p><p>当索引中的列包含所有查询中需要使用的列的时候, MySQL 就可以使用索引返回需要的数据,而无须查询对应的数据行,在前面的章节中我们已经讨论过这点了。</p></li><li><p><strong>子查询优化</strong></p><p> MySQL 在某些情况下可以将子查询转换一种效率更高的形式,从而减少多个查询多次对数据进行访问。</p></li><li><p><strong>提前终止查询</strong></p><p>一个典型的例子就是当使用了<code>LIMIT</code>子句的时候。除此之外, MySQL 还有几类情况也会提前终止查询,例如发现了一个不成立的条件,这时 MySQL 可以立刻返回一个空结果。</p><blockquote><p>在发现已经满足查询需求的时候, MySQL 总是能够立刻终止查询。</p></blockquote></li><li><p><strong>等值传播</strong></p><blockquote><p>如果两个列的值通过等式关联,那么 MySQL 能够把其中一个列的WHERE条件传递到另一列上。</p></blockquote><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> film.film_id     </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.film     </span><br><span class="line"><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> sakila.film_actor <span class="hljs-keyword">USING</span>(film_id)     </span><br><span class="line"><span class="hljs-keyword">WHERE</span> film.film_id &gt; <span class="hljs-number">500</span></span><br></pre></td></tr></table></figure><p>  因为这里使用了film_id字段进行等值关联, MySQL 知道这里的WHERE子句不仅适用于flm表,而且对于flm_actor表同样适用。如果使用的是其他的数据库管理系统,可能还需要手动通过一些条件来告知优化器这个WHERE条件适用于两个表,那么写法就会如下：   <code>... WHERE film.film_id &gt; 500 AND film_actor.film_id &gt; 500</code>在 MySQL 中这是不必要的,这样写反而会让查询更难维护。</p></li><li><p><strong>列表<code>IN()</code>的比较</strong></p><p>   在很多数据库系统中,<code>IN()</code>完全等同于多个OR条件的子句,因为这两者是完全等价的。在 MySQL 中这点是不成立的, MySQL 将<code>IN()</code>列表中的数据先进行排序,然后通过二分查找的方式来确定列表中的值是否满足条件,这是一个O（log n）复杂度的操作,等价地转换成OR查询的复杂度为O（n）,对于IN()列表中有大量取值的时候, MySQL 的处理速度将会更快。</p></li><li><p><strong>数据和索引的统计信息</strong></p><p> MySQL 查询优化器在生成查询的执行计划时,需要向存储引擎获取相应的统计信息。存储引擎则提供给优化器对应的统计信息,包括：每个表或者索引有多少个页面、每个表的每个索引的基数是多少、数据行和索引长度、索引的分布信息等。优化器根据这些信息来选择一个最优的执行计划。</p></li><li><p><strong>MySQL 如何执行关联查询</strong></p><p>在 MySQL 的概念中,每个查询都是一次关联,所以读取结果临时表也是一次关联。</p><ul><li><p><strong>什么是关联</strong></p><p>  MySQL 中<code>关联</code>(14)一词所包含的意义比一般意义上理解的要更广泛。总的来说, MySQL 认为任何一个查询都是一次<code>关联</code>——并不仅仅是一个查询需要到两个表匹配才叫关联,所以在 MySQL 中,每一个查询,每一个片段（包括子查询,甚至基于单表的SELECT）都可能是关联。</p></li><li><p><strong>MySQL 关联执行的策略</strong></p><p>   嵌套循环关联,即 MySQL 先在一个表中循环取出单条数据,然后再嵌套循环到下一个表中寻找匹配的行,依次下去,直到找到所有表中匹配的行为止。然后根据各个表匹配的行,返回查询中需要的各个列。 MySQL 会尝试在最后一个关联表中找到所有匹配的行,如果最后一个联表无法找到更多的行以后, MySQL 返回到上一层次关联表,看是否能够找到更多的匹配记录,依此类推迭代执行。</p></li></ul></li><li><p><strong>执行计划</strong></p><p> MySQL 的执行计划步骤</p><ol><li><p>MySQL 生成查询的一棵指令树</p></li><li><p>通过存储引擎执行完成这棵指令树并返回结果</p></li><li><p>最终的执行计划包含了重构查询的全部信息</p><blockquote><p>如果对某个查询执行 EXPLAIN EXTENDED后,再执行 SHOW WARNINGS,就可以看到重构出的查询</p></blockquote></li></ol></li><li><p><strong>关联查询优化器</strong></p><ul><li><p><strong>关联优化器的评判标准</strong></p><p> 关联查询优化器则通过评估不同顺序时的成本来选择一个代价最小的关联顺序</p><blockquote><p>一般是根据扫描的行数来判断,因为会进行嵌套,循环,回溯的过程,如果扫描的行数越少,能够提前剔除,可以减少后面的基数</p></blockquote></li><li><p><strong>做了什么</strong></p><p>关联优化器会尝试在所有的关联顺序中选择一个成本最小的来生成执行计划树</p><p>当搜索空间非常大的时候,优化器不可能逐一评估每一种关联顺序的成本。这时,优化器选择使用<code>贪婪</code>搜索的方式查找<code>最优</code>的关联顺序。</p><blockquote><p><code>optimizer_search_depth</code>参数可以根据需要指定大小</p></blockquote></li></ul></li><li><p><strong>技巧</strong></p><ul><li><p><strong>STRAIGHT_JOIN</strong></p><p> 功能同join类似,但能让左边的表来驱动右边的表,能改表优化器对于联表查询的执行顺序。</p></li><li><p><strong>排序优化</strong></p></li></ul><ul><li><p><strong>文件排序</strong></p><p>  当不能使用索引生成排序结果的时候, MySQL 需要自己进行排序,如果数据量小则在内存中进行,如果数据量大则需要使用磁盘</p><ul><li><p><strong>如何进行文件排序</strong></p><p>如果需要排序的数据量小于<code>排序缓冲区</code>, MySQL 使用内存进行<code>快速排序</code>操作。如果内存不够排序,那么 MySQL 会先将数据分块,对每个独立的块使用<code>快速排序</code>进行排序,并将各个块的排序结果存放在磁盘上,然后将各个排好序的块进行合并（merge）,最后返回排序结果。</p><ul><li><p><strong>MySQL 有如下两种排序算法</strong></p><ul><li><strong>两次传输排序（旧版本使用）</strong></li></ul><p>读取行指针和需要排序的字段,对其进行排序,然后再根据排序结果读取所需要的数据行。这需要进行两次数据传输,即需要从数据表中读取两次数据,第二次读取数据的时候,因为是读取排序列进行排序后的所有记录,这会产生大量的随机I/O,所以两次数据传输的成本非常高。当使用的是 MyISAM 表的时候,成本可能会更高,因为 MyISAM 使用系统调用进行数据的读取（ MyISAM 非常依赖操作系统对数据的缓存）。不过这样做的优点是,在排序的时候存储尽可能少的数据,这就让<code>排序缓冲区</code>(21)中可能容纳尽可能多的行数进行排序。</p><ul><li><strong>单次传输排序（新版本使用）</strong></li></ul><p>先读取查询所需要的所有列,然后再根据给定列进行排序,最后直接返回排序结果。这个算法只在 MySQL  4.1和后续更新的版本才引入。因为不再需要从数据表中读取两次数据,对于I/O密集型的应用,这样做的效率高了很多。另外,相比两次传输排序,这个算法只需要一次顺序I/O读取所有的数据,而无须任何的随机I/O。缺点是,如果需要返回的列非常多、非常大,会额外占用大量的空间,而这些列对排序操作本身来说是没有任何作用的。因为单条排序记录很大,所以可能会有更多的排序块需要合并。</p></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="查询执行引擎"><a href="#查询执行引擎" class="headerlink" title="查询执行引擎"></a>查询执行引擎</h3><p> <strong>有什么作用</strong></p><p>在解析和优化阶段, MySQL 将生成查询对应的执行计划, MySQL 的查询执行引擎则根据这个执行计划来完成整个查询。</p><p>  <strong>执行引擎的步骤</strong></p><p>MySQL 只是简单地根据执行计划给出的指令逐步执行。在根据执行计划逐步执行的过程中,有大量的操作需要通过调用存储引擎实现的接口来完成,这些接口也就是我们称为<code>handler API</code>的接口。查询中的每一个表由一个handler的实例表示。前面我们有意忽略了这点,实际上, MySQL 在优化阶段就为每个表创建了一个handler实例,优化器根据这些实例的接口可以获取表的相关信息,包括表的所有列名、索引统计信息,等等。</p><blockquote><p>并不是所有的操作都由handler完成。例如,当 MySQL 需要进行表锁的时候。handler可能会实现自己的级别的、更细粒度的锁,如 InnoDB 就实现了自己的行基本锁,但这并不能代替服务器层的表锁。正如我们第1章所介绍的,如果是所有存储引擎共有的特性则由服务器层实现,比如时间和日期函数、视图、触发器等。</p></blockquote><h3 id="返回结果给客户端"><a href="#返回结果给客户端" class="headerlink" title="返回结果给客户端"></a>返回结果给客户端</h3><p> <strong>执行步骤</strong></p><ul><li>即使查询不需要返回结果集给客户端, MySQL 仍然会返回这个查询的一些信息,如该查询影响到的行数</li><li>如果查询可以被缓存,那么 MySQL 在这个阶段也会将结果存放到查询缓存中。</li><li>MySQL 将结果集返回客户端是一个增量、逐步返回的过程。</li></ul><p><strong>好处</strong></p><ul><li>服务器端无须存储太多的结果,也就不会因为要返回太多结果而消耗太多内存</li><li>这样的处理也让 MySQL 客户端第一时间获得返回的结果</li><li>结果集中的每一行都会以一个满足 MySQL 客户端/服务器通信协议的封包发送,再通过TCP协议进行传输,在TCP传输的过程中,可能对 MySQL 的封包进行缓存然后批量传输</li></ul><h1 id="五、MySQL-查询优化器的局限性"><a href="#五、MySQL-查询优化器的局限性" class="headerlink" title="五、MySQL 查询优化器的局限性"></a>五、MySQL 查询优化器的局限性</h1><p> MySQL 的万能<code>嵌套循环</code>并不是对每种查询都是最优的。不过还好, MySQL 查询优化器只对少部分查询不适用,而且我们往往可以通过改写查询让 MySQL 高效地完成工作。</p><h3 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h3><p><strong>为什么要使用关联自查询</strong></p><p>MySQL 的子查询实现得非常糟糕。最糟糕的一类查询是WHERE条件中包含IN()的子查询语句。</p><p>例如,我们希望找到Sakila数据库中,演员Penelope Guiness（他的actor_id为1）参演过的所有影片信息。很自然的,我们会按照下面的方式用子查询实现：</p> <figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> </span><br><span class="line">sakila.film     </span><br><span class="line"><span class="hljs-keyword">WHERE</span> film_id </span><br><span class="line">    <span class="hljs-keyword">IN</span>(     </span><br><span class="line">    <span class="hljs-keyword">SELECT</span> film_id </span><br><span class="line">    <span class="hljs-keyword">FROM</span> sakila.film_actor </span><br><span class="line">    <span class="hljs-keyword">WHERE</span> actor_id = <span class="hljs-number">1</span></span><br><span class="line">    )   ;</span><br></pre></td></tr></table></figure><p>因为 MySQL 对<code>IN()</code>列表中的选项有专门的优化策略,一般会认为 MySQL 会先执行子查询返回所有包含actor_id为1的film_id。一般来说,<code>IN()</code>列表查询速度很快,所以我们会认为上面的查询会这样执行：</p> <figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sakila.film</span><br></pre></td></tr></table></figure> <figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">GROUP_CONCAT</span>(film_id) </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.film_actor </span><br><span class="line"><span class="hljs-keyword">WHERE</span> actor_id = <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>Result:<code>1,23,25,106,140,166,277,361,438,499,506,509,605,635,749,832,939,970,980</code>   </p> <figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> </span><br><span class="line">sakila.film   </span><br><span class="line"><span class="hljs-keyword">WHERE</span> film_id   </span><br><span class="line"><span class="hljs-keyword">IN</span>(</span><br><span class="line"><span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">106</span>,<span class="hljs-number">140</span>,<span class="hljs-number">166</span>,<span class="hljs-number">277</span>,<span class="hljs-number">361</span>,<span class="hljs-number">438</span>,<span class="hljs-number">499</span>,<span class="hljs-number">506</span>,<span class="hljs-number">509</span>,<span class="hljs-number">605</span>,<span class="hljs-number">635</span>,<span class="hljs-number">749</span>,<span class="hljs-number">832</span>,<span class="hljs-number">939</span>,<span class="hljs-number">970</span>,<span class="hljs-number">980</span>);</span><br></pre></td></tr></table></figure><p>很不幸, MySQL 不是这样做的。 MySQL 会将相关的外层表压到子查询中,它认为这样可以更高效率地查找到数据行。</p><p><strong>改进的写法</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sakila.film  </span><br><span class="line"><span class="hljs-keyword">WHERE</span> film_id </span><br><span class="line">    <span class="hljs-keyword">IN</span>(</span><br><span class="line">    <span class="hljs-keyword">SELECT</span> film_id </span><br><span class="line">    <span class="hljs-keyword">FROM</span> sakila.film_actor <span class="hljs-keyword">WHERE</span> actor_id = <span class="hljs-number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sakila.film  </span><br><span class="line"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (</span><br><span class="line">    <span class="hljs-keyword">SELECT</span> * </span><br><span class="line">    <span class="hljs-keyword">FROM</span> sakila.film_actor </span><br><span class="line">    <span class="hljs-keyword">WHERE</span> actor_id = <span class="hljs-number">1</span> </span><br><span class="line">    <span class="hljs-keyword">WHERE</span> film_actor.film_id = film.film_id);</span><br></pre></td></tr></table></figure><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> film.* </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.film  </span><br><span class="line"><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> sakila.film_actor <span class="hljs-keyword">USING</span>(film_id) </span><br><span class="line"><span class="hljs-keyword">WHERE</span> actor_id = <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="如何用好关联子查询"><a href="#如何用好关联子查询" class="headerlink" title="如何用好关联子查询"></a>如何用好关联子查询</h3><p><strong>例子1</strong></p><ul><li><p><strong>原始sql</strong></p><ul><li><p><code>EXPLAIN SELECT film_id, language_id FROM sakila.film WHERE NOT EXISTS( WHERE * FROM sakila.film_actor  WHERE film_actor.film_id = film.film_id )\G</code></p><p>一般会建议使用左外连接（LEFT OUTER JOIN）重写该查询,以代替子查询。理论上,改写后 MySQL 的执行计划完全不会改变。</p></li></ul></li><li><p><strong>优化1</strong></p><ul><li><code>EXPLAIN SELECT film.film_id, film.language_id FROM sakila.film    LEFT OUTER JOIN sakila.film_actor USING(film_id) WHERE film_actor.film_id IS NULL\G</code></li><li><p>可以看到,这里的执行计划基本上一样,下面是一些微小的区别：</p><ul><li>表flm_actor的访问类型一个是DEPENDENT SUBQUERY,而另一个是SIMPLE。这个不同是由于语句的写法不同导致的,一个是普通查询,一个是子查询。这对底层存储引擎接口来说,没有任何不同。</li><li>对film表,第二个查询的Extra中没有<code>Using where</code>,但这不重要,第二个查询的USING子句和第一个查询的WHERE子句实际上是完全一样的。</li><li>在第二个表film_actor的执行计划的Extra列有<code>Not exists</code>。这是我们前面章节中提到的提前终止算法（early-termination algorithm）, MySQL 通过使用<code>Not exists</code>优化来避免在表film_actor的索引中读取任何额外的行。这完全等效于直接编写NOT EXISTS子查询,这个执行计划中也是一样,一旦匹配到一行数据,就立刻停止扫描。</li></ul></li></ul></li></ul><p><strong>例子2</strong></p><ul><li><p><strong>原始sql</strong></p><ul><li><p><code>SELECT DISTINCT film.film_id FROM sakila.film INNER JOIN sakila.film_actor USING(film_id);</code></p><p>我们知道一旦使用了<code>DISTINCT</code>和<code>GROUP BY</code>,那么在查询的执行过程中,通常需要产生临时中间表。</p></li></ul></li><li><p><strong>优化1</strong></p><ul><li><code>SELECT film_id FROM sakila.film WHERE EXISTS(SELECT * FROM sakila.film_actor WHERE film.film_id = film_actor.film_id);</code></li><li>再一次,我们需要通过测试来对比这两种写法,哪个更快一些。测试结果参考表6-2。表6-2：EXISTS和关联性能对比查询每秒查询数结果（QPS）<ul><li>INNER JOIN               185 QPS                </li><li>EXISTS子查询               325 QPS        </li></ul></li></ul></li></ul><p>在这个案例中,我们看到子查询速度要比关联查询更快些。</p><h3 id="UNION-的限制"><a href="#UNION-的限制" class="headerlink" title="UNION 的限制"></a>UNION 的限制</h3><p>MySQL 无法将限制条件从外层<strong>下推</strong>到内层,这使得原本能够限制部分返回结果的条件无法应用到内层查询的优化上</p><p><strong>解决办法</strong></p><p>从临时表中取出数据的顺序并不是一定的,所以如果想获得正确的顺序,还需要加上一个全局的<code>ORDER BY</code>和<code>LIMIT</code>操作</p><h3 id="索引合并优化"><a href="#索引合并优化" class="headerlink" title="索引合并优化"></a>索引合并优化</h3><p>我们的 where 中可能有多个条件(或者join)涉及到多个字段,它们之间进行<code>AND</code>或者<code>OR</code>,那么此时就有可能会使用到<code>index merge</code>技术。<code>index merge</code>技术如果简单的说,其实就是：对多个索引分别进行条件扫描,然后将它们各自的结果进行合并(intersect/union)。</p><h3 id="等值传递"><a href="#等值传递" class="headerlink" title="等值传递"></a>等值传递</h3><p>某些时候,等值传递会带来一些意想不到的额外消耗。例如,有一个非常大的<code>IN()</code>列表,而 MySQL 优化器发现存在<code>WHERE</code>、<code>ON</code>或者<code>USING</code>的子句,将这个列表的值和另一个表的某个列相关联。那么优化器会将<code>IN()</code>列表都复制应用到关联的各个表中。通常,因为各个表新增了过滤条件,优化器可以更高效地从存储引擎过滤记录。但是如果这个列表非常大,则会导致优化和执行都会变慢。在本书写作的时候,除了修改 MySQL 源代码,目前还没有什么办法能够绕过该问题（不过这个问题很少会碰到）。</p><h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><p> MySQL 无法利用多核特性来并行执行查询。很多其他的关系型数据库能够提供这个特性,但是 MySQL 做不到。这里特别指出是想告诉读者不要花时间去尝试寻找并行执行查询的方法。</p><h3 id="哈希关联"><a href="#哈希关联" class="headerlink" title="哈希关联"></a>哈希关联</h3><p>在本书写作的时候,MySQL 并不支持哈希关联—— MySQL 的所有关联都是嵌套循环关联。不过,可以通过建立一个哈希索引来曲线地实现哈希关联。如果使用的是 Memory 存储引擎,则索引都是哈希索引,所以关联的时候也类似于哈希关联。可以参考第5章的<code>创建自定义哈希索引</code>部分。另外, MariaDB 已经实现了真正的哈希关联。</p><h3 id="松散索引扫描与紧凑索引扫描"><a href="#松散索引扫描与紧凑索引扫描" class="headerlink" title="松散索引扫描与紧凑索引扫描"></a>松散索引扫描与紧凑索引扫描</h3><p><strong>松散索引扫描</strong></p><p>松散索引扫描相当于 Oracle 中的跳跃索引扫描（skip index scan）,就是不需要连续的扫描索引中得每一个元组,扫描时仅考虑索引中得一部分。当查询中没有 where 条件的时候,松散索引扫描读取的索引元组的个数和 groups 的数量相同。如果 where 条件包含范围预测,松散索引扫描查找每个 group 中第一个满足范围条件,然后再读取最少可能数的keys。松散索引扫描只需要读取很少量的数据就可以完成<code>group by</code>操作,因而执行效率非常高</p><p><strong>使用松散索引扫描需要满足以下条件</strong></p><ol><li>查询在单一表上。</li><li><code>group by</code>指定的所有列是索引的一个最左前缀,并且没有其它的列。比如表t1（ c1,c2,c3,c4）上建立了索引（c1,c2,c3）。如果查询包含<code>group by c1,c2</code>,那么可以使用松散索引扫描。但是<code>group by c2,c3</code>(不是索引最左前缀)和<code>group by c1,c2,c4</code>(c4字段不在索引中)。</li><li>如果在选择列表select list中存在聚集函数,只能使用 min()和max()两个聚集函数,并且指定的是同一列（如果min()和max()同时存在）。这一列必须在索引中,且紧跟着<code>group by</code>指定的列。比如,<code>select t1,t2,min(t3),max(t3) from t1  group by c1,c2</code>。</li><li>如果查询中存在除了<code>group by</code>指定的列之外的其他部分,那么必须以常量的形式出现（除了min()和max()两个聚集函数）。</li><li>索引中的列必须索引整个数据列的值(full column values must be indexed),而不是一个前缀索引。比如,c1 varchar(20), INDEX (c1(10)),这个索引没发用作松散索引扫描。</li></ol><p><strong>紧凑索引扫描</strong></p><p>紧凑索引扫描可能是全索引扫描或者范围索引扫描,取决于查询条件。当松散索引扫描条件没有满足的时候,<code>group by</code>仍然有可能避免创建临时表。如果在 where 条件有范围扫描,那么紧凑索引扫描仅读取满足这些条件的 keys（索引元组）。否则执行索引扫描。因为这种方式读取所有 where 条件定义的范围内的 keys,或者扫描整个索引当没有 where 条件,因而称作紧凑索引扫描。对于紧凑索引扫描,只有在所有满足范围条件的 keys 被找到之后才会执行分组操作。</p><p><strong>使用紧凑索引扫描需要满足以下条件</strong></p><p>在查询中存在常量相等 where 条件字段（索引中的字段）,且该字段在<code>group by</code>指定的字段的前面或者中间。来自于相等条件的常量能够填充搜索keys中的gaps,因而可能构成一个索引的完整前缀。索引前缀能够用于索引查找。如果要求对<code>group by</code>的结果进行排序,并且查找字段有可能组成一个索引前缀, MySQL 同样可以避免额外的排序操作,因为对有序的索引进行的查找已经按照顺序提取所有的keys。</p><h3 id="最大值和最小值优化"><a href="#最大值和最小值优化" class="headerlink" title="最大值和最小值优化"></a>最大值和最小值优化</h3><p><strong>原始sql</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(actor_id) </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.actor</span><br><span class="line"><span class="hljs-keyword">WHERE</span> first_name=<span class="hljs-string">'PENELOPE'</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong></p><p>因为在 first_name 字段上并没有索引,因此 MySQL 将会进行一次全表扫描。</p><p> <strong>解决办法</strong></p><p>一个曲线的优化办法是移除<code>MIN()</code>,然后使用<code>LIMIT</code>来将查询重写如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> actor_id </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.actor <span class="hljs-keyword">USE</span> <span class="hljs-keyword">INDEX</span>(PRIMARY)         </span><br><span class="line"><span class="hljs-keyword">WHERE</span> first_name = <span class="hljs-string">'PENELOPE'</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="在同一个表上查询和更新"><a href="#在同一个表上查询和更新" class="headerlink" title="在同一个表上查询和更新"></a>在同一个表上查询和更新</h3><p>MySQL 不允许对同一张表同时进行查询和更新。这其实并不是优化器的限制,如果清楚 MySQL 是如何执行查询的,就可以避免这种情况。</p><p><strong>例子</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">UPDATE</span> tbl <span class="hljs-keyword">AS</span> outer_tbl         </span><br><span class="line">   <span class="hljs-keyword">SET</span> cnt = (         </span><br><span class="line">      <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">FROM</span> tbl <span class="hljs-keyword">AS</span> inner_tbl         </span><br><span class="line">      <span class="hljs-keyword">WHERE</span> inner_tbl.type = outer_tbl.type         </span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p>实际上,这执行了两个查询：一个是子查询中的SELECT语句,另一个是多表关联UPDATE,只是关联的表是一个临时表。子查询会在UPDATE语句打开表之前就完成,</p><p><strong>解决办法</strong></p><p>可以通过使用生成表的形式来绕过上面的限制,因为 MySQL 只会把这个表当作一个临时表来处理。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">UPDATE</span> tbl        </span><br><span class="line">   <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>(         </span><br><span class="line">      <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">type</span>, <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">AS</span> cnt         </span><br><span class="line">      <span class="hljs-keyword">FROM</span> tbl         </span><br><span class="line">      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">type</span>         </span><br><span class="line">   ) <span class="hljs-keyword">AS</span> der <span class="hljs-keyword">USING</span>(<span class="hljs-keyword">type</span>)         </span><br><span class="line"><span class="hljs-keyword">SET</span> tbl.cnt = der.cnt;</span><br></pre></td></tr></table></figure><h1 id="六、查询优化器的提示"><a href="#六、查询优化器的提示" class="headerlink" title="六、查询优化器的提示"></a>六、查询优化器的提示</h1><h4 id="HIGH-PRIORITY-和-LOW-PRIORITY"><a href="#HIGH-PRIORITY-和-LOW-PRIORITY" class="headerlink" title="HIGH_PRIORITY 和 LOW_PRIORITY"></a>HIGH_PRIORITY 和 LOW_PRIORITY</h4><h5 id="HIGH-PRIORITY"><a href="#HIGH-PRIORITY" class="headerlink" title="HIGH_PRIORITY"></a>HIGH_PRIORITY</h5><p>用于SELECT语句的时候, MySQL 会将此SELECT语句重新调度到所有正在等待表锁以便修改数据的语句之前。实际上 MySQL 是将其放在表的队列的最前面,而不是按照常规顺序等待。<code>HIGH_PRIORITY</code>还可以用于<code>INSERT</code>语句,其效果只是简单地抵消了全局<code>LOW_PRIORITY</code>设置对该语句的影响。</p><h5 id="LOW-PRIORITY"><a href="#LOW-PRIORITY" class="headerlink" title="LOW_PRIORITY"></a>LOW_PRIORITY</h5><p>它会让该语句一直处于等待状态,只要队列中还有需要访问同一个表的语句——即使是那些比该语句还晚提交到服务器的语句。这就像一个过于礼貌的人站在餐厅门口,只要还有其他顾客在等待就一直不进去,很明显这容易把自己给饿坏。<code>LOW_PRIORITY</code>提示在<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>语句中都可以使用。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><code>HIGH_PRIORITY</code>和<code>LOW_PRIORITY</code>经常让人感到困惑。这两个提示并不会获取更多资源让查询<code>积极</code>工作,也不会少获取资源让查询<code>消极</code>工作。它们只是简单地控制了 MySQL 访问某个数据表的队列顺序。</p><h4 id="DELAYED"><a href="#DELAYED" class="headerlink" title="DELAYED"></a>DELAYED</h4><p>这个提示对<code>INSERT</code>和<code>REPLACE</code>有效。 MySQL 会将使用该提示的语句立即返回给客户端,并将插入的行数据放入到缓冲区,然后在表空闲时批量将数据写入。日志系统使用这样的提示非常有效,或者是其他需要写入大量数据但是客户端却不需要等待单条语句完成I/O的应用。这个用法有一些限制：并不是所有的存储引擎都支持这样的做法；并且该提示会导致函数<code>LAST_INSERT_ID()</code>无法正常工作。</p><h4 id="STRAIGHT-JOIN"><a href="#STRAIGHT-JOIN" class="headerlink" title="STRAIGHT_JOIN"></a>STRAIGHT_JOIN</h4><p>这个提示可以放置在<code>SELECT</code>语句的<code>SELECT</code>关键字之后,也可以放置在任何两个关联表的名字之间。第一个用法是让查询中所有的表按照在语句中出现的顺序进行关联。第二个用法则是固定其前后两个表的关联顺序。</p><p>当 MySQL 没能选择正确的关联顺序的时候,或者由于可能的顺序太多导致 MySQL 无法评估所有的关联顺序的时候,<code>STRAIGHT_JOIN</code>都会很有用。在后面这种情况, MySQL 可能会花费大量时间在<code>statistics</code>状态,加上这个提示则会大大减少优化器的搜索空间。可以先使用 EXPLAIN 语句来查看优化器选择的关联顺序,然后使用该提示来重写查询,再看看它的关联顺序。当你确定无论怎样的where条件,某个固定的关联顺序始终是最佳的时候,使用这个提示可以大大提高优化器的效率。但是在升级 MySQL 版本的时候,需要重新审视下这类查询,某些新的优化特性可能会因为该提示而失效。</p><h4 id="SQL-SMALL-RESULT-和-SQL-BIG-RESULT"><a href="#SQL-SMALL-RESULT-和-SQL-BIG-RESULT" class="headerlink" title="SQL_SMALL_RESULT 和 SQL_BIG_RESULT"></a>SQL_SMALL_RESULT 和 SQL_BIG_RESULT</h4><h5 id="SQL-BUFFER-RESULT"><a href="#SQL-BUFFER-RESULT" class="headerlink" title="SQL_BUFFER_RESULT"></a>SQL_BUFFER_RESULT</h5><p>这个提示告诉优化器将查询结果放入到一个临时表,然后尽可能快地释放表锁。</p><blockquote><p>这和前面提到的由客户端缓存结果不同。当你没法使用客户端缓存的时候,使用服务器端的缓存通常很有效。带来的好处是无须在客户端上消耗太多的内存,还可以尽可能快地释放对应的表锁。代价是,服务器端将需要更多的内存。</p></blockquote><h5 id="SQL-BIG-RESULT"><a href="#SQL-BIG-RESULT" class="headerlink" title="SQL_BIG_RESULT"></a>SQL_BIG_RESULT</h5><p>告诉优化器结果集可能会非常大,建议使用磁盘临时表做排序操作。</p><h4 id="SQL-CACHE-和-SQL-NO-CACHE"><a href="#SQL-CACHE-和-SQL-NO-CACHE" class="headerlink" title="SQL_CACHE 和 SQL_NO_CACHE"></a>SQL_CACHE 和 SQL_NO_CACHE</h4><p>这个提示告诉 MySQL 这个结果集是否应该缓存在查询缓存中,下一章我们将详细介绍如何使用。</p><h4 id="SQL-CALC-FOUND-ROWS"><a href="#SQL-CALC-FOUND-ROWS" class="headerlink" title="SQL_CALC_FOUND_ROWS"></a>SQL_CALC_FOUND_ROWS</h4><p>严格来说,这并不是一个优化器提示。它不会告诉优化器任何关于执行计划的东西。它会让 MySQL 返回的结果集包含更多的信息。查询中加上该提示 MySQL 会计算除去<code>LIMIT</code>子句后这个查询要返回的结果集的总数,而实际上只返回<code>LIMIT</code>要求的结果集。可以通过函数<code>FOUND_ROW()</code>获得这个值。（参阅后面的<code>SQL_CALC_FOUND_ROWS</code>优化部分,了解下为什么不应该使用该提示。）</p><h4 id="FOR-UPDATE-和-LOCK-IN-SHARE-MODE"><a href="#FOR-UPDATE-和-LOCK-IN-SHARE-MODE" class="headerlink" title="FOR UPDATE 和 LOCK IN SHARE MODE"></a>FOR UPDATE 和 LOCK IN SHARE MODE</h4><p>这也不是真正的优化器提示。这两个提示主要控制<code>SELECT</code>语句的锁机制,但只对实现了行级锁的存储引擎有效。使用该提示会对符合查询条件的数据行加锁。对于<code>INSERT...SELECT</code>语句是不需要这两个提示的,因为对于 MySQL  5.0和更新版本会默认给这些记录加上读锁。（可以禁用该默认行为,但不是个好主意,在后面关于复制和备份的章节中将解释这一点。） 唯一内置的支持这两个提示的引擎就是 InnoDB 。另外需要记住的是,这两个提示会让某些优化无法正常使用,例如索引覆盖扫描。 InnoDB 不能在不访问主键的情况下排他地锁定行,因为行的版本信息保存在主键中。</p><h4 id="USE-INDEX、IGNORE-INDEX-和-FORCE-INDEX"><a href="#USE-INDEX、IGNORE-INDEX-和-FORCE-INDEX" class="headerlink" title="USE INDEX、IGNORE INDEX 和 FORCE INDEX"></a>USE INDEX、IGNORE INDEX 和 FORCE INDEX</h4><p><code>USE INDEX</code>则建议优化器使用该索引,但是如果优化器认为它会更快,则可以使用表扫描。如果使用,<code>FORCE INDEX</code>则即使它认为表扫描更有效,让优化器也可以使用此索引。</p><h3 id="一些参数用来控制优化器的行为"><a href="#一些参数用来控制优化器的行为" class="headerlink" title="一些参数用来控制优化器的行为"></a>一些参数用来控制优化器的行为</h3><p><strong><code>optimizer_search_depth</code></strong></p><p>这个参数控制优化器在穷举执行计划时的限度。如果查询长时间处于<code>Statistics</code>状态,那么可以考虑调低此参数。</p><p><strong><code>optimizer_prune_level</code></strong></p><p>该参数默认是打开的,这让优化器会根据需要扫描的行数来决定是否跳过某些执行计划。</p><p><strong><code>optimizer_switch</code></strong></p><p>这个变量包含了一些开启/关闭优化器特性的标志位。例如在 MySQL  5.1中可以通过这个参数来控制禁用索引合并的特性。前两个参数是用来控制优化器可以走的一些<code>捷径</code>。这些捷径可以让优化器在处理非常复杂的SQL语句时,仍然可以很高效,但这也可能让优化器错过一些真正最优的执行计划。所以应该根据实际需要来修改这些参数。</p><h1 id="七、优化特定类型的查询"><a href="#七、优化特定类型的查询" class="headerlink" title="七、优化特定类型的查询"></a>七、优化特定类型的查询</h1><h3 id="优化COUNT-查询"><a href="#优化COUNT-查询" class="headerlink" title="优化COUNT()查询"></a>优化<code>COUNT()</code>查询</h3><p><strong><code>COUNT()</code>的作用</strong></p><ol><li>统计某个列值的数量</li></ol><blockquote><p>在统计列值时要求列值是非空的（不统计NULL）。如果在<code>COUNT()</code>的括号中指定了列或者列的表达式,则统计的就是这个表达式有值的结果数</p></blockquote><ol start="2"><li>统计行数</li></ol><blockquote><p>统计结果集的行数。当 MySQL 确认括号内的表达式值不可能为空时,实际上就是在统计行数。最简单的就是当我们使用<code>COUNT（*）</code>的时候,这种情况下通配符*并不会像我们猜想的那样扩展成所有的列,实际上,它会忽略所有的列而直接统计所有的行数。</p></blockquote><h3 id="关于-MyISAM-的神话"><a href="#关于-MyISAM-的神话" class="headerlink" title="关于 MyISAM 的神话"></a>关于 MyISAM 的神话</h3><p>一个容易产生的误解就是： MyISAM 的<code>COUNT()</code>函数总是非常快,不过这是有前提条件的,即只有没有任何WHERE条件的<code>COUNT（*）</code>才非常快,因为此时无须实际地去计算表的行数。 MySQL 可以利用存储引擎的特性直接获得这个值。如果 MySQL 知道某列col不可能为NULL值,那么 MySQL 内部会将<code>COUNT（col）</code>表达式优化为<code>COUNT（*）</code>。当统计带WHERE子句的结果集行数,可以是统计某个列值的数量时, MyISAM 的<code>COUNT()</code>和其他存储引擎没有任何不同,就不再有神话般的速度了。所以在 MyISAM 引擎表上执行<code>COUNT()</code>有时候比别的引擎快,有时候比别的引擎慢,这受很多因素影响,要视具体情况而定。</p><h3 id="简单的优化"><a href="#简单的优化" class="headerlink" title="简单的优化"></a>简单的优化</h3><p>反转条件,来减少需要扫描的行数</p><h3 id="使用近似值"><a href="#使用近似值" class="headerlink" title="使用近似值"></a>使用近似值</h3><p>30秒统计一次,或者更久长时间的一次时间统计,如果业务对数值不那么敏感的话</p><h3 id="更复杂的优化"><a href="#更复杂的优化" class="headerlink" title="更复杂的优化"></a>更复杂的优化</h3><p>增加类似Memcached这样的外部缓存系统</p><h3 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h3><ul><li>确保<code>ON</code>或者<code>USING</code>子句中的列上有索引。在创建索引的时候就要考虑到关联的顺序。当表A和表B用列c关联的时候,如果优化器的关联顺序是B、A,那么就不需要在B表的对应列上建上索引。没有用到的索引只会带来额外的负担。一般来说,除非有其他理由,否则只需要在关联顺序中的第二个表的相应列上创建索引。</li><li>确保任何的<code>group by</code>和<code>ORDER BY</code>中的表达式只涉及到一个表中的列,这样 MySQL 才有可能使用索引来优化这个过程。</li><li>当升级 MySQL 的时候需要注意：关联语法、运算符优先级等其他可能会发生变化的地方。因为以前是普通关联的地方可能会变成笛卡儿积,不同类型的关联可能会生成不同的结果等。</li></ul><h3 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h3><p>关于子查询优化我们给出的最重要的优化建议就是尽可能使用关联查询代替,至少当前的 MySQL 版本需要这样。本章的前面章节已经详细介绍了这点。<code>尽可能使用关联</code>并不是绝对的,如果使用的是 MySQL  5.6或更新的版本或者 MariaDB ,那么就可以直接忽略关于子查询的这些建议了。</p><h3 id="优化GROUP-BY和DISTINCT"><a href="#优化GROUP-BY和DISTINCT" class="headerlink" title="优化GROUP BY和DISTINCT"></a>优化<code>GROUP BY</code>和<code>DISTINCT</code></h3><p><strong><code>GROUP BY</code></strong></p><ul><li><code>GROUP BY</code>使用两种策略<ul><li>使用临时表</li><li>文件排序</li></ul></li></ul><blockquote><p>通常采用查找表的标识列分组的效率会比其他列更高。</p></blockquote><h3 id="优化GROUP-BY-WITH-ROLLUP"><a href="#优化GROUP-BY-WITH-ROLLUP" class="headerlink" title="优化GROUP BY WITH ROLLUP"></a>优化<code>GROUP BY WITH ROLLUP</code></h3><p>分组查询的一个变种就是要求 MySQL 对返回的分组结果再做一次超级聚合。</p><p><strong>解决办法</strong></p><ul><li>可以使用<code>WITH ROLLUP</code>子句来实现这种逻辑,但可能会不够优化。可以通过 EXPLAIN 来观察其执行计划,特别要注意分组是否是通过文件排序或者临时表实现的。然后再去掉<code>WITH ROLLUP</code>子句看执行计划是否相同。也可以通过本节前面介绍的优化器提示来固定执行计划。</li><li>也可以在 FROM 子句中嵌套使用子查询,或者是通过一个临时表存放中间数据,然后和临时表执行<code>UNION</code>来得到最终结果。</li><li>最好的办法是尽可能的将<code>WITH ROLLUP</code>功能转移到应用程序中处理</li></ul><h3 id="优化LIMIT分页"><a href="#优化LIMIT分页" class="headerlink" title="优化LIMIT分页"></a>优化<code>LIMIT</code>分页</h3><p><strong>问题原因</strong></p><p>在偏移量非常大的时候(27),例如可能是<code>LIMIT 1000,20</code>这样的查询,这时 MySQL 需要查询<code>10 020</code>条记录然后只返回最后<code>20</code>条,前面<code>10 000</code>条记录都将被抛弃,这样的代价非常高。</p><p><strong>解决办法</strong></p><ul><li>在页面中限制分页的数量</li><li>优化大偏移量的性能</li><li>优化此类分页查询的一个最简单的办法就是尽可能地使用索引覆盖扫描,而不是查询所有的列。然后根据需要做一次关联操作再返回所需的列。对于偏移量很大的时候,这样做的效率会提升非常大。</li></ul><p><strong>案例</strong></p><ul><li><p><strong>原始sql</strong></p><ul><li><code>SELECT film_id, description FROM sakila.film ORDER BY title LIMIT 50, 5;</code></li></ul></li><li><p><strong>优化1</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> film.film_id, film.description         </span><br><span class="line"><span class="hljs-keyword">FROM</span> sakila.film         </span><br><span class="line">   <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> (        </span><br><span class="line">      <span class="hljs-keyword">SELECT</span> film_id <span class="hljs-keyword">FROM</span> sakila.film         </span><br><span class="line">      <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> title <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">50</span>, <span class="hljs-number">5</span>        </span><br><span class="line">   ) <span class="hljs-keyword">AS</span> lim <span class="hljs-keyword">USING</span>(film_id);</span><br></pre></td></tr></table></figure><p>这里的<code>延迟关联</code>将大大提升查询效率,它让 MySQL 扫描尽可能少的页面,获取需要访问的记录后再根据关联列回原表查询需要的所有列。这个技术也可以用于优化关联查询中的<code>LIMIT</code>子句。</p></li><li><p><strong>优化2</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> film_id, description <span class="hljs-keyword">FROM</span> sakila.film         </span><br><span class="line"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">position</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">50</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">54</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">position</span></span><br></pre></td></tr></table></figure><p>有时候也可以将<code>LIMIT</code>查询转换为已知位置的查询,让 MySQL 通过范围扫描获得到对应的结果。例如,如果在一个位置列上有索引,并且预先计算出了边界值</p></li><li><p><strong>优化3</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> sakila.rental         </span><br><span class="line"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> rental_id <span class="hljs-keyword">DESC</span><span class="hljs-string">`LIMIT`</span><span class="hljs-number">20</span>;</span><br></pre></td></tr></table></figure></li></ul><p><code>LIMIT</code>和<code>OFFSET</code>的问题,其实是<code>OFFSET</code>的问题,它会导致 MySQL 扫描大量不需要的行然后再抛弃掉。如果可以使用书签记录上次取数据的位置,那么下次就可以直接从该书签记录的位置开始扫描,这样就可以避免使用<code>OFFSET</code>。</p><h3 id="优化SQL-CALC-FOUND-ROWS"><a href="#优化SQL-CALC-FOUND-ROWS" class="headerlink" title="优化SQL_CALC_FOUND_ROWS"></a>优化<code>SQL_CALC_FOUND_ROWS</code></h3><p><strong>问题原因</strong></p><p>MySQL 只有在扫描了所有满足条件的行以后,才会知道行数,所以加上这个提示以后,不管是否需要, MySQL 都会扫描所有满足条件的行,然后再抛弃掉不需要的行,而不是在满足<code>LIMIT</code>的行数后就终止扫描。所以该提示的代价可能非常高。</p><p><strong>解决办法</strong></p><ol><li>一个更好的设计是将具体的页数换成<code>下一页</code>按钮,假设每页显示20条记录,那么我们每次查询时都是用<code>LIMIT</code>返回21条记录并只显示20条,如果第21条存在,那么我们就显示<code>下一页</code>按钮,否则就说明没有更多的数据,也就无须显示<code>下一页</code>按钮了。</li><li>另一种做法是先获取并缓存较多的数据——例如,缓存1000条——然后每次分页都从这个缓存中获取。这样做可以让应用程序根据结果集的大小采取不同的策略,如果结果集少于1000,就可以在页面上显示所有的分页链接,因为数据都在缓存中,所以这样做性能不会有问题。如果结果集大于1000,则可以在页面上设计一个额外的<code>找到的结果多于1000条</code>之类的按钮。这两种策略都比每次生成全部结果集再抛弃掉不需要的数据的效率要高很多。</li></ol><h3 id="优化UNION查询"><a href="#优化UNION查询" class="headerlink" title="优化UNION查询"></a>优化<code>UNION</code>查询</h3><p><strong>问题原因</strong></p><p>MySQL 总是通过创建并填充临时表的方式来执行<code>UNION</code>查询。因此很多优化策略在<code>UNION</code>查询中都没法很好地使用。经常需要手工地将WHERE、<code>LIMIT</code>、<code>ORDER BY</code>等子句<code>下推</code>到<code>UNION</code>的各个子查询中,以便优化器可以充分利用这些条件进行优化（例如,直接将这些子句冗余地写一份到各个子查询）。</p><blockquote><p>注意:除非确实需要服务器消除重复的行,否则就一定要使用<code>UNION ALL</code>,这一点很重要。如果没有<code>ALL</code>关键字, MySQL 会给临时表加上<code>DISTINCT</code>选项,这会导致对整个临时表的数据做唯一性检查。这样做的代价非常高。即使有<code>ALL</code>关键字, MySQL 仍然会使用临时表存储结果。事实上, MySQL 总是将结果放入临时表,然后再读出,再返回给客户端。</p></blockquote><h3 id="静态查询分析"><a href="#静态查询分析" class="headerlink" title="静态查询分析"></a>静态查询分析</h3><ul><li>Percona Toolkit中的pt-query-advisor能够解析查询日志、分析查询模式,然后给出所有可能存在潜在问题的查询,并给出足够详细的建议。</li></ul><h3 id="使用用户自定义变量"><a href="#使用用户自定义变量" class="headerlink" title="使用用户自定义变量"></a>使用用户自定义变量</h3><p><strong>在哪些场景下我们不能使用用户自定义变量</strong></p><ul><li>使用自定义变量的查询,无法使用查询缓存。</li><li>不能在使用常量或者标识符的地方使用自定义变量,例如表名、列名和<code>LIMIT</code>子句中。</li><li>用户自定义变量的生命周期是在一个连接中有效,所以不能用它们来做连接间的通信。</li><li>如果使用连接池或者持久化连接,自定义变量可能让看起来毫无关系的代码发生交互（如果是这样,通常是代码bug或者连接池bug,这类情况确实可能发生）。</li><li>在5.0之前的版本,是大小写敏感的,所以要注意代码在不同 MySQL 版本间的兼容性问题。</li><li>不能显式地声明自定义变量的类型。确定未定义变量的具体类型的时机在不同 MySQL 版本中也可能不一样。如果你希望变量是整数类型,那么最好在初始化的时候就赋值为<code>0</code>,如果希望是浮点型则赋值为<code>0.0</code>,如果希望是字符串则赋值为’’,用户自定义变量的类型在赋值的时候会改变。 MySQL 的用户自定义变量是一个动态类型。</li><li>MySQL 优化器在某些场景下可能会将这些变量优化掉,这可能导致代码不按预想的方式运行。</li><li>赋值的顺序和赋值的时间点并不总是固定的,这依赖于优化器的决定。实际情况可能很让人困惑,后面我们将看到这一点。</li><li>赋值符号<code>:=</code>的优先级非常低,所以需要注意,赋值表达式应该使用明确的括号。使用未定义变量不会产生任何语法错误,如果没有意识到这一点,非常容易犯错。</li><li>优化排名语句</li><li>避免重复查询刚刚更新的数据</li><li>统计更新和插入的数量</li><li>确定取值的顺序</li><li>编写偷懒的<code>UNION</code></li><li>用户自定义变量的其他用处</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能 MySQL ｜ 创建高性能的索引</title>
      <link href="/2020/05/02/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(3)/"/>
      <url>/2020/05/02/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(3)/</url>
      
        <content type="html"><![CDATA[<p>索引对于良好的性能非常关键,尤其是当表中的数据量越来越大时,索引对性能的影响愈发重要。在数据量较小且负载较低时,不恰当的索引对性能的影响可能还不明显,但当数据量逐渐增大时,性能则会急剧下降。</p><a id="more"></a><h2 id="一、索引的类型"><a href="#一、索引的类型" class="headerlink" title="一、索引的类型"></a>一、索引的类型</h2><h3 id="1-B-Tree索引"><a href="#1-B-Tree索引" class="headerlink" title="1.B+Tree索引"></a>1.B+Tree索引</h3><p>B-Tree索引使用B-Tree来存储数据,当然不同存储引擎的实现方式不同。B-Tree通常意味着所有的值都是按顺序存储的,并且每一个叶子页到根的距离相同。</p><h4 id="索引特点"><a href="#索引特点" class="headerlink" title="索引特点"></a>索引特点</h4><ul><li>叶子节点比较特别,它们的指针指向的是被索引的数据</li><li>B-Tree通常意味着所有的值都是按顺序存储的</li><li>每一个叶子页到根的距离相同</li></ul><h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><ul><li>全值匹配</li><li>匹配最左前缀</li><li>匹配列前缀</li><li>匹配范围值</li><li>精确匹配某一列并范围匹配另外一列</li><li>只访问索引的查询</li></ul><h4 id="B-Tree索引的限制"><a href="#B-Tree索引的限制" class="headerlink" title="B-Tree索引的限制"></a>B-Tree索引的限制</h4><ul><li>如果不是按照索引的最左列开始查找,则无法使用索引。例如上面例子中的索引无法用于查找名字为Bill的人,也无法查找某个特定生日的人,因为这两列都不是最左数据列。类似地,也无法查找姓氏以某个字母结尾的人。</li><li>不能跳过索引中的列。也就是说,前面所述的索引无法用于查找姓为Smith并且在某个特定日期出生的人。如果不指定名（first_name）,则MySQL只能使用索引的第一列。</li><li>如果查询中有某个列的范围查询,则其右边所有列都无法使用索引优化查找。例如有查询WHERE last_name=’Smith’ AND frst_name LIKE ‘J％’ AND dob=’1976-12-23’,这个查询只能使用索引的前两列,因为这里LIKE是一个范围条件（但是服务器可以把其余列用于其他目的）。如果范围查询列值的数量有限,那么可以通过使用多个等于条件来代替范围条件。在本章的索引案例学习部分,我们将演示一个详细的案例。</li></ul><h3 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2.哈希索引"></a>2.哈希索引</h3><p>哈希索引（hash index）基于哈希表实现,只有精确匹配索引所有列的查询才有效(4)。对于每一行数据,存储引擎都会对所有的索引列计算一个哈希码（hash code）,哈希码是一个较小的值,并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中,同时在哈希表中保存指向每个数据行的指针。</p><h4 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h4><p>只有精确匹配索引所有列的查询才有效</p><h4 id="哈希索引的限制"><a href="#哈希索引的限制" class="headerlink" title="哈希索引的限制"></a>哈希索引的限制</h4><ul><li>哈希索引只包含哈希值和行指针,而不存储字段值,所以不能使用索引中的值来避免读取行。不过,访问内存中的行的速度很快,所以大部分情况下这一点对性能的影响并不明显。</li><li>哈希索引数据并不是按照索引值顺序存储的,所以也就无法用于排序。</li><li>哈希索引也不支持部分索引列匹配查找,因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如,在数据列（A,B）上建立哈希索引,如果查询只有数据列A,则无法使用该索引。</li><li>哈希索引只支持等值比较查询,包括=、IN()、&lt;=&gt;（注意&lt;&gt;和&lt;=&gt;是不同的操作）。也不支持任何范围查询,例如WHERE price&gt;100。</li><li>访问哈希索引的数据非常快,除非有很多哈希冲突（不同的索引列值却有相同的哈希值）。当出现哈希冲突的时候,存储引擎必须遍历链表中所有的行指针,逐行进行比较,直到找到所有符合条件的行。</li><li>如果哈希冲突很多的话,一些索引维护操作的代价也会很高。例如,如果在某个选择性很低（哈希冲突很多）的列上建立哈希索引,那么当从表中删除一行时,存储引擎需要遍历对应哈希值的链表中的每一行,找到并删除对应行的引用,冲突越多,代价越大。</li></ul><h3 id="3-空间数据索引（R-Tree）"><a href="#3-空间数据索引（R-Tree）" class="headerlink" title="3.空间数据索引（R-Tree）"></a>3.空间数据索引（R-Tree）</h3><p>MyISAM表支持空间索引,可以用作地理数据存储。和B-Tree索引不同,这类索引无须前缀查询。空间索引会从所有维度来索引数据。查询时,可以有效地使用任意维度来组合查询。必须使用MySQL的GIS相关函数如MBRCONTAINS()等来维护数据。MySQL的GIS支持并不完善,所以大部分人都不会使用这个特性。开源关系数据库系统中对GIS的解决方案做得比较好的是PostgreSQL的PostGIS。</p><h3 id="4-全文索引"><a href="#4-全文索引" class="headerlink" title="4.全文索引"></a>4.全文索引</h3><p>全文索引是一种特殊类型的索引,它查找的是文本中的关键词,而不是直接比较索引中的值。全文搜索和其他几类索引的匹配方式完全不一样。它有许多需要注意的细节,如停用词、词干和复数、布尔搜索等。全文索引更类似于搜索引擎做的事情,而不是简单的WHERE条件匹配。</p><h3 id="5-其他索引类别"><a href="#5-其他索引类别" class="headerlink" title="5.其他索引类别"></a>5.其他索引类别</h3><p>还有很多第三方的存储引擎使用不同类型的数据结构来存储索引。例如TokuDB使用分形树索引（fractal tree index）,这是一类较新开发的数据结构,既有B-Tree的很多优点,也避免了B-Tree的一些缺点。如果通读完本章,可以看到很多关于InnoDB的主题,包括聚簇索引、覆盖索引等。多数情况下,针对InnoDB的讨论也都适用于TokuDB。ScaleDB使用Patricia tries（这个词不是拼写错误）,其他一些存储引擎技术如InfiniDB和Infobright则使用了一些特殊的数据结构来优化某些特殊的查询。</p><h4 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h4><ul><li>索引大大减少了服务器需要扫描的数据量。</li><li>索引可以帮助服务器避免排序和临时表。</li><li>索引可以将随机I/O变为顺序I/O。</li></ul><h2 id="二、高性能的索引策略"><a href="#二、高性能的索引策略" class="headerlink" title="二、高性能的索引策略"></a>二、高性能的索引策略</h2><p>例如,下面这个查询无法使用actor_id列的索引：   mysql&gt; SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5;</p><h3 id="1-前缀索引和索引选择性"><a href="#1-前缀索引和索引选择性" class="headerlink" title="1.前缀索引和索引选择性"></a>1.前缀索引和索引选择性</h3><p>有时候需要索引很长的字符列,这会让索引变得大且慢。一个策略是前面提到过的模拟哈希索引。但有时候这样做还不够,还可以做些什么呢？通常可以索引开始的部分字符,这样可以大大节约索引空间,从而提高索引效率。但这样也会降低索引的选择性。索引的选择性是指,不重复的索引值（也称为基数,cardinality）和数据表的记录总数（#T）的比值,范围从1/#T到1之间。索引的选择性越高则查询效率越高,因为选择性高的索引可以让MySQL在查找时过滤掉更多的行。唯一索引的选择性是1,这是最好的索引选择性,性能也是最好的。</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><ul><li><strong>优点</strong></li></ul><p>一种能使索引更小、更快的有效办法</p><ul><li><strong>缺点</strong></li></ul><p>MySQL无法使用前缀索引做ORDER BY和GROUP BY,也无法使用前缀索引做覆盖扫描</p><h4 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h4><p>如果查询中的列不是独立的,则MySQL就不会使用索引。“独立的列”是指索引列不能是表达式的一部分,也不能是函数的参数。例如,下面这个查询无法使用actor_id列的索引：   mysql&gt; SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5; 凭肉眼很容易看出WHERE中的表达式其实等价于actor_id=4,但是MySQL无法自动解析这个方程式。</p><h4 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h4><p><strong>索引合并</strong></p><p>查询能够同时使用这两个单列索引进行扫描,并将结果进行合并。</p><p><strong>是什么</strong></p><p>当WHERE子句中包含多个复杂条件的时候,MySQL能够访问单个表的多个索引以合并和交叉过滤的方式来定位需要查找的行</p><p><strong>使用方法</strong></p><ul><li>UNION ALL</li><li>OR条件的联合（union）</li><li>AND条件的相交（intersection）</li><li>组合前两种情况的联合及相交</li></ul><p><strong>类型</strong></p><p>type:<code>index_merge</code></p><p><strong>说明结果</strong></p><ul><li>当出现服务器对多个索引做相交操作时（通常有多个AND条件）,通常意味着需要一个包含所有相关列的多列索引,而不是多个独立的单列索引。</li><li>当服务器需要对多个索引做联合操作时（通常有多个OR条件）,通常需要耗费大量CPU和内存资源在算法的缓存、排序和合并操作上。特别是当其中有些索引的选择性不高,需要合并扫描返回的大量数据的时候。</li><li>更重要的是,优化器不会把这些计算到“查询成本”（cost）中,优化器只关心随机页面读取。这会使得查询的成本被“低估”,导致该执行计划还不如直接走全表扫描。这样做不但会消耗更多的CPU和内存资源,还可能会影响查询的并发性,但如果是单独运行这样的查询则往往会忽略对并发性的影响。通常来说,还不如像在MySQL 4.1或者更早的时代一样,将查询改写成UNION的方式往往更好。</li></ul><h3 id="2-选择合适的索引列顺序"><a href="#2-选择合适的索引列顺序" class="headerlink" title="2.选择合适的索引列顺序"></a>2.选择合适的索引列顺序</h3><h4 id="当不需要考虑排序和分组"><a href="#当不需要考虑排序和分组" class="headerlink" title="当不需要考虑排序和分组"></a>当不需要考虑排序和分组</h4><p><strong>办法</strong></p><p>将选择性最高的列放在前面通常是很好的。这时候索引的作用只是用于优化WHERE条件的查找。在这种情况下,这样设计的索引确实能够最快地过滤出需要的行,对于在WHERE子句中只使用了索引部分前缀列的查询来说选择性也更高。</p><p><strong>计算选择性</strong></p><p>看看各个WHERE条件的分支对应的数据基数有多大</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SUM</span>(staff_id = <span class="hljs-number">2</span>), <span class="hljs-keyword">SUM</span>(customer_id = <span class="hljs-number">584</span>) <span class="hljs-keyword">FROM</span> payment\G</span><br></pre></td></tr></table></figure><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> staff_id)/<span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> staff_id_selectivity,     &gt; <span class="hljs-keyword">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> customer_id)/<span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> customer_id_selectivity,     &gt; <span class="hljs-keyword">COUNT</span>(*)     &gt; <span class="hljs-keyword">FROM</span> payment\G</span><br></pre></td></tr></table></figure><h4 id="需要考虑排序和分组"><a href="#需要考虑排序和分组" class="headerlink" title="需要考虑排序和分组"></a>需要考虑排序和分组</h4><p><strong>聚簇索引</strong></p><p>一种数据存储方式,聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及所有的剩余列（在这个例子中是col2）</p><p><strong>实现方式</strong></p><p>InnoDB的聚簇索引实际上在同一个结构中保存了B-Tree索引和数据行。当表有聚簇索引时,它的数据行实际上存放在索引的叶子页（leaf page）中。</p><p><strong>限制</strong></p><p>因为无法同时把数据行存放在两个不同的地方,所以一个表只能有一个聚簇索引</p><p><strong>使用方式</strong></p><p>InnoDB将通过主键聚集数据,“被索引的列”就是主键列。如果没有定义主键,InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引,InnoDB会隐式定义一个主键来作为聚簇索引。</p><p><strong>聚簇索引的优点和缺点</strong></p><ul><li><p><strong>优点</strong></p><ul><li>可以把相关数据保存在一起。例如实现电子邮箱时,可以根据用户ID来聚集数据,这样只需要从磁盘读取少数的数据页就能获取某个用户的全部邮件。如果没有使用聚簇索引,则每封邮件都可能导致一次磁盘I/O。</li><li>数据访问更快。聚簇索引将索引和数据保存在同一个B-Tree中,因此从聚簇索引中获取数据通常比在非聚簇索引中查找要快。</li><li>使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>聚簇数据最大限度地提高了I/O密集型应用的性能,但如果数据全部都放在内存中,则访问的顺序就没那么重要了,聚簇索引也就没什么优势了。</li><li>插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到InnoDB表中速度最快的方式。但如果不是按照主键顺序加载数据,那么在加载完成后最好使用OPTIMIZE TABLE命令重新组织一下表。</li><li>更新聚簇索引列的代价很高,因为会强制InnoDB将每个被更新的行移动到新的位置。</li><li>基于聚簇索引的表在插入新行,或者主键被更新导致需要移动行的时候,可能面临“页分裂（page split）”的问题。当行的主键值要求必须将这一行插入到某个已满的页中时,存储引擎会将该页分裂成两个页面来容纳该行,这就是一次页分裂操作。页分裂会导致表占用更多的磁盘空间。</li><li>聚簇索引可能导致全表扫描变慢,尤其是行比较稀疏,或者由于页分裂导致数据存储不连续的时候。</li><li>二级索引（非聚簇索引）可能比想象的要更大,因为在二级索引的叶子节点包含了引用行的主键列。</li><li>二级索引访问需要两次索引查找,而不是一次。</li><li>答案在于二级索引中保存的“行指针”的实质。要记住,二级索引叶子节点保存的不是指向行的物理位置的指针,而是行的主键值。</li></ul></li></ul><h3 id="3-InnoDB和MyISAM的数据分布对比"><a href="#3-InnoDB和MyISAM的数据分布对比" class="headerlink" title="3.InnoDB和MyISAM的数据分布对比"></a>3.InnoDB和MyISAM的数据分布对比</h3><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p><strong>数据分布顺序</strong></p><p>MyISAM按照数据插入的顺序存储在磁盘上</p><p><strong>索引</strong></p><p>索引中的每个叶子节点包含“行号”。</p><p><code>key : 键值  value: 行号</code></p><blockquote><p>MyISAM中主键索引和其他索引在结构上没有什么不同。主键索引就是一个名为PRIMARY的唯一非空索引。</p></blockquote><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p><strong>数据分布顺序</strong></p><p>聚簇索引“就是”表</p><p><strong>索引</strong></p><p>InnoDB二级索引的叶子节点中存储的不是“行指针”,而是主键值</p><ul><li><p><strong>好处</strong></p><ul><li>减少了当出现行移动或者数据页分裂时二级索引的维护工作,InnoDB在移动行时无须更新二级索引中的这个“指针”。</li></ul></li><li><p><strong>坏处</strong></p><ul><li>使用主键值当作指针会让二级索引占用更多的空间</li></ul></li></ul><p><strong>在InnoDB表中按主键顺序插入行的策略</strong></p><ul><li><p>使用AUTO_INCREMENT自增列</p></li><li><p>最好避免随机的（不连续且值的分布范围非常大）聚簇索引,特别是对于I/O密集型的应用</p></li></ul><p><strong>使用UUID来作为聚簇索引则会很糟糕：它使得聚簇索引的插入变得完全随机,这是最坏的情况,使得数据没有任何聚集特性</strong></p><ul><li><strong>结果</strong><ul><li>索引占用的空间也更大</li><li>花费的时间更长</li></ul></li><li><strong>原因</strong><ul><li>因为写入是乱序的,InnoDB不得不频繁地做页分裂操作,以便为新的行分配空间。页分裂会导致移动大量数据,一次插入最少需要修改三个页而不是一个页。</li><li>由于频繁的页分裂,页会变得稀疏并被不规则地填充,所以最终数据会有碎片。</li><li>写入的目标页可能已经刷到磁盘上并从缓存中移除,或者是还没有被加载到缓存中,InnoDB在插入之前不得不先找到并从磁盘读取目标页到内存中。这将导致大量的随机I/O。</li><li>页的最大填充因子（InnoDB默认的最大填充因子是页大小的15/16,留出部分空间用于以后修改）</li></ul></li><li><strong>顺序的主键什么时候会造成更坏的结果</strong><ul><li>高并发工作负载,在InnoDB中按主键顺序插入可能会造成明显的争用<ul><li>原因<ul><li>并发插入可能导致间隙锁竞争</li></ul></li></ul></li><li>AUTO_INCREMENT锁机制</li><li>解决办法<ul><li>更改innodb_autoinc_lock_mode配置</li></ul></li></ul></li></ul><p><strong>二级索引（辅助索引）</strong></p><p>二级索引存储的是记录的主键,而不是数据存储的地址。</p><p><strong>覆盖索引</strong></p><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值,我们就称之为“覆盖索引”。</p><ul><li><strong>索引类型</strong><ul><li><code>Using index</code></li></ul></li><li><strong>成为覆盖索引的条件</strong><ul><li>WHERE条件中的列是有索引可以覆盖的,因此MySQL可以使用该索引找到对应的actor并检查title是否匹配,过滤之后再读取需要的数据行</li><li>覆盖索引必须要存储索引列的值,而哈希索引、空间索引和全文索引等都不存储索引列的值,所以MySQL只能使用B-Tree索引做覆盖索</li><li>不同的存储引擎实现覆盖索引的方式也不同,而且不是所有的引擎都支持覆盖索引（在写作本书时,Memory存储引擎就不支持覆盖索引）</li></ul></li><li><strong>如何使用覆盖索引</strong><ul><li>MySQL不能在索引中执行LIKE操作。这是底层存储引擎API的限制,MySQL 5.5和更早的版本中只允许在索引中做简单比较操作（例如等于、不等于以及大于）。MySQL能在索引中做最左前缀匹配的LIKE比较,因为该操作可以转换为简单的比较操作,但是如果是通配符开头的LIKE查询,存储引擎就无法做比较匹配。这种情况下,MySQL服务器只能提取数据行的值而不是索引值来做比较。</li></ul></li><li><strong>覆盖索引的好处</strong><ul><li>索引条目通常远小于数据行大小,所以如果只需要读取索引,那MySQL就会极大地减少数据访问量。这对缓存的负载非常重要,因为这种情况下响应时间大部分花费在数据拷贝上。覆盖索引对于I/O密集型的应用也有帮助,因为索引比数据更小,更容易全部放入内存中（这对于MyISAM尤其正确,因为MyISAM能压缩索引以变得更小）。</li><li>因为索引是按照列值顺序存储的（至少在单个页内是如此）,所以对于I/O密集型的范围查询会比随机从磁盘读取每一行数据的I/O要少得多。对于某些存储引擎,例如MyISAM和Percona XtraDB,甚至可以通过OPTIMIZE命令使得索引完全顺序排列,这让简单的范围查询能使用完全顺序的索引访问。</li><li>一些存储引擎如MyISAM在内存中只缓存索引,数据则依赖于操作系统来缓存,因此要访问数据需要一次系统调用。这可能会导致严重的性能问题,尤其是那些系统调用占了数据访问中的最大开销的场景。</li><li>由于InnoDB的聚簇索引,覆盖索引对InnoDB表特别有用。InnoDB的二级索引在叶子节点中保存了行的主键值,所以如果二级主键能够覆盖查询,则可以避免对主键索引的二次查询。</li></ul></li><li><strong>使用技巧</strong><ul><li>延迟关联<br>延迟了对列的访问。在查询的第一阶段MySQL可以使用覆盖索引</li></ul></li></ul><h3 id="4-索引条件推送"><a href="#4-索引条件推送" class="headerlink" title="4.索引条件推送"></a>4.索引条件推送</h3><p>ICP（index condition pushdown）是mysql利用索引（二级索引）元组和筛字段在索引中的where条件从表中提取数据记录的一种优化操作</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>存储引擎在访问索引的时候检查筛选字段在索引中的where条件（pushed index condition,推送的索引条件）,如果索引元组中的数据不满足推送的索引条件,那么就过滤掉该条数据记录。ICP（优化器）尽可能的把index condition的处理从server层下推到storage engine层。storage engine使用索引过滤不相关的数据,仅返回符合index condition条件的数据给server层。也是说数据过滤尽可能在storage engine层进行,而不是返回所有数据给server层,然后后再根据where条件进行过滤。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>set optimizer_switch = &quot;index_condition_pushdown=on&quot;</code></p><h3 id="5-使用索引扫描来做排序"><a href="#5-使用索引扫描来做排序" class="headerlink" title="5.使用索引扫描来做排序"></a>5.使用索引扫描来做排序</h3><h4 id="判断是否使用了索引来做排序"><a href="#判断是否使用了索引来做排序" class="headerlink" title="判断是否使用了索引来做排序"></a>判断是否使用了索引来做排序</h4><p>如果EXPLAIN出来的type列的值为“index”</p><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p><strong>单表</strong></p><p>只有当索引的列顺序和ORDER BY子句的顺序完全一致,并且所有列的排序方向（倒序或正序）都一样时</p><p><strong>关联多张表</strong></p><p>只有当ORDER BY子句引用的字段全部为第一个表时,才能使用索引做排序</p><h3 id="6-压缩（前缀压缩）索引"><a href="#6-压缩（前缀压缩）索引" class="headerlink" title="6.压缩（前缀压缩）索引"></a>6.压缩（前缀压缩）索引</h3><p>MyISAM使用前缀压缩来减少索引的大小,从而让更多的索引可以放入内存中,这在某些情况下能极大地提高性能</p><h4 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h4><p>MyISAM压缩每个索引块的方法是,先完全保存索引块中的第一个值,然后将其他值和第一个值进行比较得到相同前缀的字节数和剩余的不同后缀部分,把这部分存储起来即可</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>例如,索引块中的第一个值是“perform”,第二个值是“performance”,那么第二个值的前缀压缩后存储的是类似“7,ance”这样的形式。MyISAM对行指针也采用类似的前缀压缩方式。</p><p><strong>优点和缺点</strong></p><ul><li>优点<ul><li>压缩块使用更少的空间</li><li>这在某些情况下能极大地提高性能</li></ul></li><li>缺点<ul><li>代价是某些操作可能更慢</li></ul></li></ul><p><strong>适用范围</strong></p><p>对于CPU密集型应用,因为扫描需要随机查找,压缩索引使得MyISAM在索引查找上要慢好几倍。压缩索引的倒序扫描就更慢了。压缩索引需要在CPU内存资源与磁盘之间做权衡。压缩索引可能只需要十分之一大小的磁盘空间,如果是I/O密集型应用,对某些查询带来的好处会比成本多很多</p><p><strong>使用方法</strong></p><p>在CREATE TABLE语句中指定PACK_KEYS参数来控制索引压缩的方式</p><h3 id="7-冗余和重复索引"><a href="#7-冗余和重复索引" class="headerlink" title="7.冗余和重复索引"></a>7.冗余和重复索引</h3><h4 id="重复索引"><a href="#重复索引" class="headerlink" title="重复索引"></a>重复索引</h4><p>重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引。</p><p><strong>使用范围</strong></p><p>应该避免这样创建重复索引,发现以后也应该立即移除</p><h4 id="冗余索引"><a href="#冗余索引" class="headerlink" title="冗余索引"></a>冗余索引</h4><p>如果创建了索引（A,B）,再创建索引（A）就是冗余索引,因为这只是前一个索引的前缀索引。</p><p><strong>适用范围</strong></p><p>大多数情况下都不需要冗余索引,应该尽量扩展已有的索引而不是创建新索引。但也有时候出于性能方面的考虑需要冗余索引,因为扩展已有的索引会导致其变得太大,从而影响其他使用该索引的查询的性能。</p><p><strong>缺点</strong></p><p>表中的索引越多插入速度会越慢</p><p><strong>解决办法</strong></p><p>首先要做的是找出这样的索引。可以通过写一些复杂的访问INFORMATION_SCHEMA表的查询来找,不过还有两个更简单的方法。可使用Shlomi Noach的common_schema中的一些视图来定位</p><h3 id="8-未使用的索引"><a href="#8-未使用的索引" class="headerlink" title="8.未使用的索引"></a>8.未使用的索引</h3><p><strong>适用范围</strong></p><p>这样的索引完全是累赘,建议考虑删除(18)</p><p><strong>解决办法</strong></p><p>有两个工具可以帮助定位未使用的索引。最简单有效的办法是在Percona Server或者MariaDB中先打开userstates服务器变量（默认是关闭的）,然后让服务器正常运行一段时间,再通过查询INFORMATION_SCHEMA.INDEX_STATISTICS就能查到每个索引的使用频率。</p><h3 id="9-索引和锁"><a href="#9-索引和锁" class="headerlink" title="9.索引和锁"></a>9.索引和锁</h3><p>索引可以让查询锁定更少的行</p><h4 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h4><p>InnoDB只有在访问行的时候才会对其加锁,而索引能够减少InnoDB访问的行数,从而减少锁的数量。但这只有当InnoDB在存储引擎层能够过滤掉所有不需要的行时才有效。</p><p><strong>释放锁时机</strong></p><ul><li><p><strong>在早期的MySQL版本中</strong></p><ul><li>InnoDB只有在事务提交后才能释放锁</li></ul></li><li><p><strong>在MySQL 5.1和更新的版本及以后</strong></p><ul><li>InnoDB可以在服务器端过滤掉行后就释放锁</li></ul></li></ul><blockquote><p>注意:InnoDB在二级索引上使用共享（读）锁,但访问主键索引需要排他（写）锁。这消除了使用覆盖索引的可能性,并且使得<code>SELECT FOR UPDATE</code>比<code>LOCK IN SHARE MOD</code>E 或非锁定查询要慢很多</p></blockquote><h2 id="三、索引案例学习"><a href="#三、索引案例学习" class="headerlink" title="三、索引案例学习"></a>三、索引案例学习</h2><h3 id="1-支持多种过滤条件"><a href="#1-支持多种过滤条件" class="headerlink" title="1.支持多种过滤条件"></a>1.支持多种过滤条件</h3><h4 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h4><p>country列的选择性通常不高,但可能很多查询都会用到。sex列的选择性肯定很低,但也会在很多查询中用到。所以考虑到使用的频率,还是建议在创建不同组合索引的时候将（sex,country）列作为前缀。</p><h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p>但根据传统的经验不是说不应该在选择性低的列上创建索引的吗？那为什么这里要将两个选择性都很低的字段作为索引的前缀列?我们的脑子坏了?</p><h4 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h4><p>如前所述几乎所有的查询都会用到sex列。前面曾提到,几乎每一个查询都会用到sex列,甚至会把网站设计成每次都只能按某一种性别搜索用户,索引中加上这一列也没有坏处,即使查询没有使用sex列也可以通过下面的“诀窍”绕过。</p><h4 id="诀窍"><a href="#诀窍" class="headerlink" title="诀窍"></a>诀窍</h4><p>如果某个查询不限制性别,那么可以通过在查询条件中新增AND SEX IN（’m’,’f’）</p><blockquote><p>但这种技巧也不能滥用,否则可能会带来麻烦。因为每额外增加一个IN()条件,优化器需要做的组合都将以指数形式增加,最终可能会极大地降低查询性能。考虑下面的WHERE子句：   WHERE eye_color  IN(‘brown’,’blue’,’hazel’)    AND hair_color IN(‘black’,’red’,’blonde’,’brown’)    AND sex    IN(‘M’,’F’) 优化器则会转化成4×3×2=24种组合,执行计划需要检查WHERE子句中所有的24种组合。对于MySQL来说,24种组合并不是很夸张,但如果组合数达到上千个则需要特别小心。老版本的MySQL在IN()组合条件过多的时候会有很多问题。查询优化可能需要花很多时间,并消耗大量的内存。</p></blockquote><h3 id="2-避免多个范围条件"><a href="#2-避免多个范围条件" class="headerlink" title="2.避免多个范围条件"></a>2.避免多个范围条件</h3><ul><li>范围条件查询(x &gt; ? )</li><li>多个等值条件查询 (in(xxx))</li></ul><p><strong>类型</strong></p><p>type:<code>range</code></p><p><strong>效率</strong></p><ul><li>范围条件查询无法再使用范围列后面的其他索引列了</li><li>“多个等值条件查询”则没有这个限制</li></ul><h3 id="3-优化排序"><a href="#3-优化排序" class="headerlink" title="3.优化排序"></a>3.优化排序</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>使用了ORDER BY和LIMIT,如果没有索引的话会很慢。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>如果用户界面上需要翻页,并且翻页翻到比较靠后时查询也可能非常慢</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>对于那些选择性非常低的列,可以增加一些特殊的索引来做排序</li><li>反范式化、预先计算和缓存可能是解决这类查询的仅有策略</li><li>一个更好的办法是限制用户能够翻页的数量</li><li>使用延迟关联,通过使用覆盖索引查询返回需要的主键,再根据这些主键关联原表获得需要的行</li></ul><h2 id="四、维护索引和表"><a href="#四、维护索引和表" class="headerlink" title="四、维护索引和表"></a>四、维护索引和表</h2><h3 id="1-找到并修复损坏的表"><a href="#1-找到并修复损坏的表" class="headerlink" title="1.找到并修复损坏的表"></a>1.找到并修复损坏的表</h3><h4 id="检查是否发生了表损坏"><a href="#检查是否发生了表损坏" class="headerlink" title="检查是否发生了表损坏"></a>检查是否发生了表损坏</h4><p><code>CHECK TABLE</code></p><h4 id="修复损坏的表"><a href="#修复损坏的表" class="headerlink" title="修复损坏的表"></a>修复损坏的表</h4><p><code>REPAIR TABLE</code></p><h4 id="如果InnoDB引擎的表出现了损坏"><a href="#如果InnoDB引擎的表出现了损坏" class="headerlink" title="如果InnoDB引擎的表出现了损坏"></a>如果InnoDB引擎的表出现了损坏</h4><ul><li><strong>原因</strong><ul><li>如果发生损坏,一般要么是数据库的硬件问题例如内存或者磁盘问题（有可能）,要么是由于数据库管理员的错误例如在MySQL外部操作了数据文件（有可能）,抑或是InnoDB本身的缺陷（不太可能）。</li><li>常见的类似错误通常是由于尝试使用rsync备份InnoDB导致的。</li></ul></li><li><strong>解决步骤</strong><ul><li>可以通过设置innodb_force_recovery参数进入InnoDB的强制恢复模式来修复数据</li></ul></li></ul><h3 id="2-更新索引统计信息"><a href="#2-更新索引统计信息" class="headerlink" title="2.更新索引统计信息"></a>2.更新索引统计信息</h3><p>新版本的InnoDB可以通过参数innodb_stats_sample_pages来设置样本页的数量。设置更大的值,理论上来说可以帮助生成更准确的索引信息</p><h4 id="减少索引和数据的碎片"><a href="#减少索引和数据的碎片" class="headerlink" title="减少索引和数据的碎片"></a>减少索引和数据的碎片</h4><ul><li><strong>碎片产生的原因</strong><ul><li>B-Tree索引可能会碎片化,这会降低查询的效率。碎片化的索引可能会以很差或者无序的方式存储在磁盘上。</li></ul></li><li><strong>有三种类型的数据碎片</strong><ul><li>行碎片（Row fragmentation）<br> 这种碎片指的是数据行被存储为多个地方的多个片段中。即使查询只从索引中访问一行记录,行碎片也会导致性能下降。</li><li>行间碎片（Intra-row fragmentation）<br> 行间碎片是指逻辑上顺序的页,或者行在磁盘上不是顺序存储的。行间碎片对诸如全表扫描和聚簇索引扫描之类的操作有很大的影响,因为这些操作原本能够从磁盘上顺序存储的数据中获益。</li><li>剩余空间碎片（Free space fragmentation）<br> 剩余空间碎片是指数据页中有大量的空余空间。这会导致服务器读取大量不需要的数据,从而造成浪费。</li></ul></li><li><p><strong>产生范围</strong></p><ul><li>对于MyISAM表,这三类碎片化都可能发生。但InnoDB不会出现短小的行碎片；InnoDB会移动短小的行并重写到一个片段中。</li></ul></li><li><p><strong>解决办法</strong></p><ul><li>通过执行OPTIMIZE TABLE或者导出再导入的方式来重新整理数据。<br>对于那些不支持OPTIMIZE TABLE的存储引擎,可以通过一个不做任何操作（no-op）的ALTER TABLE操作来重建表。只需要将表的存储引擎修改为当前的引擎即可：  <code>ALTER TABLE &lt;table&gt; ENGINE=&lt;engine&gt;;</code></li></ul></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="1-在选择索引和编写利用这些索引的查询时-有如下三个原则"><a href="#1-在选择索引和编写利用这些索引的查询时-有如下三个原则" class="headerlink" title="1.在选择索引和编写利用这些索引的查询时,有如下三个原则"></a>1.在选择索引和编写利用这些索引的查询时,有如下三个原则</h3><ol><li>单行访问是很慢的。特别是在机械硬盘存储中（SSD的随机I/O要快很多,不过这一点仍然成立）。如果服务器从存储中读取一个数据块只是为了获取其中一行,那么就浪费了很多工作。最好读取的块中能包含尽可能多所需要的行。使用索引可以创建位置引用以提升效率。</li><li>按顺序访问范围数据是很快的,顺序I/O不需要多次磁盘寻道,所以比随机I/O要快很多（特别是对机械硬盘）。</li><li>第二,如果服务器能够按需要顺序读取数据,那么就不再需要额外的排序操作,并且GROUP BY查询也无须再做排序和将行按组进行聚合计算了。</li></ol><blockquote><p>索引覆盖查询是很快的。如果一个索引包含了查询需要的所有列,那么存储引擎就不需要再回表查找行。这避免了大量的单行访问,而上面的第1点已经写明单行访问是很慢的。</p></blockquote><h3 id="2-如何判断一个系统创建的索引是合理的呢？"><a href="#2-如何判断一个系统创建的索引是合理的呢？" class="headerlink" title="2.如何判断一个系统创建的索引是合理的呢？"></a>2.如何判断一个系统创建的索引是合理的呢？</h3><p>一般来说,我们建议按响应时间来对查询进行分析。找出那些消耗最长时间的查询或者那些给服务器带来最大压力的查询。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能 MySQL ｜ Schema 与数据类型优化</title>
      <link href="/2020/04/30/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(2)/"/>
      <url>/2020/04/30/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(2)/</url>
      
        <content type="html"><![CDATA[<p>MySQL 支持的数据类型非常多,选择正确的数据类型至关重要。下面的几个简单原则有助于做出更好的选择。</p><a id="more"></a><h2 id="一、更小的通常更好"><a href="#一、更小的通常更好" class="headerlink" title="一、更小的通常更好"></a>一、更小的通常更好</h2><p>一般情况下,应该尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快,因为他们占用更少的磁盘,内存和cpu缓存,并且处理时需要的cpu周期也更少。</p><h2 id="二、简单就好"><a href="#二、简单就好" class="headerlink" title="二、简单就好"></a>二、简单就好</h2><p>简单的数据类型操作通常需要更少的cpu周期。例如,整型比字符操作代价更低,因为字符集和校对规则（排序规则）使字符比较比整型更加复杂。注：应使用mysql内建的类型存储时间和日期,而不是字符串。</p><h2 id="三、Mysql很难优化包含NULL的列"><a href="#三、Mysql很难优化包含NULL的列" class="headerlink" title="三、Mysql很难优化包含NULL的列"></a>三、Mysql很难优化包含NULL的列</h2><ul><li>可为NULL的列使得索引、索引统计和值比较都更复杂</li><li>可为NULL的列会使用更多的存储空间</li><li>当可为NULL的列被索引时,每个索引记录需要一个额外的字节</li></ul><blockquote><p>通常把可为NULL的列改为NOT NULL带来的性能提升比较小,所以（调优时）没有必要首先在现有schema中查找并修改掉这种情况,除非确定这会导致问题。但是,如果计划在列上建索引,就应该尽量避免设计成可为NULL的列。</p></blockquote><h2 id="四、选择优化的数据类型"><a href="#四、选择优化的数据类型" class="headerlink" title="四、选择优化的数据类型"></a>四、选择优化的数据类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><h4 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h4><ul><li>UNSIGNED</li></ul><h4 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h4><ul><li>BIGINT</li><li>INT</li><li>MEDIUMINT</li><li>SMALLINT</li><li>TINYINT</li></ul><h3 id="2-实数类型"><a href="#2-实数类型" class="headerlink" title="2.实数类型"></a>2.实数类型</h3><h4 id="FLOAT"><a href="#FLOAT" class="headerlink" title="FLOAT"></a>FLOAT</h4><h4 id="DOUBLE"><a href="#DOUBLE" class="headerlink" title="DOUBLE"></a>DOUBLE</h4><h4 id="DECIMAL"><a href="#DECIMAL" class="headerlink" title="DECIMAL"></a>DECIMAL</h4><p>因为CPU不支持对DECIMAL的直接计算,所以在MySQL 5.0以及更高版本中,MySQL服务器自身实现了DECIMAL的高精度计算。相对而言,CPU直接支持原生浮点计算,所以浮点运算明显更快。</p><blockquote><p>因为需要额外的空间和计算开销,所以应该尽量只在对小数进行精确计算时才使用DECIMAL——例如存储财务数据。但在数据量比较大的时候,可以考虑使用BIGINT代替DECIMAL,将需要存储的货币单位根据小数的位数乘以相应的倍数即可。假设要存储财务数据精确到万分之一分,则可以把所有金额乘以一百万,然后将结果存储在BIGINT里,这样可以同时避免浮点存储计算不精确和DECIMAL精确计算代价高的问题。</p></blockquote><h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h3><h4 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h4><p>VARCHAR类型用于存储可变长字符串,是最常见的字符串数据类型。它比定长类型更节省</p><ul><li>需要使用1或2个额外字节记录字符串的长<ul><li>如果列的最大长度小于或等于255字节,只使用1个字节表示</li><li>否则使用2个字节。</li></ul></li><li>UPDATE时InnoDB可能分裂页,MyISAM会将行拆成不同的片段存储</li><li>面这些情况下使用VARCHAR是合适的<ul><li>字符串列的最大长度比平均长度大很多</li><li>列的更新很少,所以碎片不是问题</li><li>在5.0或者更高版本,MySQL在存储和检索时会保留末尾空格。但在4.1或更老的版本,MySQL会剔除末尾空格。</li></ul></li></ul><h4 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h4><ul><li>对于经常变更的数据,CHAR也比VARCHAR更好,因为定长的CHAR类型不容易产生碎片</li><li>CHAR适合存储很短的字符串</li><li>对于非常短的列,CHAR比VARCHAR在存储空间上也更有效率(因为VARCHAR还有一或两个记录长度的额外字节。)</li></ul><blockquote><p>使用VARCHAR（5）和VARCHAR（200）存储’hello’的空间开销是一样的。那么使用更短的列有什么优势吗？事实证明有很大的优势。更长的列会消耗更多的内存,因为MySQL通常会分配固定大小的内存块来保存内部值。尤其是使用内存临时表进行排序或操作时会特别糟糕。在利用磁盘临时表进行排序时也同样糟糕。</p></blockquote><h4 id="BLOB"><a href="#BLOB" class="headerlink" title="BLOB"></a>BLOB</h4><p>存储的是二进制数据</p><h4 id="TEXT"><a href="#TEXT" class="headerlink" title="TEXT"></a>TEXT</h4><p>字符集和排序规则</p><blockquote><p>当BLOB和TEXT值太大时,InnoDB会使用专门的“外部”存储区域来进行存储,此时每个值在行内需要1～4个字节存储一个指针,然后在外部存储区域存储实际的值。MySQL不能将BLOB和TEXT列全部长度的字符串进行索引</p></blockquote><h4 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h4><p>MySQL在内部会将每个值在列表中的位置保存为整数,并且在表的.frm文件中保存“数字-字符串”映射关系的“查找表”。</p><ul><li>枚举字段是按照内部存储的整数而不是定义的字符串进行排序的</li><li>由于MySQL把每个枚举值保存为整数,并且必须进行查找才能转换为字符串,所以枚举列有一些开销。</li></ul><h3 id="4-日期和时间类型"><a href="#4-日期和时间类型" class="headerlink" title="4.日期和时间类型"></a>4.日期和时间类型</h3><h4 id="TIMESTAMP"><a href="#TIMESTAMP" class="headerlink" title="TIMESTAMP"></a>TIMESTAMP</h4><ul><li>从1970年到2038年,精度为秒</li><li>MySQL提供了FROM_UNIXTIME()函数把Unix时间戳转换为日期,并提供了UNIX_TIMESTAMP()函数把日期转换为Unix时间戳。</li><li>4个字节的存储空间</li><li>TIMESTAMP显示的值也依赖于时区。</li><li>TIMESTAMP列默认为NOT NULL,设置这个列的值为当前时间</li></ul><h4 id="DATETIME"><a href="#DATETIME" class="headerlink" title="DATETIME"></a>DATETIME</h4><ul><li>从1001年到9999年,精度为秒</li><li>8个字节的存储空间</li><li>与时区无关</li></ul><blockquote><p>如果需要存储比秒更小粒度的日期和时间值怎么办？MySQL目前没有提供合适的数据类型,但是可以使用自己的存储格式：可以使用BIGINT类型存储微秒级别的时间截,或者使用DOUBLE存储秒之后的小数部分。这两种方式都可以,或者也可以使用MariaDB替代MySQL。</p></blockquote><h4 id="TIMESTAMP-与-DATETIME-选择"><a href="#TIMESTAMP-与-DATETIME-选择" class="headerlink" title="TIMESTAMP 与 DATETIME 选择"></a>TIMESTAMP 与 DATETIME 选择</h4><p>TIMESTAMP只使用DATETIME一半的存储空间,并且会根据时区变化,具有特殊的自动更新能力。另一方面,TIMESTAMP允许的时间范围要小得多,有时候它的特殊能力会成为障碍。</p><h3 id="5-位数据类型"><a href="#5-位数据类型" class="headerlink" title="5.位数据类型"></a>5.位数据类型</h3><h4 id="BIT"><a href="#BIT" class="headerlink" title="BIT"></a>BIT</h4><h4 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h4><h3 id="6-选择标识符（identifier）"><a href="#6-选择标识符（identifier）" class="headerlink" title="6.选择标识符（identifier）"></a>6.选择标识符（identifier）</h3><h4 id="完全“随机”的字符串"><a href="#完全“随机”的字符串" class="headerlink" title="完全“随机”的字符串"></a>完全“随机”的字符串</h4><ul><li>因为插入值会随机地写到索引的不同位置,所以使得INSERT语句更慢。这会导致页分裂、磁盘随机访问,以及对于聚簇存储引擎产生聚簇索引碎片。</li><li>SELECT语句会变得更慢,因为逻辑上相邻的行会分布在磁盘和内存的不同地方</li><li>随机值导致缓存对所有类型的查询语句效果都很差,因为会使得缓存赖以工作的访问局部性原理失效。如果整个数据集都一样的“热”,那么缓存任何一部分特定数据到内存都没有好处；如果工作集比内存大,缓存将会有很多刷新和不命中。</li></ul><blockquote><p>UUID()生成的值与加密散列函数例如SHA1()生成的值有不同的特征：UUID值虽然分布也不均匀,但还是有一定顺序,如果存储UUID值,则应该移除“-”符号；</p></blockquote><h3 id="7-特殊类型数据"><a href="#7-特殊类型数据" class="headerlink" title="7.特殊类型数据"></a>7.特殊类型数据</h3><p>人们经常使用VARCHAR（15）列来存储IP地址。然而,它们实际上是32位无符号整数,不是字符串。用小数点将地址分成四段的表示方法只是为了让人们阅读容易。所以应该用无符号整数存储IP地址。MySQL提供INET_ATON()和INET_NTOA()函数在这两种表示方法之间转换。</p><blockquote><p>良好的schema设计原则是普遍适用的,但MySQL有它自己的实现细节要注意。概括来说,尽可能保持任何东西小而简单总是好的。MySQL喜欢简单,需要使用数据库的人应该也同样会喜欢简单的原则：尽量避免过度设计,例如会导致极其复杂查询的schema设计,或者有很多列的表设计（很多的意思是介于有点多和非常多之间）。使用小而简单的合适数据类型,除非真实数据模型中有确切的需要,否则应该尽可能地避免使用NULL值。尽量使用相同的数据类型存储相似或相关的值,尤其是要在关联条件中使用的列。注意可变长字符串,其在临时表和排序时可能导致悲观的按最大长度分配内存。尽量使用整型定义标识列。避免使用MySQL已经遗弃的特性,例如指定浮点数的精度,或者整数的显示宽度。小心使用ENUM和SET。虽然它们用起来很方便,但是不要滥用,否则有时候会变成陷阱。最好避免使用BIT。</p></blockquote><h2 id="Schema-设计中的陷阱"><a href="#Schema-设计中的陷阱" class="headerlink" title="Schema 设计中的陷阱"></a>Schema 设计中的陷阱</h2><p>虽然有一些普遍的好或坏的设计原则,但也有一些问题是由MySQL的实现机制导致的,这意味着有可能犯一些只在MySQL下发生的特定错误。本节我们讨论设计MySQL的schema的问题。这也许会帮助你避免这些错误,并且选择在MySQL特定实现下工作得更好的替代方案。</p><h4 id="太多的列"><a href="#太多的列" class="headerlink" title="太多的列"></a>太多的列</h4><p>MySQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据,然后在服务器层将缓冲内容解码成各个列。从行缓冲中将编码过的列转换成行数据结构的操作代价是非常高的。MyISAM的定长行结构实际上与服务器层的行结构正好匹配,所以不需要转换。然而,MyISAM的变长行结构和InnoDB的行结构则总是需要转换。转换的代价依赖于列的数量。当我们研究一个CPU占用非常高的案例时,发现客户使用了非常宽的表（数千个字段）,然而只有一小部分列会实际用到,这时转换的代价就非常高。如果计划使用数千个字段,必须意识到服务器的性能运行特征会有一些不同。</p><h4 id="太多的关联"><a href="#太多的关联" class="headerlink" title="太多的关联"></a>太多的关联</h4><p>所谓的“实体-属性-值”（EAV）设计模式是一个常见的糟糕设计模式,尤其是在MySQL下不能靠谱地工作。MySQL限制了每个关联操作最多只能有61张表,但是EAV数据库需要许多自关联。我们见过不少EAV数据库最后超过了这个限制。事实上在许多关联少于61张表的情况下,解析和优化查询的代价也会成为MySQL的问题。一个粗略的经验法则,如果希望查询执行得快速且并发性好,单个查询最好在12个表以内做关联。</p><h4 id="全能的枚举"><a href="#全能的枚举" class="headerlink" title="全能的枚举"></a>全能的枚举</h4><p>注意防止过度使用枚举（ENUM）。下面是我们见过的一个例子：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ... (       </span><br><span class="line">country enum(<span class="hljs-string">''</span>,<span class="hljs-string">'0'</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,...,<span class="hljs-string">'31'</span>)</span><br></pre></td></tr></table></figure><p>这种模式的schema设计非常凌乱。这么使用枚举值类型也许在任何支持枚举类型的数据库都是一个有问题的设计方案,这里应该用整数作为外键关联到字典表或者查找表来查找具体值。但是在MySQL中,当需要在枚举列表中增加一个新的国家时就要做一次ALTER TABLE操作。在MySQL 5.0以及更早的版本中ALTER TABLE是一种阻塞操作；即使在5.1和更新版本中,如果不是在列表的末尾增加值也会一样需要ALTER TABLE。</p><h4 id="变相的枚举"><a href="#变相的枚举" class="headerlink" title="变相的枚举"></a>变相的枚举</h4><p>枚举（ENUM）列允许在列中存储一组定义值中的单个值,集合（SET）列则允许在列中存储一组定义值中的一个或多个值。有时候这可能比较容易导致混乱。这是一个例子：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ... (       </span><br><span class="line">is_default <span class="hljs-keyword">set</span> (<span class="hljs-string">'Y'</span>,<span class="hljs-string">'N'</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">'N'</span></span><br></pre></td></tr></table></figure><h4 id="非此发明（Not-Invent-Here）的NULL"><a href="#非此发明（Not-Invent-Here）的NULL" class="headerlink" title="非此发明（Not Invent Here）的NULL"></a>非此发明（Not Invent Here）的NULL</h4><p>我们之前写了避免使用NULL的好处,并且建议尽可能地考虑替代方案。即使需要存储一个事实上的“空值”到表中时,也不一定非得使用NULL。也许可以使用0、某个特殊值,或者空字符串作为代替</p><h2 id="五、范式和反范式"><a href="#五、范式和反范式" class="headerlink" title="五、范式和反范式"></a>五、范式和反范式</h2><p>对于任何给定的数据通常都有很多种表示方法,从完全的范式化到完全的反范式化,以及两者的折中。在范式化的数据库中,每个事实数据会出现并且只出现一次。相反,在反范式化的数据库中,信息是冗余的,可能会存储在多个地方。</p><h4 id="1-范式的优点和缺点"><a href="#1-范式的优点和缺点" class="headerlink" title="1.范式的优点和缺点"></a>1.范式的优点和缺点</h4><h5 id="范式化通常能够带来好处"><a href="#范式化通常能够带来好处" class="headerlink" title="范式化通常能够带来好处"></a>范式化通常能够带来好处</h5><ul><li>范式化的更新操作通常比反范式化要快。</li><li>当数据较好地范式化时,就只有很少或者没有重复数据,所以只需要修改更少的数据。</li><li>范式化的表通常更小,可以更好地放在内存里,所以执行操作会更快。</li><li>很少有多余的数据意味着检索列表数据时更少需要DISTINCT或者GROUP BY语句。还是前面的例子：在非范式化的结构中必须使用DISTINCT或者GROUP BY才能获得一份唯一的部门列表,但是如果部门（DEPARTMENT）是一张单独的表,则只需要简单的查询这张表就行了。</li></ul><h5 id="范式化设计的schema的缺点"><a href="#范式化设计的schema的缺点" class="headerlink" title="范式化设计的schema的缺点"></a>范式化设计的schema的缺点</h5><p>通常需要关联。</p><h5 id="反范式的优点和缺点"><a href="#反范式的优点和缺点" class="headerlink" title="反范式的优点和缺点"></a>反范式的优点和缺点</h5><p>反范式化的schema因为所有数据都在一张表中,可以很好地避免关联。 如果不需要关联表,则对大部分查询最差的情况——即使表没有使用索引——是全表扫描。当数据比内存大时这可能比关联要快得多,因为这样避免了随机 I/O 。</p><h4 id="2-混用范式化和反范式化"><a href="#2-混用范式化和反范式化" class="headerlink" title="2.混用范式化和反范式化"></a>2.混用范式化和反范式化</h4><p>事实是,完全的范式化和完全的反范式化schema都是实验室里才有的东西：在真实世界中很少会这么极端地使用。在实际应用中经常需要混用,可能使用部分范式化的schema、缓存表,以及其他技巧。</p><p>最常见的反范式化数据的方法是复制或者缓存,在不同的表中存储相同的特定列。在MySQL 5.0和更新版本中,可以使用触发器更新缓存值,这使得实现这样的方案变得更简单。</p><h2 id="六、缓存表和汇总表"><a href="#六、缓存表和汇总表" class="headerlink" title="六、缓存表和汇总表"></a>六、缓存表和汇总表</h2><h4 id="1-物化视图"><a href="#1-物化视图" class="headerlink" title="1.物化视图"></a>1.物化视图</h4><p><strong>TODO</strong></p><h4 id="2-计数器表"><a href="#2-计数器表" class="headerlink" title="2.计数器表"></a>2.计数器表</h4><p><strong>TODO</strong></p><h4 id="3-加快ALTER-TABLE操作的速度"><a href="#3-加快ALTER-TABLE操作的速度" class="headerlink" title="3.加快ALTER TABLE操作的速度"></a>3.加快ALTER TABLE操作的速度</h4><h5 id="只修改-frm文件"><a href="#只修改-frm文件" class="headerlink" title="只修改.frm文件"></a>只修改.frm文件</h5><p><strong>下面这些操作是有可能不需要重建表的</strong></p><ul><li>移除（不是增加）一个列的AUTO_INCREMENT属性。</li><li>增加、移除,或更改ENUM和SET常量。如果移除的是已经有行数据用到其值的常量,查询将会返回一个空字串值。</li></ul><p><strong>修改方法</strong></p><ol><li>创建一张有相同结构的空表,并进行所需要的修改（例如增加ENUM常量）。</li><li>执行<code>FLUSH TABLES WITH READ LOCK</code>。这将会关闭所有正在使用的表,并且禁止任何表被打开。</li><li>交换.frm文件</li><li>执行<code>UNLOCK TABLES</code>来释放第2步的读锁</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能 MySQL ｜ MySQL 逻辑架构</title>
      <link href="/2020/04/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(1)/"/>
      <url>/2020/04/28/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql(1)/</url>
      
        <content type="html"><![CDATA[<p>MySQL 的逻辑架构分为三层,客户端,服务器,存储引擎。</p><a id="more"></a><h2 id="一、逻辑架构"><a href="#一、逻辑架构" class="headerlink" title="一、逻辑架构"></a>一、逻辑架构</h2><p><img src="https://md.ulovecode.com/static/images/posts/mysql-structure-01.png" alt="架构图"></p><h4 id="1-客户端"><a href="#1-客户端" class="headerlink" title="1.客户端"></a>1.客户端</h4><p>第一层负责连接管理、授权认证、安全等等。每个客户端的连接都对应着服务器上的一个线程。服务器上维护了一个线程池,避免为每个连接都创建销毁一个线程。当客户端连接到MySQL服务器时,服务器对其进行认证。可以通过用户名和密码的方式进行认证,也可以通过SSL证书进行认证。登录认证通过后,服务器还会验证该客户端是否有执行某个查询的权限。</p><h4 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2.服务器"></a>2.服务器</h4><p>第二层架构是MySQL比较有意思的部分。大多数MySQL的核心服务功能都在这一层,包括查询解析、分析、优化、缓存以及所有的内置函数（例如,日期、时间、数学和加密函数）,所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。</p><ol><li>连接/线程处理</li><li>查询缓存</li><li>解析器</li><li>优化器</li></ol><h4 id="3-存储引擎"><a href="#3-存储引擎" class="headerlink" title="3.存储引擎"></a>3.存储引擎</h4><p>第三层包含了存储引擎。存储引擎负责MySQL中数据的存储和提取。和GNU/Linux下的各种文件系统一样,每个存储引擎都有它的优势和劣势。服务器通过API与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异,使得这些差异对上层的查询过程透明。存储引擎API包含几十个底层函数,用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作。但存储引擎不会去解析SQL(1),不同存储引擎之间也不会相互通信,而只是简单地响应上层服务器的请求。</p><h5 id="执行与优化过程"><a href="#执行与优化过程" class="headerlink" title="执行与优化过程"></a>执行与优化过程</h5><ol><li>解析查询</li><li>创建内部数据结构（解析树）</li><li>重写查询</li><li>决定表的读取顺序</li><li>选择合适的索引</li></ol><blockquote><p>对其进行各种优化,用户可以通过特殊的关键字提示（hint）优化器,影响它的决策过程。也可以请求优化器解释（explain）优化过程的各个因素</p></blockquote><h2 id="二、并发控制"><a href="#二、并发控制" class="headerlink" title="二、并发控制"></a>二、并发控制</h2><h4 id="1-读写锁"><a href="#1-读写锁" class="headerlink" title="1.读写锁"></a>1.读写锁</h4><h5 id="共享锁（shared-lock）-也叫读锁（read-lock）"><a href="#共享锁（shared-lock）-也叫读锁（read-lock）" class="headerlink" title="共享锁（shared lock）,也叫读锁（read lock）"></a>共享锁（shared lock）,也叫读锁（read lock）</h5><p>读锁是共享的,或者说是相互不阻塞的。多个客户在同一时刻可以同时读取同一个资源,而互不干扰。</p><h5 id="写锁（write-lock）-也叫排他锁（exclusive-lock）"><a href="#写锁（write-lock）-也叫排他锁（exclusive-lock）" class="headerlink" title="写锁（write lock）,也叫排他锁（exclusive lock）"></a>写锁（write lock）,也叫排他锁（exclusive lock）</h5><p>写锁则是排他的,也就是说一个写锁会阻塞其他的写锁和读锁,这是出于安全策略的考虑,只有这样,才能确保在给定的时间里,只有一个用户能执行写入,并防止其他用户读取正在写入的同一资源。</p><h4 id="2-锁粒度"><a href="#2-锁粒度" class="headerlink" title="2.锁粒度"></a>2.锁粒度</h4><h5 id="表锁（table-lock）"><a href="#表锁（table-lock）" class="headerlink" title="表锁（table lock）"></a>表锁（table lock）</h5><p>表锁是MySQL中最基本的锁策略,并且是开销最小的策略。表锁非常类似于前文描述的邮箱加锁机制：它会锁定整张表。一个用户在对表进行写操作（插入、删除、更新等）前,需要先获得写锁,这会阻塞其他用户对该表的所有读写操作。只有没有写锁时,其他读取的用户才能获得读锁,读锁之间是不相互阻塞的。</p><h5 id="行级锁（row-lock）"><a href="#行级锁（row-lock）" class="headerlink" title="行级锁（row lock）"></a>行级锁（row lock）</h5><p>行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）。众所周知,在InnoDB和XtraDB,以及其他一些存储引擎中实现了行级锁。行级锁只在存储引擎层实现,而 MySQL 服务器层没有实现。服务器层完全不了解存储引擎中的锁实现。</p><h2 id="三、事物"><a href="#三、事物" class="headerlink" title="三、事物"></a>三、事物</h2><h4 id="1-ACID-特性"><a href="#1-ACID-特性" class="headerlink" title="1.ACID 特性"></a>1.ACID 特性</h4><h5 id="原子性（atomicity）"><a href="#原子性（atomicity）" class="headerlink" title="原子性（atomicity）"></a>原子性（atomicity）</h5><p>一个事务必须被视为一个不可分割的最小工作单元,整个事务中的所有操作要么全部提交成功,要么全部失败回滚,对于一个事务来说,不可能只执行其中的一部分操作,这就是事务的原子性。</p><h5 id="一致性（consistency）"><a href="#一致性（consistency）" class="headerlink" title="一致性（consistency）"></a>一致性（consistency）</h5><p>数据库总是从一个一致性的状态转换到另外一个一致性的状态。在前面的例子中,一致性确保了,即使在执行第三、四条语句之间时系统崩溃,支票账户中也不会损失200美元,因为事务最终没有提交,所以事务中所做的修改也不会保存到数据库中。</p><h5 id="隔离性（isolation）"><a href="#隔离性（isolation）" class="headerlink" title="隔离性（isolation）"></a>隔离性（isolation）</h5><p>通常来说,一个事务所做的修改在最终提交以前,对其他事务是不可见的。在前面的例子中,当执行完第三条语句、第四条语句还未开始时,此时有另外一个账户汇总程序开始运行,则其看到的支票账户的余额并没有被减去200美元。后面我们讨论隔离级别（Isolation level）的时候,会发现为什么我们要说“通常来说”是不可见的。</p><h5 id="持久性（durability）"><a href="#持久性（durability）" class="headerlink" title="持久性（durability）"></a>持久性（durability）</h5><p>一旦事务提交,则其所做的修改就会永久保存到数据库中。此时即使系统崩溃,修改的数据也不会丢失。持久性是个有点模糊的概念,因为实际上持久性也分很多不同的级别。有些持久性策略能够提供非常强的安全保障,而有些则未必。而且不可能有能做到100％的持久性保证的策略（如果数据库本身就能做到真正的持久性,那么备份又怎么能增加持久性呢？）。在后面的一些章节中,我们会继续讨论MySQL中持久性的真正含义。</p><h4 id="2-隔离级别"><a href="#2-隔离级别" class="headerlink" title="2.隔离级别"></a>2.隔离级别</h4><h5 id="READ-UNCOMMITTED（未提交读）"><a href="#READ-UNCOMMITTED（未提交读）" class="headerlink" title="READ UNCOMMITTED（未提交读）"></a>READ UNCOMMITTED（未提交读）</h5><p>在READ UNCOMMITTED级别,事务中的修改,即使没有提交,对其他事务也都是可见的。事务可以读取未提交的数据,这也被称为脏读（Dirty Read）。这个级别会导致很多问题,从性能上来说,READ UNCOMMITTED不会比其他的级别好太多,但却缺乏其他级别的很多好处,除非真的有非常必要的理由,在实际应用中一般很少使用。</p><h5 id="READ-COMMITTED（提交读）"><a href="#READ-COMMITTED（提交读）" class="headerlink" title="READ COMMITTED（提交读）"></a>READ COMMITTED（提交读）</h5><p>大多数数据库系统的默认隔离级别都是READ COMMITTED（但MySQL不是）。READ COMMITTED满足前面提到的隔离性的简单定义：一个事务开始时,只能“看见”已经提交的事务所做的修改。换句话说,一个事务从开始直到提交之前,所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读（nonrepeatable read）,因为两次执行同样的查询,可能会得到不一样的结果。</p><h5 id="REPEATABLE-READ（可重复读）"><a href="#REPEATABLE-READ（可重复读）" class="headerlink" title="REPEATABLE READ（可重复读）"></a>REPEATABLE READ（可重复读）</h5><p>REPEATABLE READ解决了脏读的问题。该级别保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上,可重复读隔离级别还是无法解决另外一个幻读（Phantom Read）的问题。所谓幻读,指的是当某个事务在读取某个范围内的记录时,另外一个事务又在该范围内插入了新的记录,当之前的事务再次读取该范围的记录时,会产生幻行（Phantom Row）。InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC,Multiversion Concurrency Control）解决了幻读的问题。本章稍后会做进一步的讨论。</p><blockquote><p>可重复读是MySQL的默认事务隔离级别</p></blockquote><h5 id="SERIALIZABLE（可串行化）"><a href="#SERIALIZABLE（可串行化）" class="headerlink" title="SERIALIZABLE（可串行化）"></a>SERIALIZABLE（可串行化）</h5><p>SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行,避免了前面说的幻读的问题。简单来说,SERIALIZABLE会在读取的每一行数据上都加锁,所以可能导致大量的超时和锁争用的问题。实际应用中也很少用到这个隔离级别,只有在非常需要确保数据的一致性而且可以接受没有并发的情况下,才考虑采用该级别。</p><h4 id="3-死锁"><a href="#3-死锁" class="headerlink" title="3.死锁"></a>3.死锁</h4><h5 id="死锁的产生有双重原因"><a href="#死锁的产生有双重原因" class="headerlink" title="死锁的产生有双重原因"></a>死锁的产生有双重原因</h5><ol><li>有些是因为真正的数据冲突</li><li>有些则完全是由于存储引擎的实现方式导致的</li></ol><h5 id="系统的解决办法"><a href="#系统的解决办法" class="headerlink" title="系统的解决办法"></a>系统的解决办法</h5><p>InnoDB目前处理死锁的方法是,将持有最少行级排他锁的事务进行回滚（这是相对比较简单的死锁回滚算法）。</p><ol><li><strong>超时机制</strong></li></ol><p>就是当查询的时间达到锁等待超时的设定后放弃锁请求,这种方式通常来说不太好。</p><ol start="2"><li><strong>死锁检测</strong></li></ol><p>比如InnoDB存储引擎,越能检测到死锁的循环依赖,并立即返回一个错误。</p><blockquote><p>死锁发生以后,只有部分或者完全回滚其中一个事务,才能打破死锁。</p></blockquote><h5 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h5><ol><li>预写式日志（Write-Ahead Logging）,追加的方式,因此写日志的操作是磁盘上一小块区域内的顺序I/O,而不像随机I/O需要在磁盘的多个地方移动磁头,所以采用事务日志的方式相对来说要快得多。</li><li>写回磁盘</li></ol><h4 id="4-MySQL中的事务"><a href="#4-MySQL中的事务" class="headerlink" title="4.MySQL中的事务"></a>4.MySQL中的事务</h4><h5 id="事务型的存储引擎"><a href="#事务型的存储引擎" class="headerlink" title="事务型的存储引擎"></a>事务型的存储引擎</h5><ul><li>InnoDB</li><li>NDB Cluster</li><li>第三方存储引擎</li></ul><h5 id="自动提交（AUTOCOMMIT）"><a href="#自动提交（AUTOCOMMIT）" class="headerlink" title="自动提交（AUTOCOMMIT）"></a>自动提交（AUTOCOMMIT）</h5><p>MySQL默认采用自动提交（AUTOCOMMIT）模式。</p><h5 id="隐式和显式锁定"><a href="#隐式和显式锁定" class="headerlink" title="隐式和显式锁定"></a>隐式和显式锁定</h5><p><strong>隐式锁定</strong></p><p>在事务执行过程中,随时都可以执行锁定,锁只有在执行COMMIT或者ROLLBACK的时候才会释放,并且所有的锁是在同一时刻被释放。InnoDB会根据隔离级别在需要的时候自动加锁。</p><p><strong>显式锁定</strong></p><p>除了事务中禁用了AUTOCOMMIT,可以使用LOCK TABLES之外,其他任何时候都不要显式地执行LOCK TABLES,不管使用的是什么存储引擎。</p><ul><li>FOR UPDATE</li><li>LOCK TABLES</li></ul><h2 id="四、多版本并发控制（MVCC）"><a href="#四、多版本并发控制（MVCC）" class="headerlink" title="四、多版本并发控制（MVCC）"></a>四、多版本并发控制（MVCC）</h2><h4 id="1-两种实现原理"><a href="#1-两种实现原理" class="headerlink" title="1.两种实现原理"></a>1.两种实现原理</h4><p>通过保存数据在某个时间点的快照来实现的</p><ul><li>乐观（optimistic）并发控制</li><li>悲观（pessimistic）并发控制</li></ul><h4 id="2-InnoDB的MVCC的实现原理"><a href="#2-InnoDB的MVCC的实现原理" class="headerlink" title="2.InnoDB的MVCC的实现原理"></a>2.InnoDB的MVCC的实现原理</h4><p>通过在每行记录后面保存两个隐藏的列来实现的</p><ul><li>行的创建时间</li><li>行的过期时间（或删除时间）</li></ul><blockquote><p>当然存储的并不是实际的时间值,而是系统版本号（system version number）。每开始一个新的事务,系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号,用来和查询到的每行记录的版本号进行比较。</p></blockquote><h5 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h5><ul><li>只查找版本早于当前事务版本的数据行</li><li>行的删除版本要么未定义,要么大于当前事务版本号</li></ul><h5 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h5><p>为新插入的每一行保存当前系统版本号作为行版本号</p><h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><p>为删除的每一行保存当前系统版本号作为行删除标识</p><h5 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h5><p>为插入一行新记录,保存当前系统版本号作为行版本号,同时保存当前系统版本号到原来的行作为行删除标识。</p><blockquote><p>MVCC 只在<code>REPEATABLE READ</code>和<code>READ COMMITTED</code>两个隔离级别下工作。其他两个隔离级别都和 MVCC 不兼容,因为<code>READ UNCOMMITTED</code>总是读取最新的数据行,而不是符合当前事务版本的数据行。而<code>SERIALIZABLE</code>则会对所有读取的行都加锁。</p></blockquote><h2 id="五、存储引擎"><a href="#五、存储引擎" class="headerlink" title="五、存储引擎"></a>五、存储引擎</h2><h4 id="1-InnoDB存储引擎-事务型的数据库"><a href="#1-InnoDB存储引擎-事务型的数据库" class="headerlink" title="1.InnoDB存储引擎(事务型的数据库)"></a>1.InnoDB存储引擎(事务型的数据库)</h4><p>InnoDB采用MVCC来支持高并发,并且实现了四个标准的隔离级别。其默认级别是REPEATABLE READ（可重复读）,并且通过间隙锁（next-key locking）策略防止幻读的出现。间隙锁使得InnoDB不仅仅锁定查询涉及的行,还会对索引中的间隙进行锁定,以防止幻影行的插入。</p><ul><li>从磁盘读取数据时采用的可预测性预读</li><li>加速插入操作的插入缓冲区（insert buffer）</li><li>索引<ul><li>基于聚簇索引,聚簇索引对主键查询有很高的性能。</li><li>二级索引,二级索引（secondary index,非主键索引）中必须包含主键列,所以如果主键列很大的话,其他的所有索引都会很大。因此,若表上的索引较多的话,主键应当尽可能的小。</li><li>自适应哈希索引,能够自动在内存中创建hash索引以加速读操作。</li></ul></li></ul><h4 id="2-MyISAM存储引擎-非事务型的数据库"><a href="#2-MyISAM存储引擎-非事务型的数据库" class="headerlink" title="2.MyISAM存储引擎(非事务型的数据库)"></a>2.MyISAM存储引擎(非事务型的数据库)</h4><p>MyISAM提供了大量的特性,包括全文索引、压缩、空间函数（GIS）等,但MyISAM不支持事务和行级锁,而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。</p><h4 id="3-Archive引擎-非事务型的数据库"><a href="#3-Archive引擎-非事务型的数据库" class="headerlink" title="3.Archive引擎(非事务型的数据库)"></a>3.Archive引擎(非事务型的数据库)</h4><p>Archive存储引擎只支持INSERT和SELECT操作,在MySQL 5.1之前也不支持索引。Archive引擎会缓存所有的写并利用zlib对插入的行进行压缩,所以比MyISAM表的磁盘I/O更少。但是每次SELECT查询都需要执行全表扫描。所以Archive表适合日志和数据采集类应用,这类应用做数据分析时往往需要全表扫描。或者在一些需要更快速的INSERT操作的场合下也可以使用。Archive引擎支持行级锁和专用的缓冲区,所以可以实现高并发的插入。在一个查询开始直到返回表中存在的所有行数之前,Archive引擎会阻止其他的SELECT执行,以实现一致性读。另外,也实现了批量插入在完成之前对读操作是不可见的。这种机制模仿了事务和MVCC的一些特性,但Archive引擎不是一个事务型的引擎,而是一个针对高速插入和压缩做了优化的简单引擎。</p><h4 id="4-Blackhole引擎"><a href="#4-Blackhole引擎" class="headerlink" title="4.Blackhole引擎"></a>4.Blackhole引擎</h4><p>Blackhole引擎没有实现任何的存储机制,它会丢弃所有插入的数据,不做任何保存。但是服务器会记录Blackhole表的日志,所以可以用于复制数据到备库,或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥作用。但这种应用方式我们碰到过很多问题,因此并不推荐。</p><h4 id="5-CSV引擎"><a href="#5-CSV引擎" class="headerlink" title="5.CSV引擎"></a>5.CSV引擎</h4><p>CSV引擎可以将普通的CSV文件（逗号分割值的文件）作为MySQL的表来处理,但这种表不支持索引。CSV引擎可以在数据库运行时拷入或者拷出文件。可以将Excel等电子表格软件中的数据存储为CSV文件,然后复制到MySQL数据目录下,就能在MySQL中打开使用。同样,如果将数据写入到一个CSV引擎表,其他的外部程序也能立即从表的数据文件中读取CSV格式的数据。因此CSV引擎可以作为一种数据交换的机制,非常有用。</p><h4 id="6-Federated引擎"><a href="#6-Federated引擎" class="headerlink" title="6.Federated引擎"></a>6.Federated引擎</h4><p>Federated引擎是访问其他MySQL服务器的一个代理,它会创建一个到远程MySQL服务器的客户端连接,并将查询传输到远程服务器执行,然后提取或者发送需要的数据。最初设计该存储引擎是为了和企业级数据库如Microsoft SQL Server和Oracle的类似特性竞争的,可以说更多的是一种市场行为。尽管该引擎看起来提供了一种很好的跨服务器的灵活性,但也经常带来问题,因此默认是禁用的。MariaDB使用了它的一个后续改进版本,叫做FederatedX。</p><h4 id="7-Memory引擎"><a href="#7-Memory引擎" class="headerlink" title="7.Memory引擎"></a>7.Memory引擎</h4><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul><li>用于查找（lookup）或者映射（mapping）表</li><li>用于缓存周期性聚合数据（periodically aggregated data）的结果</li><li>用于保存数据分析中产生的中间数据</li></ul><h5 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h5><p>使用表锁（table lock,表锁是MySQL中最基本的锁策略,并且是开销最小的策略。表锁非常类似于前文描述的邮箱加锁机制：它会锁定整张表。一个用户在对表进行写操作（插入、删除、更新等）前,需要先获得写锁,这会阻塞其他用户对该表的所有读写操作。只有没有写锁时,其他读取的用户才能获得读锁,读锁之间是不相互阻塞的。</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>并发写入的性能较低</li><li>不支持BLOB或TEXT类型的列,并且每行的长度是固定的</li></ul><h4 id="8-NDB集群引擎"><a href="#8-NDB集群引擎" class="headerlink" title="8.NDB集群引擎"></a>8.NDB集群引擎</h4><p><strong>TODO</strong></p><h4 id="9-Merge引擎"><a href="#9-Merge引擎" class="headerlink" title="9.Merge引擎"></a>9.Merge引擎</h4><p>Merge表是由多个MyISAM表合并而来的虚拟表。如果将MySQL用于日志或者数据仓库类应用,该引擎可以发挥作用。但是引入分区功能后,该引擎已经被放弃</p><h4 id="10-第三方存储引擎"><a href="#10-第三方存储引擎" class="headerlink" title="10.第三方存储引擎"></a>10.第三方存储引擎</h4><p><strong>TODO</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Colly 官方文档学习从入门到入土</title>
      <link href="/2020/04/28/Go/Colly%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2020/04/28/Go/Colly%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a><strong>一、介绍</strong></h2><p> Colly 是用于构建 Web 爬虫的 Golang 框架。使用 Colly ,你可以构建各种复杂的 Web 抓取工具,从简单的抓取工具到处理数百万个网页的复杂的异步网站抓取工具。 Colly 提供了一个 API,用于执行网络请求和处理接收到的内容（例如,与 HTML 文档的 DOM 树进行交互）。</p><a id="more"></a><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a><strong>如何安装</strong></h3><p>Colly 只有一个前置条件,那就是 Golang 编程语言。你可以使用其安装指南进行安装。</p><h4 id="安装-Colly"><a href="#安装-Colly" class="headerlink" title="安装 Colly"></a><strong>安装 Colly</strong></h4><p>在终端上键入以下命令,然后按 Enter 键安装 Colly 。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gocolly/colly/...</span><br></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a><strong>入门</strong></h3><p>使用<code>Colly</code>之前,请确保你具有最新版本。有关更多详细信息,请参见安装指南。</p><p>让我们从一些简单的例子开始。</p><p>首先,你需要将<code>Colly</code>导入你的代码库：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"github.com/gocolly/colly"</span></span><br></pre></td></tr></table></figure><h4 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a><strong>Collector</strong></h4><p><code>Colly</code>的主要实体是一个 Collector 对象。Collector 在Collector作业运行时管理网络通信并负责执行附加的回调。要使用 colly ,你必须初始化一个 Collector：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c := colly.NewCollector()</span><br></pre></td></tr></table></figure><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a><strong>回调</strong></h4><p>你可以将不同类型的回调函数附加到上,Collector 以控制收集作业或检索信息。请查看包装文档中的相关部分。</p><h5 id="将回调添加到-Collector"><a href="#将回调添加到-Collector" class="headerlink" title="将回调添加到 Collector"></a><strong>将回调添加到 Collector</strong></h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Visiting"</span>, r.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_ *colly.Response, err error)</span></span> &#123;</span><br><span class="line">    log.Println(<span class="hljs-string">"Something went wrong:"</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnResponseHeaders(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Visited"</span>, r.Request.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Visited"</span>, r.Request.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">    e.Request.Visit(e.Attr(<span class="hljs-string">"href"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnHTML(<span class="hljs-string">"tr td:nth-of-type(1)"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"First column of a table row:"</span>, e.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnXML(<span class="hljs-string">"//h1"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.XMLElement)</span></span> &#123;</span><br><span class="line">    fmt.Println(e.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnScraped(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Finished"</span>, r.Request.URL)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>1.OnRequest</strong><br>在请求之前调用</p><p><strong>2.OnError</strong><br>如果请求期间发生错误,则调用</p><p><strong>3.OnResponseHeaders</strong><br>在收到响应标头后调用</p><p><strong>4.OnResponse</strong><br>收到回复后调用</p><p><strong>5.OnHTML</strong><br><code>OnResponse</code>如果收到的内容是HTML ,则在之后调用</p><p><strong>6.OnXML</strong><br><code>OnHTML</code>如果接收到的内容是HTML或XML ,则在之后调用</p><p><strong>7.OnScraped</strong><br><code>OnXML</code>回调后调用</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p>Colly 是一个高度可定制的抓取框架。它具有合理的默认值,并提供了很多选项来更改它们。</p><h4 id="Collector-配置"><a href="#Collector-配置" class="headerlink" title="Collector 配置"></a><strong>Collector 配置</strong></h4><p>Collector属性的完整列表可以在这里找到。建议使用初始化 Collector 的方法<code>colly.NewCollector(options...)</code>。</p><p>使用默认设置创建Collector：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1 := colly.NewCollector()</span><br></pre></td></tr></table></figure><p>创建另一个 Collector 并更改<code>User-Agent</code>和<code>url</code>重新访问选项：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c2 := colly.NewCollector(</span><br><span class="line">colly.UserAgent(<span class="hljs-string">"xy"</span>),</span><br><span class="line">colly.AllowURLRevisit(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过覆盖 Collector 的属性,可以在抓取作业的任何时候更改配置。</p><p>一个很好的例子是<code>User-Agent</code>切换器,它会在每个请求上更改<code>User-Agent</code>：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> letterBytes = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RandomString</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">b := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, rand.Intn(<span class="hljs-number">10</span>)+<span class="hljs-number">10</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> b &#123;</span><br><span class="line">b[i] = letterBytes[rand.Intn(<span class="hljs-built_in">len</span>(letterBytes))]</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">r.Headers.Set(<span class="hljs-string">"User-Agent"</span>, RandomString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="通过环境变量进行配置"><a href="#通过环境变量进行配置" class="headerlink" title="通过环境变量进行配置"></a><strong>通过环境变量进行配置</strong></h4><p>可以通过环境变量来更改 Collector 的默认配置。这使我们可以微调 Collector 而无需重新编译。环境解析是 Collector 初始化的最后一步,因此初始化之后的每个配置更改都会覆盖从环境解析的配置。</p><h5 id="环境配置变量"><a href="#环境配置变量" class="headerlink" title="环境配置变量"></a><strong>环境配置变量</strong></h5><ul><li>COLLY_ALLOWED_DOMAINS (comma separated list of domains)</li><li>COLLY_CACHE_DIR (string)</li><li>COLLY_DETECT_CHARSET (y/n)</li><li>COLLY_DISABLE_COOKIES (y/n)</li><li>COLLY_DISALLOWED_DOMAINS (comma separated list of domains)</li><li>COLLY_IGNORE_ROBOTSTXT (y/n)</li><li>COLLY_FOLLOW_REDIRECTS (y/n)</li><li>COLLY_MAX_BODY_SIZE (int)</li><li>COLLY_MAX_DEPTH (int - 0 means infinite)</li><li>COLLY_PARSE_HTTP_ERROR_RESPONSE (y/n)</li><li>COLLY_USER_AGENT (string)</li></ul><h4 id="HTTP-配置"><a href="#HTTP-配置" class="headerlink" title="HTTP 配置"></a><strong>HTTP 配置</strong></h4><p> Colly 使用 Golang 的默认 http 客户端作为网络层。可以通过更改默认的 HTTP roundtripper 来调整 HTTP 选项。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c := colly.NewCollector()</span><br><span class="line">c.WithTransport(&amp;http.Transport&#123;</span><br><span class="line">Proxy: http.ProxyFromEnvironment,</span><br><span class="line">DialContext: (&amp;net.Dialer&#123;</span><br><span class="line">Timeout:   <span class="hljs-number">30</span> * time.Second,</span><br><span class="line">KeepAlive: <span class="hljs-number">30</span> * time.Second,</span><br><span class="line">DualStack: <span class="hljs-literal">true</span>,</span><br><span class="line">&#125;).DialContext,</span><br><span class="line">MaxIdleConns:          <span class="hljs-number">100</span>,</span><br><span class="line">IdleConnTimeout:       <span class="hljs-number">90</span> * time.Second,</span><br><span class="line">TLSHandshakeTimeout:   <span class="hljs-number">10</span> * time.Second,</span><br><span class="line">ExpectContinueTimeout: <span class="hljs-number">1</span> * time.Second,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、最佳实践"><a href="#二、最佳实践" class="headerlink" title="二、最佳实践"></a><strong>二、最佳实践</strong></h2><h3 id="使用多个-Collector"><a href="#使用多个-Collector" class="headerlink" title="使用多个 Collector"></a><strong>使用多个 Collector</strong></h3><p>如果任务足够复杂或具有不同类型的子任务,建议使用多个 Collector 来执行一个抓取作业。一个很好的例子是 Coursera 课程抓取工具,其中使用了两个 Collector -一个解析列表视图并处理分页,另一个则收集课程详细信息。</p><p> Colly 具有一些内置方法来支持多个 Collector 的使用。</p><blockquote><p>Tips:用于<code>Collector.ID</code>调试以区分不同的 Collector</p></blockquote><h4 id="克隆采集器"><a href="#克隆采集器" class="headerlink" title="克隆采集器"></a><strong>克隆采集器</strong></h4><p><code>Clone()</code>如果 Collector 具有类似的配置,则可以使用 Collector 的方法。<code>Clone()</code>复制具有相同配置但没有附加回调的 Collector 。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c := colly.NewCollector(</span><br><span class="line">colly.UserAgent(<span class="hljs-string">"myUserAgent"</span>),</span><br><span class="line">colly.AllowedDomains(<span class="hljs-string">"foo.com"</span>, <span class="hljs-string">"bar.com"</span>),</span><br><span class="line">)</span><br><span class="line"><span class="hljs-comment">// Custom User-Agent and allowed domains are cloned to c2</span></span><br><span class="line">c2 := c.Clone()</span><br></pre></td></tr></table></figure><h5 id="在-Collector-之间传递自定义数据"><a href="#在-Collector-之间传递自定义数据" class="headerlink" title="在 Collector 之间传递自定义数据"></a><strong>在 Collector 之间传递自定义数据</strong></h5><p>使用 Collector 的<code>Request()</code>功能可以与其他 Collector 共享上下文。</p><p>共享上下文示例：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">r.Ctx.Put(r.Headers.Get(<span class="hljs-string">"Custom-Header"</span>))</span><br><span class="line">c2.Request(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"https://foo.com/"</span>, <span class="hljs-literal">nil</span>, r.Ctx, <span class="hljs-literal">nil</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a><strong>调试</strong></h3><p>有时将一些<code>log.Println()</code>函数调用放置到你的回调中就足够了,但有时却不是。 Colly 具有用于 Collector 调试的内置功能。提供了调试器接口和其他类型的调试器实现。</p><h4 id="将调试器附加到Collector"><a href="#将调试器附加到Collector" class="headerlink" title="将调试器附加到Collector"></a><strong>将调试器附加到Collector</strong></h4><p>附加基本的日志调试器需要 Colly 仓库中的<code>debug</code>（<code>github.com/gocolly/colly/debug</code>）包。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/debug"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    c := colly.NewCollector(colly.Debugger(&amp;debug.LogDebugger&#123;&#125;))</span><br><span class="line">    <span class="hljs-comment">// [..]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现自定义调试器"><a href="#实现自定义调试器" class="headerlink" title="实现自定义调试器"></a><strong>实现自定义调试器</strong></h4><p>你可以通过实现 debug.Debugger 接口来创建任何类型的自定义调试器。一个很好的例子是 LogDebugger 。</p><h3 id="分布式抓取"><a href="#分布式抓取" class="headerlink" title="分布式抓取"></a><strong>分布式抓取</strong></h3><p>分布式抓取可以根据抓取任务的要求以不同的方式实现。大多数时候,足以扩展网络通信层,这可以使用代理和 Colly 的代理切换器轻松实现。</p><h4 id="代理切换器"><a href="#代理切换器" class="headerlink" title="代理切换器"></a><strong>代理切换器</strong></h4><p>当 HTTP 请求在多个代理之间分发时,使用代理切换器的抓取仍然保持集中。 Colly 支持通过其<code>SetProxyFunc()</code>成员进行代理切换。可以<code>SetProxyFunc()</code>使用的签名将任何自定义函数传递给<code>func(*http.Request) (*url.URL, error)</code>。</p><blockquote><p>Tips:带有<code>-D</code>标志的 SSH 服务器可以用作 socks5 代理。</p></blockquote><p>Colly 具有内置的代理切换器,可根据每个请求轮流代理列表。</p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a><strong>用法</strong></h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/proxy"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> p, err := proxy.RoundRobinProxySwitcher(</span><br><span class="line"><span class="hljs-string">"socks5://127.0.0.1:1337"</span>,</span><br><span class="line"><span class="hljs-string">"socks5://127.0.0.1:1338"</span>,</span><br><span class="line"><span class="hljs-string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">); err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">c.SetProxyFunc(p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现自定义代理切换器：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> proxies []*url.URL = []*url.URL&#123;</span><br><span class="line">&amp;url.URL&#123;Host: <span class="hljs-string">"127.0.0.1:8080"</span>&#125;,</span><br><span class="line">&amp;url.URL&#123;Host: <span class="hljs-string">"127.0.0.1:8081"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomProxySwitcher</span><span class="hljs-params">(_ *http.Request)</span> <span class="hljs-params">(*url.URL, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> proxies[random.Intn(<span class="hljs-built_in">len</span>(proxies))], <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">c.SetProxyFunc(randomProxySwitcher)</span><br></pre></td></tr></table></figure><h4 id="分布式抓取器"><a href="#分布式抓取器" class="headerlink" title="分布式抓取器"></a><strong>分布式抓取器</strong></h4><p>要管理独立的和分布式抓取器,最好的办法是将刮板包装在服务器中。服务器可以是任何类型的服务,例如 HTTP ,TCP 服务器或 Google App Engine 。使用自定义存储来实现集中和持久的 cookie 以及访问的 url 处理。</p><blockquote><p>Tips: Colly 具有内置的 Google App Engine 支持。如果你从 App Engine 标准环境中使用 Colly ,请不要忘记调用<code>Collector.Appengine(*http.Request)</code>。</p></blockquote><p>可以在此处找到示例实现。</p><h5 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a><strong>分布式存储</strong></h5><p>默认情况下,访问的 URL 和 cookie 数据存储在内存中。这对于短寿命的刮板作业很方便,但是在处理大规模或长期运行的爬行作业时可能是一个严重的限制。</p><p> Colly 能够用实现了<code>Colly / storage.Storage</code>接口的任何存储后端替换默认的内存存储。检查现有存储。</p><h3 id="储存后端"><a href="#储存后端" class="headerlink" title="储存后端"></a><strong>储存后端</strong></h3><p> Colly 有一个内存中的存储后端,用于存储 cookie 和访问的 URL ,但是任何实现 Colly / storage.Storage 的自定义存储后端都可以覆盖它。</p><h4 id="现有的存储后端"><a href="#现有的存储后端" class="headerlink" title="现有的存储后端"></a><strong>现有的存储后端</strong></h4><ul><li>内存后端: Colly 的默认后端。使用Collector.SetStorage（）覆盖。</li><li>Redis 后端:有关详细信息,请参见redis示例。</li><li>boltdb 后端</li><li>SQLite3 后端</li><li>MongoDB 后端</li><li>PostgreSQL 后端</li></ul><h3 id="爬虫程序配置"><a href="#爬虫程序配置" class="headerlink" title="爬虫程序配置"></a><strong>爬虫程序配置</strong></h3><p> Colly 的默认配置经过优化,可以在一项作业中抓取较少数量的站点。如果你想抓取数百万个网站,则此设置不是最佳选择。以下是一些调整：</p><h4 id="使用永久性存储后端"><a href="#使用永久性存储后端" class="headerlink" title="使用永久性存储后端"></a><strong>使用永久性存储后端</strong></h4><p>默认情况下, Colly 将 cookie 和访问的 URL 存储在内存中。你可以用任何自定义后端替换内置的内存中存储后端。在这里查看更多详细信息。</p><h4 id="将异步用于具有递归调用的长时间运行的作业"><a href="#将异步用于具有递归调用的长时间运行的作业" class="headerlink" title="将异步用于具有递归调用的长时间运行的作业"></a><strong>将异步用于具有递归调用的长时间运行的作业</strong></h4><p>默认情况下,在请求未完成时 Colly 会阻塞,因此<code>Collector.Visit</code>从回调递归调用会产生不断增长的堆栈。有了<code>Collector.Async = true</code>这可避免。（不要忘了<code>c.Wait()</code>与异步一起使用。）</p><h4 id="禁用或限制连接保持活动状态"><a href="#禁用或限制连接保持活动状态" class="headerlink" title="禁用或限制连接保持活动状态"></a><strong>禁用或限制连接保持活动状态</strong></h4><p> Colly 使用 HTTP 保持活动来提高抓取速度。它需要打开文件描述符,因此长时间运行的作业很容易达到max-fd限制。</p><p>可以使用以下代码禁用 HTTP Keep-alive：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := colly.NewCollector()</span><br><span class="line">c.WithTransport(&amp;http.Transport&#123;</span><br><span class="line">    DisableKeepAlives: <span class="hljs-literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><strong>扩展</strong></h3><p>扩展是 Colly 随附的小型帮助程序实用程序。插件列表可在此处获得。</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a><strong>用法</strong></h4><p>以下示例启用了随机 User-Agent 切换器和 Referrer setter 扩展,并访问了 httpbin.org 两次。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">    <span class="hljs-string">"github.com/gocolly/colly/extensions"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    c := colly.NewCollector()</span><br><span class="line">    visited := <span class="hljs-literal">false</span></span><br><span class="line"></span><br><span class="line">    extensions.RandomUserAgent(c)</span><br><span class="line">    extensions.Referer(c)</span><br><span class="line"></span><br><span class="line">    c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">        log.Println(<span class="hljs-keyword">string</span>(r.Body))</span><br><span class="line">        <span class="hljs-keyword">if</span> !visited &#123;</span><br><span class="line">            visited = <span class="hljs-literal">true</span></span><br><span class="line">            r.Request.Visit(<span class="hljs-string">"/get?q=2"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    c.Visit(<span class="hljs-string">"http://httpbin.org/get"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a><strong>三、例子</strong></h2><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a><strong>基本</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// Visit only domains: hackerspaces.org, wiki.hackerspaces.org</span></span><br><span class="line">colly.AllowedDomains(<span class="hljs-string">"hackerspaces.org"</span>, <span class="hljs-string">"wiki.hackerspaces.org"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// On every a element which has href attribute call callback</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">link := e.Attr(<span class="hljs-string">"href"</span>)</span><br><span class="line"><span class="hljs-comment">// Print link</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"Link found: %q -&gt; %s\n"</span>, e.Text, link)</span><br><span class="line"><span class="hljs-comment">// Visit link found on page</span></span><br><span class="line"><span class="hljs-comment">// Only those links are visited which are in AllowedDomains</span></span><br><span class="line">c.Visit(e.Request.AbsoluteURL(link))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Before making a request print "Visiting ..."</span></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"Visiting"</span>, r.URL.String())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping on https://hackerspaces.org</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://hackerspaces.org/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a><strong>错误处理</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Create a collector</span></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set HTML callback</span></span><br><span class="line"><span class="hljs-comment">// Won't be called if error occurs</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"*"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">fmt.Println(e)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set error handler</span></span><br><span class="line">c.OnError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response, err error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"Request URL:"</span>, r.Request.URL, <span class="hljs-string">"failed with response:"</span>, r, <span class="hljs-string">"\nError:"</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://definitely-not-a.website/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a><strong>登陆</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// create a new collector</span></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// authenticate</span></span><br><span class="line">err := c.Post(<span class="hljs-string">"http://example.com/login"</span>, <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">"username"</span>: <span class="hljs-string">"admin"</span>, <span class="hljs-string">"password"</span>: <span class="hljs-string">"admin"</span>&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// attach callbacks after login</span></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"response received"</span>, r.StatusCode)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// start scraping</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://example.com/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大深度"><a href="#最大深度" class="headerlink" title="最大深度"></a><strong>最大深度</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// MaxDepth is 1, so only the links on the scraped page</span></span><br><span class="line"><span class="hljs-comment">// is visited, and no further links are followed</span></span><br><span class="line">colly.MaxDepth(<span class="hljs-number">1</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// On every a element which has href attribute call callback</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">link := e.Attr(<span class="hljs-string">"href"</span>)</span><br><span class="line"><span class="hljs-comment">// Print link</span></span><br><span class="line">fmt.Println(link)</span><br><span class="line"><span class="hljs-comment">// Visit link found on page</span></span><br><span class="line">e.Request.Visit(link)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping on https://en.wikipedia.org</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://en.wikipedia.org/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"io/ioutil"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line"><span class="hljs-string">"os"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateFormData</span><span class="hljs-params">()</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>][]<span class="hljs-title">byte</span></span> &#123;</span><br><span class="line">f, _ := os.Open(<span class="hljs-string">"gocolly.jpg"</span>)</span><br><span class="line"><span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">imgData, _ := ioutil.ReadAll(f)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][]<span class="hljs-keyword">byte</span>&#123;</span><br><span class="line"><span class="hljs-string">"firstname"</span>: []<span class="hljs-keyword">byte</span>(<span class="hljs-string">"one"</span>),</span><br><span class="line"><span class="hljs-string">"lastname"</span>:  []<span class="hljs-keyword">byte</span>(<span class="hljs-string">"two"</span>),</span><br><span class="line"><span class="hljs-string">"email"</span>:     []<span class="hljs-keyword">byte</span>(<span class="hljs-string">"onetwo@example.com"</span>),</span><br><span class="line"><span class="hljs-string">"file"</span>:      imgData,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setupServer</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> handler http.HandlerFunc = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"received request"</span>)</span><br><span class="line">err := r.ParseMultipartForm(<span class="hljs-number">10000000</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"server: Error"</span>)</span><br><span class="line">w.WriteHeader(<span class="hljs-number">500</span>)</span><br><span class="line">w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"&lt;html&gt;&lt;body&gt;Internal Server Error&lt;/body&gt;&lt;/html&gt;"</span>))</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.WriteHeader(<span class="hljs-number">200</span>)</span><br><span class="line">fmt.Println(<span class="hljs-string">"server: OK"</span>)</span><br><span class="line">w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"&lt;html&gt;&lt;body&gt;Success&lt;/body&gt;&lt;/html&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> http.ListenAndServe(<span class="hljs-string">":8080"</span>, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Start a single route http server to post an image to.</span></span><br><span class="line">setupServer()</span><br><span class="line"></span><br><span class="line">c := colly.NewCollector(colly.AllowURLRevisit(), colly.MaxDepth(<span class="hljs-number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// On every a element which has href attribute call callback</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"html"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">fmt.Println(e.Text)</span><br><span class="line">time.Sleep(<span class="hljs-number">1</span> * time.Second)</span><br><span class="line">e.Request.PostMultipart(<span class="hljs-string">"http://localhost:8080/"</span>, generateFormData())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Before making a request print "Visiting ..."</span></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"Posting gocolly.jpg to"</span>, r.URL.String())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping</span></span><br><span class="line">c.PostMultipart(<span class="hljs-string">"http://localhost:8080/"</span>, generateFormData())</span><br><span class="line">c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a><strong>并行</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// MaxDepth is 2, so only the links on the scraped page</span></span><br><span class="line"><span class="hljs-comment">// and links on those pages are visited</span></span><br><span class="line">colly.MaxDepth(<span class="hljs-number">2</span>),</span><br><span class="line">colly.Async(<span class="hljs-literal">true</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Limit the maximum parallelism to 2</span></span><br><span class="line"><span class="hljs-comment">// This is necessary if the goroutines are dynamically</span></span><br><span class="line"><span class="hljs-comment">// created to control the limit of simultaneous requests.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Parallelism can be controlled also by spawning fixed</span></span><br><span class="line"><span class="hljs-comment">// number of go routines.</span></span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;DomainGlob: <span class="hljs-string">"*"</span>, Parallelism: <span class="hljs-number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// On every a element which has href attribute call callback</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">link := e.Attr(<span class="hljs-string">"href"</span>)</span><br><span class="line"><span class="hljs-comment">// Print link</span></span><br><span class="line">fmt.Println(link)</span><br><span class="line"><span class="hljs-comment">// Visit link found on page on a new thread</span></span><br><span class="line">e.Request.Visit(link)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping on https://en.wikipedia.org</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://en.wikipedia.org/"</span>)</span><br><span class="line"><span class="hljs-comment">// Wait until threads are finished</span></span><br><span class="line">c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理切换器-1"><a href="#代理切换器-1" class="headerlink" title="代理切换器"></a><strong>代理切换器</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"bytes"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/proxy"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(colly.AllowURLRevisit())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Rotate two socks5 proxies</span></span><br><span class="line">rp, err := proxy.RoundRobinProxySwitcher(<span class="hljs-string">"socks5://127.0.0.1:1337"</span>, <span class="hljs-string">"socks5://127.0.0.1:1338"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">c.SetProxyFunc(rp)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Print the response</span></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"%s\n"</span>, bytes.Replace(r.Body, []<span class="hljs-keyword">byte</span>(<span class="hljs-string">"\n"</span>), <span class="hljs-literal">nil</span>, <span class="hljs-number">-1</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Fetch httpbin.org/ip five times</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line">c.Visit(<span class="hljs-string">"https://httpbin.org/ip"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a><strong>队列</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/queue"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">url := <span class="hljs-string">"https://httpbin.org/delay/1"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// create a request queue with 2 consumer threads</span></span><br><span class="line">q, _ := queue.New(</span><br><span class="line"><span class="hljs-number">2</span>, <span class="hljs-comment">// Number of consumer threads</span></span><br><span class="line">&amp;queue.InMemoryQueueStorage&#123;MaxSize: <span class="hljs-number">10000</span>&#125;, <span class="hljs-comment">// Use default queue storage</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"visiting"</span>, r.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line"><span class="hljs-comment">// Add URLs to the queue</span></span><br><span class="line">q.AddURL(fmt.Sprintf(<span class="hljs-string">"%s?n=%d"</span>, url, i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Consume URLs</span></span><br><span class="line">q.Run(c)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机延迟"><a href="#随机延迟" class="headerlink" title="随机延迟"></a><strong>随机延迟</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/debug"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">url := <span class="hljs-string">"https://httpbin.org/delay/2"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// Attach a debugger to the collector</span></span><br><span class="line">colly.Debugger(&amp;debug.LogDebugger&#123;&#125;),</span><br><span class="line">colly.Async(<span class="hljs-literal">true</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Limit the number of threads started by colly to two</span></span><br><span class="line"><span class="hljs-comment">// when visiting links which domains' matches "*httpbin.*" glob</span></span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;</span><br><span class="line">DomainGlob:  <span class="hljs-string">"*httpbin.*"</span>,</span><br><span class="line">Parallelism: <span class="hljs-number">2</span>,</span><br><span class="line">RandomDelay: <span class="hljs-number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping in four threads on https://httpbin.org/delay/2</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;</span><br><span class="line">c.Visit(fmt.Sprintf(<span class="hljs-string">"%s?n=%d"</span>, url, i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Start scraping on https://httpbin.org/delay/2</span></span><br><span class="line">c.Visit(url)</span><br><span class="line"><span class="hljs-comment">// Wait until threads are finished</span></span><br><span class="line">c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="速率限制"><a href="#速率限制" class="headerlink" title="速率限制"></a><strong>速率限制</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/debug"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">url := <span class="hljs-string">"https://httpbin.org/delay/2"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// Turn on asynchronous requests</span></span><br><span class="line">colly.Async(<span class="hljs-literal">true</span>),</span><br><span class="line"><span class="hljs-comment">// Attach a debugger to the collector</span></span><br><span class="line">colly.Debugger(&amp;debug.LogDebugger&#123;&#125;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Limit the number of threads started by colly to two</span></span><br><span class="line"><span class="hljs-comment">// when visiting links which domains' matches "*httpbin.*" glob</span></span><br><span class="line">c.Limit(&amp;colly.LimitRule&#123;</span><br><span class="line">DomainGlob:  <span class="hljs-string">"*httpbin.*"</span>,</span><br><span class="line">Parallelism: <span class="hljs-number">2</span>,</span><br><span class="line"><span class="hljs-comment">//Delay:      5 * time.Second,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping in five threads on https://httpbin.org/delay/2</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;</span><br><span class="line">c.Visit(fmt.Sprintf(<span class="hljs-string">"%s?n=%d"</span>, url, i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Wait until threads are finished</span></span><br><span class="line">c.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reids-后端"><a href="#Reids-后端" class="headerlink" title="Reids 后端"></a><strong>Reids 后端</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly/queue"</span></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/redisstorage"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">urls := []<span class="hljs-keyword">string</span>&#123;</span><br><span class="line"><span class="hljs-string">"http://httpbin.org/"</span>,</span><br><span class="line"><span class="hljs-string">"http://httpbin.org/ip"</span>,</span><br><span class="line"><span class="hljs-string">"http://httpbin.org/cookies/set?a=b&amp;c=d"</span>,</span><br><span class="line"><span class="hljs-string">"http://httpbin.org/cookies"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// create the redis storage</span></span><br><span class="line">storage := &amp;redisstorage.Storage&#123;</span><br><span class="line">Address:  <span class="hljs-string">"127.0.0.1:6379"</span>,</span><br><span class="line">Password: <span class="hljs-string">""</span>,</span><br><span class="line">DB:       <span class="hljs-number">0</span>,</span><br><span class="line">Prefix:   <span class="hljs-string">"httpbin_test"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// add storage to the collector</span></span><br><span class="line">err := c.SetStorage(storage)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// delete previous data from storage</span></span><br><span class="line"><span class="hljs-keyword">if</span> err := storage.Clear(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// close redis client</span></span><br><span class="line"><span class="hljs-keyword">defer</span> storage.Client.Close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// create a new request queue with redis storage backend</span></span><br><span class="line">q, _ := queue.New(<span class="hljs-number">2</span>, storage)</span><br><span class="line"></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"Cookies:"</span>, c.Cookies(r.Request.URL.String()))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// add URLs to the queue</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, u := <span class="hljs-keyword">range</span> urls &#123;</span><br><span class="line">q.AddURL(u)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// consume requests</span></span><br><span class="line">q.Run(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文"></a><strong>请求上下文</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Before making a request put the URL with</span></span><br><span class="line"><span class="hljs-comment">// the key of "url" into the context of the request</span></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">r.Ctx.Put(<span class="hljs-string">"url"</span>, r.URL.String())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// After making a request get "url" from</span></span><br><span class="line"><span class="hljs-comment">// the context of the request</span></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">fmt.Println(r.Ctx.Get(<span class="hljs-string">"url"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping on https://en.wikipedia.org</span></span><br><span class="line">c.Visit(<span class="hljs-string">"https://en.wikipedia.org/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="爬虫服务器"><a href="#爬虫服务器" class="headerlink" title="爬虫服务器"></a><strong>爬虫服务器</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"encoding/json"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> pageInfo <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">StatusCode <span class="hljs-keyword">int</span></span><br><span class="line">Links      <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">URL := r.URL.Query().Get(<span class="hljs-string">"url"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> URL == <span class="hljs-string">""</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"missing URL argument"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="hljs-string">"visiting"</span>, URL)</span><br><span class="line"></span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line">p := &amp;pageInfo&#123;Links: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// count links</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">link := e.Request.AbsoluteURL(e.Attr(<span class="hljs-string">"href"</span>))</span><br><span class="line"><span class="hljs-keyword">if</span> link != <span class="hljs-string">""</span> &#123;</span><br><span class="line">p.Links[link]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// extract status code</span></span><br><span class="line">c.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response)</span></span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"response received"</span>, r.StatusCode)</span><br><span class="line">p.StatusCode = r.StatusCode</span><br><span class="line">&#125;)</span><br><span class="line">c.OnError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Response, err error)</span></span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"error:"</span>, r.StatusCode, err)</span><br><span class="line">p.StatusCode = r.StatusCode</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.Visit(URL)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// dump results</span></span><br><span class="line">b, err := json.Marshal(p)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"failed to serialize response:"</span>, err)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.Header().Add(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"application/json"</span>)</span><br><span class="line">w.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// example usage: curl -s 'http://127.0.0.1:7171/?url=http://go-colly.org/'</span></span><br><span class="line">addr := <span class="hljs-string">":7171"</span></span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, handler)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="hljs-string">"listening on"</span>, addr)</span><br><span class="line">log.Fatal(http.ListenAndServe(addr, <span class="hljs-literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网址过滤器"><a href="#网址过滤器" class="headerlink" title="网址过滤器"></a><strong>网址过滤器</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"regexp"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"github.com/gocolly/colly"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Instantiate default collector</span></span><br><span class="line">c := colly.NewCollector(</span><br><span class="line"><span class="hljs-comment">// Visit only root url and urls which start with "e" or "h" on httpbin.org</span></span><br><span class="line">colly.URLFilters(</span><br><span class="line">regexp.MustCompile(<span class="hljs-string">"http://httpbin\\.org/(|e.+)$"</span>),</span><br><span class="line">regexp.MustCompile(<span class="hljs-string">"http://httpbin\\.org/h.+"</span>),</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// On every a element which has href attribute call callback</span></span><br><span class="line">c.OnHTML(<span class="hljs-string">"a[href]"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">link := e.Attr(<span class="hljs-string">"href"</span>)</span><br><span class="line"><span class="hljs-comment">// Print link</span></span><br><span class="line">fmt.Printf(<span class="hljs-string">"Link found: %q -&gt; %s\n"</span>, e.Text, link)</span><br><span class="line"><span class="hljs-comment">// Visit link found on page</span></span><br><span class="line"><span class="hljs-comment">// Only those links are visited which are matched by  any of the URLFilter regexps</span></span><br><span class="line">c.Visit(e.Request.AbsoluteURL(link))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Before making a request print "Visiting ..."</span></span><br><span class="line">c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"Visiting"</span>, r.URL.String())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start scraping on http://httpbin.org</span></span><br><span class="line">c.Visit(<span class="hljs-string">"http://httpbin.org/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) 我是如何在大型代码库上使用 pprof 调查 Go 中的内存泄漏</title>
      <link href="/2020/04/23/Go/Golang%E8%AF%91%E6%96%87/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%A7%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%8A%E4%BD%BF%E7%94%A8pprof%E8%B0%83%E6%9F%A5Go%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
      <url>/2020/04/23/Go/Golang%E8%AF%91%E6%96%87/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%A7%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%8A%E4%BD%BF%E7%94%A8pprof%E8%B0%83%E6%9F%A5Go%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在今年的大部分时间里,我一直在 Orbs 团队用 Go 语言做可扩展的区块链的基础设施开发,这是令人兴奋的一年。在 2018 年的时候,我们研究我们的区块链该选择哪种语言实现。因为我们知道 Go 拥有一个良好的社区和一个非常棒的工具集,所以我们选择了 Go。</p><p>最近几周,我们进入了系统整合的最后阶段。与任何大型系统一样,可能会在后期阶段出现一些问题,包括性能问题,内存泄漏等。当整合系统时,我们找到了一个不错的方法。在本文中,我将介绍如何调查 Go 中的内存泄漏,详细说明寻找,理解和解决它的步骤。</p><a id="more"></a><p>Golang 提供的工具集非常出色但也有其局限性。首先来看看这个问题,最大的一个问题是查询完整的 core dumps 能力有限。完整的 core dumps 是程序运行时的进程占用内存（或用户内存）的镜像。</p><p>我们可以把内存映射想象成一棵树,遍历那棵树我们会得到不同的对象分配和关系。这意味着无论如何<br>根会持有内存而不被 GCing（垃圾回收）内存的原因。因为在 Go 中没有简单的方法来分析完整的 core dump,所以很难找到一个没有被 GC 过的对象的根。</p><p>在撰写本文时,我们无法在网上找到任何可以帮助我们的工具。由于存在 core dump 格式以及从 debug 包中导出该文件的简单方法,这可能是 Google 使用过的一种方法。网上搜索它看起来像是在 Golang pipeline 中创建了这样的 core dump 查看器,但看起来并不像有人在使用它。话虽如此,即使没有这样的解决方案,使用现有工具我们通常也可以找到根本原因。</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>内存泄漏或内存压力可以以多种形式出现在整个系统中。通常我们将它们视为 bug,但有时它们的根本原因可能是因为设计的问题。</p><p>当我们在新的设计原则下构建我们的系统时,这些考虑并不重要。更重要的是以<strong>避免过早优化</strong>的方式构建系统,并使你能够在代码成熟后再优化它们,而不是从一开始就过度设计它。然而,一些常见<strong>内存压力</strong>的问题是：</p><ul><li>内存分配太多,数据表示不正确</li><li>大量使用反射或字符串</li><li>使用全局变量</li><li>孤儿,没有结束的 goroutines</li></ul><p>在 Go 中,创建内存泄漏的最简单方法是定义全局变量,数组,然后将该数据添加到数组。这篇<a href="https://medium.com/dm03514-tech-blog/sre-debugging-simple-memory-leaks-in-go-e0a9e6d63d4d" target="_blank" rel="noopener">博客文章</a>以一种不错的方式描述了这个例子。</p><p>我为什么要写这篇文章呢？当我研究这个例子时,我发现了很多关于内存泄漏的方法。但是,相比较这个例子,我们的真实系统有超过 50 行代码和单个结构。在这种情况下,找到内存问题的来源比该示例描述的要复杂得多。</p><p>Golang 为我们提供了一个神奇的工具叫<code>pprof</code>。掌握此工具后,可以帮助调查并发现最有可能的内存问题。它的另一个用途是查找 CPU 问题,但我不会在这篇文章中介绍任何与 CPU 有关的内容。</p><h2 id="go-tool-pprof"><a href="#go-tool-pprof" class="headerlink" title="go tool pprof"></a>go tool pprof</h2><p>把这个工具的方方面面讲清楚需要不止一篇博客文章。我将花一点时间找出怎么使用这个工具去获取有用的东西。在这篇文章里,将集中在它的内存相关功能上。</p><p><code>pprof</code>包创建一个 heap dump 文件,你可以在随后进行分析/可视化以下两种内存映射：</p><ul><li>当前的内存分配</li><li>总（累积）内存分配</li></ul><p>该工具可以比较快照。例如,可以让你比较显示现在和 30 秒前的差异。对于压力场景,这可以帮助你定位到代码中有问题的区域。</p><h2 id="pprof-画像"><a href="#pprof-画像" class="headerlink" title="pprof 画像"></a>pprof 画像</h2><p>pprof 的工作方式是使用画像。</p><p>画像是一组显示导致特定事件实例的调用顺序堆栈的追踪,例如内存分配。</p><p>文件<a href="https://golang.org/src/runtime/pprof/pprof.go" target="_blank" rel="noopener">runtime/pprof/pprof.go</a>包含画像的详细信息和实现。</p><p>Go 有几个内置的画像供我们在常见情况下使用：</p><ul><li>goroutine - 所有当前 goroutines 的堆栈跟踪</li><li>heap - 活动对象的内存分配的样本</li><li>allocs - 过去所有内存分配的样本</li><li>threadcreate - 导致创建新 OS 线程的堆栈跟踪</li><li>block - 导致阻塞同步原语的堆栈跟踪</li><li>mutex - 争用互斥锁持有者的堆栈跟踪</li></ul><p>在查看内存问题时,我们将专注于堆画像。 allocs 画像和它在关于数据收集方面是相同的。两者之间的区别在于 pprof 工具在启动时读取的方式不一样。 allocs 画像将以显示自程序启动以来分配的总字节数（包括垃圾收集的字节）的模式启动 pprof。在尝试提高代码效率时,我们通常会使用该模式。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>简而言之,这是 OS（操作系统）存储我们代码中对象占用内存的地方。这块内存随后会被“垃圾回收”,或者在非垃圾回收语言中手动释放。</p><p>堆不是唯一发生内存分配的地方,一些内存也在栈中分配。栈主要是短周期的内存。在 Go 中,栈通常用于在函数闭包内发生的赋值。 Go 使用栈的另一个地方是编译器“知道”在运行时需要多少内存（例如固定大小的数组）。有一种方法可以使 Go 编译器将栈“转义”到堆中输出分析,但我不会在这篇文章中谈到它。</p><p>堆数据需要“释放”和垃圾回收,而栈数据则不需要。这意味着使用栈效率更高。</p><p>这是分配不同位置的内存的简要说明。还有更多内容,但这不在本文的讨论范围之内。</p><h2 id="使用-pprof-获取堆数据"><a href="#使用-pprof-获取堆数据" class="headerlink" title="使用 pprof 获取堆数据"></a>使用 pprof 获取堆数据</h2><p>获取数据主要有两种方式。第一种通常是把代码加入到测试或分支中,包括导入<code>runtime/pprof</code>,然后调用<code>pprof.WriteHeapProfile(some_file)</code>来写入堆信息。</p><p>请注意,<code>WriteHeapProfile</code>是用于运行的语法糖：</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lookup takes a profile name</span></span><br><span class="line">pprof.Lookup(<span class="hljs-string">"heap"</span>).WriteTo(some_file, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>根据文档,<code>WriteHeapProfile</code>可以向后兼容。其余类型的画像没有这样的便捷方式,必须使用<code>Lookup()</code>函数来获取其画像数据。</p><p>第二个更有意思,是通过 HTTP（基于 Web 的 endpoints）来启用。这允许你从正在运行的 e2e/test 环境中的容器中去提取数据,甚至从“生产”环境中提取数据。这是 Go 运行时和工具集所擅长的部分。整个包文档可以在<a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">这里找到</a>,太长不看版,只需要你将它添加到代码中：</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"net/http"</span></span><br><span class="line">  _ <span class="hljs-string">"net/http/pprof"</span></span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  http.ListenAndServe(<span class="hljs-string">"localhost:8080"</span>, <span class="hljs-literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入<code>net/http/pprof</code>的“副作用”是在<code>/debug/pprof</code>的 web 服务器根目录下会注册 pprof endpoint。现在使用 curl 我们可以获取要查看的堆信息文件：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sK -v http://localhost:8080/debug/pprof/heap &gt; heap.out</span><br></pre></td></tr></table></figure><p>只有在你的程序之前没有 http listener 时才需要添加上面的<code>http.ListenAndServe()</code>。如果有的话就没有必要再监听了,它会自动处理。还可以使用<code>ServeMux.HandleFunc()</code>来设置它,这对于更复杂的 http 程序有意义。</p><h2 id="使用-pprof"><a href="#使用-pprof" class="headerlink" title="使用 pprof"></a>使用 pprof</h2><p>所以我们收集了这些数据,现在该干什么呢？如上所述,pprof 有两种主要的内存分析策略。一个是查看当前的内存分配（字节或对象计数）,称为<code>inuse</code>。另一个是查看整个程序运行时的所有分配的字节或对象计数,称为<code>alloc</code>。这意味着无论它是否被垃圾回收,都会是所有样本的总和。</p><p>在这里我们需要重申一下堆画像文件是内存分配的样例。幕后的<code>pprof</code>使用<code>runtime.MemProfile</code>函数,该函数默认按分配字节每 512KB 收集分配信息。可以修改 MemProfile 以收集所有对象的信息。需要注意的是,这很可能会降低应用程序的运行速度。</p><p>这意味着默认情况下,对于在 pprof 监控下抖动的小对象,可能会出现问题。对于大型代码库/长期运行的程序,这不是问题。</p><p>一旦收集好画像文件后,就可以将其加载到 pprof 的交互式命令行中了,通过运行：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&gt;</span><span class="hljs-bash"> go tool pprof heap.out</span></span><br></pre></td></tr></table></figure><p>我们可以观察到显示的信息</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type: inuse_space</span><br><span class="line">Time: Jan 22, 2019 at 1:08pm (IST)</span><br><span class="line">Entering interactive mode (type "help" for commands, "o" for options)</span><br><span class="line">(pprof)</span><br></pre></td></tr></table></figure><p>这里要注意的事项是<code>Type：inuse_space</code>。这意味着我们正在查看特定时刻的内存分配数据（当我们捕获该配置文件时）。type 是<code>sample_index</code>的配置值,可能的值为：</p><ul><li>inuse_space - 已分配但尚未释放的内存数量</li><li>inuse_objects - 已分配但尚未释放的对象数量</li><li>alloc_space - 已分配的内存总量（不管是否已释放）</li><li>alloc_objects - 已分配的对象总量（不管是否已释放）</li></ul><p>现在在交互命令行中输入<code>top</code>,将输出顶级内存消费者</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(pprof) top</span><br><span class="line">Showing nodes accounting for 330.04MB, 93.73% of 352.11MB total</span><br><span class="line">Dropped 19 nodes (cum &lt;&#x3D; 1.76MB)</span><br><span class="line">Showing top 10 nodes out of 56</span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">  142.02MB 40.33% 40.33%   142.02MB 40.33%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;membuffers&#x2F;go.(*InternalMessage).lazyCalcOffsets</span><br><span class="line">      28MB  7.95% 48.29%       28MB  7.95%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.TransactionsBlockProofReader (inline)</span><br><span class="line">   26.51MB  7.53% 55.81%    39.01MB 11.08%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.(*ResultsBlockHeaderBuilder).Build</span><br><span class="line">   25.51MB  7.24% 63.06%    32.51MB  9.23%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.(*ResultsBlockProofBuilder).Build</span><br><span class="line">      23MB  6.53% 69.59%       23MB  6.53%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.ResultsBlockHeaderReader (inline)</span><br><span class="line">   20.50MB  5.82% 75.41%    20.50MB  5.82%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.TransactionsBlockMetadataReader (inline)</span><br><span class="line">      20MB  5.68% 81.09%       20MB  5.68%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.TransactionsBlockHeaderReader (inline)</span><br><span class="line">      16MB  4.54% 85.64%       24MB  6.82%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.(*TransactionsBlockHeaderBuilder).Build</span><br><span class="line">   14.50MB  4.12% 89.76%   122.51MB 34.79%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;services&#x2F;gossip&#x2F;codec.DecodeBlockPairs</span><br><span class="line">      14MB  3.98% 93.73%       14MB  3.98%  github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-spec&#x2F;types&#x2F;go&#x2F;protocol.ResultsBlockProofReader (inline)</span><br></pre></td></tr></table></figure><p>我们可以看到关于<code>Dropped Nodes</code>的一系列数据,这意味着它们被过滤掉了。一个节点或树中的一个“节点”就是一整个对象。丢弃节点有利于我们更快的找到问题,但有时它可能会隐藏内存问题产生的根本原因。我们继续看一个例子。</p><p>如果要该画像文件的所有数据,请在运行 pprof 时添加<code>-nodefraction=0</code>选项,或在交互命令行中键入<code>nodefraction=0</code>。</p><p>在输出列表中,我们可以看到两个值,<code>flat</code>和<code>cum</code>。</p><ul><li><code>flat</code>表示堆栈中当前层函数的内存</li><li><code>cum</code>表示堆栈中直到当前层函数所累积的内存</li></ul><p>仅仅这个信息有时可以帮助我们了解是否存在问题。例如,一个函数负责分配了大量内存但没有保留内存的情况。这意味着某些其他对象指向该内存并维护其分配,这说明我们可能存在系统设计的问题或 bug。</p><p><code>top</code>实际上运行了<code>top10</code>。top 命令支持<code>topN</code>格式,其中<code>N</code>是你想要查看的条目数。在上面的情况,如果键入<code>top70</code>将输出所有节点。</p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>虽然<code>topN</code>提供了一个文本列表,但 pprof 附带了几个非常有用的可视化选项。可以输入<code>png</code>或<code>gif</code>等等（请参阅<code>go tool pprof -help</code>获取完整信息）。</p><p>在我们的系统上,默认的可视化输出类似于：</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*zX28meov6lzXVo4nCkcNvQ.png" alt=""></p><p>这看起来可能有点吓人,但它是程序中内存分配流程（根据堆栈跟踪）的可视化。阅读图表并不像看起来那么复杂。带有数字的白色方块显示已分配的空间（在图形边缘上是它占用内存的数量）,每个更宽的矩形显示调用的函数。</p><p>需要注意的是,在上图中,我从执行模式<code>inuse_space</code>中取出了一个 png。很多时候你也应该看看<code>inuse_objects</code>,因为它可以帮助你找到内存分配问题。</p><h2 id="深入挖掘-寻找根本原因"><a href="#深入挖掘-寻找根本原因" class="headerlink" title="深入挖掘,寻找根本原因"></a>深入挖掘,寻找根本原因</h2><p>到目前为止,我们能够理解应用程序在运行期间内存怎么分配的。这有助于我们了解我们程序的行为（或不好的行为）。</p><p>在我们的例子中,我们可以看到内存由<code>membuffers</code>持有,这是我们的<a href="https://github.com/orbs-network/membuffers" target="_blank" rel="noopener">数据序列化库</a>。这并不意味着我们在该代码段有内存泄漏,这意味着该函数持有了内存。了解如何阅读图表以及 pprof 输出非常重要。在这个例子中,当我们序列化数据时,意味着我们将内存分配给结构和原始对象（int,string）,它不会被释放。</p><p>跳到结论部分,我们可以假设序列化路径上的一个节点负责持有内存,例如：</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*Yzeo5J1H0T6w6mFdgUDllQ.png" alt="subset of the graph"></p><p>我们可以看到日志库中链中的某个地方,控制着&gt;50MB 的已分配内存。这是由我们的日志记录器调用函数分配的内存。经过思考,这实际上是预料之中的。日志记录器会分配内存,是因为它需要序列化数据以将其输出到日志,因此它会造成进程中的内存分配。</p><p>我们还可以看到,在分配路径下,内存仅由序列化持有,而不是任何其他内容。此外,日志记录器保留的内存量约为总量的 30％。综上告诉我们,最有可能的问题不在于日志记录器。如果它是 100％,或接近它,那么我们应该一直找下去 - 但事实并非如此。这可能意味着它记录了一些不应该记录的东西,但不是日志记录器的内存泄漏。</p><p>是时候介绍另一个名为<code>list</code>的<code>pprof</code>命令。它接受一个正则表达式,该表达式是内容的过滤器。 “list”实际上是与分配相关的带注释的源代码。在我们可以看到在日志记录器的上下文中将执行<code>list RequestNew</code>,因为我们希望看到对日志记录器的调用。这些调用来自恰好以相同前缀开头的两个函数。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">(pprof) list RequestNew</span><br><span class="line">Total: 352.11MB</span><br><span class="line">ROUTINE &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;services&#x2F;consensuscontext.(*service).RequestNewResultsBlock in &#x2F;Users&#x2F;levison&#x2F;work&#x2F;go&#x2F;src&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;services&#x2F;consensuscontext&#x2F;service.go</span><br><span class="line">         0    77.51MB (flat, cum) 22.01% of Total</span><br><span class="line">         .          .     82:&#125;</span><br><span class="line">         .          .     83:</span><br><span class="line">         .          .     84:func (s *service) RequestNewResultsBlock(ctx context.Context, input *services.RequestNewResultsBlockInput) (*services.RequestNewResultsBlockOutput, error) &#123;</span><br><span class="line">         .          .     85:logger :&#x3D; s.logger.WithTags(trace.LogFieldFrom(ctx))</span><br><span class="line">         .          .     86:</span><br><span class="line">         .    47.01MB     87:rxBlock, err :&#x3D; s.createResultsBlock(ctx, input)</span><br><span class="line">         .          .     88:if err !&#x3D; nil &#123;</span><br><span class="line">         .          .     89:return nil, err</span><br><span class="line">         .          .     90:&#125;</span><br><span class="line">         .          .     91:</span><br><span class="line">         .    30.51MB     92:logger.Info(&quot;created Results block&quot;, log.Stringable(&quot;results-block&quot;, rxBlock))</span><br><span class="line">         .          .     93:</span><br><span class="line">         .          .     94:return &amp;services.RequestNewResultsBlockOutput&#123;</span><br><span class="line">         .          .     95:ResultsBlock: rxBlock,</span><br><span class="line">         .          .     96:&#125;, nil</span><br><span class="line">         .          .     97:&#125;</span><br><span class="line">ROUTINE &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;services&#x2F;consensuscontext.(*service).RequestNewTransactionsBlock in &#x2F;Users&#x2F;levison&#x2F;work&#x2F;go&#x2F;src&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;services&#x2F;consensuscontext&#x2F;service.go</span><br><span class="line">         0    64.01MB (flat, cum) 18.18% of Total</span><br><span class="line">         .          .     58:&#125;</span><br><span class="line">         .          .     59:</span><br><span class="line">         .          .     60:func (s *service) RequestNewTransactionsBlock(ctx context.Context, input *services.RequestNewTransactionsBlockInput) (*services.RequestNewTransactionsBlockOutput, error) &#123;</span><br><span class="line">         .          .     61:logger :&#x3D; s.logger.WithTags(trace.LogFieldFrom(ctx))</span><br><span class="line">         .          .     62:logger.Info(&quot;starting to create transactions block&quot;, log.BlockHeight(input.CurrentBlockHeight))</span><br><span class="line">         .    42.50MB     63:txBlock, err :&#x3D; s.createTransactionsBlock(ctx, input)</span><br><span class="line">         .          .     64:if err !&#x3D; nil &#123;</span><br><span class="line">         .          .     65:logger.Info(&quot;failed to create transactions block&quot;, log.Error(err))</span><br><span class="line">         .          .     66:return nil, err</span><br><span class="line">         .          .     67:&#125;</span><br><span class="line">         .          .     68:</span><br><span class="line">         .          .     69:s.metrics.transactionsRate.Measure(int64(len(txBlock.SignedTransactions)))</span><br><span class="line">         .    21.50MB     70:logger.Info(&quot;created transactions block&quot;, log.Int(&quot;num-transactions&quot;, len(txBlock.SignedTransactions)), log.Stringable(&quot;transactions-block&quot;, txBlock))</span><br><span class="line">         .          .     71:s.printTxHash(logger, txBlock)</span><br><span class="line">         .          .     72:return &amp;services.RequestNewTransactionsBlockOutput&#123;</span><br><span class="line">         .          .     73:TransactionsBlock: txBlock,</span><br><span class="line">         .          .     74:&#125;, nil</span><br><span class="line">         .          .     75:&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到所做的内存分配位于<code>cum</code>列中,这意味着分配的内存保留在调用栈中。这与图表显示的内容相关。此时很容易看出日志记录器分配内存是因为我们发送了整个“block”对象造成的。这个对象需要序列化它的某些部分（我们的对象是 membuffer 对象,它实现了一些<code>String()</code>函数）。它是一个有用的日志,还是一个好的做法？可能不是,但它不是日志记录器端或调用日志记录器的代码产生了内存泄漏,</p><p><code>list</code>在<code>GOPATH</code>路径下搜索可以找到源代码。如果它搜索的根不匹配（取决于你电脑的项目构建）,则可以使用<code>-trim_path</code>选项。这将有助于修复它并让你看到带注释的源代码。当正在捕获堆配置文件时要将 git 设置为可以正确提交。</p><h2 id="内存泄漏原因"><a href="#内存泄漏原因" class="headerlink" title="内存泄漏原因"></a>内存泄漏原因</h2><p>之所以调查是因为怀疑有内存泄漏的问题。我们发现内存消耗高于系统预期的需要。最重要的是,我们看到它不断增加,这是“这里有问题”的另一个强有力的指标。</p><p>此时,在 Java 或.Net 的情况下,我们将打开一些’gc roots’分析或分析器,并获取引用该数据并造成泄漏的实际对象。正如所解释的那样,对于 Go 来说这是不可能的,因为工具问题也是由于 Go 低等级的内存表示。</p><p>没有详细说明,我们不知道 Go 把哪个对象存储在哪个地址（指针除外）。这意味着实际上,了解哪个内存地址表示对象（结构）的哪个成员将需要把某种映射输出到堆画像文件。这可能意味着在进行完整的 core dump 之前,还应该采用堆画像文件,以便将地址映射到分配的行和文件,从而映射到内存中表示的对象。</p><p>此时,因为我们熟悉我们的系统,所以很容易理解这不再是一个 bug。它（几乎）是设计的。但是让我们继续探索如何从工具（pprof）中获取信息以找到根本原因。</p><p>设置<code>nodefraction=0</code>时,我们将看到已分配对象的整个图,包括较小的对象。我们来看看输出：</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*VaWXnlay3BfCwKGd5ypHUg.png" alt="memory visualization with nodefraction=0"></p><p>我们有两个新的子树。再次提醒,pprof 堆画像文件是内存分配的采样。对于我们的系统而言 - 我们不会遗漏任何重要信息。这个较长的绿色新子树的部分是与系统的其余部分完全断开的测试运行器,在本篇文章中我没有兴趣考虑它。</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*jj9eIWDafkAMiC_plwhoww.png" alt="system was configured to “leak” 😞"></p><p>较短的蓝色子树,有一条边连接到整个系统是<code>inMemoryBlockPersistance</code>。这个名字也解释了我们想象的’泄漏’。这是数据后端,它将所有数据存储在内存中而不是持久化到磁盘。值得注意的是,我们可以看到它持有两个大的对象。为什么是两个？因为我们可以看到对象大小为 1.28MB,函数占用大小为 2.57MB。</p><p>这个问题很好理解。我们可以使用 delve（调试器）（译者注：<a href="https://github.com/go-delve/delve" target="_blank" rel="noopener">deleve</a>）来查看调试我们代码中的内存情况。</p><h2 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h2><p>这是一个糟糕的人为错误。虽然这个过程是有教育意义的,我们能不能做得更好呢？</p><p>我们仍然能“嗅探到”这个堆信息。反序列化的数据占用了太多的内存,为什么 142MB 的内存需要大幅减少呢？.. pprof 可以回答这个问题 - 实际上,它确实可以回答这些问题。</p><p>要查看函数的带注释的源代码,我们可以运行<code>list lazy</code>。我们使用<code>lazy</code>,因为我们正在寻找的函数名是<code>lazyCalcOffsets()</code>,而且我们的代码中也没有以 lazy 开头的其他函数。当然输入<code>list lazyCalcOffsets</code>也可以。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(pprof) list lazy</span><br><span class="line">Total: 352.11MB</span><br><span class="line">ROUTINE &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;membuffers&#x2F;go.(*InternalMessage).lazyCalcOffsets in &#x2F;Users&#x2F;levison&#x2F;work&#x2F;go&#x2F;src&#x2F;github.com&#x2F;orbs-network&#x2F;orbs-network-go&#x2F;vendor&#x2F;github.com&#x2F;orbs-network&#x2F;membuffers&#x2F;go&#x2F;message.go</span><br><span class="line">  142.02MB   142.02MB (flat, cum) 40.33% of Total</span><br><span class="line">         .          .     29:</span><br><span class="line">         .          .     30:func (m *InternalMessage) lazyCalcOffsets() bool &#123;</span><br><span class="line">         .          .     31:if m.offsets !&#x3D; nil &#123;</span><br><span class="line">         .          .     32:return true</span><br><span class="line">         .          .     33:&#125;</span><br><span class="line">      36MB       36MB     34:res :&#x3D; make(map[int]Offset)</span><br><span class="line">         .          .     35:var off Offset &#x3D; 0</span><br><span class="line">         .          .     36:var unionNum &#x3D; 0</span><br><span class="line">         .          .     37:for fieldNum, fieldType :&#x3D; range m.scheme &#123;</span><br><span class="line">         .          .     38:&#x2F;&#x2F; write the current offset</span><br><span class="line">         .          .     39:off &#x3D; alignOffsetToType(off, fieldType)</span><br><span class="line">         .          .     40:if off &gt;&#x3D; m.size &#123;</span><br><span class="line">         .          .     41:return false</span><br><span class="line">         .          .     42:&#125;</span><br><span class="line">  106.02MB   106.02MB     43:res[fieldNum] &#x3D; off</span><br><span class="line">         .          .     44:</span><br><span class="line">         .          .     45:&#x2F;&#x2F; skip over the content to the next field</span><br><span class="line">         .          .     46:if fieldType &#x3D;&#x3D; TypeUnion &#123;</span><br><span class="line">         .          .     47:if off + FieldSizes[TypeUnion] &gt; m.size &#123;</span><br><span class="line">         .          .     48:return false</span><br></pre></td></tr></table></figure><p>我们可以看到两个有趣的信息。同样,请记住 pprof 堆画像文件会对有关分配的信息进行采样。我们可以看到<code>flat</code>和<code>cum</code>数字是相同的。这表明分配的内存也在这些分配点被保留。</p><p>接下来,我们可以看到<code>make()</code>占用了一些内存。这是很正常的,它是指向数据结构的指针。然而,我们也看到第 43 行的赋值占用了内存,这意味着它分配了内存。</p><p>这让我们学习了映射 map,其中 map 的赋值不是简单的变量赋值。<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics" target="_blank" rel="noopener">本文</a>详细介绍了 map 的工作原理。简而言之,map 与切片相比,map 开销更大,“成本”更大,元素更多。</p><p>接下来应该保持警惕：如果内存消费是一个相关的考虑因素的话,当数据不稀疏或者可以转换为顺序索引时,使用<code>map[int]T</code>也没问题,但是通常应该使用切片实现。然而,当扩容一个大的切片时,切片可能会使操作变慢,在 map 中这种变慢可以忽略不计。优化没有万能的方法。</p><p>在上面的代码中,在检查了我们如何使用该 map 之后,我们意识到虽然我们想象它是一个稀疏数组,但它并不是那么稀疏。这与上面描述的情况匹配,我们能马上想到一个将 map 改为切片的小型重构实际上是可行的,并且可能使该代码内存效率更好。所以我们将其改为：</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *InternalMessage)</span> <span class="hljs-title">lazyCalcOffsets</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> m.offsets != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">res := <span class="hljs-built_in">make</span>([]Offset, <span class="hljs-built_in">len</span>(m.scheme))</span><br><span class="line"><span class="hljs-keyword">var</span> off Offset = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">var</span> unionNum = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> fieldNum, fieldType := <span class="hljs-keyword">range</span> m.scheme &#123;</span><br><span class="line"><span class="hljs-comment">// write the current offset</span></span><br><span class="line">off = alignOffsetToType(off, fieldType)</span><br><span class="line"><span class="hljs-keyword">if</span> off &gt;= m.size &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">res[fieldNum] = off</span><br></pre></td></tr></table></figure><p>就这么简单,我们现在使用切片替代了 map。由于我们接收数据的方式是懒加载进去的,并且我们随后如何访问这些数据,除了这两行和保存该数据的结构之外,不需要修改其他代码。这些修改对内存消耗有什么影响？</p><p>让我们来看看<code>benchcmp</code>的几次测试</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">benchmark                       old ns&#x2F;op     new ns&#x2F;op     delta</span><br><span class="line">BenchmarkUint32Read-4           2047          1381          -32.54%</span><br><span class="line">BenchmarkUint64Read-4           507           321           -36.69%</span><br><span class="line">BenchmarkSingleUint64Read-4     251           164           -34.66%</span><br><span class="line">BenchmarkStringRead-4           1572          1126          -28.37%</span><br><span class="line"></span><br><span class="line">benchmark                       old allocs     new allocs     delta</span><br><span class="line">BenchmarkUint32Read-4           14             7              -50.00%</span><br><span class="line">BenchmarkUint64Read-4           4              2              -50.00%</span><br><span class="line">BenchmarkSingleUint64Read-4     2              1              -50.00%</span><br><span class="line">BenchmarkStringRead-4           12             6              -50.00%</span><br><span class="line"></span><br><span class="line">benchmark                       old bytes     new bytes     delta</span><br><span class="line">BenchmarkUint32Read-4           1120          80            -92.86%</span><br><span class="line">BenchmarkUint64Read-4           320           16            -95.00%</span><br><span class="line">BenchmarkSingleUint64Read-4     160           8             -95.00%</span><br><span class="line">BenchmarkStringRead-4           960           32            -96.67%</span><br></pre></td></tr></table></figure><p>读取测试的初始化创建分配的数据结构。我们可以看到运行时间提高了约 30％,内存分配下降了 50％,内存消耗提高了&gt; 90％（！）</p><p>由于切片（之前是 map）从未添加过很多数据,因此这些数字几乎显示了我们将在生产中看到的内容。它取决于数据熵,但可能在内存分配和内存消耗还有提升的空间。</p><p>从同一测试中获取堆画像文件来看一下<code>pprof</code>,我们将看到现在内存消耗实际上下降了约 90％。</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*d8jhBw3h_ZrHvbgv95Pjvw.png" alt=""></p><p>需要注意的是,对于较小的数据集,在切片满足的情况就不要使用 map,因为 map 的开销很大。</p><h2 id="完整的-core-dump"><a href="#完整的-core-dump" class="headerlink" title="完整的 core dump"></a>完整的 core dump</h2><p>如上所述,这就是我们现在看到工具受限制的地方。当我们调查这个问题时,我们相信自己能够找到根对象,但没有取得多大成功。随着时间的推移,Go 会以很快的速度发展,但在完全转储或内存表示的情况下,这种演变会带来代价。完整的堆转储格式在修改时不向后兼容。<a href="https://github.com/golang/go/wiki/heapdump15-through-heapdump17" target="_blank" rel="noopener">这里</a>描述的最新版本和写入完整堆转储,可以使用<code>debug.WriteHeapDump()</code>。</p><p>虽然现在我们没有“陷入困境”,因为没有很好的解决方案来探索完全转储（full down）。 目前为止,<code>pprof</code>回答了我们所有的问题。</p><p>请注意,互联网会记住许多不再相关的信息。如果你打算尝试自己打开一个完整的转储,那么你应该忽略一些事情,从 go1.11 开始：</p><ul><li>没有办法在 MacOS 上打开和调试完整的 core dump,只有 Linux 可以。</li><li><a href="https://github.com/randall77/hprof" target="_blank" rel="noopener">https://github.com/randall77/hprof</a>上的工具适用于 Go1.3,它存在 1.7+的分支,但它也不能正常工作（不完整）。</li><li>在<a href="https://github.com/golang/debug/tree/master/cmd/viewcore" target="_blank" rel="noopener">https://github.com/golang/debug/tree/master/cmd/viewcore</a>上查看并不真正编译。它很容易修复（内部的包指向 golang.org 而不是 github.com）,但是,在 MacOS 或者 Linux 上可能都不起作用。</li><li>此外,<a href="https://github.com/randall77/corelib" target="_blank" rel="noopener">https://github.com/randall77/corelib</a>在 MacOS 也会失败</li></ul><h2 id="pprof-UI"><a href="#pprof-UI" class="headerlink" title="pprof UI"></a>pprof UI</h2><p>关于 pprof,要注意的一个细节是它的 UI 功能。在开始调查与使用 pprof 画像文件相关的问题时可以节省大量时间。（译者注：需要安装 graphviz）</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof -http=:8080 heap.out</span><br></pre></td></tr></table></figure><p>此时它应该打开 Web 浏览器。如果没有,则浏览你设置的端口。它使你能够比命令行更快地更改选项并获得视觉反馈。消费信息的一种非常有用的方法。</p><p>UI 确实让我熟悉了火焰图,它可以非常快速地暴露代码的罪魁祸首。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Go 是一种令人兴奋的语言,拥有非常丰富的工具集,你可以用 pprof 做更多的事情。例如,这篇文章没有涉及到的 CPU 分析。</p><p>其他一些好的文章：</p><ul><li><a href="https://rakyll.org/archive/" target="_blank" rel="noopener">https://rakyll.org/archive/</a> - 我相信这是围绕性能监控的主要贡献者之一,她的博客上有很多好帖子</li><li><a href="https://github.com/google/gops" target="_blank" rel="noopener">https://github.com/google/gops</a> - 由<a href="https://medium.com/@rakyll" target="_blank" rel="noopener">JBD</a>（运行 rakyll.org）编写,此工具保证是自己的博客文章。</li><li><a href="https://medium.com/@cep21/using-go-1-10-new-trace-features-to-debug-an-integration-test-1dc39e4e812d" target="_blank" rel="noopener">https://medium.com/@cep21/using-go-1-10-new-trace-features-to-debug-an-integration-test-1dc39e4e812d</a> - <code>go tool trace</code>是用来做 CPU 分析的,这是一个关于该分析功能的不错的帖子。</li></ul><blockquote><ul><li>原文地址：<a href="https://medium.freecodecamp.org/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192" target="_blank" rel="noopener">How I investigated memory leaks in Go using pprof on a large codebase</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕红黑树</title>
      <link href="/2020/04/11/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2020/04/11/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>红黑树,作为一种复杂的数据结构,曾经也是令我抓狂。但是该结构也是相当重要的结构,在 Java 的 TreeMap 中的实现就是红黑树这个高级数据结构。本文会对红黑树算法可行性进行证明,并且给出最终实现,以下理解若有出入,希望能够指出。</p><a id="more"></a><h1 id="一、如何保持平衡"><a href="#一、如何保持平衡" class="headerlink" title="一、如何保持平衡"></a>一、如何保持平衡</h1><p>左旋右旋过程如下:</p><p><img src="https://md.ulovecode.com/static/images/posts/roate.png?imageView2/2/h/900" alt="过程"></p><h5 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a><strong>左旋转</strong></h5><ol><li>替代 Y 结点为 X 结点的位置,先将 Y 结点的父母结点设置为 X 结点的父结点,并设置 X 的父结点的子结点（根据 X 是 X 父结点的子结点位置来设置为左或者右结点）,如果 X 的父结点为空,则设置 Y 的父结点也为空。</li><li>原先的结点布局为 X 的子结点为 a 和 Y ,Y 的子结点为 b 和 c。旋转后结点布局应该为 X 的子结点为 a 和 b ,y 的子结点为 X 和 c。 其结点设置过程为设置 X 的 左结点为 a,右结点为 b,并将 a 和 b 的父结点设置 X 。 同理如下可以设置 Y 的结点也这样。</li></ol><h5 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a><strong>右旋转</strong></h5><p>原理同左旋转过程。</p><h5 id="旋转过程可行性分析"><a href="#旋转过程可行性分析" class="headerlink" title="旋转过程可行性分析"></a><strong>旋转过程可行性分析</strong></h5><p>假如树本身就是一棵平衡二叉树,只是进行旋转操作,在左旋转过程中,变换的操作为将 Y 的左结点设置为 X 的右结点,将 X 设置为 Y 的左结点。 根据二叉平衡树的定义,其根结点大于所有的左结点,小于所有的右结点。那么 b 结点肯定比 X 大,但是比 Y 小。所以 b 可以作为 X 的右结点。因为 Y 结点比 X 大所以,X 肯定可以作为 Y 的左结点。 并且 b 结点也是比 Y小的。所以 Y 的左子树上所有结点的值。肯定比 Y 小,证明完毕。其右旋转过程同理。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// y 替换 x</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(x *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Default node inserted will be a red node</span></span><br><span class="line">y := x.right</span><br><span class="line"><span class="hljs-comment">// 设置 y 的左结点到 x 下</span></span><br><span class="line">x.right = y.left</span><br><span class="line"><span class="hljs-keyword">if</span> y.left != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">y.left.parent = x</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-comment">// 设置 y 的父结点为 x 父结点</span></span><br><span class="line">y.parent = x.parent</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// x 是根结点</span></span><br><span class="line"><span class="hljs-comment">// this is root</span></span><br><span class="line"><span class="hljs-keyword">if</span> x.parent == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.root = y</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 将 x 的父结点指向 y</span></span><br><span class="line"><span class="hljs-keyword">if</span> x == x.parent.left &#123;</span><br><span class="line">x.parent.left = y</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">x.parent.right = y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 设置 y 的 左结点为 x</span></span><br><span class="line">y.left = x</span><br><span class="line"><span class="hljs-comment">// 设置 x 的 父结点为 y</span></span><br><span class="line">x.parent = y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">(x *Node)</span></span> &#123;</span><br><span class="line">y := x.left</span><br><span class="line">x.left = y.right</span><br><span class="line"><span class="hljs-keyword">if</span> y.right != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">y.right.parent = x</span><br><span class="line">&#125;</span><br><span class="line">y.parent = x.parent</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// this is root</span></span><br><span class="line"><span class="hljs-keyword">if</span> x.parent == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.root = y</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x == x.parent.right &#123;</span><br><span class="line">x.parent.right = y</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">x.parent.left = y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">y.right = x</span><br><span class="line">x.parent = y</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、红黑树定义"><a href="#二、红黑树定义" class="headerlink" title="二、红黑树定义"></a>二、红黑树定义</h1><ul><li>性质1：每个结点要么是黑色,要么是红色。</li><li>性质2：根结点是黑色。</li><li>性质3：每个叶子结点（NIL）是黑色。</li><li>性质4：每个红色结点的两个子结点一定都是黑色。</li><li>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</li></ul><h5 id="如何保证其平衡性？"><a href="#如何保证其平衡性？" class="headerlink" title="如何保证其平衡性？"></a><strong>如何保证其平衡性？</strong></h5><p>根据性质4和性质5可以推导出,不存在两个连续的红色结点,最短路径的结点一定都是黑色结点,之外所有的路径都包含红色结点,每个结点的路径都保证数量相同的黑色结点,这就保证了最长路径最多为最短路径的两倍。</p><h1 id="三、插入"><a href="#三、插入" class="headerlink" title="三、插入"></a>三、插入</h1><p>因为在插入之后,会改变红黑树的结构,红黑树可能变的不平衡,所以需要在插入过程之后修复二叉树的平衡性。</p><p>其中共有四种情况会违反红黑树的第四条性质:</p><p><img src="https://md.ulovecode.com/static/images/posts/red_black.png?imageView2/2/h/900" alt="四种情况"></p><p>我画出违反红黑树的四种情况如上图所示。其中图一需要右旋转过程,图二需要左旋转过程修复。图三需要先进行左旋转然后进行右旋转过程。图四需要先进行右旋转然后进行左旋转过程修复。修复后的情况为 Y 为红色结点,X 和 Z 都是黑色结点,满足红黑树的来满足第四条性质。</p><p><img src="https://md.ulovecode.com/static/images/posts/comand_roate.png?imageView2/2/h/900" alt="修复情况"></p><p>其中在违反红黑树的四种情况下。其中 X 插入的颜色为红色,在这种情况下如果 X 的 父结点是红色,那么违反了性质 4 ： 每个红色结点到两个结点一定都是黑色。在其前提下,又要分为两种情况判断其 X 的 Uncle 结点的颜色。</p><ul><li>假如 Uncle 结点是红色,那么性质 5 并没有被违反,因此只需要重新设置结点的颜色即可,将 P 结点设置为黑色,将 G 结点设置为红色,将 U 结点设置为黑色。在这样的情况下满足性质 4 和性质 5。并且不需要关心 X 结点是 P 结点的左结点还是右结点,P 是 G 结点的左结点还是右结点。图中所列出的只是其中一种情况。因为将 G 结点设置为红色了,所以需要递推检查 G 的结点是否满足性质 4 和 性质 5。</li><li>假如 Uncle 结点是黑色结点,X 是红色结点,因此性质 5 也被破坏了。其修复过程为,假如 X 是 P 的右结点,需要进行左旋转操作为第二步操作。在这种情况下将 G 结点设置为红色,将 P 结点设置为黑色,然后进行右旋转过程。此时 P 结点被设置为根结点, P 结点为黑色,因此 P 结点满足性质 4 ,不用在继续往上递推修复。同时整个树满足性质 4 和 性质 5 （因为每个叶子（NIL）为黑色）。同时上面情况的对称情况同理。</li></ul><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h5><p>假如不考虑红黑树的修复,代码如下:</p><ol><li>根据 value 找到合适的插入位置</li><li>将插入结点的父结点设置为 y</li><li>根据 y 结点为空将该结点设置为根结点。</li><li>如果 y 结点不为空,就判断 y 结点 value 值 和 x 的 value 值的大小,来找到插入的位置。</li><li>将 x 结点设置为红色。</li><li>修复</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">insert</span><span class="hljs-params">(item *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> y *Node</span><br><span class="line">x := t.root</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> x != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">y = x</span><br><span class="line"><span class="hljs-keyword">if</span> item.key &lt; x.key &#123;</span><br><span class="line"><span class="hljs-comment">// insert value into the left node</span></span><br><span class="line">x = x.left</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> item.key &gt; x.key &#123;</span><br><span class="line"><span class="hljs-comment">// insert value into the left node</span></span><br><span class="line">x = x.right</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// value exists</span></span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.size++</span><br><span class="line">item.parent = y</span><br><span class="line">item.color = RED</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> y == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">item.color = BLACK</span><br><span class="line">t.root = item</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> item.key &lt; y.key &#123;</span><br><span class="line">y.left = item</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">y.right = item</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Checking RBT conditions and repairing the node</span></span><br><span class="line">t.insertRepairNode(item)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入修复过程如下:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">insertRepairNode</span><span class="hljs-params">(x *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// N's parent (P) is not black</span></span><br><span class="line"><span class="hljs-keyword">var</span> y *Node</span><br><span class="line"><span class="hljs-keyword">for</span> x != t.root &amp;&amp; x.parent.color == RED &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x.parent == x.grandparent().left &#123;</span><br><span class="line">y = x.grandparent().right</span><br><span class="line"><span class="hljs-keyword">if</span> y != <span class="hljs-literal">nil</span> &amp;&amp; y.color == RED &#123;</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">y.color = BLACK</span><br><span class="line">x.grandparent().color = RED</span><br><span class="line">x = x.grandparent()</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x == x.parent.right &#123;</span><br><span class="line">x = x.parent</span><br><span class="line">t.leftRotate(x)</span><br><span class="line">&#125;</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">x.grandparent().color = RED</span><br><span class="line">t.rightRotate(x.grandparent())</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">y = x.grandparent().left</span><br><span class="line"><span class="hljs-keyword">if</span> y != <span class="hljs-literal">nil</span> &amp;&amp; y.color == RED &#123;</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">y.color = BLACK</span><br><span class="line">x.grandparent().color = RED</span><br><span class="line">x = x.grandparent()</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x == x.parent.left &#123;</span><br><span class="line">x = x.parent</span><br><span class="line">t.rightRotate(x)</span><br><span class="line">&#125;</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">x.grandparent().color = RED</span><br><span class="line">t.leftRotate(x.grandparent())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// N is the root node, i.e., first node of red–black tree</span></span><br><span class="line">t.root.color = BLACK</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在上面的分析过程中,已经分析,此处就不再分析。</p><h1 id="四、删除"><a href="#四、删除" class="headerlink" title="四、删除"></a>四、删除</h1><p>删除过程分为删除节点和修复删除造成的结点不平衡。</p><h4 id="删除思路"><a href="#删除思路" class="headerlink" title="删除思路"></a><strong>删除思路</strong></h4><p><img src="https://md.ulovecode.com/static/images/posts/red_black_tree_delete_min_node.png?imageView2/2/h/900" alt="删除过程"></p><p>其删除思路可以简单概括为找到距离删除结点最近的值。</p><ul><li>如果左结点为空,直接用右结点替代</li><li>如果右结点为空,直接用左结点替代</li><li>如果左右结点都不为空<ol><li>找到离被删除结点最近的值（后继或者前驱）<ol><li>被删除右结点不为空,则找到被删除结点的右结点的最左结点,该结点是比该被删结点刚刚大的值。</li><li>否则往上不断查找子结点是父结点的左结点,那么被找到父结点一定是比被删除结点刚刚大的值。</li></ol></li><li>将前驱或者后继的值复制给被删除结点,然后删除前驱或者后继结点（如果存在子结点,就将子结点的<code>parent</code>设置为被删除前驱或者后继结点的<code>parent</code>,并将其<code>parent</code>指回子结点。如果没有子结点（这种情况只会存在于后驱结点）,就不用设置 ）。</li><li>如果被删除的结点是黑色结点要进行修复。因为违反了性质 5,必定造成被删除结点路径的黑色结点少一个。</li></ol></li></ul><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(key <span class="hljs-keyword">int64</span>)</span></span> &#123;</span><br><span class="line">z := t.Search(key)</span><br><span class="line"><span class="hljs-keyword">if</span> z == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">t.<span class="hljs-built_in">delete</span>(z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">Search</span><span class="hljs-params">(key <span class="hljs-keyword">int64</span>)</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line">x := t.root</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> x != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">switch</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> key == x.key:</span><br><span class="line"><span class="hljs-keyword">return</span> x</span><br><span class="line"><span class="hljs-keyword">case</span> key &lt; x.key:</span><br><span class="line">x = x.left</span><br><span class="line"><span class="hljs-keyword">case</span> key &gt; x.key:</span><br><span class="line">x = x.right</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">delete</span><span class="hljs-params">(z *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> x, y *Node</span><br><span class="line">y = z</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> z.left == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">x = z.right</span><br><span class="line">t.replace(z, z.right)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> z.right == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">x = z.left</span><br><span class="line">t.replace(z, z.left)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">y = z.successor()</span><br><span class="line">z.key = y.key</span><br><span class="line">z.value = y.value</span><br><span class="line"><span class="hljs-keyword">if</span> y.left != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">x = y.left</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> y.right != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">x = y.right</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> x != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">x.parent = y.parent</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> y.parent == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.root = x</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> y == y.parent.left &#123;</span><br><span class="line">y.parent.left = x</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">y.parent.right = x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> y.color == BLACK &#123;</span><br><span class="line">t.deleteRepairNode(x)</span><br><span class="line">&#125;</span><br><span class="line">t.size--</span><br><span class="line"></span><br><span class="line">y.parent = <span class="hljs-literal">nil</span></span><br><span class="line">y.left = <span class="hljs-literal">nil</span></span><br><span class="line">y.right = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">replace</span><span class="hljs-params">(a, b *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> a.parent == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">t.root = b</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a == a.parent.left &#123;</span><br><span class="line">a.parent.left = b</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">a.parent.right = b</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> b != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">b.parent = a.parent</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *Node)</span> <span class="hljs-title">successor</span><span class="hljs-params">()</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> n.right != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> n.right.minimum()</span><br><span class="line">&#125;</span><br><span class="line">y := n.parent</span><br><span class="line"><span class="hljs-keyword">for</span> y != <span class="hljs-literal">nil</span> &amp;&amp; n == y.right &#123;</span><br><span class="line">n = y</span><br><span class="line">y = y.parent</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除修复思路"><a href="#删除修复思路" class="headerlink" title="删除修复思路"></a><strong>删除修复思路</strong></h4><p><img src="https://md.ulovecode.com/static/images/posts/red_black_tree_case5.png?imageView2/2/h/900" alt="删除修复过程"></p><p>其删除修复过程,主要因为破坏了性质 5,我认为维基百科讲的较为复杂,但是图确实非常好。所以我会用里面的几张图。</p><p>令替代了被删除结点位置的结点为 x</p><ul><li><p>情况1: x 成为新的根结点,那么不用修复只需要将 x 设置成黑色结点 ,来保证性质 2。</p></li><li><p>情况2: x 的兄弟结点为红色,那么将兄弟结点设置为黑色,将 p 结点设置为红色,对 p 结点进行左旋转,并重新设置 x 的兄弟结点的符号。该情况可能会满足 4,5,6 情况。</p></li></ul><p><img src="https://md.ulovecode.com/static/images/posts/Red-black_tree_delete_case_2.png" alt="case2"></p><ul><li>情况3: p 是黑色结点,兄弟结点的两个子结点都为黑色结点,将兄弟结点设置为红色。那么 p 的左子树和右子树到达叶子结点的黑色结点数是相同的,但是经过 p 的结点比不经过 p 的结点少了一个黑色结点,所以令<code>x = x.parent</code>要向上处理 p 结点。</li></ul><p><img src="https://md.ulovecode.com/static/images/posts/Red-black_tree_delete_case_3.png" alt="case3"></p><ul><li>情况4: p 是红色结点,兄弟结点的两个子结点都为黑色结点,兄弟结点设置为红色,那么将 p 设置为红色结点,满足性质 4,相当于将 p 的左子树和右子树同时都将黑色结点数都减少一个,但是 p 本身变成了一个黑色结点,这样经过 p 和 不经过 p 都是同样的黑色结点。</li></ul><p><img src="https://md.ulovecode.com/static/images/posts/Red-black_tree_delete_case_4.png" alt="case4"></p><ul><li>情况5: 兄弟结点的左结点为红色,对兄弟结点进行右旋转。此时兄弟结点变成了原来兄弟结点的左结点的右结点,满足情况6。</li></ul><p><img src="https://md.ulovecode.com/static/images/posts/Red-black_tree_delete_case_5.png" alt="case5"></p><p>情况6: 兄弟结点的右结点为红色,将兄弟结点的颜色设置为和 p 结点一致,将兄弟结点的右结点设置为黑色,然后进行左旋转。其过程就是给左子树增加一个黑色结点。满足性质 5。</p><p><img src="https://md.ulovecode.com/static/images/posts/Red-black_tree_delete_case_6.png" alt="case6"></p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Tree)</span> <span class="hljs-title">deleteRepairNode</span><span class="hljs-params">(x *Node)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> w *Node</span><br><span class="line"><span class="hljs-keyword">for</span> x != t.root &amp;&amp; x.color == BLACK &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> x == x.parent.left &#123;</span><br><span class="line">w = x.sibling()</span><br><span class="line"><span class="hljs-comment">// case2</span></span><br><span class="line"><span class="hljs-keyword">if</span> w.color == RED &#123;</span><br><span class="line">w.color = BLACK</span><br><span class="line">x.parent.color = RED</span><br><span class="line">t.leftRotate(x.parent)</span><br><span class="line">w = x.parent.right</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// case3 4  这里是因为违反了性质五</span></span><br><span class="line"><span class="hljs-keyword">if</span> w.left.color == BLACK &amp;&amp; w.right.color == BLACK &#123;</span><br><span class="line">w.color = RED</span><br><span class="line">x = x.parent</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// case5</span></span><br><span class="line"><span class="hljs-keyword">if</span> w.right.color == BLACK &#123;</span><br><span class="line">w.left.color = BLACK</span><br><span class="line">w.color = RED</span><br><span class="line">t.rightRotate(w)</span><br><span class="line">w = x.parent.right</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// case6</span></span><br><span class="line">w.color = x.parent.color</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">w.right.color = BLACK</span><br><span class="line">t.leftRotate(x.parent)</span><br><span class="line"><span class="hljs-comment">// 退出循环</span></span><br><span class="line">x = t.root</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 对称情况</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">w = x.sibling()</span><br><span class="line"><span class="hljs-keyword">if</span> w.color == RED &#123;</span><br><span class="line">w.color = BLACK</span><br><span class="line">x.parent.color = RED</span><br><span class="line">t.rightRotate(x.parent)</span><br><span class="line">w = x.parent.left</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> w.left.color == BLACK &amp;&amp; w.right.color == BLACK &#123;</span><br><span class="line">w.color = RED</span><br><span class="line">x = x.parent</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> w.left.color == BLACK &#123;</span><br><span class="line">w.right.color = BLACK</span><br><span class="line">w.color = RED</span><br><span class="line">t.leftRotate(w)</span><br><span class="line">w = x.parent.left</span><br><span class="line">&#125;</span><br><span class="line">w.color = x.parent.color</span><br><span class="line">x.parent.color = BLACK</span><br><span class="line">w.left.color = BLACK</span><br><span class="line">t.rightRotate(x.parent)</span><br><span class="line">x = t.root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// case1</span></span><br><span class="line">x.color = BLACK</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *Node)</span> <span class="hljs-title">sibling</span><span class="hljs-params">()</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line">p := n.father()</span><br><span class="line"><span class="hljs-comment">// No parent means no sibling</span></span><br><span class="line"><span class="hljs-keyword">if</span> p == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n == p.left &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> p.right</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p.left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中我已经标明了<code>case1 ~ case6</code>,还有其对称情况。上面已经说过了,这里就不再说了。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>红黑树插入过程较为复杂,但是只要清楚破坏性质 4 的四种情况,应该就很容理解。对于删除过程后面会继续补充完整。其删除过程看起来很复杂,其实只不过是穷举了五种情况<code>n.parent()</code>,<code>n.sibling()</code>,<code>n.sibling().left</code>,<code>n.sibling().right</code>为红色结点和全部都为黑色结点,顺序为<code>S A P SL SR</code>在这五种情况下的修复过程而已,仔细一想其实还好,没有很复杂。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树神级遍历方法</title>
      <link href="/2020/04/09/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A5%9E%E7%BA%A7%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/09/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A5%9E%E7%BA%A7%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>二叉树遍历的方法有很多,例如：前序遍历,中序遍历,后序遍历。但是时间复杂度却只能做到 O(N), 空间时间复杂度 O(N)。今天要介绍是 morris 遍历,时间复杂度可以做到 O(N),空间时间复杂度可以做到 O(1)。</p><a id="more"></a><h1 id="一、Morris-遍历"><a href="#一、Morris-遍历" class="headerlink" title="一、Morris 遍历"></a>一、Morris 遍历</h1><h5 id="1-该算法是如何做到空间时间复杂度为-O（1）"><a href="#1-该算法是如何做到空间时间复杂度为-O（1）" class="headerlink" title="1. 该算法是如何做到空间时间复杂度为 O（1）"></a><strong>1. 该算法是如何做到空间时间复杂度为 O（1）</strong></h5><p>在我们之前学习过的算法中,遍历二叉树的算法都会使用到栈空间,假如不递归,也会使用栈结构,所以空间时间复杂度是 O（N）无法避免。而 Morris 遍历则是使用当前节点的左节点的最右节点指向当前节点,来保证可以回到上层,所以不用使用栈空间结构。​</p><h5 id="2-算法流程"><a href="#2-算法流程" class="headerlink" title="2. 算法流程"></a><strong>2. 算法流程</strong></h5><p><img src="https://md.ulovecode.com/static/images/posts/20161017175404766.png" alt="网图"></p><ol><li>从根节点开始遍历</li><li>首先看左节点是否为空<ol><li>如果为空</li><li>否则直接遍历右节点</li></ol></li><li>如果左节点不为空,则找到左节点的最右节点<ol><li>如果最右节点指向的是当前节点,则将其置为空</li><li>如果最右节点指向的是空,那么就将最右节点指向当前节点,直接进入下一次循环,从步骤 1</li></ol></li><li>向右遍历</li></ol><h5 id="3-Morris-遍历是如何遍历完下层-然后回到上一层"><a href="#3-Morris-遍历是如何遍历完下层-然后回到上一层" class="headerlink" title="3. Morris 遍历是如何遍历完下层,然后回到上一层"></a><strong>3. Morris 遍历是如何遍历完下层,然后回到上一层</strong></h5><p>在之前说的算法流程中提过,将当前左节点的最右指针指向,这一次是第一次遍历到这个位置,当遍历到下层的时候,没有最左节点的时候,就会顺着我们定义好的右节点指向上一层节点移动,这个时候就回到了上层,然后往右遍历,会遍历到最右节点第二次。所以该节点会被遍历到两次。</p><h1 id="二、-代码实现"><a href="#二、-代码实现" class="headerlink" title="二、 代码实现"></a>二、 代码实现</h1><h5 id="morris-遍历"><a href="#morris-遍历" class="headerlink" title="morris 遍历"></a><strong>morris 遍历</strong></h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">morris</span><span class="hljs-params">(node: TreeNode)</span>:</span></span><br><span class="line">    cur = node</span><br><span class="line">    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        mostRight: TreeNode = cur.left</span><br><span class="line">        <span class="hljs-comment"># 没有左节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> mostRight <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">            <span class="hljs-comment"># 找到最右左节点</span></span><br><span class="line">            <span class="hljs-keyword">while</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> cur:</span><br><span class="line">                mostRight = mostRight.right</span><br><span class="line">            <span class="hljs-keyword">if</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">                 <span class="hljs-comment"># 1</span></span><br><span class="line">                mostRight.right = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-comment"># 2</span></span><br><span class="line">                mostRight.right = <span class="hljs-literal">None</span></span><br><span class="line">        <span class="hljs-keyword">else</span> </span><br><span class="line">            <span class="hljs-comment"># 3</span></span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">        cur = cur.right</span><br></pre></td></tr></table></figure><p>和我说算法流程一样,我就不解释了。解释一下遍历的位置,1 位置遍历到是每一个节点的起始节点,可以说是父母节点,2 位置则是第二次遍历的位置,此时子节点已经遍历完毕,该位置为后根节点 ,3 位置可以说是右节点的遍历。</p><p>根据 morris 遍历,我们可以加工出前序遍历,中序遍历,后序遍历。</p><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a><strong>前序遍历</strong></h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preMorris</span><span class="hljs-params">(node: TreeNode, f)</span>:</span></span><br><span class="line">    cur = node</span><br><span class="line">    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        mostRight: TreeNode = cur.left</span><br><span class="line">        <span class="hljs-comment"># 没有左节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> mostRight <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">            <span class="hljs-comment"># 找到最右左节点</span></span><br><span class="line">            <span class="hljs-keyword">while</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> cur:</span><br><span class="line">                mostRight = mostRight.right</span><br><span class="line">            <span class="hljs-comment"># 指回cur节点   </span></span><br><span class="line">            <span class="hljs-keyword">if</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">                mostRight.right = cur</span><br><span class="line">                f(cur.val)</span><br><span class="line">                cur = cur.left</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            <span class="hljs-comment"># 如果当前最右节点指向cur   后打印</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                mostRight.right = <span class="hljs-literal">None</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            f(cur.val)</span><br><span class="line">        cur = cur.right</span><br></pre></td></tr></table></figure><p>根据我一开始的解释,应该能看的很明白,先遍历先根节点（包括左节点）,后遍历右节点。</p><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><strong>中序遍历</strong></h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">orderMorris</span><span class="hljs-params">(node: TreeNode, f)</span>:</span></span><br><span class="line">    cur = node</span><br><span class="line">    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        mostRight: TreeNode = cur.left</span><br><span class="line">        <span class="hljs-comment"># 没有左节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> mostRight <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">            <span class="hljs-comment"># 找到最右左节点</span></span><br><span class="line">            <span class="hljs-keyword">while</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> cur:</span><br><span class="line">                mostRight = mostRight.right</span><br><span class="line">            <span class="hljs-comment"># 指回cur节点 </span></span><br><span class="line">            <span class="hljs-keyword">if</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">                mostRight.right = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            <span class="hljs-comment"># 如果当前最右节点指向cur   后打印</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                mostRight.right = <span class="hljs-literal">None</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">        f(cur.val)</span><br><span class="line">        cur = cur.right</span><br></pre></td></tr></table></figure><p>中序遍历可以直接使用最外面一层,最外一层的遍历方式就是,查找到最左节点后,这个时候才会走到中序遍历的过程,这个时候遍历的就是最左节点,然后最左节点的右节点指向上一层节点（父母节点）,也就是根节点,然后根节点,首先会将<code>mostRight.right</code>置为空,然后执行<code>cur = cur.right</code>往右遍历。此时遍历到的节点就是左根右,符合中序遍历,然后递推到整个过程就会将整棵树遍历完。</p><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a><strong>后序遍历</strong></h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseEdge</span><span class="hljs-params">(mostRight)</span> -&gt; TreeNode:</span></span><br><span class="line">    pre = <span class="hljs-literal">None</span></span><br><span class="line">    <span class="hljs-keyword">while</span> mostRight <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        next = mostRight.right</span><br><span class="line">        mostRight.right = pre</span><br><span class="line">        pre = mostRight</span><br><span class="line">        mostRight = next</span><br><span class="line">    <span class="hljs-keyword">return</span> pre</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printEdge</span><span class="hljs-params">(mostRight, f)</span>:</span></span><br><span class="line">    head: TreeNode = reverseEdge(mostRight)</span><br><span class="line">    <span class="hljs-keyword">while</span> head <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        f(head.val)</span><br><span class="line">    reverseEdge(head)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postmorris</span><span class="hljs-params">(node: TreeNode, f)</span>:</span></span><br><span class="line">    cur = node</span><br><span class="line">    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        mostRight: TreeNode = cur.left</span><br><span class="line">        <span class="hljs-comment"># 没有左节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> mostRight <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:</span><br><span class="line">            <span class="hljs-comment"># 找到最右左节点</span></span><br><span class="line">            <span class="hljs-keyword">while</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> cur:</span><br><span class="line">                mostRight = mostRight.right</span><br><span class="line">            <span class="hljs-comment"># 指回cur节点 </span></span><br><span class="line">            <span class="hljs-keyword">if</span> mostRight.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">                <span class="hljs-comment"># 1</span></span><br><span class="line">                mostRight.right = cur</span><br><span class="line">                cur = cur.left</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            <span class="hljs-comment"># 如果当前最右节点指向cur   后打印</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-comment"># 2</span></span><br><span class="line">                printEdge(mostRight, f)</span><br><span class="line">                mostRight.right = <span class="hljs-literal">None</span></span><br><span class="line">        cur = cur.right</span><br><span class="line">    printEdge(node, f)</span><br></pre></td></tr></table></figure><p>后序遍历会稍微复杂点,其只用用到了第二次遍历,这个时候已经遍历到最左位置,过程为翻转最右链表,然后遍历,翻转回来,那么得到的结果就是左节点先被遍历到,然后是右节点,然后遍历到上一层后的节点就是根节点,那么顺序就是左右根。翻转第一次为了得到后序遍历顺序,翻转第二次,防止破坏原来的数据结构。遍历到最后只有<code>head</code>节点的右链表,因为<code>head</code>节点没有上层节点,所以<code>head</code>永远都不会进入 1 和 2 。所以最后我们需要手动遍历<code>head</code>节点。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>morris 遍历作为一种不错的优化手段,其后序遍历较为复杂外,前序遍历和中序遍历都很简单,在这两种遍历的情况下,可以优先选择这种遍历。后序遍历的话,对空间复杂度有要求的话,则可以使用。当然其实都可以在日常使用这种遍历方式去遍历二叉树,因为也都不是很复杂。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对于 Golang 设计模式中不同的理解</title>
      <link href="/2020/04/07/Go/%E6%88%91%E5%AF%B9%E4%BA%8EGolang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2020/04/07/Go/%E6%88%91%E5%AF%B9%E4%BA%8EGolang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>设计模式,自打我开始学习编程起,这就是一个津津乐道的话题。怎么编写好味道的代码,如何写出合适的设计代码帮助项目更容易理解,代码更简洁,这是我在项目中常常思考的问题。在golang 中有和其他语言不同的区别。例如函数作为一等公民,goroutine , chan 等特性,对于这些特性我思考如何能够编写适用于 golang 中的设计模式,而不是一味的套用着老思想的设计模式,以下是针对开源项目 <a href="https://github.com/tmrts/go-patterns" target="_blank" rel="noopener">go-patterns</a> 的理解。</p><a id="more"></a><h2 id="习惯型"><a href="#习惯型" class="headerlink" title="习惯型"></a><strong>习惯型</strong></h2><h4 id="1-函数可选项"><a href="#1-函数可选项" class="headerlink" title="1. 函数可选项"></a><strong>1. 函数可选项</strong></h4><blockquote><p>允许使用默认设置和惯用替代创建干净的API</p></blockquote><p>选项</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Options <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">UID         <span class="hljs-keyword">int</span></span><br><span class="line">GID         <span class="hljs-keyword">int</span></span><br><span class="line">Flags       <span class="hljs-keyword">int</span></span><br><span class="line">Contents    <span class="hljs-keyword">string</span></span><br><span class="line">Permissions os.FileMode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Option <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Options)</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UID</span><span class="hljs-params">(userID <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(args *Options)</span></span> &#123;</span><br><span class="line">args.UID = userID</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GID</span><span class="hljs-params">(groupID <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(args *Options)</span></span> &#123;</span><br><span class="line">args.GID = groupID</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Contents</span><span class="hljs-params">(c <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(args *Options)</span></span> &#123;</span><br><span class="line">args.Contents = c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Permissions</span><span class="hljs-params">(perms os.FileMode)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(args *Options)</span></span> &#123;</span><br><span class="line">args.Permissions = perms</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造器</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(filepath <span class="hljs-keyword">string</span>, setters ...Option)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Default Options</span></span><br><span class="line">args := &amp;Options&#123;</span><br><span class="line">UID:         os.Getuid(),</span><br><span class="line">GID:         os.Getgid(),</span><br><span class="line">Contents:    <span class="hljs-string">""</span>,</span><br><span class="line">Permissions: <span class="hljs-number">0666</span>,</span><br><span class="line">Flags:       os.O_CREATE | os.O_EXCL | os.O_WRONLY,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> _, setter := <span class="hljs-keyword">range</span> setters &#123;</span><br><span class="line">setter(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f, err := os.OpenFile(filepath, args.Flags, args.Permissions)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> _, err := f.WriteString(args.Contents); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> f.Chown(args.UID, args.GID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用一下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">emptyFile, err := file.New(<span class="hljs-string">"/tmp/empty.txt"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fillerFile, err := file.New(<span class="hljs-string">"/tmp/file.txt"</span>, file.UID(<span class="hljs-number">1000</span>), file.Contents(<span class="hljs-string">"Lorem Ipsum Dolor Amet"</span>))</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出了一个关于函数选项模式的例子,这样做有什么好处呢？使程序看起来更加简洁,假如我们不按照这样的方式写,会是什么情况?</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(filepath <span class="hljs-keyword">string</span>,uid,filepath,Flags <span class="hljs-keyword">string</span> ........... )</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Default Options</span></span><br><span class="line">args := &amp;Options&#123;</span><br><span class="line">UID:         os.Getuid(),</span><br><span class="line">GID:         os.Getgid(),</span><br><span class="line">Contents:    <span class="hljs-string">""</span>,</span><br><span class="line">Permissions: <span class="hljs-number">0666</span>,</span><br><span class="line">Flags:       os.O_CREATE | os.O_EXCL | os.O_WRONLY,</span><br><span class="line">&#125;</span><br><span class="line">f, err := os.OpenFile(filepath, args.Flags, args.Permissions)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> _, err := f.WriteString(args.Contents); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> f.Chown(args.UID, args.GID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来,函数可选项模式,使调用函数的参数列表更加简洁,并且参数列表的设置顺序不再是按照函数的形参列表的顺序,传入选项的顺序与函数已经无关了。并且通过选项形式,我们不用再去一一对应我们这个地方需要放什么参数,我门只需要调用可选项里面的函数即可,函数名轻而易举的就可以告诉我们这个参数是什么作用。</p><blockquote><p>使用场景：对配置进行初始化的时候(当我们认为需要配置的参数特别多的时候,我认为这种模式应该会非常有帮助)</p></blockquote><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a><strong>行为型</strong></h2><h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2. 策略模式"></a><strong>2. 策略模式</strong></h4><blockquote><p>通过策略行为设计模式,可以在运行时选择算法的行为。</p></blockquote><p>下面是一个例子对整数进行操作的可互换运算符对象的实现</p><p>操作符接口</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Operator <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Apply(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Operation <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Operator Operator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Operation)</span> <span class="hljs-title">Operate</span><span class="hljs-params">(leftValue, rightValue <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> o.Operator.Apply(leftValue, rightValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加法运算符</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Addition <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Addition)</span> <span class="hljs-title">Apply</span><span class="hljs-params">(lval, rval <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> lval + rval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add := Operation&#123;Addition&#123;&#125;&#125;</span><br><span class="line">add.Operate(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// 8</span></span><br></pre></td></tr></table></figure><p>乘法运算符</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Multiplication <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Multiplication)</span> <span class="hljs-title">Apply</span><span class="hljs-params">(lval, rval <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> lval * rval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mult := Operation&#123;Multiplication&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">mult.Operate(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// 15</span></span><br></pre></td></tr></table></figure><p>调用的过程应该就是向一个<code>Operation</code>类传入一个实现了<code>Operator</code>接口的类,然后调用<code>Operation</code>对象的方法,<code>Operation</code>类 本身也实现<code>Operator</code>接口,相当于采用委托的方式对子类进行动态选择。</p><p>策略模式与模板模式相似,但粒度不同,策略模式的变化是在类级别,模版方法是在方法级别。</p><blockquote><p>使用场景：在程序运行过程中可以动态的选择执行的类。</p></blockquote><h4 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3. 观察者模式"></a><strong>3. 观察者模式</strong></h4><blockquote><p>提供特定以通知事件/数据更改</p></blockquote><p>事件本身,观察者,通知者</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> (</span><br><span class="line"><span class="hljs-comment">// Event defines an indication of a point-in-time occurrence.</span></span><br><span class="line">Event <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Data in this case is a simple int, but the actual</span></span><br><span class="line"><span class="hljs-comment">// implementation would depend on the application.</span></span><br><span class="line">Data <span class="hljs-keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Observer defines a standard interface for instances that wish to list for</span></span><br><span class="line"><span class="hljs-comment">// the occurrence of a specific event.</span></span><br><span class="line">Observer <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line"><span class="hljs-comment">// OnNotify allows an event to be "published" to interface implementations.</span></span><br><span class="line"><span class="hljs-comment">// In the "real world", error handling would likely be implemented.</span></span><br><span class="line">OnNotify(Event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Notifier is the instance being observed. Publisher is perhaps another decent</span></span><br><span class="line"><span class="hljs-comment">// name, but naming things is hard.</span></span><br><span class="line">Notifier <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Register allows an instance to register itself to listen/observe</span></span><br><span class="line"><span class="hljs-comment">// events.</span></span><br><span class="line">Register(Observer)</span><br><span class="line"><span class="hljs-comment">// Deregister allows an instance to remove itself from the collection</span></span><br><span class="line"><span class="hljs-comment">// of observers/listeners.</span></span><br><span class="line">Deregister(Observer)</span><br><span class="line"><span class="hljs-comment">// Notify publishes new events to listeners. The method is not</span></span><br><span class="line"><span class="hljs-comment">// absolutely necessary, as each implementation could define this itself</span></span><br><span class="line"><span class="hljs-comment">// without losing functionality.</span></span><br><span class="line">Notify(Event)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>事件观察者的的实现,事件通知者的实现</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> (</span><br><span class="line">eventObserver <span class="hljs-keyword">struct</span>&#123;</span><br><span class="line">id <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventNotifier <span class="hljs-keyword">struct</span>&#123;</span><br><span class="line"><span class="hljs-comment">// Using a map with an empty struct allows us to keep the observers</span></span><br><span class="line"><span class="hljs-comment">// unique while still keeping memory usage relatively low.</span></span><br><span class="line">observers <span class="hljs-keyword">map</span>[Observer]<span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *eventObserver)</span> <span class="hljs-title">OnNotify</span><span class="hljs-params">(e Event)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"*** Observer %d received: %d\n"</span>, o.id, e.Data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *eventNotifier)</span> <span class="hljs-title">Register</span><span class="hljs-params">(l Observer)</span></span> &#123;</span><br><span class="line">o.observers[l] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *eventNotifier)</span> <span class="hljs-title">Deregister</span><span class="hljs-params">(l Observer)</span></span> &#123;</span><br><span class="line"><span class="hljs-built_in">delete</span>(o.observers, l)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *eventNotifier)</span> <span class="hljs-title">Notify</span><span class="hljs-params">(e Event)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> o := <span class="hljs-keyword">range</span> p.observers &#123;</span><br><span class="line">o.OnNotify(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者应该具有一定的结构,逻辑,将观察者注册到其所对应到通知者对象上,采用遍历到方式,对观察者者进行遍历,观察者被通知到后调用自身的业务逻辑方法。</p><p>使用如下</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Initialize a new Notifier.</span></span><br><span class="line">n := eventNotifier&#123;</span><br><span class="line">observers: <span class="hljs-keyword">map</span>[Observer]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Register a couple of observers.</span></span><br><span class="line">n.Register(&amp;eventObserver&#123;id: <span class="hljs-number">1</span>&#125;)</span><br><span class="line">n.Register(&amp;eventObserver&#123;id: <span class="hljs-number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A simple loop publishing the current Unix timestamp to observers.</span></span><br><span class="line">stop := time.NewTimer(<span class="hljs-number">10</span> * time.Second).C</span><br><span class="line">tick := time.NewTicker(time.Second).C</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;- stop:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-keyword">case</span> t := &lt;-tick:</span><br><span class="line">n.Notify(Event&#123;Data: t.UnixNano()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将观察者全部都注册到通知者上,使用<code>for select</code>语句对所有所有已经被注册到通知者对象上进行通知消息。</p><blockquote><p>应用场景:通知者会在符合某种条件下去通知观察者,观察者根据消息产生一些系列的逻辑。</p></blockquote><h2 id="并发型"><a href="#并发型" class="headerlink" title="并发型"></a><strong>并发型</strong></h2><h4 id="4-生成器模式"><a href="#4-生成器模式" class="headerlink" title="4. 生成器模式"></a><strong>4. 生成器模式</strong></h4><blockquote><p>一次产生一个值序列</p></blockquote><p>生成器</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Count</span><span class="hljs-params">(start <span class="hljs-keyword">int</span>, end <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> i := start; i &lt;= end ; i++ &#123;</span><br><span class="line">            <span class="hljs-comment">// Blocks on the operation</span></span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">close</span>(ch)</span><br><span class="line">&#125;(ch)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 一个<code>goroutine</code>异步创建好需要的对象,减少创建过程中带来的性能损耗</p><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="hljs-string">"No bottles of beer on the wall"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> Count(<span class="hljs-number">1</span>, <span class="hljs-number">99</span>) &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Pass it around, put one up,"</span>, i, <span class="hljs-string">"bottles of beer on the wall"</span>)</span><br><span class="line">    <span class="hljs-comment">// Pass it around, put one up, 1 bottles of beer on the wall</span></span><br><span class="line">    <span class="hljs-comment">// Pass it around, put one up, 2 bottles of beer on the wall</span></span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-comment">// Pass it around, put one up, 99 bottles of beer on the wall</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="hljs-number">100</span>, <span class="hljs-string">"bottles of beer on the wall"</span>)</span><br></pre></td></tr></table></figure><p>打印 1-99 的数。</p><blockquote><p>应用场景：创建对象需要耗费大量资源,或者解耦创建过程与调用过程,开发者不需要关心创建了什么,只需要做创建过程。</p></blockquote><h4 id="5-并发模式"><a href="#5-并发模式" class="headerlink" title="5. 并发模式"></a><strong>5. 并发模式</strong></h4><blockquote><p>并发完成大量独立任务</p></blockquote><p>信息结果</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A md5Result is the product of reading and summing a file using MD5.</span></span><br><span class="line"><span class="hljs-keyword">type</span> md5Result <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">path <span class="hljs-keyword">string</span></span><br><span class="line">sum  [md5.Size]<span class="hljs-keyword">byte</span></span><br><span class="line">err  error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并发</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sumFiles starts goroutines to walk the directory tree at root and digest each</span></span><br><span class="line"><span class="hljs-comment">// regular file.  These goroutines send the results of the digests on the md5Result</span></span><br><span class="line"><span class="hljs-comment">// channel and send the md5Result of the walk on the error channel.  If done is</span></span><br><span class="line"><span class="hljs-comment">// closed, sumFiles abandons its work.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sumFiles</span><span class="hljs-params">(done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, root <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(&lt;-<span class="hljs-keyword">chan</span> md5Result, &lt;-<span class="hljs-keyword">chan</span> error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// For each regular file, start a goroutine that sums the file and sends</span></span><br><span class="line"><span class="hljs-comment">// the md5Result on c.  Send the md5Result of the walk on errc.</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> md5Result)</span><br><span class="line">errc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line">err := filepath.Walk(root, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>, info os.FileInfo, err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !info.Mode().IsRegular() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line">data, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> c &lt;- md5Result&#123;path, md5.Sum(data), err&#125;: <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-done: <span class="hljs-comment">// HL</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// Abort the walk if done is closed.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-done: <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"walk canceled"</span>)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// Walk has returned, so all calls to wg.Add are done.  Start a</span></span><br><span class="line"><span class="hljs-comment">// goroutine to close c once all the sends are done.</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="hljs-built_in">close</span>(c) <span class="hljs-comment">// HL</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// No select needed here, since errc is buffered.</span></span><br><span class="line">errc &lt;- err <span class="hljs-comment">// HL</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">return</span> c, errc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并发模式的关键要素就是使用<code>chan</code>和<code>goroutine</code>  配合使用,创建一个<code>goroutine</code>运行需要执行的作业内容,遍历作业,对其每个耗时较长的任务进行异步处理,并判断是否接收到了中断信息,如果有中断信息就直接返回错误,并将错误传入到<code>errc</code>管道中, 这样作业内容就可以停止。对作业内容结果进行处理填入到<code>chan</code>中,并用<code>WaitGroup</code>记录其作业状态,当作业内容全部执行了,就关闭<code>chan</code>,不允许可写。</p><p>针对上面代码进行简化操作的逻辑就是:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Walk</span><span class="hljs-params">(jobs Job,walkFn WalkFunc)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> job <span class="hljs-keyword">range</span> jobs &#123;</span><br><span class="line">err = walkFn(job)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">work</span><span class="hljs-params">(done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;,jobs Job)</span> <span class="hljs-params">(&lt;-<span class="hljs-keyword">chan</span> result, &lt;-<span class="hljs-keyword">chan</span> error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// For each regular file, start a goroutine that sums the file and sends</span></span><br><span class="line"><span class="hljs-comment">// the md5Result on c.  Send the md5Result of the walk on errc.</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result)</span><br><span class="line">errc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-keyword">for</span> job <span class="hljs-keyword">range</span> jobs </span><br><span class="line">err := Walk(jobs,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line">data, err := doJob()</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> c &lt;- data <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-comment">//case &lt;-done: // HL</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// Abort the walk if done is closed.</span></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-done: <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"walk canceled"</span>)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// Walk has returned, so all calls to wg.Add are done.  Start a</span></span><br><span class="line"><span class="hljs-comment">// goroutine to close c once all the sends are done.</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="hljs-built_in">close</span>(c) <span class="hljs-comment">// HL</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// No select needed here, since errc is buffered.</span></span><br><span class="line">errc &lt;- err <span class="hljs-comment">// HL</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">return</span> c, errc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽出一个通用逻辑来,应该就是这样的,适用于各种场景。</p><blockquote><p>应用场景: io操作,网络操作 等等耗时事件长的任务。</p></blockquote><h4 id="6-固定并发模式"><a href="#6-固定并发模式" class="headerlink" title="6. 固定并发模式"></a><strong>6. 固定并发模式</strong></h4><blockquote><p>在资源有限的情况下完成大量独立任务</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// walkFiles starts a goroutine to walk the directory tree at root and send the</span></span><br><span class="line"><span class="hljs-comment">// path of each regular file on the string channel.  It sends the result of the</span></span><br><span class="line"><span class="hljs-comment">// walk on the error channel.  If done is closed, walkFiles abandons its work.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkFiles</span><span class="hljs-params">(done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, root <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, &lt;-<span class="hljs-keyword">chan</span> error)</span></span> &#123;</span><br><span class="line">paths := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span><br><span class="line">errc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-comment">// Close the paths channel after Walk returns.</span></span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(paths) <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-comment">// No select needed for this send, since errc is buffered.</span></span><br><span class="line">errc &lt;- filepath.Walk(root, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>, info os.FileInfo, err error)</span> <span class="hljs-title">error</span></span> &#123; <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !info.Mode().IsRegular() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> paths &lt;- path: <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-done: <span class="hljs-comment">// HL</span></span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"walk canceled"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">return</span> paths, errc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A result is the product of reading and summing a file using MD5.</span></span><br><span class="line"><span class="hljs-keyword">type</span> result <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">path <span class="hljs-keyword">string</span></span><br><span class="line">sum  [md5.Size]<span class="hljs-keyword">byte</span></span><br><span class="line">err  error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// digester reads path names from paths and sends digests of the corresponding</span></span><br><span class="line"><span class="hljs-comment">// files on c until either paths or done is closed.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">digester</span><span class="hljs-params">(done &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, paths &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, c <span class="hljs-keyword">chan</span>&lt;- result)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> path := <span class="hljs-keyword">range</span> paths &#123; <span class="hljs-comment">// HLpaths</span></span><br><span class="line">data, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> c &lt;- result&#123;path, md5.Sum(data), err&#125;:</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-done:</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// MD5All reads all the files in the file tree rooted at root and returns a map</span></span><br><span class="line"><span class="hljs-comment">// from file path to the MD5 sum of the file's contents.  If the directory walk</span></span><br><span class="line"><span class="hljs-comment">// fails or any read operation fails, MD5All returns an error.  In that case,</span></span><br><span class="line"><span class="hljs-comment">// MD5All does not wait for inflight read operations to complete.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MD5All</span><span class="hljs-params">(root <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][md5.Size]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// MD5All closes the done channel when it returns; it may do so before</span></span><br><span class="line"><span class="hljs-comment">// receiving all the values from c and errc.</span></span><br><span class="line">done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(done)</span><br><span class="line"></span><br><span class="line">paths, errc := walkFiles(done, root)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start a fixed number of goroutines to read and digest files.</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result) <span class="hljs-comment">// HLc</span></span><br><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-keyword">const</span> numDigesters = <span class="hljs-number">20</span></span><br><span class="line">wg.Add(numDigesters)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numDigesters; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">digester(done, paths, c) <span class="hljs-comment">// HLc</span></span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="hljs-built_in">close</span>(c) <span class="hljs-comment">// HLc</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// End of pipeline. OMIT</span></span><br><span class="line"></span><br><span class="line">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][md5.Size]<span class="hljs-keyword">byte</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> r := <span class="hljs-keyword">range</span> c &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> r.err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, r.err</span><br><span class="line">&#125;</span><br><span class="line">m[r.path] = r.sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Check whether the Walk failed.</span></span><br><span class="line"><span class="hljs-keyword">if</span> err := &lt;-errc; err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// HLerrc</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> m, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面并发模式有点像,区别是固定量并发数量</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> paths = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span><br><span class="line">paths = getJobs()</span><br><span class="line"><span class="hljs-keyword">const</span> numDigesters = <span class="hljs-number">20</span></span><br><span class="line">wg.Add(numDigesters)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numDigesters; i++ &#123;</span><br><span class="line">    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        digester(done, paths, c) <span class="hljs-comment">// HLc</span></span><br><span class="line">        wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="hljs-built_in">close</span>(c) <span class="hljs-comment">// HLc</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>抽出主要逻辑,清晰的可以看出来其用途为固定量并发 goroutine 数为 20 个。</p><blockquote><p>应用场景: cpu 操作,io操作,网络操作 等等耗时事件长的任务,以及为了防止任务吞掉系统全部资源,限制并发量。</p></blockquote><h2 id="创造型"><a href="#创造型" class="headerlink" title="创造型"></a><strong>创造型</strong></h2><h4 id="7-建造者模式"><a href="#7-建造者模式" class="headerlink" title="7 .建造者模式"></a><strong>7 .建造者模式</strong></h4><blockquote><p>使用简单对象构建复杂对象</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> car</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Speed <span class="hljs-keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    MPH Speed = <span class="hljs-number">1</span></span><br><span class="line">    KPH       = <span class="hljs-number">1.60934</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Color <span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    BlueColor  Color = <span class="hljs-string">"blue"</span></span><br><span class="line">    GreenColor       = <span class="hljs-string">"green"</span></span><br><span class="line">    RedColor         = <span class="hljs-string">"red"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Wheels <span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    SportsWheels Wheels = <span class="hljs-string">"sports"</span></span><br><span class="line">    SteelWheels         = <span class="hljs-string">"steel"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Builder <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Color(Color) Builder</span><br><span class="line">    Wheels(Wheels) Builder</span><br><span class="line">    TopSpeed(Speed) Builder</span><br><span class="line">    Build() Car</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Car <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Drive() error</span><br><span class="line">    Stop() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assembly := car.NewBuilder().Paint(car.RedColor)</span><br><span class="line"></span><br><span class="line">familyCar := assembly.Wheels(car.SportsWheels).TopSpeed(<span class="hljs-number">50</span> * car.MPH).Build()</span><br><span class="line">familyCar.Drive()</span><br><span class="line"></span><br><span class="line">sportsCar := assembly.Wheels(car.SteelWheels).TopSpeed(<span class="hljs-number">150</span> * car.MPH).Build()</span><br><span class="line">sportsCar.Drive()</span><br></pre></td></tr></table></figure><blockquote><p>应用场景: 构建复杂对象。</p></blockquote><h4 id="7-工厂模式"><a href="#7-工厂模式" class="headerlink" title="7. 工厂模式"></a><strong>7. 工厂模式</strong></h4><blockquote><p>将对象的实例化推迟到用于创建实例的专用功能</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> data</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> StorageType <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    DiskStorage StorageType = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span></span><br><span class="line">    TempStorage</span><br><span class="line">    MemoryStorage</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewStore</span><span class="hljs-params">(t StorageType)</span> <span class="hljs-title">Store</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span> t &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> MemoryStorage:</span><br><span class="line">        <span class="hljs-keyword">return</span> newMemoryStorage( <span class="hljs-comment">/*...*/</span> )</span><br><span class="line">    <span class="hljs-keyword">case</span> DiskStorage:</span><br><span class="line">        <span class="hljs-keyword">return</span> newDiskStorage( <span class="hljs-comment">/*...*/</span> )</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> newTempStorage( <span class="hljs-comment">/*...*/</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s, _ := data.NewStore(data.MemoryStorage)</span><br><span class="line">f, _ := s.Open(<span class="hljs-string">"file"</span>)</span><br><span class="line"></span><br><span class="line">n, _ := f.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"data"</span>))</span><br><span class="line"><span class="hljs-keyword">defer</span> f.Close()</span><br></pre></td></tr></table></figure><p>使用工厂方法,用户可以指定所需的存储类型。工厂模式就是对开闭原则的一个最好诠释,只增加工厂类,不修改原类。</p><blockquote><p>使用场景:对一类问题产生变化的可能性,有多种变化,选择。</p></blockquote><h4 id="7-对象池模式"><a href="#7-对象池模式" class="headerlink" title="7. 对象池模式"></a><strong>7. 对象池模式</strong></h4><blockquote><p>例化并维护一组相同类型的对象实例</p></blockquote><p>对象池</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> pool</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Pool <span class="hljs-keyword">chan</span> *Object</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(total <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Pool</span></span> &#123;</span><br><span class="line">p := <span class="hljs-built_in">make</span>(Pool, total)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line">p &lt;- <span class="hljs-built_in">new</span>(Object)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> &amp;p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p := pool.New(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> obj := &lt;-p:</span><br><span class="line">obj.Do( <span class="hljs-comment">/*...*/</span> )</span><br><span class="line"></span><br><span class="line">p &lt;- obj</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line"><span class="hljs-comment">// No more objects left — retry later or fail</span></span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 Golang 中已经有专门的<code>sync.Pool</code>封装好了 ,不需要自己单独写。</p><blockquote><p>应用场景:对象初始化很多的情况下,由于对象已预先初始化,因此可以对象不需要再进行初始化,对耗时较长的创建对象是一个好的选择。,如果需要性能,而不是节省资源,维护对象池,不是一个好的选择。</p></blockquote><h4 id="8-单利模式"><a href="#8-单利模式" class="headerlink" title="8. 单利模式"></a><strong>8. 单利模式</strong></h4><blockquote><p>将类型的实例化限制为一个对象</p></blockquote><p>单利模式</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> singleton <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">    once sync.Once</span><br><span class="line"></span><br><span class="line">    instance singleton</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> <span class="hljs-title">singleton</span></span> &#123;</span><br><span class="line">once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">instance = <span class="hljs-built_in">make</span>(singleton)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s := singleton.New()</span><br><span class="line"></span><br><span class="line">s[<span class="hljs-string">"this"</span>] = <span class="hljs-string">"that"</span></span><br><span class="line"></span><br><span class="line">s2 := singleton.New()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="hljs-string">"This is "</span>, s2[<span class="hljs-string">"this"</span>])</span><br><span class="line"><span class="hljs-comment">// This is that</span></span><br></pre></td></tr></table></figure><p>使用<code>once</code>语义可以保证内容只被一次,从而保证对象是单利的。</p><blockquote><p>应用场景:单利类在初始创建后,就不应该被再操作,所以我认为单利类只是一堆包含数据的结构体,初始后状态不可变,可以被重复使用,而不用产生大量的对象,减少 GC 压力。</p></blockquote><h2 id="建造模式"><a href="#建造模式" class="headerlink" title="建造模式"></a><strong>建造模式</strong></h2><h4 id="8-装饰器模式"><a href="#8-装饰器模式" class="headerlink" title="8. 装饰器模式"></a><strong>8. 装饰器模式</strong></h4><p>静态地或动态地向对象添加行为</p><p>装饰</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Object <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LogDecorate</span><span class="hljs-params">(fn Object)</span> <span class="hljs-title">Object</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"Starting the execution with the integer"</span>, n)</span><br><span class="line"></span><br><span class="line">result := fn(n)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="hljs-string">"Execution is completed with the result"</span>, result)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Double</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := LogDecorate(Double)</span><br><span class="line"></span><br><span class="line">f(<span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><p><code>Double</code>这个函数作为被装饰对象,使用<code>LogDecorate</code>装饰要被装饰的函数,老实说,我看着这个函数有点像 Spring 里面的 AOP 代理模式,感觉和代理模式也很像,但是是函数级别,并且处理结果可以再被处理,所以说是装饰模式也可以。</p><blockquote><p>应用场景：拓展一个方法原有的功能</p></blockquote><h4 id="8-代理模式"><a href="#8-代理模式" class="headerlink" title="8. 代理模式"></a><strong>8. 代理模式</strong></h4><p>提供对象的代理对象以控制其动作</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// To use proxy and to object they must implement same methods</span></span><br><span class="line"><span class="hljs-keyword">type</span> IObject <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    ObjDo(action <span class="hljs-keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Object represents real objects which proxy will delegate data</span></span><br><span class="line"><span class="hljs-keyword">type</span> Object <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    action <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ObjDo implements IObject interface and handel's all logic</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(obj *Object)</span> <span class="hljs-title">ObjDo</span><span class="hljs-params">(action <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Action behavior</span></span><br><span class="line">    fmt.Printf(<span class="hljs-string">"I can, %s"</span>, action)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ProxyObject represents proxy object with intercepts actions</span></span><br><span class="line"><span class="hljs-keyword">type</span> ProxyObject <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    object *Object</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ObjDo are implemented IObject and intercept action before send in real Object</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *ProxyObject)</span> <span class="hljs-title">ObjDo</span><span class="hljs-params">(action <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> p.object == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        p.object = <span class="hljs-built_in">new</span>(Object)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> action == <span class="hljs-string">"Run"</span> &#123;</span><br><span class="line">        p.object.ObjDo(action) <span class="hljs-comment">// Prints: I can, Run</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的用一句话来说就是将被代理对象传入代理对象,然后执行被代理对象的方法,并且执行代理对象自身的一些操作。</p><h2 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a><strong>同步模式</strong></h2><h4 id="9-信号量模式"><a href="#9-信号量模式" class="headerlink" title="9. 信号量模式"></a><strong>9. 信号量模式</strong></h4><p>允许控制对公共资源的访问</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> semaphore</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">ErrNoTickets      = errors.New(<span class="hljs-string">"semaphore: could not aquire semaphore"</span>)</span><br><span class="line">ErrIllegalRelease = errors.New(<span class="hljs-string">"semaphore: can't release the semaphore without acquiring it first"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Interface contains the behavior of a semaphore that can be acquired and/or released.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Interface <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Acquire() error</span><br><span class="line">Release() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> implementation <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">sem     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line">timeout time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *implementation)</span> <span class="hljs-title">Acquire</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> s.sem &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(s.timeout):</span><br><span class="line"><span class="hljs-keyword">return</span> ErrNoTickets</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *implementation)</span> <span class="hljs-title">Release</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> _ = &lt;-s.sem:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-time.After(s.timeout):</span><br><span class="line"><span class="hljs-keyword">return</span> ErrIllegalRelease</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(tickets <span class="hljs-keyword">int</span>, timeout time.Duration)</span> <span class="hljs-title">Interface</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;implementation&#123;</span><br><span class="line">sem:     <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, tickets),</span><br><span class="line">timeout: timeout,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信号量模式也好理解,就是同一时刻只有一个任务可以被执行,所以<code>chan</code>是一个阻塞<code>chan</code>, 当任务结束就是释放<code>chan</code>里面的元素,保持活跃,可以接受的状态。</p><blockquote><p>应用场景:在该模式下,接收请求和执行下游依赖在同一个线程内完成,不存在线程上下文切换所带来的性能开销。</p></blockquote><h2 id="性能分析型"><a href="#性能分析型" class="headerlink" title="性能分析型"></a><strong>性能分析型</strong></h2><h4 id="10-记时模式"><a href="#10-记时模式" class="headerlink" title="10. 记时模式"></a><strong>10. 记时模式</strong></h4><p>包装函数并记录执行</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> profile</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"time"</span></span><br><span class="line">    <span class="hljs-string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Duration</span><span class="hljs-params">(invocation time.Time, name <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    elapsed := time.Since(invocation)</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="hljs-string">"%s lasted %s"</span>, name, elapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BigIntFactorial</span><span class="hljs-params">(x big.Int)</span> *<span class="hljs-title">big</span>.<span class="hljs-title">Int</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Arguments to a defer statement is immediately evaluated and stored.</span></span><br><span class="line">    <span class="hljs-comment">// The deferred function receives the pre-evaluated values when its invoked.</span></span><br><span class="line">    <span class="hljs-keyword">defer</span> profile.Duration(time.Now(), <span class="hljs-string">"IntFactorial"</span>)</span><br><span class="line"></span><br><span class="line">    y := big.NewInt(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> one := big.NewInt(<span class="hljs-number">1</span>); x.Sign() &gt; <span class="hljs-number">0</span>; x.Sub(x, one) &#123;</span><br><span class="line">        y.Mul(y, x)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> x.Set(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>defer</code>的妙用,将当前函数的开始时间可以记住,然后通过<code>defer</code>在函数执行完后才会调用<code>defer</code>函数。这样就达成了记时的作用,可以统计这段函数花费了多长时间,感觉很妙。</p><blockquote><p>应用场景:进行基准测试的时候可以使用。</p></blockquote><h2 id="消息型"><a href="#消息型" class="headerlink" title="消息型"></a><strong>消息型</strong></h2><h4 id="11-扇入消息传递模式"><a href="#11-扇入消息传递模式" class="headerlink" title="11. 扇入消息传递模式"></a><strong>11. 扇入消息传递模式</strong></h4><blockquote><p>扇入是一种消息传递模式,用于为工作（客户端：源,服务器：目标）之间的工作创建漏斗。</p></blockquote><p>我们可以使用Go channel 对扇入进行建模。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Merge different channels in one channel</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Merge</span><span class="hljs-params">(cs ...&lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">out := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start an send goroutine for each input channel in cs. send</span></span><br><span class="line"><span class="hljs-comment">// copies values from c to out until c is closed, then calls wg.Done.</span></span><br><span class="line">send := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> c &#123;</span><br><span class="line">out &lt;- n</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="hljs-built_in">len</span>(cs))</span><br><span class="line"><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> cs &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> send(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Start a goroutine to close out once all the send goroutines are</span></span><br><span class="line"><span class="hljs-comment">// done.  This must start after the wg.Add call.</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="hljs-built_in">close</span>(out)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说就是用多个<code>goroutine</code>异步写入多个<code>chan</code>里面的消息到另一个<code>chan</code>,所以叫<code>Merge</code>过程。</p><blockquote><p>应用场景:对数据进行整合。</p></blockquote><h4 id="12-扇入消息传递模式"><a href="#12-扇入消息传递模式" class="headerlink" title="12. 扇入消息传递模式"></a><strong>12. 扇入消息传递模式</strong></h4><blockquote><p>扇出是一种消息传递模式,用于在工（生产者：源,消费者：目的地）之间分配工作。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Split a channel into n channels that receive messages in a round-robin fashion.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Split</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, n <span class="hljs-keyword">int</span>)</span> []&lt;-<span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">cs := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">cs = <span class="hljs-built_in">append</span>(cs, <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Distributes the work in a round robin fashion among the stated number</span></span><br><span class="line"><span class="hljs-comment">// of channels until the main channel has been closed. In that case, close</span></span><br><span class="line"><span class="hljs-comment">// all channels and return.</span></span><br><span class="line">distributeToChannels := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, cs []<span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Close every channel when the execution ends.</span></span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cs []<span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> cs &#123;</span><br><span class="line"><span class="hljs-built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(cs)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> cs &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> val, ok := &lt;-ch:</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c &lt;- val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> distributeToChannels(ch, cs)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> cs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个<code>chan</code>的内容拆分到多个<code>chan</code>里面 （通过 goroutine 并发模式）</p><blockquote><p>应用场景:拆分一堆任务成多个任务。</p></blockquote><h4 id="13-发布和订阅消息传递模式"><a href="#13-发布和订阅消息传递模式" class="headerlink" title="13. 发布和订阅消息传递模式"></a><strong>13. 发布和订阅消息传递模式</strong></h4><blockquote><p>发布-订阅是一种消息传递模式,用于在消息之间进行消息传递不同的组件,而这些组件不了解彼此的身份。</p></blockquote><p>消息,发布者</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Message <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Contents</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Subscription <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">ch <span class="hljs-keyword">chan</span>&lt;- Message</span><br><span class="line"></span><br><span class="line">Inbox <span class="hljs-keyword">chan</span> Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Subscription)</span> <span class="hljs-title">Publish</span><span class="hljs-params">(msg Message)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> _, ok := &lt;-s.ch; !ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"Topic has been closed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.ch &lt;- msg</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅者</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Topic <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Subscribers    []Session</span><br><span class="line">MessageHistory []Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Topic)</span> <span class="hljs-title">Subscribe</span><span class="hljs-params">(uid <span class="hljs-keyword">uint64</span>)</span> <span class="hljs-params">(Subscription, error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Get session and create one if it's the first</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Add session to the Topic &amp; MessageHistory</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Create a subscription</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Topic)</span> <span class="hljs-title">Unsubscribe</span><span class="hljs-params">(Subscription)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Implementation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Topic)</span> <span class="hljs-title">Delete</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="hljs-keyword">uint64</span></span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Session <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    User User</span><br><span class="line">    Timestamp time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者和发布订阅模式的区别是,观察者模式的通知对象只有一个,而发布订阅模式,一个订阅着可以订阅多个发布者对象。发布订阅模式需要进行手动消费,而观察者模式则自动触发操作。</p><blockquote><p>应用场景:发布订阅者模式更适合多对多消息变化的应用场景。</p></blockquote><h2 id="稳定模式"><a href="#稳定模式" class="headerlink" title="稳定模式"></a><strong>稳定模式</strong></h2><h4 id="14-熔断器模式"><a href="#14-熔断器模式" class="headerlink" title="14. 熔断器模式"></a><strong>14. 熔断器模式</strong></h4><blockquote><p>类似于电熔丝,可防止在连接电路电流过大时引发火灾,这导致电线加热并燃烧,断路器的设计模式是“故障优先”关闭电路,请求/响应关系或机制的机制在软件开发的情况下提供服务,以防止更大的失败。</p></blockquote><p>操作计数器</p><p><code>circuit.Counter</code>是一个简单的计数器,用于记录成功或失败的状态电路和时间戳,并计算连续的失败。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> circuit</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> State <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">UnknownState State = <span class="hljs-literal">iota</span></span><br><span class="line">FailureState</span><br><span class="line">SuccessState</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Counter <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Count(State)</span><br><span class="line">ConsecutiveFailures() <span class="hljs-keyword">uint32</span></span><br><span class="line">LastActivity() time.Time</span><br><span class="line">Reset()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> circuit</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> State <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">UnknownState State = <span class="hljs-literal">iota</span></span><br><span class="line">FailureState</span><br><span class="line">SuccessState</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Counter <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Count(State)</span><br><span class="line">ConsecutiveFailures() <span class="hljs-keyword">uint32</span></span><br><span class="line">LastActivity() time.Time</span><br><span class="line">Reset()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用`circuit.Breaker’闭包来包装Circuit,该闭包保留内部操作计数器。如果电路连续故障超过指定阈值,它将返回快速错误。一段时间后,它重试该请求并记录下来。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> circuit</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"context"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Circuit <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context.Context)</span> <span class="hljs-title">error</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Breaker</span><span class="hljs-params">(c Circuit, failureThreshold <span class="hljs-keyword">uint32</span>)</span> <span class="hljs-title">Circuit</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 一个计数器</span></span><br><span class="line">cnt := NewCounter()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 计数器超过阀值</span></span><br><span class="line"><span class="hljs-keyword">if</span> cnt.ConsecutiveFailures() &gt;= failureThreshold &#123;</span><br><span class="line"><span class="hljs-comment">// 判断是否可以重试的条件</span></span><br><span class="line">canRetry := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cnt Counter)</span></span> &#123;</span><br><span class="line">backoffLevel := Cnt.ConsecutiveFailures() - failureThreshold</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Calculates when should the circuit breaker resume propagating requests</span></span><br><span class="line"><span class="hljs-comment">// to the service</span></span><br><span class="line">shouldRetryAt := cnt.LastActivity().Add(time.Seconds * <span class="hljs-number">2</span> &lt;&lt; backoffLevel)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> time.Now().After(shouldRetryAt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 不返回错误,继续执行。</span></span><br><span class="line"><span class="hljs-keyword">if</span> !canRetry(cnt) &#123;</span><br><span class="line"><span class="hljs-comment">// Fails fast instead of propagating requests to the circuit since</span></span><br><span class="line"><span class="hljs-comment">// not enough time has passed since the last failure to retry</span></span><br><span class="line"><span class="hljs-keyword">return</span> ErrServiceUnavailable</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Unless the failure threshold is exceeded the wrapped service mimics the</span></span><br><span class="line"><span class="hljs-comment">// old behavior and the difference in behavior is seen after consecutive failures</span></span><br><span class="line"><span class="hljs-keyword">if</span> err := c(ctx); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">cnt.Count(FailureState)</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnt.Count(SuccessState)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子太简单了,概括为熔断器超过阀值时（可提供一定的尝试次数）,不直接执行方法,直接返回错误,防止更大的破坏,等过一段时间后自动恢复。</p><blockquote><p>应用场景:微服务之间的调用,为了下游服务阻塞上游服务卡住,直接将下游服务断开,快速失败,避免其他服务也不能正常使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Uber Go 风格指南</title>
      <link href="/2020/04/05/Go/Golang%E8%AF%91%E6%96%87/Uber-Go-%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>/2020/04/05/Go/Golang%E8%AF%91%E6%96%87/Uber-Go-%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<!--Editing this document:- Discuss all changes in GitHub issues first.- Update the table of contents as new sections are added or removed.- Use tables for side-by-side code samples. See below.Code Samples:Use 2 spaces to indent. Horizontal real estate is important in side-by-sidesamples.For side-by-side code samples, use the following snippet.<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`Bad` vs `Good`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">BAD CODE GOES HERE</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">GOOD CODE GOES HERE</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>(You need the empty lines between the  and code samples for it to be<br>treated as Markdown.)</p><p>If you need to add labels or descriptions below the code samples, add another<br>row before the  line.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">DESCRIBE</span> <span class="keyword">BAD </span><span class="meta">CODE</span></span><br><span class="line"><span class="symbol">DESCRIBE</span> GOOD <span class="meta">CODE</span></span><br></pre></td></tr></table></figure><p>–&gt;</p><!--change.md# 2019-12-17- 函数选项：推荐 “Option” 接口的结构实现- 而不是用闭包捕获值。# 2019-11-26- 添加针对全局变量变异的指导。# 2020-01-11- 为`open（..）`调用添加缺少的参数。# 2020-02-03- 使用`"time"`处理时间的建议- 添加有关在公共结构中嵌入类型的指导。# 2020-02-25- 添加有关接口验证是否符合编译时检查的指导。--><p><a href="https://www.uber.com/" target="_blank" rel="noopener">Uber</a> 是一家美国硅谷的科技公司,也是 Go 语言的早期 adopter。其开源了很多 golang 项目,诸如被 Gopher 圈熟知的 <a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a>、<a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="noopener">jaeger</a> 等。2018 年年末 Uber 将内部的 <a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">Go 风格规范</a> 开源到 GitHub,经过一年的积累和更新,该规范已经初具规模,并受到广大 Gopher 的关注。本文是该规范的中文版本。本版本会根据原版实时更新。</p><a id="more"></a><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>当前更新版本：2020-02-25 版本地址：<a href="https://github.com/uber-go/guide/commit/ccf37611cb2e7771addf820745641f8fbc76b2cb" target="_blank" rel="noopener">commit:#86</a></li><li>如果您发现任何更新、问题或改进,请随时 fork 和 PR</li><li>Please feel free to fork and PR if you find any updates, issues or improvement.</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#介绍">介绍</a></li><li><a href="#指导原则">指导原则</a><ul><li><a href="#指向-interface-的指针">指向 interface 的指针</a></li><li><a href="#interface-合理性验证">Interface 合理性验证</a></li><li><a href="#接收器-receiver-与接口">接收器 (receiver) 与接口</a></li><li><a href="#零值-Mutex-是有效的">零值 Mutex 是有效的</a></li><li><a href="#在边界处拷贝-Slices-和-Maps">在边界处拷贝 Slices 和 Maps</a></li><li><a href="#使用-defer-释放资源">使用 defer 释放资源</a></li><li><a href="#Channel-的-size-要么是-1要么是无缓冲的">Channel 的 size 要么是 1,要么是无缓冲的</a></li><li><a href="#枚举从-1-开始">枚举从 1 开始</a></li><li><a href="#使用-time-处理时间">使用<code>&quot;time&quot;</code>处理时间</a></li><li><a href="#错误类型">错误类型</a></li><li><a href="#错误包装-error-wrapping">错误包装 (Error Wrapping)</a></li><li><a href="#处理类型断言失败">处理类型断言失败</a></li><li><a href="#不要-panic">不要 panic</a></li><li><a href="#使用-gouberorgatomic">使用 go.uber.org/atomic</a></li><li><a href="#避免可变全局变量">避免可变全局变量</a></li><li><a href="#避免在公共结构中嵌入类型">避免在公共结构中嵌入类型</a></li></ul></li><li><a href="#性能">性能</a><ul><li><a href="#优先使用-strconv-而不是-fmt">优先使用 strconv 而不是 fmt</a></li><li><a href="#避免字符串到字节的转换">避免字符串到字节的转换</a></li><li><a href="#尽量初始化时指定-Map-容量">尽量初始化时指定 Map 容量</a></li></ul></li><li><a href="#规范">规范</a><ul><li><a href="#一致性">一致性</a></li><li><a href="#相似的声明放在一组">相似的声明放在一组</a></li><li><a href="#import-分组">import 分组</a></li><li><a href="#包名">包名</a></li><li><a href="#函数名">函数名</a></li><li><a href="#导入别名">导入别名</a></li><li><a href="#函数分组与顺序">函数分组与顺序</a></li><li><a href="#减少嵌套">减少嵌套</a></li><li><a href="#不必要的-else">不必要的 else</a></li><li><a href="#顶层变量声明">顶层变量声明</a></li><li><a href="#对于未导出的顶层常量和变量使用_作为前缀">对于未导出的顶层常量和变量,使用_作为前缀</a></li><li><a href="#结构体中的嵌入">结构体中的嵌入</a></li><li><a href="#使用字段名初始化结构体">使用字段名初始化结构体</a></li><li><a href="#本地变量声明">本地变量声明</a></li><li><a href="#nil-是一个有效的-slice">nil 是一个有效的 slice</a></li><li><a href="#小变量作用域">小变量作用域</a></li><li><a href="#避免参数语义不明确Avoid-Naked-Parameters">避免参数语义不明确（Avoid Naked Parameters）</a></li><li><a href="#使用原始字符串字面值避免转义">使用原始字符串字面值,避免转义</a></li><li><a href="#初始化-Struct-引用">初始化 Struct 引用</a></li><li><a href="#初始化-maps">初始化 Maps</a></li><li><a href="#字符串-string-format">字符串 string format </a></li><li><a href="#命名-Printf-样式的函数">命名 Printf 样式的函数</a></li></ul></li><li><a href="#编程模式">编程模式</a><ul><li><a href="#表驱动测试">表驱动测试</a></li><li><a href="#功能选项">功能选项</a></li></ul></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>样式 (style) 是支配我们代码的惯例。术语<code>样式</code>有点用词不当,因为这些约定涵盖的范围不限于由 gofmt 替我们处理的源文件格式。</p><p>本指南的目的是通过详细描述在 Uber 编写 Go 代码的注意事项来管理这种复杂性。这些规则的存在是为了使代码库易于管理,同时仍然允许工程师更有效地使用 Go 语言功能。</p><p>该指南最初由 <a href="https://github.com/prashantv" target="_blank" rel="noopener">Prashant Varanasi</a> 和 <a href="https://github.com/nomis52" target="_blank" rel="noopener">Simon Newton</a> 编写,目的是使一些同事能快速使用 Go。多年来,该指南已根据其他人的反馈进行了修改。</p><p>本文档记录了我们在 Uber 遵循的 Go 代码中的惯用约定。其中许多是 Go 的通用准则,而其他扩展准则依赖于下面外部的指南：</p><ol><li><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">The Go common mistakes guide</a></li></ol><p>所有代码都应该通过<code>golint</code>和<code>go vet</code>的检查并无错误。我们建议您将编辑器设置为：</p><ul><li>保存时运行<code>goimports</code></li><li>运行<code>golint</code>和<code>go vet</code>检查错误</li></ul><p>您可以在以下 Go 编辑器工具支持页面中找到更为详细的信息：<br><a href="https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins" target="_blank" rel="noopener">https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins</a></p><h2 id="指导原则"><a href="#指导原则" class="headerlink" title="指导原则"></a>指导原则</h2><h3 id="指向-interface-的指针"><a href="#指向-interface-的指针" class="headerlink" title="指向 interface 的指针"></a>指向 interface 的指针</h3><p>您几乎不需要指向接口类型的指针。您应该将接口作为值进行传递,在这样的传递过程中,实质上传递的底层数据仍然可以是指针。</p><p>接口实质上在底层用两个字段表示：</p><ol><li>一个指向某些特定类型信息的指针。您可以将其视为”type”。</li><li>数据指针。如果存储的数据是指针,则直接存储。如果存储的数据是一个值,则存储指向该值的指针。</li></ol><p>如果希望接口方法修改基础数据,则必须使用指针传递。</p><h3 id="Interface-合理性验证"><a href="#Interface-合理性验证" class="headerlink" title="Interface 合理性验证"></a>Interface 合理性验证</h3><p>在编译时验证接口的符合性。这包括：</p><ul><li>将实现特定接口所需的导出类型作为其 API 的一部分</li><li>导出或未导出的类型是实现同一接口的类型集合的一部分</li><li>其他违反接口的情况会破坏用户。</li></ul><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Handler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *Handler)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  w http.ResponseWriter,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  r *http.Request,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Handler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> _ http.Handler = (*Handler)(<span class="hljs-literal">nil</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *Handler)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  w http.ResponseWriter,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  r *http.Request,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>*Handler</code>永远不会与<code>http.Handler</code>接口匹配,那么语句<code>var _ http.Handler = (*Handler)(nil)</code>将无法编译</p><p>赋值的右边应该是断言类型的零值。对于指针类型（如<code>*Handler</code>）、切片和映射,这是<code>nil</code>；对于结构类型,这是空结构。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> LogHandler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  h   http.Handler</span><br><span class="line">  log *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> _ http.Handler = LogHandler&#123;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h LogHandler)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  w http.ResponseWriter,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  r *http.Request,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收器-receiver-与接口"><a href="#接收器-receiver-与接口" class="headerlink" title="接收器 (receiver) 与接口"></a>接收器 (receiver) 与接口</h3><p>使用值接收器的方法既可以通过值调用,也可以通过指针调用。</p><p>例如,</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> S <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  data <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s S)</span> <span class="hljs-title">Read</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> s.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *S)</span> <span class="hljs-title">Write</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">  s.data = str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sVals := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]S&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">"A"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 你只能通过值调用 Read</span></span><br><span class="line">sVals[<span class="hljs-number">1</span>].Read()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 这不能编译通过：</span></span><br><span class="line"><span class="hljs-comment">//  sVals[1].Write("test")</span></span><br><span class="line"></span><br><span class="line">sPtrs := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]*S&#123;<span class="hljs-number">1</span>: &#123;<span class="hljs-string">"A"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 通过指针既可以调用 Read,也可以调用 Write 方法</span></span><br><span class="line">sPtrs[<span class="hljs-number">1</span>].Read()</span><br><span class="line">sPtrs[<span class="hljs-number">1</span>].Write(<span class="hljs-string">"test"</span>)</span><br></pre></td></tr></table></figure><p>同样,即使该方法具有值接收器,也可以通过指针来满足接口。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> F <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">  f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> S1 <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s S1)</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> S2 <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *S2)</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">s1Val := S1&#123;&#125;</span><br><span class="line">s1Ptr := &amp;S1&#123;&#125;</span><br><span class="line">s2Val := S2&#123;&#125;</span><br><span class="line">s2Ptr := &amp;S2&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> i F</span><br><span class="line">i = s1Val</span><br><span class="line">i = s1Ptr</span><br><span class="line">i = s2Ptr</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//  下面代码无法通过编译。因为 s2Val 是一个值,而 S2 的 f 方法中没有使用值接收器</span></span><br><span class="line"><span class="hljs-comment">//   i = s2Val</span></span><br></pre></td></tr></table></figure><p><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a> 中有一段关于 <a href="https://golang.org/doc/effective_go.html#pointers_vs_values" target="_blank" rel="noopener">pointers vs. values</a> 的精彩讲解。</p><h3 id="零值-Mutex-是有效的"><a href="#零值-Mutex-是有效的" class="headerlink" title="零值 Mutex 是有效的"></a>零值 Mutex 是有效的</h3><p>零值<code>sync.Mutex</code>和<code>sync.RWMutex</code>是有效的。所以指向 mutex 的指针基本是不必要的。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mu := <span class="hljs-built_in">new</span>(sync.Mutex)</span><br><span class="line">mu.Lock()</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> mu sync.Mutex</span><br><span class="line">mu.Lock()</span><br></pre></td></tr></table></figure><p>如果你使用结构体指针,mutex 可以非指针形式作为结构体的组成字段,或者更好的方式是直接嵌入到结构体中。<br>如果是私有结构体类型或是要实现 Mutex 接口的类型,我们可以使用嵌入 mutex 的方法：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> smap <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  sync.Mutex <span class="hljs-comment">// only for unexported types（仅适用于非导出类型）</span></span><br><span class="line"></span><br><span class="line">  data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newSMap</span><span class="hljs-params">()</span> *<span class="hljs-title">smap</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> &amp;smap&#123;</span><br><span class="line">    data: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *smap)</span> <span class="hljs-title">Get</span><span class="hljs-params">(k <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  m.Lock()</span><br><span class="line">  <span class="hljs-keyword">defer</span> m.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> m.data[k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> SMap <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  mu sync.Mutex <span class="hljs-comment">// 对于导出类型,请使用私有锁</span></span><br><span class="line"></span><br><span class="line">  data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSMap</span><span class="hljs-params">()</span> *<span class="hljs-title">SMap</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> &amp;SMap&#123;</span><br><span class="line">    data: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *SMap)</span> <span class="hljs-title">Get</span><span class="hljs-params">(k <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  m.mu.Lock()</span><br><span class="line">  <span class="hljs-keyword">defer</span> m.mu.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> m.data[k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为私有类型或需要实现互斥接口的类型嵌入。<br>对于导出的类型,请使用专用字段。</p><h3 id="在边界处拷贝-Slices-和-Maps"><a href="#在边界处拷贝-Slices-和-Maps" class="headerlink" title="在边界处拷贝 Slices 和 Maps"></a>在边界处拷贝 Slices 和 Maps</h3><p>slices 和 maps 包含了指向底层数据的指针,因此在需要复制它们时要特别注意。</p><h4 id="接收-Slices-和-Maps"><a href="#接收-Slices-和-Maps" class="headerlink" title="接收 Slices 和 Maps"></a>接收 Slices 和 Maps</h4><p>请记住,当 map 或 slice 作为函数参数传入时,如果您存储了对它们的引用,则用户可以对其进行修改。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Driver)</span> <span class="hljs-title">SetTrips</span><span class="hljs-params">(trips []Trip)</span></span> &#123;</span><br><span class="line">  d.trips = trips</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trips := ...</span><br><span class="line">d1.SetTrips(trips)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 你是要修改 d1.trips 吗？</span></span><br><span class="line">trips[<span class="hljs-number">0</span>] = ...</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Driver)</span> <span class="hljs-title">SetTrips</span><span class="hljs-params">(trips []Trip)</span></span> &#123;</span><br><span class="line">  d.trips = <span class="hljs-built_in">make</span>([]Trip, <span class="hljs-built_in">len</span>(trips))</span><br><span class="line">  <span class="hljs-built_in">copy</span>(d.trips, trips)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trips := ...</span><br><span class="line">d1.SetTrips(trips)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 这里我们修改 trips[0],但不会影响到 d1.trips</span></span><br><span class="line">trips[<span class="hljs-number">0</span>] = ...</span><br></pre></td></tr></table></figure><h4 id="返回-slices-或-maps"><a href="#返回-slices-或-maps" class="headerlink" title="返回 slices 或 maps"></a>返回 slices 或 maps</h4><p>同样,请注意用户对暴露内部状态的 map 或 slice 的修改。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Stats <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  mu sync.Mutex</span><br><span class="line"></span><br><span class="line">  counters <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Snapshot 返回当前状态。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stats)</span> <span class="hljs-title">Snapshot</span><span class="hljs-params">()</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">int</span></span> &#123;</span><br><span class="line">  s.mu.Lock()</span><br><span class="line">  <span class="hljs-keyword">defer</span> s.mu.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> s.counters</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// snapshot 不再受互斥锁保护</span></span><br><span class="line"><span class="hljs-comment">// 因此对 snapshot 的任何访问都将受到数据竞争的影响</span></span><br><span class="line"><span class="hljs-comment">// 影响 stats.counters</span></span><br><span class="line">snapshot := stats.Snapshot()</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Stats <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  mu sync.Mutex</span><br><span class="line"></span><br><span class="line">  counters <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Stats)</span> <span class="hljs-title">Snapshot</span><span class="hljs-params">()</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">int</span></span> &#123;</span><br><span class="line">  s.mu.Lock()</span><br><span class="line">  <span class="hljs-keyword">defer</span> s.mu.Unlock()</span><br><span class="line"></span><br><span class="line">  result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(s.counters))</span><br><span class="line">  <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> s.counters &#123;</span><br><span class="line">    result[k] = v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// snapshot 现在是一个拷贝</span></span><br><span class="line">snapshot := stats.Snapshot()</span><br></pre></td></tr></table></figure><h3 id="使用-defer-释放资源"><a href="#使用-defer-释放资源" class="headerlink" title="使用 defer 释放资源"></a>使用 defer 释放资源</h3><p>使用 defer 释放资源,诸如文件和锁。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p.Lock()</span><br><span class="line"><span class="hljs-keyword">if</span> p.count &lt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">  p.Unlock()</span><br><span class="line">  <span class="hljs-keyword">return</span> p.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.count++</span><br><span class="line">newCount := p.count</span><br><span class="line">p.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> newCount</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 当有多个 return 分支时,很容易遗忘 unlock</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> p.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> p.count &lt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> p.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.count++</span><br><span class="line"><span class="hljs-keyword">return</span> p.count</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 更可读</span></span><br></pre></td></tr></table></figure><p>Defer 的开销非常小,只有在您可以证明函数执行时间处于纳秒级的程度时,才应避免这样做。使用 defer 提升可读性是值得的,因为使用它们的成本微不足道。尤其适用于那些不仅仅是简单内存访问的较大的方法,在这些方法中其他计算的资源消耗远超过<code>defer</code>。</p><h3 id="Channel-的-size-要么是-1-要么是无缓冲的"><a href="#Channel-的-size-要么是-1-要么是无缓冲的" class="headerlink" title="Channel 的 size 要么是 1,要么是无缓冲的"></a>Channel 的 size 要么是 1,要么是无缓冲的</h3><p>channel 通常 size 应为 1 或是无缓冲的。默认情况下,channel 是无缓冲的,其 size 为零。任何其他尺寸都必须经过严格的审查。我们需要考虑如何确定大小,考虑是什么阻止了 channel 在高负载下和阻塞写时的写入,以及当这种情况发生时系统逻辑有哪些变化。(翻译解释：按照原文意思是需要界定通道边界,竞态条件,以及逻辑上下文梳理)</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 应该足以满足任何情况！</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">64</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 大小：1</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 或者</span></span><br><span class="line"><span class="hljs-comment">// 无缓冲 channel,大小为 0</span></span><br><span class="line">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span><br></pre></td></tr></table></figure><h3 id="枚举从-1-开始"><a href="#枚举从-1-开始" class="headerlink" title="枚举从 1 开始"></a>枚举从 1 开始</h3><p>在 Go 中引入枚举的标准方法是声明一个自定义类型和一个使用了 iota 的 const 组。由于变量的默认值为 0,因此通常应以非零值开头枚举。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Operation <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  Add Operation = <span class="hljs-literal">iota</span></span><br><span class="line">  Subtract</span><br><span class="line">  Multiply</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Add=0, Subtract=1, Multiply=2</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Operation <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  Add Operation = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span></span><br><span class="line">  Subtract</span><br><span class="line">  Multiply</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Add=1, Subtract=2, Multiply=3</span></span><br></pre></td></tr></table></figure><p>在某些情况下,使用零值是有意义的（枚举从零开始）,例如,当零值是理想的默认行为时。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> LogOutput <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  LogToStdout LogOutput = <span class="hljs-literal">iota</span></span><br><span class="line">  LogToFile</span><br><span class="line">  LogToRemote</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// LogToStdout=0, LogToFile=1, LogToRemote=2</span></span><br></pre></td></tr></table></figure><h3 id="使用-time-处理时间"><a href="#使用-time-处理时间" class="headerlink" title="使用 time 处理时间"></a>使用 time 处理时间</h3><p>时间处理很复杂。关于时间的错误假设通常包括以下几点。</p><ol><li>一天有 24 小时</li><li>一小时有 60 分钟</li><li>一周有七天</li><li>一年 365 天</li><li><a href="https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time" target="_blank" rel="noopener">还有更多</a></li></ol><p>例如,<em>1</em> 表示在一个时间点上加上 24 小时并不总是产生一个新的日历日。</p><p>因此,在处理时间时始终使用 <a href="https://golang.org/pkg/time/" target="_blank" rel="noopener"><code>&quot;time&quot;</code></a> 包,因为它有助于以更安全、更准确的方式处理这些不正确的假设。</p><h4 id="使用time-Time表达瞬时时间"><a href="#使用time-Time表达瞬时时间" class="headerlink" title="使用time.Time表达瞬时时间"></a>使用<code>time.Time</code>表达瞬时时间</h4><p>在处理时间的瞬间时使用 <a href="https://golang.org/pkg/time/#Time" target="_blank" rel="noopener"><code>time.time</code></a>,在比较、添加或减去时间时使用<code>time.Time</code>中的方法。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isActive</span><span class="hljs-params">(now, start, stop <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> start &lt;= now &amp;&amp; now &lt; stop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isActive</span><span class="hljs-params">(now, start, stop time.Time)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (start.Before(now) || start.Equal(now)) &amp;&amp; now.Before(stop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用time-Duration表达时间段"><a href="#使用time-Duration表达时间段" class="headerlink" title="使用time.Duration表达时间段"></a>使用<code>time.Duration</code>表达时间段</h4><p>在处理时间段时使用 <a href="https://golang.org/pkg/time/#Duration" target="_blank" rel="noopener"><code>time.Duration</code></a> .</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">poll</span><span class="hljs-params">(delay <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    time.Sleep(time.Duration(delay) * time.Millisecond)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">poll(<span class="hljs-number">10</span>) <span class="hljs-comment">// 是几秒钟还是几毫秒?</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">poll</span><span class="hljs-params">(delay time.Duration)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    time.Sleep(delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">poll(<span class="hljs-number">10</span>*time.Second)</span><br></pre></td></tr></table></figure><p>回到第一个例子,在一个时间瞬间加上 24 小时,我们用于添加时间的方法取决于意图。如果我们想要下一个日历日(当前天的下一天)的同一个时间点,我们应该使用 <a href="https://golang.org/pkg/time/#Time.AddDate" target="_blank" rel="noopener"><code>Time.AddDate</code></a>。但是,如果我们想保证某一时刻比前一时刻晚 24 小时,我们应该使用 <a href="https://golang.org/pkg/time/#Time.Add" target="_blank" rel="noopener"><code>Time.Add</code></a>。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newDay := t.AddDate(<span class="hljs-number">0</span> <span class="hljs-comment">/* years */</span>, <span class="hljs-number">0</span>, <span class="hljs-comment">/* months */</span>, <span class="hljs-number">1</span> <span class="hljs-comment">/* days */</span>)</span><br><span class="line">maybeNewDay := t.Add(<span class="hljs-number">24</span> * time.Hour)</span><br></pre></td></tr></table></figure><h4 id="对外部系统使用time-Time和time-Duration"><a href="#对外部系统使用time-Time和time-Duration" class="headerlink" title="对外部系统使用time.Time和time.Duration"></a>对外部系统使用<code>time.Time</code>和<code>time.Duration</code></h4><p>尽可能在与外部系统的交互中使用<code>time.Duration</code>和<code>time.Time</code>例如 :</p><ul><li>Command-line 标志: <a href="https://golang.org/pkg/flag/" target="_blank" rel="noopener"><code>flag</code></a> 通过 <a href="https://golang.org/pkg/time/#ParseDuration" target="_blank" rel="noopener"><code>time.ParseDuration</code></a> 支持<code>time.Duration</code></li><li>JSON: <a href="https://golang.org/pkg/encoding/json/" target="_blank" rel="noopener"><code>encoding/json</code></a> 通过其 <a href="https://golang.org/pkg/time/#Time.UnmarshalJSON" target="_blank" rel="noopener"><code>UnmarshalJSON</code>method</a> 方法支持将<code>time.Time</code>编码为 <a href="https://tools.ietf.org/html/rfc3339" target="_blank" rel="noopener">RFC 3339</a> 字符串</li><li>SQL: <a href="https://golang.org/pkg/database/sql/" target="_blank" rel="noopener"><code>database/sql</code></a> 支持将<code>DATETIME</code>或<code>TIMESTAMP</code>列转换为<code>time.Time</code>,如果底层驱动程序支持则返回</li><li>YAML: <a href="https://godoc.org/gopkg.in/yaml.v2" target="_blank" rel="noopener"><code>gopkg.in/yaml.v2</code></a> 支持将<code>time.Time</code>作为 <a href="https://tools.ietf.org/html/rfc3339" target="_blank" rel="noopener">RFC 3339</a> 字符串,并通过 <a href="https://golang.org/pkg/time/#ParseDuration" target="_blank" rel="noopener"><code>time.ParseDuration</code></a> 支持<code>time.Duration</code>。</li></ul><p>当不能在这些交互中使用<code>time.Duration</code>时,请使用<code>int</code>或<code>float64</code>,并在字段名称中包含单位。</p><p>例如,由于<code>encoding/json</code>不支持<code>time.Duration</code>,因此该单位包含在字段的名称中。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// &#123;"interval": 2&#125;</span></span><br><span class="line"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  Interval <span class="hljs-keyword">int</span><span class="hljs-string">`json:"interval"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// &#123;"intervalMillis": 2000&#125;</span></span><br><span class="line"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  IntervalMillis <span class="hljs-keyword">int</span><span class="hljs-string">`json:"intervalMillis"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在这些交互中不能使用<code>time.Time</code>时,除非达成一致,否则使用<code>string</code>和 <a href="https://tools.ietf.org/html/rfc3339" target="_blank" rel="noopener">RFC 3339</a> 中定义的格式时间戳。默认情况下,<a href="https://golang.org/pkg/time/#Time.UnmarshalText" target="_blank" rel="noopener"><code>Time.UnmarshalText</code></a> 使用此格式,并可通过 <a href="https://golang.org/pkg/time/#RFC3339" target="_blank" rel="noopener"><code>time.RFC3339</code></a> 在<code>Time.Format</code>和<code>time.Parse</code>中使用。</p><p>尽管这在实践中并不成问题,但请记住,<code>&quot;time&quot;</code>包不支持解析闰秒时间戳（<a href="https://github.com/golang/go/issues/8728" target="_blank" rel="noopener">8728</a>）,也不在计算中考虑闰秒（<a href="https://github.com/golang/go/issues/15190" target="_blank" rel="noopener">15190</a>）。如果您比较两个时间瞬间,则差异将不包括这两个瞬间之间可能发生的闰秒。</p><!-- TODO: section on String methods for enums --><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>Go 中有多种声明错误（Error) 的选项：</p><ul><li><a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a> 对于简单静态字符串的错误</li><li><a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a> 用于格式化的错误字符串</li><li>实现<code>Error()</code>方法的自定义类型</li><li>用 <a href="https://godoc.org/github.com/pkg/errors#Wrap" target="_blank" rel="noopener"><code>&quot;pkg/errors&quot;.Wrap</code></a> 的 Wrapped errors</li></ul><p>返回错误时,请考虑以下因素以确定最佳选择：</p><ul><li>这是一个不需要额外信息的简单错误吗？如果是这样,<a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a> 足够了。</li><li>客户需要检测并处理此错误吗？如果是这样,则应使用自定义类型并实现该<code>Error()</code>方法。</li><li>您是否正在传播下游函数返回的错误？如果是这样,请查看本文后面有关错误包装 <a href="#错误包装 (Error-Wrapping">section on error wrapping</a>) 部分的内容。</li><li>否则 <a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a> 就可以了。</li></ul><p>如果客户端需要检测错误,并且您已使用创建了一个简单的错误 <a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a>,请使用一个错误变量。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package foo</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"could not open"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// package bar</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> err := foo.Open(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> err.Error() == <span class="hljs-string">"could not open"</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// handle</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">panic</span>(<span class="hljs-string">"unknown error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package foo</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> ErrCouldNotOpen = errors.New(<span class="hljs-string">"could not open"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> ErrCouldNotOpen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// package bar</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := foo.Open(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> err == foo.ErrCouldNotOpen &#123;</span><br><span class="line">    <span class="hljs-comment">// handle</span></span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(<span class="hljs-string">"unknown error"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您有可能需要客户端检测的错误,并且想向其中添加更多信息（例如,它不是静态字符串）,则应使用自定义类型。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">open</span><span class="hljs-params">(file <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"file %q not found"</span>, file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> err := open(<span class="hljs-string">"testfile.txt"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> strings.Contains(err.Error(), <span class="hljs-string">"not found"</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// handle</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">panic</span>(<span class="hljs-string">"unknown error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> errNotFound <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  file <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e errNotFound)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">"file %q not found"</span>, e.file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">open</span><span class="hljs-params">(file <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> errNotFound&#123;file: file&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> err := open(<span class="hljs-string">"testfile.txt"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> _, ok := err.(errNotFound); ok &#123;</span><br><span class="line">      <span class="hljs-comment">// handle</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">panic</span>(<span class="hljs-string">"unknown error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接导出自定义错误类型时要小心,因为它们已成为程序包公共 API 的一部分。最好公开匹配器功能以检查错误。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package foo</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> errNotFound <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  file <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e errNotFound)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">"file %q not found"</span>, e.file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsNotFoundError</span><span class="hljs-params">(err error)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  _, ok := err.(errNotFound)</span><br><span class="line">  <span class="hljs-keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">(file <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> errNotFound&#123;file: file&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// package bar</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := foo.Open(<span class="hljs-string">"foo"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> foo.IsNotFoundError(err) &#123;</span><br><span class="line">    <span class="hljs-comment">// handle</span></span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(<span class="hljs-string">"unknown error"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- TODO: Exposing the information to callers with accessor functions. --><h3 id="错误包装-Error-Wrapping"><a href="#错误包装-Error-Wrapping" class="headerlink" title="错误包装 (Error Wrapping)"></a>错误包装 (Error Wrapping)</h3><p>一个（函数/方法）调用失败时,有三种主要的错误传播方式：</p><ul><li>如果没有要添加的其他上下文,并且您想要维护原始错误类型,则返回原始错误。</li><li><p>添加上下文,使用 <a href="https://godoc.org/github.com/pkg/errors#Wrap" target="_blank" rel="noopener"><code>&quot;pkg/errors&quot;.Wrap</code></a> 以便错误消息提供更多上下文 ,<a href="https://godoc.org/github.com/pkg/errors#Cause" target="_blank" rel="noopener"><code>&quot;pkg/errors&quot;.Cause</code></a> 可用于提取原始错误。<br>Use fmt.Errorf if the callers do not need to detect or handle that specific error case.</p></li><li><p>如果调用者不需要检测或处理的特定错误情况,使用 <a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a>。</p></li></ul><p>建议在可能的地方添加上下文,以使您获得诸如“调用服务 foo：连接被拒绝”之类的更有用的错误,而不是诸如“连接被拒绝”之类的模糊错误。</p><p>在将上下文添加到返回的错误时,请避免使用“failed to”之类的短语来保持上下文简洁,这些短语会陈述明显的内容,并随着错误在堆栈中的渗透而逐渐堆积：</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s, err := store.New()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(</span><br><span class="line">        <span class="hljs-string">"failed to create new store: %s"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s, err := store.New()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(</span><br><span class="line">        <span class="hljs-string">"new store: %s"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed <span class="hljs-built_in">to</span> x: failed <span class="hljs-built_in">to</span> y: failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">create</span> <span class="hljs-built_in">new</span> store: <span class="hljs-keyword">the</span> error</span><br></pre></td></tr></table></figure><figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">x:</span> <span class="hljs-string">y:</span> <span class="hljs-keyword">new</span> <span class="hljs-string">store:</span> the error</span><br></pre></td></tr></table></figure><p>但是,一旦将错误发送到另一个系统,就应该明确消息是错误消息（例如使用<code>err</code>标记,或在日志中以”Failed”为前缀）。</p><p>另请参见 <a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully" target="_blank" rel="noopener">Don’t just check errors, handle them gracefully</a>. 不要只是检查错误,要优雅地处理错误</p><h3 id="处理类型断言失败"><a href="#处理类型断言失败" class="headerlink" title="处理类型断言失败"></a>处理类型断言失败</h3><p><a href="https://golang.org/ref/spec#Type_assertions" target="_blank" rel="noopener">type assertion</a> 的单个返回值形式针对不正确的类型将产生 panic。因此,请始终使用“comma ok”的惯用法。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := i.(<span class="hljs-keyword">string</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t, ok := i.(<span class="hljs-keyword">string</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">  <span class="hljs-comment">// 优雅地处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- TODO: There are a few situations where the single assignment form isfine. --><h3 id="不要-panic"><a href="#不要-panic" class="headerlink" title="不要 panic"></a>不要 panic</h3><p>在生产环境中运行的代码必须避免出现 panic。panic 是 <a href="https://en.wikipedia.org/wiki/Cascading_failure" target="_blank" rel="noopener">cascading failures</a> 级联失败的主要根源 。如果发生错误,该函数必须返回错误,并允许调用方决定如何处理它。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(bar <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bar) == <span class="hljs-number">0</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(<span class="hljs-string">"bar must not be empty"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) != <span class="hljs-number">2</span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"USAGE: foo &lt;bar&gt;"</span>)</span><br><span class="line">    os.Exit(<span class="hljs-number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  foo(os.Args[<span class="hljs-number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(bar <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bar) == <span class="hljs-number">0</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"bar must not be empty"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) != <span class="hljs-number">2</span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"USAGE: foo &lt;bar&gt;"</span>)</span><br><span class="line">    os.Exit(<span class="hljs-number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span> err := foo(os.Args[<span class="hljs-number">1</span>]); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>panic/recover 不是错误处理策略。仅当发生不可恢复的事情（例如：nil 引用）时,程序才必须 panic。程序初始化是一个例外：程序启动时应使程序中止的不良情况可能会引起 panic。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> _statusTemplate = template.Must(template.New(<span class="hljs-string">"name"</span>).Parse(<span class="hljs-string">"_statusHTML"</span>))</span><br></pre></td></tr></table></figure><p>即使在测试代码中,也优先使用<code>t.Fatal</code>或者<code>t.FailNow</code>而不是 panic 来确保失败被标记。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func TestFoo(t *testing.T)</span></span><br><span class="line"></span><br><span class="line">f, err := ioutil.TempFile(<span class="hljs-string">""</span>, <span class="hljs-string">"test"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">panic</span>(<span class="hljs-string">"failed to set up test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func TestFoo(t *testing.T)</span></span><br><span class="line"></span><br><span class="line">f, err := ioutil.TempFile(<span class="hljs-string">""</span>, <span class="hljs-string">"test"</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  t.Fatal(<span class="hljs-string">"failed to set up test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- TODO: Explain how to use _test packages. --><h3 id="使用-go-uber-org-atomic"><a href="#使用-go-uber-org-atomic" class="headerlink" title="使用 go.uber.org/atomic"></a>使用 go.uber.org/atomic</h3><p>使用 <a href="https://golang.org/pkg/sync/atomic/" target="_blank" rel="noopener">sync/atomic</a> 包的原子操作对原始类型 (<code>int32</code>,<code>int64</code>等）进行操作,因为很容易忘记使用原子操作来读取或修改变量。</p><p><a href="https://godoc.org/go.uber.org/atomic" target="_blank" rel="noopener">go.uber.org/atomic</a> 通过隐藏基础类型为这些操作增加了类型安全性。此外,它包括一个方便的<code>atomic.Bool</code>类型。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> foo <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  running <span class="hljs-keyword">int32</span>  <span class="hljs-comment">// atomic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f* foo)</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> atomic.SwapInt32(&amp;f.running, <span class="hljs-number">1</span>) == <span class="hljs-number">1</span> &#123;</span><br><span class="line">     <span class="hljs-comment">// already running…</span></span><br><span class="line">     <span class="hljs-keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// start the Foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *foo)</span> <span class="hljs-title">isRunning</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> f.running == <span class="hljs-number">1</span>  <span class="hljs-comment">// race!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> foo <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  running atomic.Bool</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *foo)</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> f.running.Swap(<span class="hljs-literal">true</span>) &#123;</span><br><span class="line">     <span class="hljs-comment">// already running…</span></span><br><span class="line">     <span class="hljs-keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// start the Foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *foo)</span> <span class="hljs-title">isRunning</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> f.running.Load()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免可变全局变量"><a href="#避免可变全局变量" class="headerlink" title="避免可变全局变量"></a>避免可变全局变量</h3><p>使用选择依赖注入方式避免改变全局变量。<br>既适用于函数指针又适用于其他值类型</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sign.go</span></span><br><span class="line"><span class="hljs-keyword">var</span> _timeNow = time.Now</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sign</span><span class="hljs-params">(msg <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  now := _timeNow()</span><br><span class="line">  <span class="hljs-keyword">return</span> signWithTime(msg, now)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sign.go</span></span><br><span class="line"><span class="hljs-keyword">type</span> signer <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  now <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">time</span>.<span class="hljs-title">Time</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newSigner</span><span class="hljs-params">()</span> *<span class="hljs-title">signer</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> &amp;signer&#123;</span><br><span class="line">    now: time.Now,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *signer)</span> <span class="hljs-title">Sign</span><span class="hljs-params">(msg <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  now := s.now()</span><br><span class="line">  <span class="hljs-keyword">return</span> signWithTime(msg, now)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sign_test.go</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSign</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  oldTimeNow := _timeNow</span><br><span class="line">  _timeNow = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">time</span>.<span class="hljs-title">Time</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> someFixedTime</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; _timeNow = oldTimeNow &#125;()</span><br><span class="line">  assert.Equal(t, want, sign(give))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sign_test.go</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSigner</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  s := newSigner()</span><br><span class="line">  s.now = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">time</span>.<span class="hljs-title">Time</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> someFixedTime</span><br><span class="line">  &#125;</span><br><span class="line">  assert.Equal(t, want, s.Sign(give))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免在公共结构中嵌入类型"><a href="#避免在公共结构中嵌入类型" class="headerlink" title="避免在公共结构中嵌入类型"></a>避免在公共结构中嵌入类型</h3><p>这些嵌入的类型泄漏实现细节、禁止类型演化和模糊的文档。</p><p>假设您使用共享的<code>AbstractList</code>实现了多种列表类型,请避免在具体的列表实现中嵌入<code>AbstractList</code>。<br>相反,只需手动将方法写入具体的列表,该列表将委托给抽象列表。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> AbstractList <span class="hljs-keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="hljs-comment">// 添加将实体添加到列表中。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *AbstractList)</span> <span class="hljs-title">Add</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 移除从列表中移除实体。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *AbstractList)</span> <span class="hljs-title">Remove</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ConcreteList 是一个实体列表。</span></span><br><span class="line"><span class="hljs-keyword">type</span> ConcreteList <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  *AbstractList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ConcreteList 是一个实体列表。</span></span><br><span class="line"><span class="hljs-keyword">type</span> ConcreteList <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  list *AbstractList</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 添加将实体添加到列表中。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ConcreteList)</span> <span class="hljs-title">Add</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> l.list.Add(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 移除从列表中移除实体。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ConcreteList)</span> <span class="hljs-title">Remove</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> l.list.Remove(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 允许 <a href="https://golang.org/doc/effective_go.html#embedding" target="_blank" rel="noopener">类型嵌入</a> 作为继承和组合之间的折衷。<br>外部类型获取嵌入类型的方法的隐式副本。<br>默认情况下,这些方法委托给嵌入实例的同一方法。</p><p>结构还获得与类型同名的字段。<br>所以,如果嵌入的类型是 public,那么字段是 public。为了保持向后兼容性,外部类型的每个未来版本都必须保留嵌入类型。</p><p>很少需要嵌入类型。<br>这是一种方便,可以帮助您避免编写冗长的委托方法。</p><p>即使嵌入兼容的抽象列表 <em>interface</em>,而不是结构体,这将为开发人员提供更大的灵活性来改变未来,但仍然泄露了具体列表使用抽象实现的细节。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// AbstractList 是各种实体列表的通用实现。</span></span><br><span class="line"><span class="hljs-keyword">type</span> AbstractList <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">  Add(Entity)</span><br><span class="line">  Remove(Entity)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ConcreteList 是一个实体列表。</span></span><br><span class="line"><span class="hljs-keyword">type</span> ConcreteList <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  AbstractList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ConcreteList 是一个实体列表。</span></span><br><span class="line"><span class="hljs-keyword">type</span> ConcreteList <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  list *AbstractList</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 添加将实体添加到列表中。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ConcreteList)</span> <span class="hljs-title">Add</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> l.list.Add(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 移除从列表中移除实体。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *ConcreteList)</span> <span class="hljs-title">Remove</span><span class="hljs-params">(e Entity)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> l.list.Remove(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是使用嵌入式结构还是使用嵌入式接口,嵌入式类型都会限制类型的演化.</p><ul><li>向嵌入式接口添加方法是一个破坏性的改变。</li><li>删除嵌入类型是一个破坏性的改变。</li><li>即使使用满足相同接口的替代方法替换嵌入类型,也是一个破坏性的改变。</li></ul><p>尽管编写这些委托方法是乏味的,但是额外的工作隐藏了实现细节,留下了更多的更改机会,还消除了在文档中发现完整列表接口的间接性操作。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>性能方面的特定准则只适用于高频场景。</p><h3 id="优先使用-strconv-而不是-fmt"><a href="#优先使用-strconv-而不是-fmt" class="headerlink" title="优先使用 strconv 而不是 fmt"></a>优先使用 strconv 而不是 fmt</h3><p>将原语转换为字符串或从字符串转换时,<code>strconv</code>速度比<code>fmt</code>快。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">  s := fmt.Sprint(rand.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">  s := strconv.Itoa(rand.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkFmtSprint<span class="hljs-number">-4</span>    <span class="hljs-number">143</span> ns/op    <span class="hljs-number">2</span> allocs/op</span><br></pre></td></tr></table></figure><figure class="highlight angelscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkStrconv<span class="hljs-number">-4</span>    <span class="hljs-number">64.2</span> ns/op    <span class="hljs-number">1</span> allocs/op</span><br></pre></td></tr></table></figure><h3 id="避免字符串到字节的转换"><a href="#避免字符串到字节的转换" class="headerlink" title="避免字符串到字节的转换"></a>避免字符串到字节的转换</h3><p>不要反复从固定字符串创建字节 slice。相反,请执行一次转换并捕获结果。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">  w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"Hello world"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data := []<span class="hljs-keyword">byte</span>(<span class="hljs-string">"Hello world"</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">  w.Write(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkBad<span class="hljs-number">-4</span>   <span class="hljs-number">50000000</span>   <span class="hljs-number">22.2</span> ns/op</span><br></pre></td></tr></table></figure><figure class="highlight angelscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkGood<span class="hljs-number">-4</span>  <span class="hljs-number">500000000</span>   <span class="hljs-number">3.25</span> ns/op</span><br></pre></td></tr></table></figure><h3 id="尽量初始化时指定-Map-容量"><a href="#尽量初始化时指定-Map-容量" class="headerlink" title="尽量初始化时指定 Map 容量"></a>尽量初始化时指定 Map 容量</h3><p>在尽可能的情况下,在使用<code>make()</code>初始化的时候提供容量信息</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[T1]T2, hint)</span><br></pre></td></tr></table></figure><p>为<code>make()</code>提供容量信息（hint）尝试在初始化时调整 map 大小,<br>这减少了在将元素添加到 map 时增长和分配的开销。<br>注意,map 不能保证分配 hint 个容量。因此,即使提供了容量,添加元素仍然可以进行分配。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]os.FileInfo)</span><br><span class="line"></span><br><span class="line">files, _ := ioutil.ReadDir(<span class="hljs-string">"./files"</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> files &#123;</span><br><span class="line">    m[f.Name()] = f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">files, _ := ioutil.ReadDir(<span class="hljs-string">"./files"</span>)</span><br><span class="line"></span><br><span class="line">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]os.FileInfo, <span class="hljs-built_in">len</span>(files))</span><br><span class="line"><span class="hljs-keyword">for</span> _, f := <span class="hljs-keyword">range</span> files &#123;</span><br><span class="line">    m[f.Name()] = f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>m</code>是在没有大小提示的情况下创建的； 在运行时可能会有更多分配。</p><p><code>m</code>是有大小提示创建的；在运行时可能会有更少的分配。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>本文中概述的一些标准都是客观性的评估,是根据场景、上下文、或者主观性的判断；</p><p>但是最重要的是,<strong>保持一致</strong>.</p><p>一致性的代码更容易维护、是更合理的、需要更少的学习成本、并且随着新的约定出现或者出现错误后更容易迁移、更新、修复 bug</p><p>相反,一个单一的代码库会导致维护成本开销、不确定性和认知偏差。所有这些都会直接导致速度降低、<br>代码审查痛苦、而且增加 bug 数量</p><p>将这些标准应用于代码库时,建议在 package（或更大）级别进行更改,子包级别的应用程序通过将多个样式引入到同一代码中,违反了上述关注点。</p><h3 id="相似的声明放在一组"><a href="#相似的声明放在一组" class="headerlink" title="相似的声明放在一组"></a>相似的声明放在一组</h3><p>Go 语言支持将相似的声明放在一个组内。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"a"</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"b"</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"a"</span></span><br><span class="line">  <span class="hljs-string">"b"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这同样适用于常量、变量和类型声明：</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Area <span class="hljs-keyword">float64</span></span><br><span class="line"><span class="hljs-keyword">type</span> Volume <span class="hljs-keyword">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  a = <span class="hljs-number">1</span></span><br><span class="line">  b = <span class="hljs-number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">  a = <span class="hljs-number">1</span></span><br><span class="line">  b = <span class="hljs-number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> (</span><br><span class="line">  Area <span class="hljs-keyword">float64</span></span><br><span class="line">  Volume <span class="hljs-keyword">float64</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>仅将相关的声明放在一组。不要将不相关的声明放在一组。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Operation <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  Add Operation = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span></span><br><span class="line">  Subtract</span><br><span class="line">  Multiply</span><br><span class="line">  ENV_VAR = <span class="hljs-string">"MY_ENV"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Operation <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  Add Operation = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span></span><br><span class="line">  Subtract</span><br><span class="line">  Multiply</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> ENV_VAR = <span class="hljs-string">"MY_ENV"</span></span><br></pre></td></tr></table></figure><p>分组使用的位置没有限制,例如：你可以在函数内部使用它们：</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> red = color.New(<span class="hljs-number">0xff0000</span>)</span><br><span class="line">  <span class="hljs-keyword">var</span> green = color.New(<span class="hljs-number">0x00ff00</span>)</span><br><span class="line">  <span class="hljs-keyword">var</span> blue = color.New(<span class="hljs-number">0x0000ff</span>)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> (</span><br><span class="line">    red   = color.New(<span class="hljs-number">0xff0000</span>)</span><br><span class="line">    green = color.New(<span class="hljs-number">0x00ff00</span>)</span><br><span class="line">    blue  = color.New(<span class="hljs-number">0x0000ff</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="import-分组"><a href="#import-分组" class="headerlink" title="import 分组"></a>import 分组</h3><p>导入应该分为两组：</p><ul><li>标准库</li><li>其他库</li></ul><p>默认情况下,这是 goimports 应用的分组。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"fmt"</span></span><br><span class="line">  <span class="hljs-string">"os"</span></span><br><span class="line">  <span class="hljs-string">"go.uber.org/atomic"</span></span><br><span class="line">  <span class="hljs-string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"fmt"</span></span><br><span class="line">  <span class="hljs-string">"os"</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-string">"go.uber.org/atomic"</span></span><br><span class="line">  <span class="hljs-string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p>当命名包时,请按下面规则选择一个名称：</p><ul><li>全部小写。没有大写或下划线。</li><li>大多数使用命名导入的情况下,不需要重命名。</li><li>简短而简洁。请记住,在每个使用的地方都完整标识了该名称。</li><li>不用复数。例如<code>net/url</code>,而不是<code>net/urls</code>。</li><li>不要用“common”,“util”,“shared”或“lib”。这些是不好的,信息量不足的名称。</li></ul><p>另请参阅 <a href="https://blog.golang.org/package-names" target="_blank" rel="noopener">Package Names</a> 和 <a href="https://rakyll.org/style-packages/" target="_blank" rel="noopener">Go 包样式指南</a>.</p><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><p>我们遵循 Go 社区关于使用 <a href="https://golang.org/doc/effective_go.html#mixed-caps" target="_blank" rel="noopener">MixedCaps 作为函数名</a> 的约定。有一个例外,为了对相关的测试用例进行分组,函数名可能包含下划线,如：<code>TestMyFunction_WhatIsBeingTested</code>.</p><h3 id="导入别名"><a href="#导入别名" class="headerlink" title="导入别名"></a>导入别名</h3><p>如果程序包名称与导入路径的最后一个元素不匹配,则必须使用导入别名。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"net/http"</span></span><br><span class="line"></span><br><span class="line">  client <span class="hljs-string">"example.com/client-go"</span></span><br><span class="line">  trace <span class="hljs-string">"example.com/trace/v2"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在所有其他情况下,除非导入之间有直接冲突,否则应避免导入别名。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"fmt"</span></span><br><span class="line">  <span class="hljs-string">"os"</span></span><br><span class="line"></span><br><span class="line">  nettrace <span class="hljs-string">"golang.net/x/trace"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">  <span class="hljs-string">"fmt"</span></span><br><span class="line">  <span class="hljs-string">"os"</span></span><br><span class="line">  <span class="hljs-string">"runtime/trace"</span></span><br><span class="line"></span><br><span class="line">  nettrace <span class="hljs-string">"golang.net/x/trace"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="函数分组与顺序"><a href="#函数分组与顺序" class="headerlink" title="函数分组与顺序"></a>函数分组与顺序</h3><ul><li>函数应按粗略的调用顺序排序。</li><li>同一文件中的函数应按接收者分组。</li></ul><p>因此,导出的函数应先出现在文件中,放在<code>struct</code>,<code>const</code>,<code>var</code>定义的后面。</p><p>在定义类型之后,但在接收者的其余方法之前,可能会出现一个<code>newXYZ()</code>/<code>NewXYZ()</code></p><p>由于函数是按接收者分组的,因此普通工具函数应在文件末尾出现。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *something)</span> <span class="hljs-title">Cost</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> calcCost(s.weights)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> something <span class="hljs-keyword">struct</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calcCost</span><span class="hljs-params">(n []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *something)</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span></span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newSomething</span><span class="hljs-params">()</span> *<span class="hljs-title">something</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &amp;something&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> something <span class="hljs-keyword">struct</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newSomething</span><span class="hljs-params">()</span> *<span class="hljs-title">something</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &amp;something&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *something)</span> <span class="hljs-title">Cost</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> calcCost(s.weights)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *something)</span> <span class="hljs-title">Stop</span><span class="hljs-params">()</span></span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calcCost</span><span class="hljs-params">(n []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="减少嵌套"><a href="#减少嵌套" class="headerlink" title="减少嵌套"></a>减少嵌套</h3><p>代码应通过尽可能先处理错误情况/特殊情况并尽早返回或继续循环来减少嵌套。减少嵌套多个级别的代码的代码量。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> data &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> v.F1 == <span class="hljs-number">1</span> &#123;</span><br><span class="line">    v = process(v)</span><br><span class="line">    <span class="hljs-keyword">if</span> err := v.Call(); err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">      v.Send()</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    log.Printf(<span class="hljs-string">"Invalid v: %v"</span>, v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> data &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> v.F1 != <span class="hljs-number">1</span> &#123;</span><br><span class="line">    log.Printf(<span class="hljs-string">"Invalid v: %v"</span>, v)</span><br><span class="line">    <span class="hljs-keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  v = process(v)</span><br><span class="line">  <span class="hljs-keyword">if</span> err := v.Call(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  v.Send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不必要的-else"><a href="#不必要的-else" class="headerlink" title="不必要的 else"></a>不必要的 else</h3><p>如果在 if 的两个分支中都设置了变量,则可以将其替换为单个 if。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-keyword">if</span> b &#123;</span><br><span class="line">  a = <span class="hljs-number">100</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  a = <span class="hljs-number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">if</span> b &#123;</span><br><span class="line">  a = <span class="hljs-number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顶层变量声明"><a href="#顶层变量声明" class="headerlink" title="顶层变量声明"></a>顶层变量声明</h3><p>在顶层,使用标准<code>var</code>关键字。请勿指定类型,除非它与表达式的类型不同。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> _s <span class="hljs-keyword">string</span> = F()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">F</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">"A"</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> _s = F()</span><br><span class="line"><span class="hljs-comment">// 由于 F 已经明确了返回一个字符串类型,因此我们没有必要显式指定_s 的类型</span></span><br><span class="line"><span class="hljs-comment">// 还是那种类型</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">F</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">"A"</span> &#125;</span><br></pre></td></tr></table></figure><p>如果表达式的类型与所需的类型不完全匹配,请指定类型。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> myError <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(myError)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">"error"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">F</span><span class="hljs-params">()</span> <span class="hljs-title">myError</span></span> &#123; <span class="hljs-keyword">return</span> myError&#123;&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _e error = F()</span><br><span class="line"><span class="hljs-comment">// F 返回一个 myError 类型的实例,但是我们要 error 类型</span></span><br></pre></td></tr></table></figure><h3 id="对于未导出的顶层常量和变量-使用-作为前缀"><a href="#对于未导出的顶层常量和变量-使用-作为前缀" class="headerlink" title="对于未导出的顶层常量和变量,使用_作为前缀"></a>对于未导出的顶层常量和变量,使用_作为前缀</h3><p>在未导出的顶级<code>vars</code>和<code>consts</code>, 前面加上前缀_,以使它们在使用时明确表示它们是全局符号。</p><p>例外：未导出的错误值,应以<code>err</code>开头。</p><p>基本依据：顶级变量和常量具有包范围作用域。使用通用名称可能很容易在其他文件中意外使用错误的值。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// foo.go</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  defaultPort = <span class="hljs-number">8080</span></span><br><span class="line">  defaultUser = <span class="hljs-string">"user"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// bar.go</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Bar</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">  defaultPort := <span class="hljs-number">9090</span></span><br><span class="line">  ...</span><br><span class="line">  fmt.Println(<span class="hljs-string">"Default port"</span>, defaultPort)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// We will not see a compile error if the first line of</span></span><br><span class="line">  <span class="hljs-comment">// Bar() is deleted.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// foo.go</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  _defaultPort = <span class="hljs-number">8080</span></span><br><span class="line">  _defaultUser = <span class="hljs-string">"user"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="结构体中的嵌入"><a href="#结构体中的嵌入" class="headerlink" title="结构体中的嵌入"></a>结构体中的嵌入</h3><p>嵌入式类型（例如 mutex）应位于结构体内的字段列表的顶部,并且必须有一个空行将嵌入式字段与常规字段分隔开。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  version <span class="hljs-keyword">int</span></span><br><span class="line">  http.Client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  http.Client</span><br><span class="line"></span><br><span class="line">  version <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用字段名初始化结构体"><a href="#使用字段名初始化结构体" class="headerlink" title="使用字段名初始化结构体"></a>使用字段名初始化结构体</h3><p>初始化结构体时,几乎始终应该指定字段名称。现在由 <a href="https://golang.org/cmd/vet/" target="_blank" rel="noopener"><code>go vet</code></a> 强制执行。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k := User&#123;<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>, <span class="hljs-literal">true</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k := User&#123;</span><br><span class="line">    FirstName: <span class="hljs-string">"John"</span>,</span><br><span class="line">    LastName: <span class="hljs-string">"Doe"</span>,</span><br><span class="line">    Admin: <span class="hljs-literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例外：如果有 3 个或更少的字段,则可以在测试表中省略字段名称。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tests := []<span class="hljs-keyword">struct</span>&#123;</span><br><span class="line">  op Operation</span><br><span class="line">  want <span class="hljs-keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">  &#123;Add, <span class="hljs-string">"add"</span>&#125;,</span><br><span class="line">  &#123;Subtract, <span class="hljs-string">"subtract"</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本地变量声明"><a href="#本地变量声明" class="headerlink" title="本地变量声明"></a>本地变量声明</h3><p>如果将变量明确设置为某个值,则应使用短变量声明形式 (<code>:=</code>)。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"foo"</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="hljs-string">"foo"</span></span><br></pre></td></tr></table></figure><p>但是,在某些情况下,<code>var</code>使用关键字时默认值会更清晰。例如,声明空切片。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(list []<span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">  filtered := []<span class="hljs-keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> list &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">      filtered = <span class="hljs-built_in">append</span>(filtered, v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(list []<span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> filtered []<span class="hljs-keyword">int</span></span><br><span class="line">  <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> list &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">      filtered = <span class="hljs-built_in">append</span>(filtered, v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nil-是一个有效的-slice"><a href="#nil-是一个有效的-slice" class="headerlink" title="nil 是一个有效的 slice"></a>nil 是一个有效的 slice</h3><p><code>nil</code>是一个有效的长度为 0 的 slice,这意味着,</p><ul><li>您不应明确返回长度为零的切片。应该返回<code>nil</code>来代替。</li></ul><p>  <code>Bad</code> vs <code>Good</code></p>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> x == <span class="hljs-string">""</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> x == <span class="hljs-string">""</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要检查切片是否为空,请始终使用<code>len(s) == 0</code>。而非<code>nil</code>。</li></ul><p>  <code>Bad</code> vs <code>Good</code></p>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(s []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> s == <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(s []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>零值切片（用<code>var</code>声明的切片）可立即使用,无需调用<code>make()</code>创建。</li></ul><p>  <code>Bad</code> vs <code>Good</code></p>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nums := []<span class="hljs-keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="hljs-comment">// or, nums := make([]int)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> add1 &#123;</span><br><span class="line">  nums = <span class="hljs-built_in">append</span>(nums, <span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> add2 &#123;</span><br><span class="line">  nums = <span class="hljs-built_in">append</span>(nums, <span class="hljs-number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> nums []<span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> add1 &#123;</span><br><span class="line">  nums = <span class="hljs-built_in">append</span>(nums, <span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> add2 &#123;</span><br><span class="line">  nums = <span class="hljs-built_in">append</span>(nums, <span class="hljs-number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小变量作用域"><a href="#小变量作用域" class="headerlink" title="小变量作用域"></a>小变量作用域</h3><p>如果有可能,尽量缩小变量作用范围。除非它与 <a href="#减少嵌套">减少嵌套</a>的规则冲突。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err := ioutil.WriteFile(name, data, <span class="hljs-number">0644</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"> <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err := ioutil.WriteFile(name, data, <span class="hljs-number">0644</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"> <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要在 if 之外使用函数调用的结果,则不应尝试缩小范围。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> data, err := ioutil.ReadFile(name); err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  err = cfg.Decode(data)</span><br><span class="line">  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(cfg)</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data, err := ioutil.ReadFile(name)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">   <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := cfg.Decode(data); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(cfg)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br></pre></td></tr></table></figure><h3 id="避免参数语义不明确-Avoid-Naked-Parameters"><a href="#避免参数语义不明确-Avoid-Naked-Parameters" class="headerlink" title="避免参数语义不明确(Avoid Naked Parameters)"></a>避免参数语义不明确(Avoid Naked Parameters)</h3><p>函数调用中的<code>意义不明确的参数</code>可能会损害可读性。当参数名称的含义不明显时,请为参数添加 C 样式注释 (<code>/* ... */</code>)</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func printInfo(name string, isLocal, done bool)</span></span><br><span class="line"></span><br><span class="line">printInfo(<span class="hljs-string">"foo"</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func printInfo(name string, isLocal, done bool)</span></span><br><span class="line"></span><br><span class="line">printInfo(<span class="hljs-string">"foo"</span>, <span class="hljs-literal">true</span> <span class="hljs-comment">/* isLocal */</span>, <span class="hljs-literal">true</span> <span class="hljs-comment">/* done */</span>)</span><br></pre></td></tr></table></figure><p>对于上面的示例代码,还有一种更好的处理方式是将上面的<code>bool</code>类型换成自定义类型。将来,该参数可以支持不仅仅局限于两个状态（true/false）。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Region <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  UnknownRegion Region = <span class="hljs-literal">iota</span></span><br><span class="line">  Local</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Status <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">  StatusReady = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span></span><br><span class="line">  StatusDone</span><br><span class="line">  <span class="hljs-comment">// Maybe we will have a StatusInProgress in the future.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printInfo</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, region Region, status Status)</span></span></span><br></pre></td></tr></table></figure><h3 id="使用原始字符串字面值-避免转义"><a href="#使用原始字符串字面值-避免转义" class="headerlink" title="使用原始字符串字面值,避免转义"></a>使用原始字符串字面值,避免转义</h3><p>Go 支持使用 <a href="https://golang.org/ref/spec#raw_string_lit" target="_blank" rel="noopener">原始字符串字面值</a>,也就是 “`” 来表示原生字符串,在需要转义的场景下,我们应该尽量使用这种方案来替换。</p><p>可以跨越多行并包含引号。使用这些字符串可以避免更难阅读的手工转义的字符串。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wantError := <span class="hljs-string">"unknown name:\"test\""</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wantError :=<span class="hljs-string">`unknown error:"test"`</span></span><br></pre></td></tr></table></figure><h3 id="初始化-Struct-引用"><a href="#初始化-Struct-引用" class="headerlink" title="初始化 Struct 引用"></a>初始化 Struct 引用</h3><p>在初始化结构引用时,请使用<code>&amp;T{}</code>代替<code>new(T)</code>,以使其与结构体初始化一致。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sval := T&#123;Name: <span class="hljs-string">"foo"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// inconsistent</span></span><br><span class="line">sptr := <span class="hljs-built_in">new</span>(T)</span><br><span class="line">sptr.Name = <span class="hljs-string">"bar"</span></span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sval := T&#123;Name: <span class="hljs-string">"foo"</span>&#125;</span><br><span class="line"></span><br><span class="line">sptr := &amp;T&#123;Name: <span class="hljs-string">"bar"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化-Maps"><a href="#初始化-Maps" class="headerlink" title="初始化 Maps"></a>初始化 Maps</h3><p>对于空 map 请使用<code>make(..)</code>初始化, 并且 map 是通过编程方式填充的。<br>这使得 map 初始化在表现上不同于声明,并且它还可以方便地在 make 后添加大小提示。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">  <span class="hljs-comment">// m1 读写安全;</span></span><br><span class="line">  <span class="hljs-comment">// m2 在写入时会 panic</span></span><br><span class="line">  m1 = <span class="hljs-keyword">map</span>[T1]T2&#123;&#125;</span><br><span class="line">  m2 <span class="hljs-keyword">map</span>[T1]T2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">  <span class="hljs-comment">// m1 读写安全;</span></span><br><span class="line">  <span class="hljs-comment">// m2 在写入时会 panic</span></span><br><span class="line">  m1 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[T1]T2)</span><br><span class="line">  m2 <span class="hljs-keyword">map</span>[T1]T2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>声明和初始化看起来非常相似的。</p><p>声明和初始化看起来差别非常大。</p><p>在尽可能的情况下,请在初始化时提供 map 容量大小,详细请看 <a href="#尽量初始化时指定-Map-容量">尽量初始化时指定 Map 容量</a>。</p><p>另外,如果 map 包含固定的元素列表,则使用 map literals(map 初始化列表) 初始化映射。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[T1]T2, <span class="hljs-number">3</span>)</span><br><span class="line">m[k1] = v1</span><br><span class="line">m[k2] = v2</span><br><span class="line">m[k3] = v3</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="hljs-keyword">map</span>[T1]T2&#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2,</span><br><span class="line">  k3: v3,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本准则是：在初始化时使用 map 初始化列表 来添加一组固定的元素。否则使用<code>make</code>(如果可以,请尽量指定 map 容量)。</p><h3 id="字符串-string-format"><a href="#字符串-string-format" class="headerlink" title="字符串 string format"></a>字符串 string format</h3><p>如果你在函数外声明<code>Printf</code>-style 函数的格式字符串,请将其设置为<code>const</code>常量。</p><p>这有助于<code>go vet</code>对格式字符串执行静态分析。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msg := <span class="hljs-string">"unexpected values %v, %v\n"</span></span><br><span class="line">fmt.Printf(msg, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> msg = <span class="hljs-string">"unexpected values %v, %v\n"</span></span><br><span class="line">fmt.Printf(msg, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="命名-Printf-样式的函数"><a href="#命名-Printf-样式的函数" class="headerlink" title="命名 Printf 样式的函数"></a>命名 Printf 样式的函数</h3><p>声明<code>Printf</code>-style 函数时,请确保<code>go vet</code>可以检测到它并检查格式字符串。</p><p>这意味着您应尽可能使用预定义的<code>Printf</code>-style 函数名称。<code>go vet</code>将默认检查这些。有关更多信息,请参见 <a href="https://golang.org/cmd/vet/#hdr-Printf_family" target="_blank" rel="noopener">Printf 系列</a>。</p><p>如果不能使用预定义的名称,请以 f 结束选择的名称：<code>Wrapf</code>,而不是<code>Wrap</code>。<code>go vet</code>可以要求检查特定的 Printf 样式名称,但名称必须以<code>f</code>结尾。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> go vet -printfuncs=wrapf,statusf</span></span><br></pre></td></tr></table></figure><p>另请参阅 <a href="https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/" target="_blank" rel="noopener">go vet: Printf family check</a>.</p><h2 id="编程模式"><a href="#编程模式" class="headerlink" title="编程模式"></a>编程模式</h2><h3 id="表驱动测试"><a href="#表驱动测试" class="headerlink" title="表驱动测试"></a>表驱动测试</h3><p>当测试逻辑是重复的时候,通过  <a href="https://blog.golang.org/subtests" target="_blank" rel="noopener">subtests</a> 使用 table 驱动的方式编写 case 代码看上去会更简洁。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func TestSplitHostPort(t *testing.T)</span></span><br><span class="line"></span><br><span class="line">host, port, err := net.SplitHostPort(<span class="hljs-string">"192.0.2.0:8000"</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"192.0.2.0"</span>, host)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"8000"</span>, port)</span><br><span class="line"></span><br><span class="line">host, port, err = net.SplitHostPort(<span class="hljs-string">"192.0.2.0:http"</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"192.0.2.0"</span>, host)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"http"</span>, port)</span><br><span class="line"></span><br><span class="line">host, port, err = net.SplitHostPort(<span class="hljs-string">":8000"</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">""</span>, host)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"8000"</span>, port)</span><br><span class="line"></span><br><span class="line">host, port, err = net.SplitHostPort(<span class="hljs-string">"1:8"</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"1"</span>, host)</span><br><span class="line">assert.Equal(t, <span class="hljs-string">"8"</span>, port)</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// func TestSplitHostPort(t *testing.T)</span></span><br><span class="line"></span><br><span class="line">tests := []<span class="hljs-keyword">struct</span>&#123;</span><br><span class="line">  give     <span class="hljs-keyword">string</span></span><br><span class="line">  wantHost <span class="hljs-keyword">string</span></span><br><span class="line">  wantPort <span class="hljs-keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    give:     <span class="hljs-string">"192.0.2.0:8000"</span>,</span><br><span class="line">    wantHost: <span class="hljs-string">"192.0.2.0"</span>,</span><br><span class="line">    wantPort: <span class="hljs-string">"8000"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    give:     <span class="hljs-string">"192.0.2.0:http"</span>,</span><br><span class="line">    wantHost: <span class="hljs-string">"192.0.2.0"</span>,</span><br><span class="line">    wantPort: <span class="hljs-string">"http"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    give:     <span class="hljs-string">":8000"</span>,</span><br><span class="line">    wantHost: <span class="hljs-string">""</span>,</span><br><span class="line">    wantPort: <span class="hljs-string">"8000"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    give:     <span class="hljs-string">"1:8"</span>,</span><br><span class="line">    wantHost: <span class="hljs-string">"1"</span>,</span><br><span class="line">    wantPort: <span class="hljs-string">"8"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> _, tt := <span class="hljs-keyword">range</span> tests &#123;</span><br><span class="line">  t.Run(tt.give, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    host, port, err := net.SplitHostPort(tt.give)</span><br><span class="line">    require.NoError(t, err)</span><br><span class="line">    assert.Equal(t, tt.wantHost, host)</span><br><span class="line">    assert.Equal(t, tt.wantPort, port)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显,使用 test table 的方式在代码逻辑扩展的时候,比如新增 test case,都会显得更加的清晰。</p><p>我们遵循这样的约定：将结构体切片称为<code>tests</code>。 每个测试用例称为<code>tt</code>。此外,我们鼓励使用<code>give</code>和<code>want</code>前缀说明每个测试用例的输入和输出值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tests := []<span class="hljs-keyword">struct</span>&#123;</span><br><span class="line">  give     <span class="hljs-keyword">string</span></span><br><span class="line">  wantHost <span class="hljs-keyword">string</span></span><br><span class="line">  wantPort <span class="hljs-keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> _, tt := <span class="hljs-keyword">range</span> tests &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能选项"><a href="#功能选项" class="headerlink" title="功能选项"></a>功能选项</h3><p>功能选项是一种模式,您可以在其中声明一个不透明 Option 类型,该类型在某些内部结构中记录信息。您接受这些选项的可变编号,并根据内部结构上的选项记录的全部信息采取行动。</p><p>将此模式用于您需要扩展的构造函数和其他公共 API 中的可选参数,尤其是在这些功能上已经具有三个或更多参数的情况下。</p><p><code>Bad</code> vs <code>Good</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package db</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  addr <span class="hljs-keyword">string</span>,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  cache <span class="hljs-keyword">bool</span>,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  logger *zap.Logger</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span> <span class="hljs-params">(*Connection, error)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package db</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Option <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCache</span><span class="hljs-params">(c <span class="hljs-keyword">bool</span>)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithLogger</span><span class="hljs-params">(log *zap.Logger)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Open creates a connection.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  addr <span class="hljs-keyword">string</span>,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  opts ...Option,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span> <span class="hljs-params">(*Connection, error)</span></span> &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须始终提供缓存和记录器参数,即使用户希望使用默认值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Open(addr, db.DefaultCache, zap.NewNop())</span><br><span class="line">db.Open(addr, db.DefaultCache, log)</span><br><span class="line">db.Open(addr, <span class="hljs-literal">false</span> <span class="hljs-comment">/* cache */</span>, zap.NewNop())</span><br><span class="line">db.Open(addr, <span class="hljs-literal">false</span> <span class="hljs-comment">/* cache */</span>, log)</span><br></pre></td></tr></table></figure><p>只有在需要时才提供选项。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Open(addr)</span><br><span class="line">db.Open(addr, db.WithLogger(log))</span><br><span class="line">db.Open(addr, db.WithCache(<span class="hljs-literal">false</span>))</span><br><span class="line">db.Open(</span><br><span class="line">  addr,</span><br><span class="line">  db.WithCache(<span class="hljs-literal">false</span>),</span><br><span class="line">  db.WithLogger(log),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们建议实现此模式的方法是使用一个<code>Option</code>接口,该接口保存一个未导出的方法,在一个未导出的<code>options</code>结构上记录选项。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> options <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  cache  <span class="hljs-keyword">bool</span></span><br><span class="line">  logger *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Option <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">  apply(*options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> cacheOption <span class="hljs-keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c cacheOption)</span> <span class="hljs-title">apply</span><span class="hljs-params">(opts *options)</span></span> &#123;</span><br><span class="line">  opts.cache = <span class="hljs-keyword">bool</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCache</span><span class="hljs-params">(c <span class="hljs-keyword">bool</span>)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> cacheOption(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> loggerOption <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">  Log *zap.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l loggerOption)</span> <span class="hljs-title">apply</span><span class="hljs-params">(opts *options)</span></span> &#123;</span><br><span class="line">  opts.logger = l.Log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithLogger</span><span class="hljs-params">(log *zap.Logger)</span> <span class="hljs-title">Option</span></span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> loggerOption&#123;Log: log&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Open creates a connection.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  addr <span class="hljs-keyword">string</span>,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  opts ...Option,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span> <span class="hljs-params">(*Connection, error)</span></span> &#123;</span><br><span class="line">  options := options&#123;</span><br><span class="line">    cache:  defaultCache,</span><br><span class="line">    logger: zap.NewNop(),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> _, o := <span class="hljs-keyword">range</span> opts &#123;</span><br><span class="line">    o.apply(&amp;options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: 还有一种使用闭包实现这个模式的方法,但是我们相信上面的模式为作者提供了更多的灵活性,并且更容易对用户进行调试和测试。特别是,在不可能进行比较的情况下它允许在测试和模拟中对选项进行比较。此外,它还允许选项实现其他接口,包括<code>fmt.Stringer</code>,允许用户读取选项的字符串表示形式。</p><p>还可以参考下面资料：</p><ul><li><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">Self-referential functions and the design of options</a></li><li><a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">Functional options for friendly APIs</a></li></ul><!-- TODO: replace this with parameter structs and functional options, when touse one vs other --><h2 id="Stargazers-over-time"><a href="#Stargazers-over-time" class="headerlink" title="Stargazers over time"></a>Stargazers over time</h2><p><a href="https://starchart.cc/xxjwxc/uber_go_guide_cn" target="_blank" rel="noopener"><img src="https://starchart.cc/xxjwxc/uber_go_guide_cn.svg" alt="Stargazers over time"></a></p><p><a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">uber-go/guide</a> 的中文翻译</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOP-K 问题的终极算法 - BFPRT 算法</title>
      <link href="/2020/04/04/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/TOP-K%E9%97%AE%E9%A2%98%E7%9A%84%E7%BB%88%E6%9E%81%E7%AE%97%E6%B3%95-BFPRT%E7%AE%97%E6%B3%95/"/>
      <url>/2020/04/04/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/TOP-K%E9%97%AE%E9%A2%98%E7%9A%84%E7%BB%88%E6%9E%81%E7%AE%97%E6%B3%95-BFPRT%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>TOP-K 问题,从一堆无序数据里面找到前 K 大（当然也可以是前 K 小的数。我可以用堆排序或者快速排序可以做到,但是时间复杂度为 O（NlogN）, 这里就不多说了。BFPRT 算法,该算法于1973年由 Blum、Floyd、Pratt、Rivest 和 Tarjan 联合发明,其中蕴含的深刻思想改变了世界。BFPRT 算法解决了这样一个问题,在时间复杂度 O（N）内,从无序的数组中找到第 K 小的数。</p><a id="more"></a><h2 id="1-BFPRT-算法的核心思想"><a href="#1-BFPRT-算法的核心思想" class="headerlink" title="1.BFPRT 算法的核心思想"></a><strong>1.BFPRT 算法的核心思想</strong></h2><p>假设 BFPRT 算法的函数是<code>selectK(des []int, start int, end int, i int) int</code>,该函数的功能为在arr中找到第k小的数,然后返回该数。<code>selectK(des []int, start int, end int, i int) int</code>的过程如下：</p><ol><li>将arr中的n个元素划分成n/5组,每组5个元素,如果最后的组不够5个元素,那么最后剩下的元素为一组（n%5个元素）。</li><li>对每个组进行插入排序,只针对每个组最多5个元素之间的组内排序,组与组之间并不排序。排序后找到每个组的中位数,如果组的元素个数为偶数,这里规定找到下中位数(位置处于排好序数组右边的中位数)。</li><li>步骤2中一共会找到n/5个中位数,让这些中位数组成一个新的数组,记为 midArray 。递归调用<code>selectK （midArray, 0, len(midArray)-1, len(midArray)/2）</code>,意义是找到 mArr 数组中的中位数,即 midArray 中第<code>（midArray.length/2）</code>小的数。</li><li>假设步骤3中递归调用<code>selectK （midArray, 0, len(midArray)-1, len(midArray)/2）</code>后,返回的数为 x 。根据这个 x 划分整个 arr 数组（partition过程）,划分的过程为：<strong>在arr中,比 x 小的数都在 x 的左边,大于 x 的数都在 x 的右边,x 在中间。划分完成后,x 在 arr 中的位置记为 i。</strong></li><li>如果 i==k ,说明x为整个数组中第 k 小的数,直接返回。<ul><li>如果 i＜k,说明 x 处在第 k 小的数的左边,应该在 x 的右边寻找第 k 小的数,所以递归调用<code>selectK</code>函数,在右半区寻找第 i 小的数。</li><li>如果 i＞k,说明 x 处在第 k 小的数的右边,应该在 x 的左边寻找第k小的数,所以递归调用<code>selectK</code>函数,在左半区寻找第 k 小的数。</li></ul></li></ol><h2 id="2-BFPRT-算法怎么找到第K大的数"><a href="#2-BFPRT-算法怎么找到第K大的数" class="headerlink" title="2.BFPRT 算法怎么找到第K大的数"></a><strong>2.BFPRT 算法怎么找到第K大的数</strong></h2><p>BFPRT 算法又叫中位数的中位数算法,一次中位数的运算可以找到第50%的数，根据当前中位数在数组中的位置K’，可以判断当前第50%大的数是不是第K<br>的数。如果 K’ &lt; K ，则往右半区查找。因为在合并后，K’位置左边的数一定比所有小于K’位置的数小，K’位置右边的数一定比所有小于K’位置的数大。所以当 K’ = K 时,就是第 K 大的数。</p><h2 id="3-BFPRT-算法实现"><a href="#3-BFPRT-算法实现" class="headerlink" title="3.BFPRT 算法实现"></a><strong>3.BFPRT 算法实现</strong></h2><blockquote><p>主函数过程如下:从当前数组中找到第 K 大中位数,然后对数组进行划分,比 x 小的数都在x的左边,大于 x 的数都在 x 的右边,x在中间。x在arr中的位置记为i。如果 i==k,说明x为整个数组中第 k 小的数,直接返回。如果 i＜k,说明 x 处在第 k 小的数的左边,应该在 x 的右边寻找第 k 小的数,所以递归调用<code>selectK</code>函数,在右半区寻找第 i 小的数。如果 i＞k,说明 x 处在第 k 小的数的右边,应该在 x 的左边寻找第k小的数,所以递归调用<code>selectK</code>函数,在左半区寻找第 k 小的数。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectK</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, start <span class="hljs-keyword">int</span>, end <span class="hljs-keyword">int</span>, i <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> start == end &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> arr[start]</span><br><span class="line">&#125;</span><br><span class="line">midNumber := getMinNumberByArray(arr, start, end)</span><br><span class="line">rangeMid := getRangMidPosition(arr, start, end, midNumber)</span><br><span class="line"><span class="hljs-comment">//println("=========================")</span></span><br><span class="line"><span class="hljs-comment">//fmt.Println("arr = ",arr)</span></span><br><span class="line"><span class="hljs-comment">//fmt.Println("midNumber = ",midNumber)</span></span><br><span class="line"><span class="hljs-comment">//println("pivotRange = ", rangeMid[0], " ", rangeMid[1])</span></span><br><span class="line"><span class="hljs-keyword">if</span> i &gt;= rangeMid[<span class="hljs-number">0</span>] &amp;&amp; i &lt;= rangeMid[<span class="hljs-number">1</span>] &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> arr[i]</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i &gt;= rangeMid[<span class="hljs-number">0</span>] &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> selectK(arr, rangeMid[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>, end, i)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> selectK(arr, start, rangeMid[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从原始数组中找到算出中位数数组的长度大小,如果最后剩余长度小于5,则单独划分成一组,通过<code>getMid</code>函数,得到每小组的中位数。然后再对中位数数组继续调用<code>selectK</code>方法,找到中位数组的中位数,直到<code>start == end</code>为止,返回的数 x 就是当前数组中位数的值。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMinNumberByArray</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, begin, end <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> midArray []<span class="hljs-keyword">int</span></span><br><span class="line">num := end - begin + <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">if</span> num%<span class="hljs-number">5</span> == <span class="hljs-number">0</span> &#123;</span><br><span class="line">midArray = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, num/<span class="hljs-number">5</span>)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">midArray = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, num/<span class="hljs-number">5</span>+<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(midArray); i++ &#123;</span><br><span class="line">s := begin + i*<span class="hljs-number">5</span></span><br><span class="line">e := s + <span class="hljs-number">4</span></span><br><span class="line">midArray[i] = getMid(arr, s, <span class="hljs-keyword">int</span>(math.Min(<span class="hljs-keyword">float64</span>(e), <span class="hljs-keyword">float64</span>(end))))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> selectK(midArray, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(midArray)<span class="hljs-number">-1</span>, <span class="hljs-built_in">len</span>(midArray)/<span class="hljs-number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>得到当前段数组的中位数过程,首先进行插入排序,保证这是一个有序数组,如果当前数组是偶数,<code>sum/2</code>得出的就直接是下中位数,如果数组不是偶数,则使用下中位数<code>mid := sum/2 + sum%2</code>。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMid</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, s <span class="hljs-keyword">int</span>, e <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">insertSort(arr, s, e)</span><br><span class="line">sum := s + e</span><br><span class="line">mid := sum/<span class="hljs-number">2</span> + sum%<span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-keyword">return</span> arr[mid]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入排序过程如下</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, s <span class="hljs-keyword">int</span>, e <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> i := s + <span class="hljs-number">1</span>; i != e+<span class="hljs-number">1</span>; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> j := i; j != s; j-- &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> arr[j<span class="hljs-number">-1</span>] &gt; arr[j] &#123;</span><br><span class="line">arr[j<span class="hljs-number">-1</span>], arr[j] = arr[j], arr[j<span class="hljs-number">-1</span>]</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>得到数组的中位数后,然后对数组进行划分,比 x 小的数都在 x 的左边,大于 x 的数都在x的右边,值为 x 在中间 small 到 big的区域,这样就不用重复计算这些数据。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRangMidPosition</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, start <span class="hljs-keyword">int</span>, end <span class="hljs-keyword">int</span>, midNumber <span class="hljs-keyword">int</span>)</span> [2]<span class="hljs-title">int</span></span> &#123;</span><br><span class="line">small := start</span><br><span class="line">big := end</span><br><span class="line">cur := start</span><br><span class="line"><span class="hljs-keyword">for</span> cur != big+<span class="hljs-number">1</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> arr[cur] &lt; midNumber &#123;</span><br><span class="line">arr[cur], arr[small] = arr[small], arr[cur]</span><br><span class="line">cur++</span><br><span class="line">small++</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arr[cur] &gt; midNumber &#123;</span><br><span class="line">arr[cur], arr[big] = arr[big], arr[cur]</span><br><span class="line">big--</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">cur++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> [<span class="hljs-number">2</span>]<span class="hljs-keyword">int</span>&#123;small, big&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们通过一组数据来具体的说明算法是如何工作的,下面给出一组测试案例</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_getMinKByBF</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">type</span> args <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">arr []<span class="hljs-keyword">int</span></span><br><span class="line">k   <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">name <span class="hljs-keyword">string</span></span><br><span class="line">args args</span><br><span class="line">want <span class="hljs-keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;name: <span class="hljs-string">""</span>, args: <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">arr []<span class="hljs-keyword">int</span></span><br><span class="line">k   <span class="hljs-keyword">int</span></span><br><span class="line">&#125;&#123;arr: []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>&#125;, k: <span class="hljs-number">16</span>&#125;, want: <span class="hljs-number">7</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> _, tt := <span class="hljs-keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> got := getMinKByBFPRT(tt.args.arr, tt.args.k); got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="hljs-string">"getMinKByBFPRT() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因此数组是从 0 开始的,那么在数组中的位置是 15</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMinKByBFPRT</span><span class="hljs-params">(arr []<span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">des := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(arr))</span><br><span class="line"><span class="hljs-built_in">copy</span>(des, arr)</span><br><span class="line"><span class="hljs-keyword">return</span> selectK(des, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>, k<span class="hljs-number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果如下：</p></blockquote><figure class="highlight angelscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">arr =  [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]</span><br><span class="line">midNumber =  <span class="hljs-number">5</span></span><br><span class="line">pivotRange =  <span class="hljs-number">2</span>   <span class="hljs-number">2</span></span><br><span class="line">i =  <span class="hljs-number">2</span></span><br><span class="line">=========================</span><br><span class="line">arr =  [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span>]</span><br><span class="line">midNumber =  <span class="hljs-number">5</span></span><br><span class="line">pivotRange =  <span class="hljs-number">9</span>   <span class="hljs-number">11</span></span><br><span class="line">i =  <span class="hljs-number">15</span></span><br><span class="line">=========================</span><br><span class="line">arr =  [<span class="hljs-number">7</span> <span class="hljs-number">9</span>]</span><br><span class="line">midNumber =  <span class="hljs-number">9</span></span><br><span class="line">pivotRange =  <span class="hljs-number">1</span>   <span class="hljs-number">1</span></span><br><span class="line">i =  <span class="hljs-number">1</span></span><br><span class="line">=========================</span><br><span class="line">arr =  [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span>]</span><br><span class="line">midNumber =  <span class="hljs-number">9</span></span><br><span class="line">pivotRange =  <span class="hljs-number">16</span>   <span class="hljs-number">18</span></span><br><span class="line">i =  <span class="hljs-number">15</span></span><br><span class="line">=========================</span><br><span class="line">arr =  [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span>]</span><br><span class="line">midNumber =  <span class="hljs-number">6</span></span><br><span class="line">pivotRange =  <span class="hljs-number">12</span>   <span class="hljs-number">14</span></span><br><span class="line">i =  <span class="hljs-number">15</span></span><br></pre></td></tr></table></figure><ol><li>首先找到无序数组<code>6, 9, 1, 3, 1, 2, 2, 5, 6, 1, 3, 5, 9, 7, 2, 5, 6, 1, 9</code>的中位数,进入递归,递归后的划分原来的中位数数组为<code>[2 3 5 6]</code>,并且已经被中位数 5 划分了,返回 5,5 就是原来无序数组的中位数。</li><li>从递归回到主函数后,根据找到的中位数 5 ,划分数组,划分后的位置在<code>[9,11]</code>比我们要找到第 16 大数小,所以排除左边区域,从右边开始找。</li><li>和上面解释一样,找到了 新无序数组的中位数组的中位数,返回 9 ,位置在<code>[16,18]</code>比 15 大 ,往前查找,最终找到了位置<code>[12,14]</code>比 15 大,往前后查找,<code>start == end</code>,此时<code>start</code>位置 15 就是第 16 小的数。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全弄懂 KMP 算法</title>
      <link href="/2020/04/03/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%AE%8C%E5%85%A8%E5%BC%84%E6%87%82KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2020/04/03/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%AE%8C%E5%85%A8%E5%BC%84%E6%87%82KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在大学时期,学习 KMP 算法感觉自己好似懂,但是好似又不懂,书里看的云里雾里不知所起然,最近对算法重新进行学习,对于 KMP 算法有了更深刻的理解。</p><a id="more"></a><h1 id="一、KMP-算法"><a href="#一、KMP-算法" class="headerlink" title="一、KMP 算法"></a>一、KMP 算法</h1><h2 id="1-算法由来"><a href="#1-算法由来" class="headerlink" title="1.算法由来"></a>1.算法由来</h2><blockquote><p>KMP 算法是由D.E. Knuth、J.H.Morris和V.R. Pratt提出的,可在一个主文本字符串S内查找一个词W的出现位置。此算法通过运用对这个词在不匹配时本身就包含足够的信息来确定下一个匹配将在哪里开始的发现,从而避免重新检查先前匹配的字符。这个算法是由高德纳和沃恩·普拉特在1974年构思,同年詹姆斯·H·莫里斯也独立地设计出该算法,最终由三人于1977年联合发表。该算法减少了BF算法中i回溯所进行的无谓操作,极大地提高了字符串匹配算法的效率。 [1],由D.E.Knuth,J.H.Morris和V.R.Pratt提出的,因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。</p></blockquote><h2 id="2-算法的核心思想"><a href="#2-算法的核心思想" class="headerlink" title="2.算法的核心思想"></a>2.算法的核心思想</h2><p>KMP算法的核心是利用匹配失败后的信息,尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现,函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n)。</p><h2 id="3-解释"><a href="#3-解释" class="headerlink" title="3.解释"></a>3.解释</h2><p>我们BF算法就是通过逐个扫描,从主串到模版串进行注意匹配,而 kmp 算法做的就是减少从头开始匹配的过程,来避免多次进行不必要的匹配。那么假设我们已经得到了模板串的滑动数组,该数组作用就是当从某一个位置匹配失败时,可以迅速的找到之前一个类似的匹配位置。因此我们可以根据 BF 算法轻易的写出关于kmp算法的雏形。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kmpMatch</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>, m <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">next := getNextArray(m)</span><br><span class="line">mlen, slen := <span class="hljs-built_in">len</span>(m), <span class="hljs-built_in">len</span>(s)</span><br><span class="line">si, mi := <span class="hljs-number">0</span>, <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> si &lt; slen &amp;&amp; mi &lt; mlen &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> s[si] == m[mi] &#123;</span><br><span class="line">si++</span><br><span class="line">mi++</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> next[mi] == <span class="hljs-number">-1</span> &#123;</span><br><span class="line">si++</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">mi = next[mi]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index := <span class="hljs-number">-1</span></span><br><span class="line"><span class="hljs-keyword">if</span> mi == mlen &#123;</span><br><span class="line">index = si - mlen</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以根据字符串遍历的程度,要判断是否匹配成功,如果模版串遍历完成,遍历索引等于模版字符串的长度,那么就说明在主串中找到了包含模版串。否则就能知道是主串已经遍历完成,但是模版串还没有遍历完成。</p><p>在整个for循环中,如果主串的位置,和模板串的字符匹配,那么就进行下一个位置的匹配。如果滑动数组已经滑动到最开始的位置,那么直接将主串向前滑动一步,此时模板串已经处于索引为0处。如果以上两种情况都不是,那么认为滑动数组还没有滑动到索引为0的位置,认为当前位置可以继续尝试匹配,那么让滑动数组回到上一个认为可以滑动的位置,再进行匹配。</p><p>下面我门讨论一下如何得到next数组:</p><p><img src="https://wiki.jikexueyuan.com/project/kmp-algorithm/images/322.jpg" alt="abab"></p><p>图上给出的就是一个next数组,其中当前值代表的是之前有多少个字符串与开头字符串相匹配,可以看到<code>i=0</code>时,没有字符串和它匹配,并且是开头就特殊标记为 -1,<code>i=1</code>时,我们定义滑动数组为前缀数组与后缀数组（不包含第一个字符）的匹配,所以当前<code>i=1</code>位置,如果即使是<code>a</code>,值也为0。所以将当前位置值设置为0。再来看<code>i=2</code>时 ,<code>next[1]</code>为0,那么表示从头开始匹配,<code>s[0](a)</code>位置与<code>s[1](b)</code>位置不匹配,那么之前没有匹配的字符串,所以当前值也填为0。<code>i=3</code>时,这个时候可以看到<code>s[0](a)</code>位置与<code>s[2](a)</code>位置匹配,所以当前位置可以设置为1,反复如此,求出next数组。</p><p><img src="https://md.ulovecode.com/static/images/posts/kmp-1-2.png" alt="kmp"></p><p>那么上图就画出了匹配情况<code>m[k]</code>与<code>m[j]</code>匹配情况与不匹配的情况。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getNextArray</span><span class="hljs-params">(m <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(m) &lt;= <span class="hljs-number">2</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">next := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-built_in">len</span>(m))</span><br><span class="line">next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span></span><br><span class="line">next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span></span><br><span class="line">pos := <span class="hljs-number">2</span></span><br><span class="line">cn := <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> pos &lt; <span class="hljs-built_in">len</span>(next) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> m[pos<span class="hljs-number">-1</span>] == m[cn] &#123;</span><br><span class="line">cn++</span><br><span class="line">next[pos] = cn</span><br><span class="line">pos++</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cn &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">cn = next[cn]</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">next[pos] = <span class="hljs-number">0</span></span><br><span class="line">pos++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>next[0]</code>规定为-1,只是一个特殊的标记这是滑动数组的开头,并且之前也可能会有相匹配的字符串,一般为负数就可以,通常为-1。<code>m[1]</code>来说,<code>m[0]</code>,但next数组的定义要求任何子串的后缀不能包括第一个字符（<code>m[0]</code>）,<code>m[1]</code>之前的字符串只有长度为0的后缀字符串,<code>next[1]</code>为0。</p><p>创建一个变量<code>cn</code>,作用是记录当前匹配的长度。创建一个遍历<code>pos</code>,作用是推进下标前进,判断当前位置之前有几个字符串于之匹配。这样实际上是两个指针<code>cn</code>指针代表当前匹配的长度,<code>pos</code>指针则是主指针,推动数组下标前进,更新当前匹配了之前有多少个字符串相匹配。</p><p>在for循环内,从位置<code>index = 2</code>开始匹配。</p><ol><li>如果当前位置的前一个位置的字符 和<code>m[cn]</code>字符相等,那么将当前将记录当前匹配长度的<code>cn++</code>,同时将该<code>pos</code>位置的值设置为当前匹配的长度,然后将<code>pos++</code>,进行下一轮匹配。</li><li>否则,如果当前记录的匹配长度没有到0,那么将<code>cn</code>指针的位置回退到前一个位置进行匹配。</li><li>否则,如果当前<code>cn</code>指针的位置已经到0,那么就将<code>pos</code>位置的值设置为0,因为之前没有任何一个位置匹配,同时<code>pos++</code>,进行下一轮匹配。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> kmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 面试题</title>
      <link href="/2020/04/02/%E9%9D%A2%E8%AF%95/Golang%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/04/02/%E9%9D%A2%E8%AF%95/Golang%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>整理了一些面试题,关于go语言面试会考的东西,顺便整理自己的知识体系。</p><a id="more"></a><h2 id="一、语言机制"><a href="#一、语言机制" class="headerlink" title="一、语言机制"></a>一、语言机制</h2><ol><li><code>select</code>是随机的还是顺序的？</li></ol><blockquote><p>先说答案,<code>select</code>会随机选择一个可用通道做收发操作。为什么呢？在源码中每一个<code>select</code>对应一个<code>hselect</code>结构,每个<code>hselect</code>结构下面都有个<code>scase</code>的数组记录每个<code>case</code>,在<code>scase</code>中记录着<code>ch chan</code>的结构也就是<code>channel</code>的结构<code>pollorder</code>将元素从新排列,<code>scase</code>就被乱序了。</p></blockquote><p>2.Go语言局部变量分配在栈还是堆？</p><blockquote><p>视<strong>逃逸分析</strong>结果而定,Go语言编译器会自动决定把一个变量放在栈还是放在堆,编译器会做逃逸分析,当发现变量的作用域没有跑出函数范围,就可以在栈上,反之则必须分配在堆。</p></blockquote><p><strong>参考资料 :</strong> <a href="https://studygolang.com/articles/21788" target="_blank" rel="noopener">GO语言变量逃逸分析</a></p><p>3.Go语言逃逸分析有那集中场景?</p><blockquote><ol><li>指针逃逸 : 典型的逃逸case,函数返回局部变量的指针。</li><li>间接赋值 : 对某个引用类对象中的引用类成员进行赋值。Go 语言中的引用类数据类型有 func, interface, slice, map, chan, *Type(指针)。</li><li>栈空间不足逃逸 : 当对象大小超过的栈帧大小时（详见go内存分配）,变量对象发生逃逸被分配到堆上。</li><li>闭包引用逃逸 : 外部函数引用内部函数变量,发生逃逸,分配到堆上。</li><li>动态类型逃逸 : 当对象不确定大小或者被作为不确定大小的参数时发生逃逸。</li><li>切片或map赋值 : 在给切片或者map赋值对象指针（与对象共享内存地址时）,对象会逃逸到堆上。但赋值对象值或者返回对象值切片是不会发生逃逸的。</li></ol></blockquote><p>不要盲目使用变量的指针作为函数参数,虽然它会减少复制操作。但其实当参数为变量自身的时候,复制是在栈上完成的操作,开销远比变量逃逸后动态地在堆上分配内存少的多。</p><p>4.简述一下你对Go垃圾回收机制的理解？</p><blockquote><p>v1.1 STW<br>v1.3 Mark STW, Sweep 并行<br>v1.5 三色标记法<br>v1.8 hybrid write barrier(混合写屏障：优化STW)</p></blockquote><p><strong>参考资料 :</strong> <a href="https://www.ulovecode.com/2019/08/06/Go/Golang%E8%AF%91%E6%96%87/Go%E5%AE%9E%E6%97%B6GC%E2%80%94%E2%80%94%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%20/#more">Go实时GC——三色算法理论与实践</a>, <a href="http://legendtkl.com/2017/04/28/golang-gc/" target="_blank" rel="noopener">Golang 垃圾回收剖析</a></p><p>5.简述一下golang的协程调度原理?</p><blockquote><p>M(machine): 关联了一个内核线程。<br>P(processor): 代表了M所需的上下文环境,也是处理用户级代码逻辑的处理器。<br>G(goroutine): 调度系统的最基本单位goroutine,存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。</p></blockquote><p><strong>参考资料 :</strong> <a href="https://i6448038.github.io/2017/12/04/golang-concurrency-principle/" target="_blank" rel="noopener">Go并发原理</a></p><p>6.简单介绍下 golang 中 make 和 new 的区别？</p><blockquote><ul><li><code>new(T)</code>是为一个 T 类型的新值分配空间, 并将此空间初始化为 T 的零值, 并返回这块内存空间的地址, 也就是 T 类型的指针 *T, 该指针指向 T 类型值占用的那块内存.</li><li><code>make(T)</code>返回的是初始化之后的 T (引用类型本身), 且只能用于 slice, map, channel 三种类型. make(T, args) 返回初始化之后 T 类型的值, 且此新值并不是 T 类型的零值, 也不是 T 类型的指针 *T, 而是 T 类型值经过初始化之后的引用.</li></ul></blockquote><p><strong>参考资料 :</strong> <a href="https://www.flysnow.org/2017/10/23/go-new-vs-make.html" target="_blank" rel="noopener">Go语言中new和make的区别</a></p><p>7.介绍下你平时都是怎么调试 golang 的 bug 以及性能问题的?</p><blockquote><ol><li>panic 调用栈</li><li>pprof</li><li>火焰图(配合压测)</li><li>使用<code>go run -race</code>或者<code>go build -race</code>来进行竞争检测</li><li>查看系统 磁盘IO/网络IO/内存占用/CPU 占用(配合压测)</li></ol></blockquote><p>8.如何获取 go 程序运行时的协程数量, gc 时间, 对象数, 堆栈信息?</p><blockquote><p>调用接口<code>runtime.ReadMemStats</code>可以获取以上所有信息, 注意: 调用此接口会触发 STW(Stop The World)</p></blockquote><p>9.介绍下 golang 的 runtime 机制?</p><blockquote><p>runtime 负责管理任务调度,垃圾收集,以及运行环境。go提供了一些高级的功能,如goroutine, channel, 以及Garbage collection。这些高级功能需要一个runtime的支持. runtime和用户编译后的代码被linker静态链接起来,形成一个可执行文件。这个文件从操作系统角度来说是一个user space的独立的可执行文件。 从运行的角度来说,这个文件由2部分组成,一部分是用户的代码,另一部分就是runtime。runtime通过接口函数调用来管理goroutine, channel及其他一些高级的功能。从用户代码发起的调用操作系统API的调用都会被runtime拦截并处理。</p><p>Go runtime的一个重要的组成部分是goroutine scheduler。他负责追踪,调度每个goroutine运行,实际上是从应用程序的process所属的thread pool中分配一个thread来执行这个goroutine。因此,和java虚拟机中的Java thread和OS thread映射概念类似,每个goroutine只有分配到一个OS thread才能运行。</p></blockquote><p>10.goroutine池是否像其他语言中的线程池一样有意义？</p><blockquote><p>视情况而定,调度程序中的状态成本可以忽略不计,但是goroutine保持的状态重新创建的成本可能很高。后一点可用作将goroutine保留在池中的理由。但是,另一方面,在大多数情况下,将执行类似任务的goroutine的资源组池化（而不是goroutine本身）更容易。</p></blockquote><p><strong>参考资料 :</strong> <a href="https://stackoverflow.com/questions/48659334/does-a-goroutine-pool-make-sense-like-thread-pools-in-other-languages" target="_blank" rel="noopener">Does a goroutine pool make sense like thread pools in other languages?</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>得到 Golang 程序的汇编代码的方法</title>
      <link href="/2020/03/02/Go/%E5%BE%97%E5%88%B0Golang%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95%20/"/>
      <url>/2020/03/02/Go/%E5%BE%97%E5%88%B0Golang%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95%20/</url>
      
        <content type="html"><![CDATA[<p>有多种方式可以获得Go程序的汇编代码, 尽管输出的格式有些不同,但是都是方便阅读的汇编代码,可以帮助我们更好的了解程序的底层运行方式。</p><a id="more"></a><h2 id="方法一-go-tool-compile"><a href="#方法一-go-tool-compile" class="headerlink" title="方法一: go tool compile"></a><strong>方法一: go tool compile</strong></h2><p>使用<code>go tool compile -N -l -S once.go</code>生成汇编代码：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  awesomeProject <span class="hljs-keyword">go</span> tool compile -N -l -S main.<span class="hljs-keyword">go</span></span><br><span class="line"><span class="hljs-string">""</span>.main STEXT size=<span class="hljs-number">165</span> args=<span class="hljs-number">0x0</span> locals=<span class="hljs-number">0x58</span></span><br><span class="line">        <span class="hljs-number">0x0000</span> <span class="hljs-number">00000</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       TEXT    <span class="hljs-string">""</span>.main(SB), ABIInternal, $<span class="hljs-number">88</span><span class="hljs-number">-0</span></span><br><span class="line">        <span class="hljs-number">0x0000</span> <span class="hljs-number">00000</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       MOVQ    (TLS), CX</span><br><span class="line">        <span class="hljs-number">0x0009</span> <span class="hljs-number">00009</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       CMPQ    SP, <span class="hljs-number">16</span>(CX)</span><br><span class="line">        <span class="hljs-number">0x000d</span> <span class="hljs-number">00013</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       JLS     <span class="hljs-number">155</span></span><br><span class="line">        <span class="hljs-number">0x0013</span> <span class="hljs-number">00019</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       SUBQ    $<span class="hljs-number">88</span>, SP</span><br><span class="line">        <span class="hljs-number">0x0017</span> <span class="hljs-number">00023</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       MOVQ    BP, <span class="hljs-number">80</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x001c</span> <span class="hljs-number">00028</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       LEAQ    <span class="hljs-number">80</span>(SP), BP</span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       FUNCDATA        $<span class="hljs-number">0</span>, gclocals·<span class="hljs-number">7</span>d2d5fca80364273fb07d5820a76fef4(SB)</span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       FUNCDATA        $<span class="hljs-number">1</span>, gclocals·d2eb33d7ca216c70530f751d6fdafd01(SB)</span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>)       FUNCDATA        $<span class="hljs-number">3</span>, gclocals·<span class="hljs-number">9</span>fb7f0986f647f17cb53dda1484e0f7a(SB)</span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       PCDATA  $<span class="hljs-number">2</span>, $<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       PCDATA  $<span class="hljs-number">0</span>, $<span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0x0021</span> <span class="hljs-number">00033</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       LEAQ    <span class="hljs-string">""</span>..autotmp_2+<span class="hljs-number">24</span>(SP), AX</span><br><span class="line">        <span class="hljs-number">0x0026</span> <span class="hljs-number">00038</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       PCDATA  $<span class="hljs-number">0</span>, $<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">0x0026</span> <span class="hljs-number">00038</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       MOVQ    AX, <span class="hljs-string">""</span>..autotmp_1+<span class="hljs-number">48</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x002b</span> <span class="hljs-number">00043</span> (main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>)       PCDATA  $<span class="hljs-number">2</span>, $<span class="hljs-number">0</span></span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><h2 id="方法二-go-tool-objdump"><a href="#方法二-go-tool-objdump" class="headerlink" title="方法二: go tool objdump"></a><strong>方法二: go tool objdump</strong></h2><p>首先先编译程序:<code>go tool compile -N -l once.go</code>,</p><p>使用<code>go tool objdump once.o</code>反汇编出代码 (或者使用<code>go tool objdump -s Do once.o</code>反汇编特定的函数：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  awesomeProject <span class="hljs-keyword">go</span> tool compile -N -l main.<span class="hljs-keyword">go</span></span><br><span class="line">➜  awesomeProject <span class="hljs-keyword">go</span> tool objdump  main.o</span><br><span class="line">TEXT %<span class="hljs-number">22</span>%<span class="hljs-number">22.</span>main(SB) gofile../Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span></span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4cf</span>                   <span class="hljs-number">65488</span>b0c2500000000      MOVQ GS:<span class="hljs-number">0</span>, CX           [<span class="hljs-number">5</span>:<span class="hljs-number">9</span>]R_TLS_LE</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4d8</span>                   <span class="hljs-number">483</span>b6110                CMPQ <span class="hljs-number">0x10</span>(CX), SP</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4dc</span>                   <span class="hljs-number">0</span>f8688000000            JBE <span class="hljs-number">0x56a</span></span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4e2</span>                   <span class="hljs-number">4883</span>ec58                SUBQ $<span class="hljs-number">0x58</span>, SP</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4e6</span>                   <span class="hljs-number">48896</span>c2450              MOVQ BP, <span class="hljs-number">0x50</span>(SP)</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>            <span class="hljs-number">0x4eb</span>                   <span class="hljs-number">488</span>d6c2450              LEAQ <span class="hljs-number">0x50</span>(SP), BP</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x4f0</span>                   <span class="hljs-number">488</span>d442418              LEAQ <span class="hljs-number">0x18</span>(SP), AX</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x4f5</span>                   <span class="hljs-number">4889442430</span>              MOVQ AX, <span class="hljs-number">0x30</span>(SP)</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x4fa</span>                   <span class="hljs-number">8400</span>                    TESTB AL, <span class="hljs-number">0</span>(AX)</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x4fc</span>                   <span class="hljs-number">488</span>b0500000000          MOVQ <span class="hljs-number">0</span>(IP), AX          [<span class="hljs-number">3</span>:<span class="hljs-number">7</span>]R_PCREL:%<span class="hljs-number">22</span>%<span class="hljs-number">22.</span>statictmp</span><br><span class="line">_0</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x503</span>                   <span class="hljs-number">4889442418</span>              MOVQ AX, <span class="hljs-number">0x18</span>(SP)</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x508</span>                   <span class="hljs-number">0</span>f100500000000          MOVUPS <span class="hljs-number">0</span>(IP), X0        [<span class="hljs-number">3</span>:<span class="hljs-number">7</span>]R_PCREL:%<span class="hljs-number">22</span>%<span class="hljs-number">22.</span>statictmp</span><br><span class="line">_0+<span class="hljs-number">8</span></span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x50f</span>                   <span class="hljs-number">0</span>f11442420              MOVUPS X0, <span class="hljs-number">0x20</span>(SP)</span><br><span class="line">  main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>            <span class="hljs-number">0x514</span>                   <span class="hljs-number">488</span>b442430              MOVQ <span class="hljs-number">0x30</span>(SP), AX</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><h2 id="方法三-go-build-gcflags-S"><a href="#方法三-go-build-gcflags-S" class="headerlink" title="方法三: go build -gcflags -S"></a><strong>方法三: go build -gcflags -S</strong></h2><p>使用<code>go build -gcflags -S once.go</code>也可以得到汇编代码：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">➜  awesomeProject <span class="hljs-keyword">go</span> build -gcflags -S  main.<span class="hljs-keyword">go</span></span><br><span class="line"># command-line-arguments</span><br><span class="line"><span class="hljs-string">""</span>.main STEXT size=<span class="hljs-number">112</span> args=<span class="hljs-number">0x0</span> locals=<span class="hljs-number">0x38</span></span><br><span class="line">        <span class="hljs-number">0x0000</span> <span class="hljs-number">00000</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) TEXT    <span class="hljs-string">""</span>.main(SB), ABIInternal, $<span class="hljs-number">56</span><span class="hljs-number">-0</span></span><br><span class="line">        <span class="hljs-number">0x0000</span> <span class="hljs-number">00000</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) MOVQ    (TLS), CX</span><br><span class="line">        <span class="hljs-number">0x0009</span> <span class="hljs-number">00009</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) CMPQ    SP, <span class="hljs-number">16</span>(CX)</span><br><span class="line">        <span class="hljs-number">0x000d</span> <span class="hljs-number">00013</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) JLS     <span class="hljs-number">105</span></span><br><span class="line">        <span class="hljs-number">0x000f</span> <span class="hljs-number">00015</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) SUBQ    $<span class="hljs-number">56</span>, SP</span><br><span class="line">        <span class="hljs-number">0x0013</span> <span class="hljs-number">00019</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) MOVQ    BP, <span class="hljs-number">48</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x0018</span> <span class="hljs-number">00024</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) LEAQ    <span class="hljs-number">48</span>(SP), BP</span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) FUNCDATA        $<span class="hljs-number">0</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe8032</span><br><span class="line"><span class="hljs-number">9</span>f1fdbee7f5874cb(SB)</span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) FUNCDATA        $<span class="hljs-number">1</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe8032</span><br><span class="line"><span class="hljs-number">9</span>f1fdbee7f5874cb(SB)</span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">22</span>) FUNCDATA        $<span class="hljs-number">3</span>, gclocals·<span class="hljs-number">9</span>fb7f0986f647f17</span><br><span class="line">cb53dda1484e0f7a(SB)</span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) PCDATA  $<span class="hljs-number">2</span>, $<span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) PCDATA  $<span class="hljs-number">0</span>, $<span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0x001d</span> <span class="hljs-number">00029</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) MOVQ    <span class="hljs-string">""</span>.statictmp_0(SB), AX</span><br><span class="line">        <span class="hljs-number">0x0024</span> <span class="hljs-number">00036</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) MOVQ    AX, <span class="hljs-string">""</span>..autotmp_2+<span class="hljs-number">24</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x0029</span> <span class="hljs-number">00041</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) MOVUPS  <span class="hljs-string">""</span>.statictmp_0+<span class="hljs-number">8</span>(SB), X0</span><br><span class="line">        <span class="hljs-number">0x0030</span> <span class="hljs-number">00048</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">23</span>) MOVUPS  X0, <span class="hljs-string">""</span>..autotmp_2+<span class="hljs-number">32</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x0035</span> <span class="hljs-number">00053</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) CALL    runtime.printlock(SB)</span><br><span class="line">        <span class="hljs-number">0x003a</span> <span class="hljs-number">00058</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) PCDATA  $<span class="hljs-number">2</span>, $<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">0x003a</span> <span class="hljs-number">00058</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) LEAQ    <span class="hljs-string">""</span>..autotmp_2+<span class="hljs-number">24</span>(SP), AX</span><br><span class="line">        <span class="hljs-number">0x003f</span> <span class="hljs-number">00063</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) PCDATA  $<span class="hljs-number">2</span>, $<span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0x003f</span> <span class="hljs-number">00063</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) MOVQ    AX, (SP)</span><br><span class="line">        <span class="hljs-number">0x0043</span> <span class="hljs-number">00067</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) MOVQ    $<span class="hljs-number">3</span>, <span class="hljs-number">8</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x004c</span> <span class="hljs-number">00076</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) MOVQ    $<span class="hljs-number">3</span>, <span class="hljs-number">16</span>(SP)</span><br><span class="line">        <span class="hljs-number">0x0055</span> <span class="hljs-number">00085</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) CALL    runtime.printslice(SB)</span><br><span class="line">        <span class="hljs-number">0x005a</span> <span class="hljs-number">00090</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">24</span>) CALL    runtime.printunlock(SB)</span><br><span class="line">        <span class="hljs-number">0x005f</span> <span class="hljs-number">00095</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">25</span>) MOVQ    <span class="hljs-number">48</span>(SP), BP</span><br><span class="line">        <span class="hljs-number">0x0064</span> <span class="hljs-number">00100</span> (/Users/zhubowen/golangProjects/awesomeProject/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">25</span>) ADDQ    $<span class="hljs-number">56</span>, SP</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>go tool compile</code>和<code>go build -gcflags -S</code>生成的是过程中的汇编。</li><li>最终的机器码的汇编可以通过<code>go tool objdump</code>生成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go源码分析(5) - 数据结构</title>
      <link href="/2020/02/27/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(5)-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/27/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(5)-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>介绍常见的数据结构,比如channel、slice、map等,通过对其底层实现原理的分析,来更好的使用这些数据结构。</p><a id="more"></a><h2 id="一、切片"><a href="#一、切片" class="headerlink" title="一、切片"></a><strong>一、切片</strong></h2><h3 id="Slice数据结构"><a href="#Slice数据结构" class="headerlink" title="Slice数据结构"></a><strong>Slice数据结构</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="hljs-built_in">len</span>   <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-built_in">cap</span>   <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>array指针指向底层数组</li><li>len表示切片长度</li><li>cap表示底层数组容量</li></ul><h3 id="slice的三种初始化方式"><a href="#slice的三种初始化方式" class="headerlink" title="slice的三种初始化方式"></a><strong>slice的三种初始化方式</strong></h3><h4 id="make初始化"><a href="#make初始化" class="headerlink" title="make初始化"></a><strong>make初始化</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeslice</span><span class="hljs-params">(et *_type, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">slice</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> The len &gt; maxElements check here is not strictly necessary,</span></span><br><span class="line">    <span class="hljs-comment">// but it produces a 'len out of range' error instead of a 'cap out of range' error</span></span><br><span class="line">    <span class="hljs-comment">// when someone does make([]T, bignumber). 'cap out of range' is true too,</span></span><br><span class="line">    <span class="hljs-comment">// but since the cap is only being supplied implicitly, saying len is clearer.</span></span><br><span class="line">    <span class="hljs-comment">// See issue 4085.</span></span><br><span class="line">    maxElements := maxSliceCap(et.size)</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">len</span>) &gt; maxElements &#123;</span><br><span class="line">        <span class="hljs-built_in">panic</span>(errorString(<span class="hljs-string">"makeslice: len out of range"</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-built_in">cap</span> &lt; <span class="hljs-built_in">len</span> || <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>) &gt; maxElements &#123;</span><br><span class="line">        <span class="hljs-built_in">panic</span>(errorString(<span class="hljs-string">"makeslice: cap out of range"</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p := mallocgc(et.size*<span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>), et, <span class="hljs-literal">true</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> slice&#123;p, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>make()</code>方法会调用<code>makeslice()</code>的方法,会对 slice的 array 指针进行分配地址,创建后可直接使用。</p><h4 id="struct"><a href="#struct" class="headerlink" title="[]struct{}{}"></a><strong>[]struct{}{}</strong></h4><p>使用该方法创建后的对象可以直接使用。</p><h4 id="new-struct"><a href="#new-struct" class="headerlink" title="new([]struct{})"></a><strong>new([]struct{})</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">array := <span class="hljs-built_in">new</span>([]<span class="hljs-keyword">int</span>)</span><br><span class="line">(*array)[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">// nil[0] = 1     err</span></span><br><span class="line"><span class="hljs-built_in">println</span>(array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方式只是创建一个该数组类型的指针,调用<code>runtime.newobject</code>方法 ,new是返回 slice 的地址。指针类型初始化后,值为nil,如果对该类型进行赋值会发生空指针异常,创建后不可直接使用。</p><h3 id="slice的扩容机制"><a href="#slice的扩容机制" class="headerlink" title="slice的扩容机制"></a><strong>slice的扩容机制</strong></h3><h4 id="使用append-方法的扩容"><a href="#使用append-方法的扩容" class="headerlink" title="使用append()方法的扩容:"></a><strong>使用<code>append()</code>方法的扩容:</strong></h4><p>使用<code>append()</code>向Slice添加一个元素的实现步骤如下:</p><ol><li>假如Slice容量够用,则将新元素追加进去,Slice.len++,返回原Slice</li><li>原Slice容量不够,则将Slice先扩容,扩容后得到新Slice</li><li>将新元素追加进新Slice,Slice.len++,返回新的Slice。</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">growslice</span><span class="hljs-params">(et *_type, old slice, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">slice</span></span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment">// 省略一些判断...</span></span><br><span class="line"></span><br><span class="line">    newcap := old.<span class="hljs-built_in">cap</span></span><br><span class="line">    doublecap := newcap + newcap</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">        newcap = <span class="hljs-built_in">cap</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> old.<span class="hljs-built_in">len</span> &lt; <span class="hljs-number">1024</span> &#123;</span><br><span class="line">            newcap = doublecap</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line">            <span class="hljs-comment">// and prevent an infinite loop.</span></span><br><span class="line">            <span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="hljs-built_in">cap</span> &#123;</span><br><span class="line">                newcap += newcap / <span class="hljs-number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// Set newcap to the requested cap when</span></span><br><span class="line">            <span class="hljs-comment">// the newcap calculation overflowed.</span></span><br><span class="line">            <span class="hljs-keyword">if</span> newcap &lt;= <span class="hljs-number">0</span> &#123;</span><br><span class="line">                newcap = <span class="hljs-built_in">cap</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 省略一些后续...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果原Slice容量小于1024,则新Slice容量将扩大为原来的2倍;</li><li>如果原Slice容量大于等于1024,则新Slice容量将扩大为原来的1.25倍;</li></ul><h3 id="slice的复制"><a href="#slice的复制" class="headerlink" title="slice的复制"></a><strong>slice的复制</strong></h3><h4 id="使用copy-进行复制"><a href="#使用copy-进行复制" class="headerlink" title="使用copy()进行复制"></a><strong>使用<code>copy()</code>进行复制</strong></h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slicecopy</span><span class="hljs-params">(to, fm slice, width <span class="hljs-keyword">uintptr</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> fm.<span class="hljs-built_in">len</span> == <span class="hljs-number">0</span> || to.<span class="hljs-built_in">len</span> == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := fm.<span class="hljs-built_in">len</span></span><br><span class="line"><span class="hljs-keyword">if</span> to.<span class="hljs-built_in">len</span> &lt; n &#123;</span><br><span class="line">n = to.<span class="hljs-built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> width == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(slicecopy)</span><br><span class="line">racewriterangepc(to.array, <span class="hljs-keyword">uintptr</span>(n*<span class="hljs-keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">racereadrangepc(fm.array, <span class="hljs-keyword">uintptr</span>(n*<span class="hljs-keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> msanenabled &#123;</span><br><span class="line">msanwrite(to.array, <span class="hljs-keyword">uintptr</span>(n*<span class="hljs-keyword">int</span>(width)))</span><br><span class="line">msanread(fm.array, <span class="hljs-keyword">uintptr</span>(n*<span class="hljs-keyword">int</span>(width)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">size := <span class="hljs-keyword">uintptr</span>(n) * width</span><br><span class="line"><span class="hljs-keyword">if</span> size == <span class="hljs-number">1</span> &#123; <span class="hljs-comment">// common case worth about 2x to do here</span></span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> is this still worth it with new memmove impl?</span></span><br><span class="line">*(*<span class="hljs-keyword">byte</span>)(to.array) = *(*<span class="hljs-keyword">byte</span>)(fm.array) <span class="hljs-comment">// known to be a byte pointer</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">memmove(to.array, fm.array, size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>copy()</code>内置函数拷贝两个切片时,<code>memmove()</code>方法同时将被拷贝切片的array的切片的值逐一拷贝到新到切片,拷贝数量取两个切片长度的最小值。</p><h4 id="使用slice-start-end-方法进行复制"><a href="#使用slice-start-end-方法进行复制" class="headerlink" title="使用slice[start:end]方法进行复制"></a><strong>使用slice[start:end]方法进行复制</strong></h4><p>使用该方法,同时将被拷贝切片的array的切片的指针拷贝到新到切片的指针上,同时len变为end-start,cap则和原slice一样。</p><h2 id="二、channel"><a href="#二、channel" class="headerlink" title="二、channel"></a><strong>二、channel</strong></h2><h3 id="chan数据结构"><a href="#chan数据结构" class="headerlink" title="chan数据结构"></a><strong>chan数据结构</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> hchan <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">qcount   <span class="hljs-keyword">uint</span>           <span class="hljs-comment">// total data in the queue</span></span><br><span class="line">dataqsiz <span class="hljs-keyword">uint</span>           <span class="hljs-comment">// size of the circular queue</span></span><br><span class="line">buf      unsafe.Pointer <span class="hljs-comment">// points to an array of dataqsiz elements</span></span><br><span class="line">elemsize <span class="hljs-keyword">uint16</span></span><br><span class="line">closed   <span class="hljs-keyword">uint32</span></span><br><span class="line">elemtype *_type <span class="hljs-comment">// element type</span></span><br><span class="line">sendx    <span class="hljs-keyword">uint</span>   <span class="hljs-comment">// send index</span></span><br><span class="line">recvx    <span class="hljs-keyword">uint</span>   <span class="hljs-comment">// receive index</span></span><br><span class="line">recvq    waitq  <span class="hljs-comment">// list of recv waiters</span></span><br><span class="line">sendq    waitq  <span class="hljs-comment">// list of send waiters</span></span><br><span class="line">lock mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>qcount 当前队列中剩余元素个数</li><li>dataqsiz 环形队列长度,即可以存放的元素个数</li><li>buf 环形队列指针</li><li>elemsize 每个元素的大小</li><li>closed 标识关闭状态</li><li>elemtype 元素类型</li><li>sendx 队列下标,指示元素写入时存放到队列中的位置</li><li>recvx 队列下标,指示元素从队列的该位置读出</li><li>recvq 等待读消息的goroutine队列</li><li>sendq 等待写消息的goroutine队列</li><li>lock 互斥锁,chan不允许并发读写</li></ul><p>hchan 实际上就是一个环形队列,buf指向环形队列,dataqsiz、qcount 分别指定了队列的容量和当前使用量,其中recvq队列和sendq队列是一个链表的结构,包含该goroutine和该groutine的数据,然后再来看一下waitq这个数据结构。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> waitq <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    first *sudog</span><br><span class="line">    last  *sudog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>waitq是链表的定义,包含一个头结点和一个尾结点。我们可能对节点中存放对内容感到疑惑,再来看一下sudog这个数据结构。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> sudog <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// The following fields are protected by the hchan.lock of the</span></span><br><span class="line">    <span class="hljs-comment">// channel this sudog is blocking on. shrinkstack depends on</span></span><br><span class="line">    <span class="hljs-comment">// this for sudogs involved in channel ops.</span></span><br><span class="line"></span><br><span class="line">    g *g</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// isSelect indicates g is participating in a select, so</span></span><br><span class="line">    <span class="hljs-comment">// g.selectDone must be CAS'd to win the wake-up race.</span></span><br><span class="line">    isSelect <span class="hljs-keyword">bool</span></span><br><span class="line">    next     *sudog</span><br><span class="line">    prev     *sudog</span><br><span class="line">    elem     unsafe.Pointer <span class="hljs-comment">// data element (may point to stack)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// The following fields are never accessed concurrently.</span></span><br><span class="line">    <span class="hljs-comment">// For channels, waitlink is only accessed by g.</span></span><br><span class="line">    <span class="hljs-comment">// For semaphores, all fields (including the ones above)</span></span><br><span class="line">    <span class="hljs-comment">// are only accessed when holding a semaRoot lock.</span></span><br><span class="line"></span><br><span class="line">    acquiretime <span class="hljs-keyword">int64</span></span><br><span class="line">    releasetime <span class="hljs-keyword">int64</span></span><br><span class="line">    ticket      <span class="hljs-keyword">uint32</span></span><br><span class="line">    parent      *sudog <span class="hljs-comment">// semaRoot binary tree</span></span><br><span class="line">    waitlink    *sudog <span class="hljs-comment">// g.waiting list or semaRoot</span></span><br><span class="line">    waittail    *sudog <span class="hljs-comment">// semaRoot</span></span><br><span class="line">    c           *hchan <span class="hljs-comment">// channel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sudog结构可以实际上是一个对应goroutine上保存着其对应的data数据,类似于java中的ThreadLocal。其中：</p><ul><li>g 代表着 G-M-P模型中的 G,sudog 是对g的封装便于在 csp 模型中 g 可以同时阻塞在不同的 channel 上</li><li>elem 用于存储 goroutine 的数据;读通道时,数据会从 hchan 的队列中拷贝到 sudog 的 elem 域;写通道时,数据则是由 sudog 的elem 域拷贝到 hchan 的队列中。</li></ul><p>下面给出他们的结构图:</p><p><img src="https://changkun.de/golang/assets/chan.png" width="90%" height="40%"><br><!--![图 1 ](https://changkun.de/golang/assets/chan.png)--></p><h3 id="创建channel"><a href="#创建channel" class="headerlink" title="创建channel"></a><strong>创建channel</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makechan</span><span class="hljs-params">(t *chantype, size <span class="hljs-keyword">int64</span>)</span> *<span class="hljs-title">hchan</span></span> &#123;</span><br><span class="line">    elem := t.elem</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// compiler checks this but be safe.</span></span><br><span class="line">   <span class="hljs-comment">// 异常判断 元素类型大小限制</span></span><br><span class="line">    <span class="hljs-keyword">if</span> elem.size &gt;= <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span> &#123;</span><br><span class="line">        throw(<span class="hljs-string">"makechan: invalid channel element type"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 异常判断 对齐限制</span></span><br><span class="line">    <span class="hljs-keyword">if</span> hchanSize%maxAlign != <span class="hljs-number">0</span> || elem.align &gt; maxAlign &#123;</span><br><span class="line">        throw(<span class="hljs-string">"makechan: bad alignment"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// maxAlloc 是 Arena 区域的最大值,缓冲元素的大小与hchan相加不能超过 缓冲槽大小</span></span><br><span class="line">    <span class="hljs-keyword">if</span> size &lt; <span class="hljs-number">0</span> || <span class="hljs-keyword">int64</span>(<span class="hljs-keyword">uintptr</span>(size)) != size || (elem.size &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">uintptr</span>(size) &gt; (_MaxMem-hchanSize)/elem.size) &#123;</span><br><span class="line">        <span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"makechan: size out of range"</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> c *hchan</span><br><span class="line">    <span class="hljs-comment">// 不是指针类型</span></span><br><span class="line">    <span class="hljs-keyword">if</span> elem.kind&amp;kindNoPointers != <span class="hljs-number">0</span> || size == <span class="hljs-number">0</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 在一个调用中分配内存。       </span></span><br><span class="line">        <span class="hljs-comment">// 在这种情况下,Hchan不包含GC感兴趣的指针：</span></span><br><span class="line">        <span class="hljs-comment">// buf指向相同的分配,elemtype是持久的。</span></span><br><span class="line">        <span class="hljs-comment">// SudoG从它们自己的线程中引用,因此无法将其收集。</span></span><br><span class="line">        <span class="hljs-comment">// TODO（dvyukov,rlh）：重新考虑何时收集器可以移动分配的对象。</span></span><br><span class="line">        c = (*hchan)(mallocgc(hchanSize+<span class="hljs-keyword">uintptr</span>(size)*elem.size, <span class="hljs-literal">nil</span>, <span class="hljs-literal">true</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span> size &gt; <span class="hljs-number">0</span> &amp;&amp; elem.size != <span class="hljs-number">0</span> &#123;</span><br><span class="line">            c.buf = add(unsafe.Pointer(c), hchanSize)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 竞争检测器使用此位置进行同步</span></span><br><span class="line">            <span class="hljs-comment">// 还可以防止我们超出分配范围（请参见问题9401）。</span></span><br><span class="line">            c.buf = unsafe.Pointer(c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 是指针类型 分配hchan结构体 buf单独分配</span></span><br><span class="line">        c = <span class="hljs-built_in">new</span>(hchan)</span><br><span class="line">        c.buf = newarray(elem, <span class="hljs-keyword">int</span>(size))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 初始化元素类型的大小</span></span><br><span class="line">    c.elemsize = <span class="hljs-keyword">uint16</span>(elem.size)</span><br><span class="line">  <span class="hljs-comment">// 初始化元素的类型</span></span><br><span class="line">    c.elemtype = elem</span><br><span class="line">  <span class="hljs-comment">// 初始化 channel 的容量</span></span><br><span class="line">    c.dataqsiz = <span class="hljs-keyword">uint</span>(size)</span><br><span class="line">    <span class="hljs-keyword">if</span> debugChan &#123;</span><br><span class="line">        <span class="hljs-built_in">print</span>(<span class="hljs-string">"makechan: chan="</span>, c, <span class="hljs-string">"; elemsize="</span>, elem.size, <span class="hljs-string">"; elemalg="</span>, elem.alg, <span class="hljs-string">"; dataqsiz="</span>, size, <span class="hljs-string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建channel的过程实际上是初始化hchan结构。其中类型信息和缓冲区长度由make语句传入,buf的大小则与元素大小和缓冲区长度共同决定。</p><h3 id="向channel写数据"><a href="#向channel写数据" class="headerlink" title="向channel写数据"></a><strong>向channel写数据</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// entry point for c &lt;- x from compiled code</span></span><br><span class="line"><span class="hljs-comment">//go:nosplit</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chansend1</span><span class="hljs-params">(c *hchan, elem unsafe.Pointer)</span></span> &#123;</span><br><span class="line">    chansend(c, elem, <span class="hljs-literal">true</span>, getcallerpc(unsafe.Pointer(&amp;c)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chansend</span><span class="hljs-params">(c *hchan, ep unsafe.Pointer, block <span class="hljs-keyword">bool</span>, callerpc <span class="hljs-keyword">uintptr</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> c == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> !block &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        gopark(<span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">"chan send (nil chan)"</span>, traceEvGoStop, <span class="hljs-number">2</span>)</span><br><span class="line">        throw(<span class="hljs-string">"unreachable"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> !block &amp;&amp; c.closed == <span class="hljs-number">0</span> &amp;&amp; ((c.dataqsiz == <span class="hljs-number">0</span> &amp;&amp; c.recvq.first == <span class="hljs-literal">nil</span>) ||</span><br><span class="line">        (c.dataqsiz &gt; <span class="hljs-number">0</span> &amp;&amp; c.qcount == c.dataqsiz)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> t0 <span class="hljs-keyword">int64</span></span><br><span class="line">    <span class="hljs-keyword">if</span> blockprofilerate &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">        t0 = cputicks()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> c.closed != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        unlock(&amp;c.lock)</span><br><span class="line">        <span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"send on closed channel"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 1</span></span><br><span class="line">    <span class="hljs-keyword">if</span> sg := c.recvq.dequeue(); sg != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Found a waiting receiver. We pass the value we want to send</span></span><br><span class="line">        <span class="hljs-comment">// directly to the receiver, bypassing the channel buffer (if any).</span></span><br><span class="line">        send(c, sg, ep, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class="hljs-number">3</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 2</span></span><br><span class="line">    <span class="hljs-keyword">if</span> c.qcount &lt; c.dataqsiz &#123;</span><br><span class="line">        <span class="hljs-comment">// Space is available in the channel buffer. Enqueue the element to send.</span></span><br><span class="line">        qp := chanbuf(c, c.sendx)</span><br><span class="line">        <span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">            raceacquire(qp)</span><br><span class="line">            racerelease(qp)</span><br><span class="line">        &#125;</span><br><span class="line">        typedmemmove(c.elemtype, qp, ep)</span><br><span class="line">        c.sendx++</span><br><span class="line">        <span class="hljs-keyword">if</span> c.sendx == c.dataqsiz &#123;</span><br><span class="line">            c.sendx = <span class="hljs-number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.qcount++</span><br><span class="line">        unlock(&amp;c.lock)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> !block &#123;</span><br><span class="line">        unlock(&amp;c.lock)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Block on the channel. Some receiver will complete our operation for us.</span></span><br><span class="line">    gp := getg()</span><br><span class="line">    mysg := acquireSudog()</span><br><span class="line">    mysg.releasetime = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">if</span> t0 != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        mysg.releasetime = <span class="hljs-number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// No stack splits between assigning elem and enqueuing mysg</span></span><br><span class="line">    <span class="hljs-comment">// on gp.waiting where copystack can find it.</span></span><br><span class="line">    mysg.elem = ep</span><br><span class="line">    mysg.waitlink = <span class="hljs-literal">nil</span></span><br><span class="line">    mysg.g = gp</span><br><span class="line">    mysg.selectdone = <span class="hljs-literal">nil</span></span><br><span class="line">    mysg.c = c</span><br><span class="line">    gp.waiting = mysg</span><br><span class="line">    gp.param = <span class="hljs-literal">nil</span></span><br><span class="line">    c.sendq.enqueue(mysg)</span><br><span class="line">    goparkunlock(&amp;c.lock, <span class="hljs-string">"chan send"</span>, traceEvGoBlockSend, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// someone woke us up.</span></span><br><span class="line">    <span class="hljs-keyword">if</span> mysg != gp.waiting &#123;</span><br><span class="line">        throw(<span class="hljs-string">"G waiting list is corrupted"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    gp.waiting = <span class="hljs-literal">nil</span></span><br><span class="line">    <span class="hljs-keyword">if</span> gp.param == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> c.closed == <span class="hljs-number">0</span> &#123;</span><br><span class="line">            throw(<span class="hljs-string">"chansend: spurious wakeup"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"send on closed channel"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    gp.param = <span class="hljs-literal">nil</span></span><br><span class="line">    <span class="hljs-keyword">if</span> mysg.releasetime &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">        blockevent(mysg.releasetime-t0, <span class="hljs-number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    mysg.c = <span class="hljs-literal">nil</span></span><br><span class="line">    releaseSudog(mysg)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>if c == nil</code>判断 channel 为空  向其中发送数据将会永久阻塞<ol><li><code>if !block</code>如果非阻塞返回 false</li><li><code>gopark(nil, nil, waitReasonChanReceiveNilChan, traceEvGoStop, 2)</code>如果阻塞, gopark 会使当前 goroutine 挂起,通过 unlockf 唤醒;调用gopark时传入的unlockf为nil,会被一直休眠</li></ol></li><li>在不获取锁定的情况下检查失败的非阻塞操作。如果检测到,将直接返回false<ol><li><code>!block &amp;&amp; c.closed == 0</code>非阻塞并且没有关闭channel<ol><li><code>(c.dataqsiz == 0 &amp;&amp; c.recvq.first == nil)</code>无缓冲channel并且消费者环形队列头结点为空,说明channel还没有准备好。</li><li><code>(c.dataqsiz &gt; 0 &amp;&amp; c.qcount == c.dataqsiz)</code>有缓冲channel中存储的元素数量与容量相等,容量已经满了,不能够缓存更多的。</li></ol></li></ol></li><li><code>lock(&amp;c.lock)</code>对channel进行加锁</li><li><code>c.closed != 0</code>如果channel在途中关闭,<code>unlock(&amp;c.lock)</code>解锁并 panic</li><li><code>sg := c.recvq.dequeue(); sg != nil</code>当有 goroutine 在 recvq 队列上等待时,跳过缓存队列,<code>send(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)</code>将消息直接发给 reciever goroutine;dequeue 从等待接受的 goroutine 队列链表获取一个sudog,<code>goready()</code>唤醒阻塞的 goroutine</li><li><code>c.qcount &lt; c.dataqsiz</code>缓存队列未满,将消息复制到缓存队列上并移动 sendx 下标,hchan buf 数据量增加。<ol><li><code>typedmemmove(c.elemtype, qp, ep)</code>数据拷贝到 buf 中</li><li><code>c.sendx++</code>index 移动</li><li><code>c.sendx == c.dataqsiz</code>环形队列如果已经加到最大,<code>c.sendx = 0</code>就置 0</li><li><code>c.qcount++</code>缓冲元素数量加 1</li><li><code>unlock(&amp;c.lock)</code>解锁返回</li></ol></li><li><code>if !block</code>阻塞 解锁直接返回 false</li><li><code>gp := getg()</code>返回指向当前goroutine的指针</li><li><code>mysg := acquireSudog()</code>从sudogcache中获取sudog</li><li>对<code>mysg</code>进行一系列的赋值</li><li><code>c.sendq.enqueue(mysg)</code>  加入到写阻塞的等待队列</li><li><code>goparkunlock(&amp;c.lock, waitReasonChanSend, traceEvGoBlockSend, 3)</code>将当前gorountine挂起休眠</li><li><code>KeepAlive(ep)</code>保证数据不被回收</li><li><code>mysg != gp.waiting</code>此时被唤醒 gp.waiting不是当前的 mysg 直接 panic</li><li><code>gp.waiting = nil</code>说明waiting是当前waiting,将gp中的waiting置为nil</li><li><code>gp.param == nil</code>唤醒时传递的参数为 nil 说明出问题了直接 panic</li><li><code>mysg.c = nil</code>sudog 中的 hchan 置为 nil</li><li><code>releaseSudog(mysg)</code>释放 sudog</li></ol><p>从上面的可以看出来<code>channelsend()</code>的处理逻辑为：</p><ul><li>如果当前 Channel 的 recvq 上存在已经被阻塞的 Goroutine,那么会直接将数据发送给当前的 Goroutine 并将其设置成下一个运行的协程。</li><li>如果 Channel 存在缓冲区并且其中还有空闲的容量,我们就会直接将数据直接存储到当前缓冲 区 sendx 所在的位置上。</li><li>如果都不满足上面的两种情况,就会创建一个 sudog 结构并加入 Channel 的 sendq 队 列并更新到 Goroutine 的 waiting 字段上,同时当前的 Goroutine 就会陷入阻塞等待 其他的协程向 Channel 接收数据,一旦有其它的协程向 Channel 接收数据时就会唤醒当前的 Goroutine;发送数据的过程中包含几个会触发 Goroutine 调度的时机,首先是发送数据时发现 Channel 上存在等待接收数据的 Goroutine,这是会立刻设置处理器的 runnext 属 性,但是并不会立刻触发调度,第二个时机是发送数据时并没有找到接收方并且缓冲区已经满 了,这时就会将自己加入 Channel 的 sendq 队列并立刻调用 goparkunlock 触发 Goroutine 的调度让出处理器的使用权。</li></ul><p><strong>直接将消息发送给reciever是怎样的呢？</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">send</span><span class="hljs-params">(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf <span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">skip</span> <span class="hljs-title">int</span>)</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> c.dataqsiz == <span class="hljs-number">0</span> &#123;</span><br><span class="line">            racesync(c, sg)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Pretend we go through the buffer, even though</span></span><br><span class="line">            <span class="hljs-comment">// we copy directly. Note that we need to increment</span></span><br><span class="line">            <span class="hljs-comment">// the head/tail locations only when raceenabled.</span></span><br><span class="line">            qp := chanbuf(c, c.recvx)</span><br><span class="line">            raceacquire(qp)</span><br><span class="line">            racerelease(qp)</span><br><span class="line">            raceacquireg(sg.g, qp)</span><br><span class="line">            racereleaseg(sg.g, qp)</span><br><span class="line">            c.recvx++</span><br><span class="line">            <span class="hljs-keyword">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class="line">                c.recvx = <span class="hljs-number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            c.sendx = c.recvx <span class="hljs-comment">// c.sendx = (c.sendx+1) % c.dataqsiz</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 写入的数据不为空</span></span><br><span class="line">    <span class="hljs-keyword">if</span> sg.elem != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 将数据拷贝到 hchan</span></span><br><span class="line">        sendDirect(c.elemtype, sg, ep)</span><br><span class="line">    <span class="hljs-comment">// sudog 中数据置为 nil</span></span><br><span class="line">        sg.elem = <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 取数 goroutine</span></span><br><span class="line">    gp := sg.g</span><br><span class="line">    unlockf()</span><br><span class="line">  <span class="hljs-comment">// 传入 sudug 使 param 不为空</span></span><br><span class="line">    gp.param = unsafe.Pointer(sg)</span><br><span class="line">    <span class="hljs-keyword">if</span> sg.releasetime != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        sg.releasetime = cputicks()</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 唤醒 goroutine </span></span><br><span class="line">    goready(gp, skip+<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>sendDirect</code>函数将发送的消息拷贝到接收方持有的目标内存地址上,取出<code>gp := sg.g</code>,然后将当前sg的数据赋值回去,使用<code>goready(gp, skip+1)</code>将接收方 Goroutine 的状态修改成 Grunnable 并更新发送方所在处理器 P 的 runnext 属性,当处理器 P 再次发生调度时就会优先执行 runnext 中的协程。</p><h3 id="从channel读数据"><a href="#从channel读数据" class="headerlink" title="从channel读数据"></a><strong>从channel读数据</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanrecv</span><span class="hljs-params">(c *hchan, ep unsafe.Pointer, block <span class="hljs-keyword">bool</span>)</span> <span class="hljs-params">(selected, received <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// raceenabled: don't need to check ep, as it is always on the stack</span></span><br><span class="line"><span class="hljs-comment">// or is new memory allocated by reflect.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> debugChan &#123;</span><br><span class="line"><span class="hljs-built_in">print</span>(<span class="hljs-string">"chanrecv: chan="</span>, c, <span class="hljs-string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> c == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> !block &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">gopark(<span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, waitReasonChanReceiveNilChan, traceEvGoStop, <span class="hljs-number">2</span>)</span><br><span class="line">throw(<span class="hljs-string">"unreachable"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Fast path: check for failed non-blocking operation without acquiring the lock.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// After observing that the channel is not ready for receiving, we observe that the</span></span><br><span class="line"><span class="hljs-comment">// channel is not closed. Each of these observations is a single word-sized read</span></span><br><span class="line"><span class="hljs-comment">// (first c.sendq.first or c.qcount, and second c.closed).</span></span><br><span class="line"><span class="hljs-comment">// Because a channel cannot be reopened, the later observation of the channel</span></span><br><span class="line"><span class="hljs-comment">// being not closed implies that it was also not closed at the moment of the</span></span><br><span class="line"><span class="hljs-comment">// first observation. We behave as if we observed the channel at that moment</span></span><br><span class="line"><span class="hljs-comment">// and report that the receive cannot proceed.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The order of operations is important here: reversing the operations can lead to</span></span><br><span class="line"><span class="hljs-comment">// incorrect behavior when racing with a close.</span></span><br><span class="line"><span class="hljs-keyword">if</span> !block &amp;&amp; (c.dataqsiz == <span class="hljs-number">0</span> &amp;&amp; c.sendq.first == <span class="hljs-literal">nil</span> ||</span><br><span class="line">c.dataqsiz &gt; <span class="hljs-number">0</span> &amp;&amp; atomic.Loaduint(&amp;c.qcount) == <span class="hljs-number">0</span>) &amp;&amp;</span><br><span class="line">atomic.Load(&amp;c.closed) == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> t0 <span class="hljs-keyword">int64</span></span><br><span class="line"><span class="hljs-keyword">if</span> blockprofilerate &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">t0 = cputicks()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> c.closed != <span class="hljs-number">0</span> &amp;&amp; c.qcount == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">raceacquire(c.raceaddr())</span><br><span class="line">&#125;</span><br><span class="line">unlock(&amp;c.lock)</span><br><span class="line"><span class="hljs-keyword">if</span> ep != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">typedmemclr(c.elemtype, ep)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> sg := c.sendq.dequeue(); sg != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Found a waiting sender. If buffer is size 0, receive value</span></span><br><span class="line"><span class="hljs-comment">// directly from sender. Otherwise, receive from head of queue</span></span><br><span class="line"><span class="hljs-comment">// and add sender's value to the tail of the queue (both map to</span></span><br><span class="line"><span class="hljs-comment">// the same buffer slot because the queue is full).</span></span><br><span class="line">recv(c, sg, ep, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; unlock(&amp;c.lock) &#125;, <span class="hljs-number">3</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> c.qcount &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Receive directly from queue</span></span><br><span class="line">qp := chanbuf(c, c.recvx)</span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">raceacquire(qp)</span><br><span class="line">racerelease(qp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> ep != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">typedmemmove(c.elemtype, ep, qp)</span><br><span class="line">&#125;</span><br><span class="line">typedmemclr(c.elemtype, qp)</span><br><span class="line">c.recvx++</span><br><span class="line"><span class="hljs-keyword">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class="line">c.recvx = <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line">c.qcount--</span><br><span class="line">unlock(&amp;c.lock)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> !block &#123;</span><br><span class="line">unlock(&amp;c.lock)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gp := getg()</span><br><span class="line">mysg := acquireSudog()</span><br><span class="line">mysg.releasetime = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">if</span> t0 != <span class="hljs-number">0</span> &#123;</span><br><span class="line">mysg.releasetime = <span class="hljs-number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-comment">//在分配elem和排队mysg之间没有堆栈拆分</span></span><br><span class="line">    <span class="hljs-comment">//在gp.waiting上copystack可以找到它的地方。</span></span><br><span class="line">mysg.elem = ep</span><br><span class="line">mysg.waitlink = <span class="hljs-literal">nil</span></span><br><span class="line">gp.waiting = mysg</span><br><span class="line">mysg.g = gp</span><br><span class="line">mysg.isSelect = <span class="hljs-literal">false</span></span><br><span class="line">mysg.c = c</span><br><span class="line">gp.param = <span class="hljs-literal">nil</span></span><br><span class="line">c.recvq.enqueue(mysg)</span><br><span class="line">goparkunlock(&amp;c.lock, waitReasonChanReceive, traceEvGoBlockRecv, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// someone woke us up</span></span><br><span class="line"><span class="hljs-keyword">if</span> mysg != gp.waiting &#123;</span><br><span class="line">throw(<span class="hljs-string">"G waiting list is corrupted"</span>)</span><br><span class="line">&#125;</span><br><span class="line">gp.waiting = <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">if</span> mysg.releasetime &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">blockevent(mysg.releasetime-t0, <span class="hljs-number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">closed := gp.param == <span class="hljs-literal">nil</span></span><br><span class="line">gp.param = <span class="hljs-literal">nil</span></span><br><span class="line">mysg.c = <span class="hljs-literal">nil</span></span><br><span class="line">releaseSudog(mysg)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, !closed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法与<code>chansend()</code>没有太大的区别,主要讲两个不同的地方。</p><ul><li><code>if sg := c.sendq.dequeue(); sg != nil</code>如果有 send 生产者阻塞在队列中,<code>recv(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)</code>直接从 send 生产者取数据</li><li><code>c.recvq.enqueue(mysg)</code>否则 goroutine 加入到读阻塞等待队列</li></ul><p>所以大致逻辑为：</p><ul><li>如果 Channel 上的 sendq 队列中存在挂起的 Goroutine,就会将 recvx 索引所在的数 据拷贝到接收变量所在的内存空间上并将 sendq 队列中 Goroutine 的数据拷贝到缓冲区中。</li><li>如果 Channel 的缓冲区中包含数据就会直接从 recvx 所在的索引上进行读取</li><li>在默认情况下会直接挂起当前的 Goroutine,将 sudog 结构加入 recvq 队列并更新 Goroutine 的 waiting 属性,最后陷入休眠等待调度器的唤醒;在从管道中接收数据的过 程中,其实会在两个时间点触发 Goroutine 的调度,首先空的 Channel 意味着永远接收不 到消息,那么就会直接挂起当前 Goroutine,第二个时间点是缓冲区中不存在数据,在这时也 会直接挂起当前的 Goroutine 等待发送方发送数据。</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recv</span><span class="hljs-params">(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf <span class="hljs-keyword">func</span>()</span>, <span class="hljs-title">skip</span> <span class="hljs-title">int</span>)</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 缓存队列不为空,直接从生产者获取数据</span></span><br><span class="line">    <span class="hljs-keyword">if</span> c.dataqsiz == <span class="hljs-number">0</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">            racesync(c, sg)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> ep != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// copy data from sender</span></span><br><span class="line">            recvDirect(c.elemtype, sg, ep)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// Queue is full. Take the item at the</span></span><br><span class="line">        <span class="hljs-comment">// head of the queue. Make the sender enqueue</span></span><br><span class="line">        <span class="hljs-comment">// its item at the tail of the queue. Since the</span></span><br><span class="line">        <span class="hljs-comment">// queue is full, those are both the same slot.</span></span><br><span class="line">    <span class="hljs-comment">// 有 send 阻塞在这里,从 buf 中获取数据</span></span><br><span class="line">        qp := chanbuf(c, c.recvx)</span><br><span class="line">        <span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">            raceacquire(qp)</span><br><span class="line">            racerelease(qp)</span><br><span class="line">            raceacquireg(sg.g, qp)</span><br><span class="line">            racereleaseg(sg.g, qp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// copy data from queue to receiver</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ep != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// 将 buf 中未读的当前位置数据拷贝给消费者</span></span><br><span class="line">        typedmemmove(c.elemtype, ep, qp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 将阻塞的生产者数据拷贝此位置</span></span><br><span class="line">        typedmemmove(c.elemtype, qp, sg.elem)</span><br><span class="line">    <span class="hljs-comment">// 接收元素索引向后移动</span></span><br><span class="line">        c.recvx++</span><br><span class="line">    <span class="hljs-comment">// 环形队列如果已经加到最大就置 0</span></span><br><span class="line">        <span class="hljs-keyword">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class="line">            c.recvx = <span class="hljs-number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-comment">// 环形队列读取的索引位置就是写入数据环形的末端</span></span><br><span class="line">        c.sendx = c.recvx <span class="hljs-comment">// c.sendx = (c.sendx+1) % c.dataqsiz</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 数据置为 nil</span></span><br><span class="line">    sg.elem = <span class="hljs-literal">nil</span></span><br><span class="line">  <span class="hljs-comment">// 获取 SudoG 中的 goroutine 传递给 param 参数</span></span><br><span class="line">    gp := sg.g</span><br><span class="line">    unlockf()</span><br><span class="line">    gp.param = unsafe.Pointer(sg)</span><br><span class="line">    <span class="hljs-keyword">if</span> sg.releasetime != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        sg.releasetime = cputicks()</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="hljs-comment">// 唤醒 sendq 里面 SudoG 对应的 g</span></span><br><span class="line">    goready(gp, skip+<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a><strong>关闭channel</strong></h3><p>关闭通道设置chan关闭标志位,<code>closed=1</code></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">closechan</span><span class="hljs-params">(c *hchan)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> c == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"close of nil channel"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock(&amp;c.lock)</span><br><span class="line"><span class="hljs-keyword">if</span> c.closed != <span class="hljs-number">0</span> &#123;</span><br><span class="line">unlock(&amp;c.lock)</span><br><span class="line"><span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"close of closed channel"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">racewritepc(c.raceaddr(), callerpc, funcPC(closechan))</span><br><span class="line">racerelease(c.raceaddr())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.closed = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> glist gList</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// release all readers</span></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">sg := c.recvq.dequeue()</span><br><span class="line"><span class="hljs-keyword">if</span> sg == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> sg.elem != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">typedmemclr(c.elemtype, sg.elem)</span><br><span class="line">sg.elem = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> sg.releasetime != <span class="hljs-number">0</span> &#123;</span><br><span class="line">sg.releasetime = cputicks()</span><br><span class="line">&#125;</span><br><span class="line">gp := sg.g</span><br><span class="line">gp.param = <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">raceacquireg(gp, c.raceaddr())</span><br><span class="line">&#125;</span><br><span class="line">glist.push(gp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// release all writers (they will panic)</span></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">sg := c.sendq.dequeue()</span><br><span class="line"><span class="hljs-keyword">if</span> sg == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">sg.elem = <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">if</span> sg.releasetime != <span class="hljs-number">0</span> &#123;</span><br><span class="line">sg.releasetime = cputicks()</span><br><span class="line">&#125;</span><br><span class="line">gp := sg.g</span><br><span class="line">gp.param = <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">raceacquireg(gp, c.raceaddr())</span><br><span class="line">&#125;</span><br><span class="line">glist.push(gp)</span><br><span class="line">&#125;</span><br><span class="line">unlock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Ready all Gs now that we've dropped the channel lock.</span></span><br><span class="line"><span class="hljs-keyword">for</span> !glist.empty() &#123;</span><br><span class="line">gp := glist.pop()</span><br><span class="line">gp.schedlink = <span class="hljs-number">0</span></span><br><span class="line">goready(gp, <span class="hljs-number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>c == nil</code>  // 关闭为 nil 的 hchan 直接 panic</li><li><code>lock(&amp;c.lock)</code>获取同步锁</li><li><code>if c.closed != 0</code>已关闭 hchan 释放锁 panic</li><li><code>c.closed = 1</code>将 closed 置为 1</li><li><code>sg := c.recvq.dequeue()</code>释放所有的读者<code>if sg == nil break</code></li><li><code>sg := c.sendq.dequeue()</code>释放所有的写者<code>if sg == nil break</code></li><li><code>unlock(&amp;c.lock)</code>释放同步锁</li><li><code>goready(gp, 3)</code>将接收队列和发送队列全部唤醒</li></ol><h2 id="三、map"><a href="#三、map" class="headerlink" title="三、map"></a><strong>三、map</strong></h2><p>Golang中map由链式哈希表实现,主要涉及创建、插入、查找、删除等基本操作,而核心<br>涉及到Map的冲突解决、扩容机制及迁移策略,这也是Map中最难理解的部分。</p><h3 id="map数据结构"><a href="#map数据结构" class="headerlink" title="map数据结构"></a><strong>map数据结构</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A header for a Go map.</span></span><br><span class="line"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class="line"><span class="hljs-comment">// Make sure this stays in sync with the compiler's definition.</span></span><br><span class="line">count     <span class="hljs-keyword">int</span> <span class="hljs-comment">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class="line">flags     <span class="hljs-keyword">uint8</span></span><br><span class="line">B         <span class="hljs-keyword">uint8</span>  <span class="hljs-comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class="line">noverflow <span class="hljs-keyword">uint16</span> <span class="hljs-comment">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class="line">hash0     <span class="hljs-keyword">uint32</span> <span class="hljs-comment">// hash seed</span></span><br><span class="line">buckets    unsafe.Pointer <span class="hljs-comment">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class="line">oldbuckets unsafe.Pointer <span class="hljs-comment">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class="line">nevacuate  <span class="hljs-keyword">uintptr</span>        <span class="hljs-comment">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line">extra *mapextra <span class="hljs-comment">// optional fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>count</code>表示当前哈希表中的元素数量。</li><li><code>B</code>表示当前哈希表持有的 buckets 数量,B为2的对数,2^B。</li><li><code>hash0</code>是哈希的种子,它能为哈希函数的结果引入随机性,这个值在创建哈希表时确定,并在 调用哈希函数时作为参数传入。</li><li><code>buckets</code>2^B个Buckets的桶</li><li><code>oldbuckets</code>是哈希在扩容时用于保存之前<code>buckets</code>的字段,它的大小是当前<code>buckets</code>的一半。</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// mapextra holds fields that are not present on all maps.</span></span><br><span class="line"><span class="hljs-keyword">type</span> mapextra <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line"><span class="hljs-comment">// If both key and value do not contain pointers and are inline, then we mark bucket</span></span><br><span class="line"><span class="hljs-comment">// type as containing no pointers. This avoids scanning such maps.</span></span><br><span class="line"><span class="hljs-comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span></span><br><span class="line"><span class="hljs-comment">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span></span><br><span class="line"><span class="hljs-comment">// overflow and oldoverflow are only used if key and value do not contain pointers.</span></span><br><span class="line"><span class="hljs-comment">// overflow contains overflow buckets for hmap.buckets.</span></span><br><span class="line"><span class="hljs-comment">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span></span><br><span class="line"><span class="hljs-comment">// The indirection allows to store a pointer to the slice in hiter.</span></span><br><span class="line">overflow    *[]*bmap</span><br><span class="line">oldoverflow *[]*bmap</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// nextOverflow holds a pointer to a free overflow bucket.</span></span><br><span class="line">nextOverflow *bmap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> <span class="hljs-keyword">struct</span> Bucket &#123;</span><br><span class="line">    <span class="hljs-comment">// tophash generally contains the top byte of the hash value</span></span><br><span class="line"><span class="hljs-comment">// for each key in this bucket. If tophash[0] &lt; minTopHash,</span></span><br><span class="line"><span class="hljs-comment">// tophash[0] is a bucket evacuation state instead.</span></span><br><span class="line">tophash [bucketCnt]<span class="hljs-keyword">uint8</span></span><br><span class="line"><span class="hljs-comment">// Followed by bucketCnt keys and then bucketCnt values.</span></span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> packing all the keys together and then all the values together makes the</span></span><br><span class="line"><span class="hljs-comment">// code a bit more complicated than alternating key/value/key/value/... but it allows</span></span><br><span class="line"><span class="hljs-comment">// us to eliminate padding which would be needed for, e.g., map[int64]int8.</span></span><br><span class="line"><span class="hljs-comment">// Followed by an overflow pointer.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>tophash</code>是个长度为8的数组,哈希值相同的键(准确的说是哈希值低位相同的键)存入当前bucket时会将哈希值的高位存储在该数组中,以方便后续匹配。</li><li><code>overflow</code>指针指向的是下一个bucket,据此将所有冲突的键连接起来。</li><li><code>data</code>其中BUCKETSIZE是用宏定义的8,每个bucket中存放最多8个key/value对,存放顺序是key/key/key/…value/value/value,如此存放是为了节省 字节对齐带来的空间浪费。 如果多于8个,那么会申请一个新的bucket,并将它与之前的bucket链起来。</li></ul><h3 id="平衡因子选取"><a href="#平衡因子选取" class="headerlink" title="平衡因子选取"></a><strong>平衡因子选取</strong></h3><p>扩容的填充因子是多少呢？如果grow的太频繁,会造成空间的利用率很低, 如果很久才grow,会形成很多的overflow buckets,查找的效率也会下降。 这个平衡点如何选取呢(在go中,这个平衡点是有一个宏控制的(#define LOAD 6.5), 它的意思是这样的,如果table中元素的个数大于table中能容纳的元素的个数, 那么就触发一次grow动作。那么这个6.5是怎么得到的呢？作者给出了测试的结果：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       LOAD    %overflow  bytes/entry     hitprobe    missprobe</span><br><span class="line">       <span class="hljs-number">4.00</span>         <span class="hljs-number">2.13</span>        <span class="hljs-number">20.77</span>         <span class="hljs-number">3.00</span>         <span class="hljs-number">4.00</span></span><br><span class="line">       <span class="hljs-number">4.50</span>         <span class="hljs-number">4.05</span>        <span class="hljs-number">17.30</span>         <span class="hljs-number">3.25</span>         <span class="hljs-number">4.50</span></span><br><span class="line">       <span class="hljs-number">5.00</span>         <span class="hljs-number">6.85</span>        <span class="hljs-number">14.77</span>         <span class="hljs-number">3.50</span>         <span class="hljs-number">5.00</span></span><br><span class="line">       <span class="hljs-number">5.50</span>        <span class="hljs-number">10.55</span>        <span class="hljs-number">12.94</span>         <span class="hljs-number">3.75</span>         <span class="hljs-number">5.50</span></span><br><span class="line">       <span class="hljs-number">6.00</span>        <span class="hljs-number">15.27</span>        <span class="hljs-number">11.67</span>         <span class="hljs-number">4.00</span>         <span class="hljs-number">6.00</span></span><br><span class="line">       <span class="hljs-number">6.50</span>        <span class="hljs-number">20.90</span>        <span class="hljs-number">10.79</span>         <span class="hljs-number">4.25</span>         <span class="hljs-number">6.50</span></span><br><span class="line">       <span class="hljs-number">7.00</span>        <span class="hljs-number">27.14</span>        <span class="hljs-number">10.15</span>         <span class="hljs-number">4.50</span>         <span class="hljs-number">7.00</span></span><br><span class="line">       <span class="hljs-number">7.50</span>        <span class="hljs-number">34.03</span>         <span class="hljs-number">9.73</span>         <span class="hljs-number">4.75</span>         <span class="hljs-number">7.50</span></span><br><span class="line">       <span class="hljs-number">8.00</span>        <span class="hljs-number">41.10</span>         <span class="hljs-number">9.40</span>         <span class="hljs-number">5.00</span>         <span class="hljs-number">8.00</span></span><br><span class="line"></span><br><span class="line">%overflow   = percentage of buckets which have an overflow bucket</span><br><span class="line">bytes/entry = overhead bytes used per key/value pair</span><br><span class="line">hitprobe    = # of entries to check when looking up a present key</span><br><span class="line">missprobe   = # of entries to check when looking up an absent key</span><br></pre></td></tr></table></figure><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a><strong>冲突解决</strong></h3><p>就像我们之前所提到的,在通常情况下,哈希函数输入的范围一定会远远大于输出的范围,所以在使用哈希表时一定会遇到冲突,哪怕我们使用了完美的哈希函数,当输入的键足够多最终也会造成冲突。</p><h4 id="map使用了拉链法"><a href="#map使用了拉链法" class="headerlink" title="map使用了拉链法"></a><strong>map使用了拉链法</strong></h4><p>在一个性能比较好的哈希表中,每一个桶中都应该有 0~1 个元素,有时会有 2~3 个,很少会超过这个数量,计算哈希、定位桶和遍历链表三个过程是哈希表读写操作的主要开销,使用拉链法实现的哈希也有装载因子这一概念：装载因子 := 元素数量 / 桶数量</p><h3 id="map创建"><a href="#map创建" class="headerlink" title="map创建"></a><strong>map创建</strong></h3><p><code>make([Type]Type)</code></p><p>当不指定map元素数量时,使用make_small函数创建hmap结构,但并不初始化桶。产生哈希种子–&gt;返回。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap_small</span><span class="hljs-params">()</span> *<span class="hljs-title">hmap</span></span> &#123;            </span><br><span class="line">    h := <span class="hljs-built_in">new</span>(hmap)</span><br><span class="line">    h.hash0 = fastrand()          <span class="hljs-comment">/* 创建哈希种子 */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>make([Type]Type, len)</code></p><p>指定元素数量,当元素数量小于8并且小于1&lt;&lt;B*6.5时,B = 0,此时仍然不会初始化桶指针buckets,只产生哈希种子返回,在使用的过程中初始化；其他情况设定B的值,并对桶指针buckets进行初始化。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap</span><span class="hljs-params">(t *maptype, hint <span class="hljs-keyword">int</span>, h *hmap)</span> *<span class="hljs-title">hmap</span></span> &#123;</span><br><span class="line">    mem, overflow := math.MulUintptr(<span class="hljs-keyword">uintptr</span>(hint), t.bucket.size)</span><br><span class="line">    <span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc &#123;</span><br><span class="line">        hint = <span class="hljs-number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> h == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        h = <span class="hljs-built_in">new</span>(hmap)                <span class="hljs-comment">/* 新建hmap结构 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    h.hash0 = fastrand()             <span class="hljs-comment">/* 产生哈希种子 */</span></span><br><span class="line"></span><br><span class="line">    B := <span class="hljs-keyword">uint8</span>(<span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> overLoadFactor(hint, B) &#123;    <span class="hljs-comment">/* 确定B的值 */</span></span><br><span class="line">        B++</span><br><span class="line">    &#125;</span><br><span class="line">    h.B = B</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> h.B != <span class="hljs-number">0</span> &#123;                    <span class="hljs-comment">/* B != 0 时初始化桶指针buckets */</span></span><br><span class="line">        <span class="hljs-keyword">var</span> nextOverflow *bmap</span><br><span class="line">        h.buckets, nextOverflow = makeBucketArray(t, h.B, <span class="hljs-literal">nil</span>)    <span class="hljs-comment">/* 初始化桶指针 buckets并分配空间 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> nextOverflow != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            h.extra = <span class="hljs-built_in">new</span>(mapextra)</span><br><span class="line">            h.extra.nextOverflow = nextOverflow         <span class="hljs-comment">/* 设置溢出桶 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map查找过程"><a href="#map查找过程" class="headerlink" title="map查找过程"></a><strong>map查找过程</strong></h3><p><code>mapaccess1</code>指针返回到<code>h[k]</code>。 永远不会返回<code>nil</code>,而是会参考返回零对象的值类型,如果key是没有在map上。 注：返回的指针可以保持整个map的存活,所以不要抓住它很长时间</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess1</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> raceenabled &amp;&amp; h != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        callerpc := getcallerpc()</span><br><span class="line">        pc := funcPC(mapaccess1)</span><br><span class="line">        racereadpc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">        raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> msanenabled &amp;&amp; h != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        msanread(key, t.key.size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> h == <span class="hljs-literal">nil</span> || h.count == <span class="hljs-number">0</span> &#123;            <span class="hljs-comment">/* 判断哈希表中是否含有数据 */</span></span><br><span class="line">        <span class="hljs-keyword">if</span> t.hashMightPanic() &#123;</span><br><span class="line">            t.key.alg.hash(key, <span class="hljs-number">0</span>) <span class="hljs-comment">// see issue 23734</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> h.flags&amp;hashWriting != <span class="hljs-number">0</span> &#123;         <span class="hljs-comment">/* 是否并发写 */</span></span><br><span class="line">        throw(<span class="hljs-string">"concurrent map read and map write"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    alg := t.key.alg</span><br><span class="line">    hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))      <span class="hljs-comment">/* 计算键的哈希值 */</span></span><br><span class="line">    m := bucketMask(h.B)                                <span class="hljs-comment">/* 1&lt;&lt;h.B -1 ,低B位掩码*/</span></span><br><span class="line">    b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))    <span class="hljs-comment">/* 找到相应的桶,hash&amp;m为第n个桶 */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> c := h.oldbuckets; c != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> !h.sameSizeGrow() &#123;</span><br><span class="line">            m &gt;&gt;= <span class="hljs-number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        oldb := (*bmap)(add(c, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">        <span class="hljs-keyword">if</span> !evacuated(oldb) &#123;</span><br><span class="line">            b = oldb</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    top := tophash(hash)            <span class="hljs-comment">/* 计算该键tophash的值 */</span></span><br><span class="line">bucketloop:</span><br><span class="line">    <span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;                            <span class="hljs-comment">/* 依次查找桶或溢出桶的元素 */</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;          <span class="hljs-comment">/* 依次遍历桶中的每个key, bucketCnt=8 */</span></span><br><span class="line">            <span class="hljs-keyword">if</span> b.tophash[i] != top &#123;                          <span class="hljs-comment">/* 如果找到top值,则比较第i个key */</span></span><br><span class="line">                <span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">                    <span class="hljs-keyword">break</span> bucketloop</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))  <span class="hljs-comment">/* 求key地址 */</span></span><br><span class="line">            <span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">                k = *((*unsafe.Pointer)(k))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> alg.equal(key, k) &#123;   <span class="hljs-comment">/* 比较键是否相等。如果相等,则找到key对应的值 */</span></span><br><span class="line">                v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))</span><br><span class="line">                <span class="hljs-keyword">if</span> t.indirectvalue() &#123;</span><br><span class="line">                    v = *((*unsafe.Pointer)(v))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">return</span> v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>按key的类型采用相应的hash算法得到key的hash值。</li><li>将hash值的低位与hmpa.B取模确定bucket位置。</li><li>先比较hash值高位与bucket的<code>tophash[i]</code>是否相等,如果相等则再比较bucket的第i个的key与所给的key是否相等。<ol><li>如果相等,则返回其对应的value。</li><li>反之,在<code>overflow</code>buckets 中按照上述方法继续寻找。</li></ol></li><li>如果当前处于搬迁过程,则优先从<code>oldbuckets</code>查找</li></ol><h3 id="map插入过程"><a href="#map插入过程" class="headerlink" title="map插入过程"></a><strong>map插入过程</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapassign</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> h == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">"assignment to entry in nil map"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> raceenabled &#123;</span><br><span class="line">        callerpc := getcallerpc()</span><br><span class="line">        pc := funcPC(mapassign)</span><br><span class="line">        racewritepc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">        raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> msanenabled &#123;</span><br><span class="line">        msanread(key, t.key.size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> h.flags&amp;hashWriting != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        throw(<span class="hljs-string">"concurrent map writes"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    alg := t.key.alg</span><br><span class="line">    hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))  <span class="hljs-comment">//1</span></span><br><span class="line"></span><br><span class="line">    h.flags ^= hashWriting     <span class="hljs-comment">//给falgs上标记</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> h.buckets == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        h.buckets = newobject(t.bucket) <span class="hljs-comment">// newarray(t.bucket, 1)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">again:</span><br><span class="line">    bucket := hash &amp; bucketMask(h.B)   <span class="hljs-comment">//2</span></span><br><span class="line">    <span class="hljs-keyword">if</span> h.growing() &#123;</span><br><span class="line">        growWork(t, h, bucket)</span><br><span class="line">    &#125;</span><br><span class="line">    b := (*bmap)(unsafe.Pointer(<span class="hljs-keyword">uintptr</span>(h.buckets) + bucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">    top := tophash(hash)      <span class="hljs-comment">//取tophash</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> inserti *<span class="hljs-keyword">uint8</span></span><br><span class="line">    <span class="hljs-keyword">var</span> insertk unsafe.Pointer</span><br><span class="line">    <span class="hljs-keyword">var</span> val unsafe.Pointer</span><br><span class="line">bucketloop:</span><br><span class="line">    <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;                        <span class="hljs-comment">/* 遍历桶中的8个key */</span></span><br><span class="line">            <span class="hljs-keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> isEmpty(b.tophash[i]) &amp;&amp; inserti == <span class="hljs-literal">nil</span> &#123;        <span class="hljs-comment">//4.找到插入的位置</span></span><br><span class="line">                    inserti = &amp;b.tophash[i]</span><br><span class="line">                    insertk = add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">                    val = add(unsafe.Pointer(b),  dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;        </span><br><span class="line">                    <span class="hljs-keyword">break</span> bucketloop</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">            <span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">                k = *((*unsafe.Pointer)(k))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> !alg.equal(key, k) &#123;</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> t.needkeyupdate() &#123;      <span class="hljs-comment">//3.更新</span></span><br><span class="line">                typedmemmove(t.key, k, key)</span><br><span class="line">            &#125;</span><br><span class="line">            val = add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))</span><br><span class="line">            <span class="hljs-keyword">goto</span> done</span><br><span class="line">        &#125;</span><br><span class="line">        ovf := b.overflow(t)</span><br><span class="line">        <span class="hljs-keyword">if</span> ovf == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        b = ovf</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> !h.growing() &amp;&amp; (overLoadFactor(h.count+<span class="hljs-number">1</span>, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) &#123;</span><br><span class="line">        hashGrow(t, h)</span><br><span class="line">        <span class="hljs-keyword">goto</span> again <span class="hljs-comment">// Growing the table invalidates everything, so try again</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> inserti == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        newb := h.newoverflow(t, b)             <span class="hljs-comment">//5</span></span><br><span class="line">        inserti = &amp;newb.tophash[<span class="hljs-number">0</span>]</span><br><span class="line">        insertk = add(unsafe.Pointer(newb), dataOffset)</span><br><span class="line">        val = add(insertk, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">        kmem := newobject(t.key)</span><br><span class="line">        *(*unsafe.Pointer)(insertk) = kmem</span><br><span class="line">        insertk = kmem</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> t.indirectvalue() &#123;</span><br><span class="line">        vmem := newobject(t.elem)</span><br><span class="line">        *(*unsafe.Pointer)(val) = vmem</span><br><span class="line">    &#125;</span><br><span class="line">    typedmemmove(t.key, insertk, key)</span><br><span class="line">    *inserti = top</span><br><span class="line">    h.count++</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line">    <span class="hljs-keyword">if</span> h.flags&amp;hashWriting == <span class="hljs-number">0</span> &#123;</span><br><span class="line">        throw(<span class="hljs-string">"concurrent map writes"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    h.flags &amp;^= hashWriting</span><br><span class="line">    <span class="hljs-keyword">if</span> t.indirectvalue() &#123;</span><br><span class="line">        val = *((*unsafe.Pointer)(val))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>跟据key值算出哈希值。</li><li>取哈希值低位与hmap.B取模确定bucket位置。</li><li>取哈希值高位与hmap.B查找该key是否已经存在,如果存在则直接更新值。</li><li>如果未找到且剩下的空间为empty,则将新的键存到该位置</li><li>如果未找到且遍历完buckets,查看是否有溢出桶,若有则遍历溢出桶；如果没有溢出桶,则申请一个新的溢出桶存放该元素。</li></ol><h3 id="map删除过程"><a href="#map删除过程" class="headerlink" title="map删除过程"></a><strong>map删除过程</strong></h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapdelete</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> raceenabled &amp;&amp; h != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(mapdelete)</span><br><span class="line">racewritepc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> msanenabled &amp;&amp; h != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">msanread(key, t.key.size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> h == <span class="hljs-literal">nil</span> || h.count == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> t.hashMightPanic() &#123;</span><br><span class="line">t.key.alg.hash(key, <span class="hljs-number">0</span>) <span class="hljs-comment">// see issue 23734</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> h.flags&amp;hashWriting != <span class="hljs-number">0</span> &#123;</span><br><span class="line">throw(<span class="hljs-string">"concurrent map writes"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alg := t.key.alg</span><br><span class="line">hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set hashWriting after calling alg.hash, since alg.hash may panic,</span></span><br><span class="line"><span class="hljs-comment">// in which case we have not actually done a write (delete).</span></span><br><span class="line">h.flags ^= hashWriting</span><br><span class="line"></span><br><span class="line">bucket := hash &amp; bucketMask(h.B)</span><br><span class="line"><span class="hljs-keyword">if</span> h.growing() &#123;</span><br><span class="line">growWork(t, h, bucket)</span><br><span class="line">&#125;</span><br><span class="line">b := (*bmap)(add(h.buckets, bucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">bOrig := b</span><br><span class="line">top := tophash(hash)</span><br><span class="line">search:</span><br><span class="line"><span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line"><span class="hljs-keyword">break</span> search</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">k2 := k</span><br><span class="line"><span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">k2 = *((*unsafe.Pointer)(k2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !alg.equal(key, k2) &#123;</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Only clear key if there are pointers in it.</span></span><br><span class="line"><span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">*(*unsafe.Pointer)(k) = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> t.key.kind&amp;kindNoPointers == <span class="hljs-number">0</span> &#123;</span><br><span class="line">memclrHasPointers(k, t.key.size)</span><br><span class="line">&#125;</span><br><span class="line">v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))</span><br><span class="line"><span class="hljs-keyword">if</span> t.indirectvalue() &#123;</span><br><span class="line">*(*unsafe.Pointer)(v) = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> t.elem.kind&amp;kindNoPointers == <span class="hljs-number">0</span> &#123;</span><br><span class="line">memclrHasPointers(v, t.elem.size)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">memclrNoHeapPointers(v, t.elem.size)</span><br><span class="line">&#125;</span><br><span class="line">b.tophash[i] = emptyOne</span><br><span class="line"><span class="hljs-comment">// If the bucket now ends in a bunch of emptyOne states,</span></span><br><span class="line"><span class="hljs-comment">// change those to emptyRest states.</span></span><br><span class="line"><span class="hljs-comment">// It would be nice to make this a separate function, but</span></span><br><span class="line"><span class="hljs-comment">// for loops are not currently inlineable.</span></span><br><span class="line"><span class="hljs-keyword">if</span> i == bucketCnt<span class="hljs-number">-1</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.overflow(t) != <span class="hljs-literal">nil</span> &amp;&amp; b.overflow(t).tophash[<span class="hljs-number">0</span>] != emptyRest &#123;</span><br><span class="line"><span class="hljs-keyword">goto</span> notLast</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.tophash[i+<span class="hljs-number">1</span>] != emptyRest &#123;</span><br><span class="line"><span class="hljs-keyword">goto</span> notLast</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">b.tophash[i] = emptyRest</span><br><span class="line"><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b == bOrig &#123;</span><br><span class="line"><span class="hljs-keyword">break</span> <span class="hljs-comment">// beginning of initial bucket, we're done.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Find previous bucket, continue at its last entry.</span></span><br><span class="line">c := b</span><br><span class="line"><span class="hljs-keyword">for</span> b = bOrig; b.overflow(t) != c; b = b.overflow(t) &#123;</span><br><span class="line">&#125;</span><br><span class="line">i = bucketCnt - <span class="hljs-number">1</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> b.tophash[i] != emptyOne &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">notLast:</span><br><span class="line">h.count--</span><br><span class="line"><span class="hljs-keyword">break</span> search</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> h.flags&amp;hashWriting == <span class="hljs-number">0</span> &#123;</span><br><span class="line">throw(<span class="hljs-string">"concurrent map writes"</span>)</span><br><span class="line">&#125;</span><br><span class="line">h.flags &amp;^= hashWriting</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈希表的删除逻辑与写入逻辑非常相似,只是触发哈希的删除需要使用关键字,如果在删除期间遇到了哈希表的扩容,就会对即将操作的桶进行迁移,迁移结束之后会找到桶中的目标元素完成键值对的删除工作。</p><h3 id="map扩容原理"><a href="#map扩容原理" class="headerlink" title="map扩容原理"></a><strong>map扩容原理</strong></h3><h4 id="扩容的前提条件"><a href="#扩容的前提条件" class="headerlink" title="扩容的前提条件"></a><strong>扩容的前提条件</strong></h4><ol><li><strong>增量扩容</strong>:负载因子 &gt; 6.5时,也即平均每个bucket存储的键值对达到6.5个。</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// overLoadFactor reports whether count items placed in 1&lt;&lt;B buckets is over loadFactor.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">overLoadFactor</span><span class="hljs-params">(count <span class="hljs-keyword">int</span>, B <span class="hljs-keyword">uint8</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> count &gt; bucketCnt &amp;&amp; <span class="hljs-keyword">uintptr</span>(count) &gt; loadFactorNum*(bucketShift(B)/loadFactorDen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>等量扩容</strong>:overflow数量 &gt; 2^15时,也即overflow数量超过32768时。</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// tooManyOverflowBuckets reports whether noverflow buckets is too many for a map with 1&lt;&lt;B buckets.</span></span><br><span class="line"><span class="hljs-comment">// Note that most of these overflow buckets must be in sparse use;</span></span><br><span class="line"><span class="hljs-comment">// if use was dense, then we'd have already triggered regular map growth.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">tooManyOverflowBuckets</span><span class="hljs-params">(noverflow <span class="hljs-keyword">uint16</span>, B <span class="hljs-keyword">uint8</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// If the threshold is too low, we do extraneous work.</span></span><br><span class="line"><span class="hljs-comment">// If the threshold is too high, maps that grow and shrink can hold on to lots of unused memory.</span></span><br><span class="line"><span class="hljs-comment">// "too many" means (approximately) as many overflow buckets as regular buckets.</span></span><br><span class="line"><span class="hljs-comment">// See incrnoverflow for more details.</span></span><br><span class="line"><span class="hljs-keyword">if</span> B &gt; <span class="hljs-number">15</span> &#123;</span><br><span class="line">B = <span class="hljs-number">15</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// The compiler doesn't see here that B &lt; 16; mask B to generate shorter shift code.</span></span><br><span class="line"><span class="hljs-keyword">return</span> noverflow &gt;= <span class="hljs-keyword">uint16</span>(<span class="hljs-number">1</span>)&lt;&lt;(B&amp;<span class="hljs-number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hashGrow</span><span class="hljs-params">(t *maptype, h *hmap)</span></span> &#123;</span><br><span class="line">    bigger := <span class="hljs-keyword">uint8</span>(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> !overLoadFactor(h.count+<span class="hljs-number">1</span>, h.B) &#123;    <span class="hljs-comment">/* 判断是2倍空间扩容还是等量空间扩容 */</span></span><br><span class="line">        bigger = <span class="hljs-number">0</span></span><br><span class="line">        h.flags |= sameSizeGrow             <span class="hljs-comment">/* 等量空间扩容,bigger=0 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    oldbuckets := h.buckets</span><br><span class="line">    newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, <span class="hljs-literal">nil</span>)   <span class="hljs-comment">/* 分配桶空间 */</span></span><br><span class="line"></span><br><span class="line">    flags := h.flags &amp;^ (iterator | oldIterator)      <span class="hljs-comment">/* 将buckets和oldbuckets迭代标志置0 */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> h.flags&amp;iterator != <span class="hljs-number">0</span> &#123;</span><br><span class="line">        flags |= oldIterator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h.B += bigger                      <span class="hljs-comment">/* 增量扩容为h.B+1,等量扩容为h.B */</span></span><br><span class="line">    h.flags = flags</span><br><span class="line">    h.oldbuckets = oldbuckets</span><br><span class="line">    h.buckets = newbuckets</span><br><span class="line">    h.nevacuate = <span class="hljs-number">0</span>                  <span class="hljs-comment">/* 搬迁状态为0表示未进行迁移 */</span></span><br><span class="line">    h.noverflow = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/* 当key/value不是指针时,用extramap中的指针存储溢出桶,而不用bmap中的        </span></span><br><span class="line"><span class="hljs-comment">         * overflow。overflow表示hmap结构buckets中的溢出桶,oldoverflow表示hmap中</span></span><br><span class="line"><span class="hljs-comment">         * oldbuckets中的溢出桶 ,nextoverflow预分配溢出桶空间 。</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> h.extra != <span class="hljs-literal">nil</span> &amp;&amp; h.extra.overflow != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> h.extra.oldoverflow != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            throw(<span class="hljs-string">"oldoverflow is not nil"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        h.extra.oldoverflow = h.extra.overflow</span><br><span class="line">        h.extra.overflow = <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> nextOverflow != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> h.extra == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">             h.extra = <span class="hljs-built_in">new</span>(mapextra)</span><br><span class="line">        &#125;</span><br><span class="line">        h.extra.nextOverflow = nextOverflow</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map迁移原理"><a href="#map迁移原理" class="headerlink" title="map迁移原理"></a><strong>map迁移原理</strong></h3> <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">evacuate</span><span class="hljs-params">(t *maptype, h *hmap, oldbucket <span class="hljs-keyword">uintptr</span>)</span></span> &#123;</span><br><span class="line">     b := (*bmap)(add(h.oldbuckets, oldbucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))  <span class="hljs-comment">/* oldbucket为旧桶的索引 */</span></span><br><span class="line">     newbit := h.noldbuckets()                         <span class="hljs-comment">/* 与原来旧桶分配的容量相等 */</span></span><br><span class="line">     <span class="hljs-keyword">if</span> !evacuated(b) &#123; </span><br><span class="line">         <span class="hljs-keyword">var</span> xy [<span class="hljs-number">2</span>]evacDst   <span class="hljs-comment">/*xy 包含x和y的 (low and high)疏散目的地.*/</span></span><br><span class="line">         x := &amp;xy[<span class="hljs-number">0</span>]                                   <span class="hljs-comment">/* 等量扩容或2倍扩容的前一部分（X,和原来相等） */</span></span><br><span class="line">         x.b = (*bmap)(add(h.buckets, oldbucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">         x.k = add(unsafe.Pointer(x.b), dataOffset)    <span class="hljs-comment">/* key的地址 */</span></span><br><span class="line">         x.v = add(x.k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))  <span class="hljs-comment">/* value得地址 */</span></span><br><span class="line"></span><br><span class="line">         <span class="hljs-keyword">if</span> !h.sameSizeGrow() &#123;             <span class="hljs-comment">//如果不是等量扩容</span></span><br><span class="line">             y := &amp;xy[<span class="hljs-number">1</span>]                               <span class="hljs-comment">/* 若为2倍扩容,需要后一部分,即增长的空间 */</span></span><br><span class="line">             y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))  <span class="hljs-comment">/* 后一部分桶的索引 */</span></span><br><span class="line">             y.k = add(unsafe.Pointer(y.b), dataOffset)</span><br><span class="line">             y.v = add(y.k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;              <span class="hljs-comment">/* 遍历最后一个bmap及溢出桶 */</span></span><br><span class="line">             k := add(unsafe.Pointer(b), dataOffset)      <span class="hljs-comment">/* key的地址 */</span></span><br><span class="line">             v := add(k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))    <span class="hljs-comment">/* value的地址 */</span></span><br><span class="line">             <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; bucketCnt; i, k, v = i+<span class="hljs-number">1</span>, add(k, <span class="hljs-keyword">uintptr</span>(t.keysize)), add(v, <span class="hljs-keyword">uintptr</span>(t.valuesize)) &#123;  <span class="hljs-comment">/* 遍历桶中的元素 */</span></span><br><span class="line">                 top := b.tophash[i]                      <span class="hljs-comment">/* 获取tophash的值 */</span></span><br><span class="line">                 <span class="hljs-keyword">if</span> isEmpty(top) &#123;                        <span class="hljs-comment">/* 如果tophash为空,标记为已被搬迁状态 */</span></span><br><span class="line">                     b.tophash[i] = evacuatedEmpty  </span><br><span class="line">                     <span class="hljs-keyword">continue</span></span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="hljs-keyword">if</span> top &lt; minTopHash &#123;                    <span class="hljs-comment">/* tophash的值为hash+minTopHash */</span></span><br><span class="line">                     throw(<span class="hljs-string">"bad map state"</span>)</span><br><span class="line">                 &#125;</span><br><span class="line">                 k2 := k</span><br><span class="line">                 <span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">                     k2 = *((*unsafe.Pointer)(k2))</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="hljs-keyword">var</span> useY <span class="hljs-keyword">uint8</span>                          <span class="hljs-comment">/* useY用来判断是落在oldbucket还是newbit */</span></span><br><span class="line">                 <span class="hljs-keyword">if</span> !h.sameSizeGrow() &#123;                  <span class="hljs-comment">/* 如果为2倍扩容,h.B增大1,桶的位置发生变化 */</span></span><br><span class="line">                     hash := t.key.alg.hash(k2, <span class="hljs-keyword">uintptr</span>(h.hash0))</span><br><span class="line">                     <span class="hljs-keyword">if</span> h.flags&amp;iterator != <span class="hljs-number">0</span> &amp;&amp; !t.reflexivekey() &amp;&amp; !t.key.alg.equal(k2,k2) &#123;</span><br><span class="line">                         useY = top &amp; <span class="hljs-number">1</span></span><br><span class="line">                         top = tophash(hash)</span><br><span class="line">                     &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                         <span class="hljs-keyword">if</span> hash&amp;newbit != <span class="hljs-number">0</span> &#123;</span><br><span class="line">                             useY = <span class="hljs-number">1</span></span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="hljs-comment">/* evacuatedY = evacuatedX + 1 */</span></span><br><span class="line">                 <span class="hljs-keyword">if</span> evacuatedX+<span class="hljs-number">1</span> != evacuatedY || evacuatedX^<span class="hljs-number">1</span> != evacuatedY &#123;</span><br><span class="line">                     throw(<span class="hljs-string">"bad evacuatedN"</span>)</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 b.tophash[i] = evacuatedX + useY  <span class="hljs-comment">/* 搬迁为X或者Y状态 */</span></span><br><span class="line">                 dst := &amp;xy[useY]                  <span class="hljs-comment">/* useY=0表示搬迁到前半部分, 否则到后半部分*/</span></span><br><span class="line"></span><br><span class="line">                 <span class="hljs-keyword">if</span> dst.i == bucketCnt &#123;           <span class="hljs-comment">/* 当桶中元素数量达到最大8时,需要溢出桶 */</span></span><br><span class="line">                     dst.b = h.newoverflow(t, dst.b)</span><br><span class="line">                     dst.i = <span class="hljs-number">0</span></span><br><span class="line">                     dst.k = add(unsafe.Pointer(dst.b), dataOffset)</span><br><span class="line">                     dst.v = add(dst.k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">                 &#125;</span><br><span class="line">                 dst.b.tophash[dst.i&amp;(bucketCnt<span class="hljs-number">-1</span>)] = top</span><br><span class="line">                 <span class="hljs-keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">                     *(*unsafe.Pointer)(dst.k) = k2   <span class="hljs-comment">/* key为指针时,复制指针 */</span></span><br><span class="line">                 &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                     typedmemmove(t.key, dst.k, k)</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="hljs-keyword">if</span> t.indirectvalue() &#123;</span><br><span class="line">                     *(*unsafe.Pointer)(dst.v) = *(*unsafe.Pointer)(v) <span class="hljs-comment">/* value为指针时,复制指针 */</span></span><br><span class="line">                 &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                     typedmemmove(t.elem, dst.v, v)</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="hljs-comment">/* 进行下一个元素的搬迁 */</span></span><br><span class="line">                 dst.i++</span><br><span class="line">                 dst.k = add(dst.k, <span class="hljs-keyword">uintptr</span>(t.keysize))</span><br><span class="line">                 dst.v = add(dst.v, <span class="hljs-keyword">uintptr</span>(t.valuesize))</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="hljs-comment">/* 遍历完桶后,如果没有其他goroutine使用该桶,就把该桶清空 */</span></span><br><span class="line">         <span class="hljs-keyword">if</span> h.flags&amp;oldIterator == <span class="hljs-number">0</span> &amp;&amp; t.bucket.kind&amp;kindNoPointers == <span class="hljs-number">0</span> &#123;</span><br><span class="line">             b := add(h.oldbuckets, oldbucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize))</span><br><span class="line">             ptr := add(b, dataOffset)</span><br><span class="line">             n := <span class="hljs-keyword">uintptr</span>(t.bucketsize) - dataOffset</span><br><span class="line">             memclrHasPointers(ptr, n)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="hljs-keyword">if</span> oldbucket == h.nevacuate &#123;</span><br><span class="line">         advanceEvacuationMark(h, t, newbit)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="hljs-comment">/* 确定桶的搬迁进度,如果搬迁完成进行后续操作 */</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">advanceEvacuationMark</span><span class="hljs-params">(h *hmap, t *maptype, newbit <span class="hljs-keyword">uintptr</span>)</span></span> &#123;</span><br><span class="line">     h.nevacuate++</span><br><span class="line">     stop := h.nevacuate + <span class="hljs-number">1024</span></span><br><span class="line">     <span class="hljs-keyword">if</span> stop &gt; newbit &#123;</span><br><span class="line">         stop = newbit</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">for</span> h.nevacuate != stop &amp;&amp; bucketEvacuated(t, h, h.nevacuate) &#123;  <span class="hljs-comment">/*如果搬迁没有完成将搬迁进度nevacuate加1 */</span></span><br><span class="line">         h.nevacuate++</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">if</span> h.nevacuate == newbit &#123;</span><br><span class="line">         h.oldbuckets = <span class="hljs-literal">nil</span>                <span class="hljs-comment">/* 搬迁完成,将oldbuckets置nil */</span></span><br><span class="line">         <span class="hljs-keyword">if</span> h.extra != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">             h.extra.oldoverflow = <span class="hljs-literal">nil</span>     <span class="hljs-comment">/* 溢出桶置为nil */</span></span><br><span class="line">         &#125;</span><br><span class="line">         h.flags &amp;^= sameSizeGrow          <span class="hljs-comment">/* 等量扩容位置0 */</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Git 代理为 Github 提速</title>
      <link href="/2020/02/27/Linux/%E4%BD%BF%E7%94%A8Git%E4%BB%A3%E7%90%86%E4%B8%BAGithub%E6%8F%90%E9%80%9F/"/>
      <url>/2020/02/27/Linux/%E4%BD%BF%E7%94%A8Git%E4%BB%A3%E7%90%86%E4%B8%BAGithub%E6%8F%90%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>git clone一个github上的仓库,太慢,经常连接失败,如何解决呢？下面我从网上找到一些解决方法,并且亲自实践过,可行,在这里分享给大家。</p><a id="more"></a><h4 id="走-HTTP-代理"><a href="#走-HTTP-代理" class="headerlink" title="走 HTTP 代理"></a><strong>走 HTTP 代理</strong></h4><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="hljs-string">"http://127.0.0.1:8080"</span></span><br><span class="line">git config --global https.proxy <span class="hljs-string">"http://127.0.0.1:8080"</span></span><br></pre></td></tr></table></figure><h4 id="走-socks5-代理（如-Shadowsocks）"><a href="#走-socks5-代理（如-Shadowsocks）" class="headerlink" title="走 socks5 代理（如 Shadowsocks）"></a><strong>走 socks5 代理（如 Shadowsocks）</strong></h4><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="hljs-string">"socks5://127.0.0.1:1080"</span></span><br><span class="line">git config --global https.proxy <span class="hljs-string">"socks5://127.0.0.1:1080"</span></span><br></pre></td></tr></table></figure><h4 id="取消设置"><a href="#取消设置" class="headerlink" title="取消设置"></a><strong>取消设置</strong></h4><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="hljs-built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="hljs-built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h4 id="SSH-形式"><a href="#SSH-形式" class="headerlink" title="SSH 形式"></a><strong>SSH 形式</strong></h4><p><strong>修改<code>~/.ssh/config</code>文件（不存在则新建）：</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span></span><br><span class="line">Host github.com</span><br><span class="line">   <span class="hljs-comment"># 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/</span></span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   <span class="hljs-comment"># 走 HTTP 代理</span></span><br><span class="line">   <span class="hljs-comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1087</span></span><br><span class="line">   <span class="hljs-comment"># 如果是 socks5 代理，则把下面这行取消注释，并把 7891 改成自己 socks5 代理的端口</span></span><br><span class="line">    ProxyCommand nc -v -x 127.0.0.1:7891 %h %p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go源码分析(4) - expvar</title>
      <link href="/2019/11/26/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(4)-expvar/"/>
      <url>/2019/11/26/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(4)-expvar/</url>
      
        <content type="html"><![CDATA[<p>今天是要分析的是一个封装好的关于 int,string,float, map 等基本类型原子操作包,还有一些公共发布变量。</p><a id="more"></a><h2 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Int is a 64-bit integer variable that satisfies the Var interface.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Int <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">i <span class="hljs-keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Int)</span> <span class="hljs-title">Value</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> atomic.LoadInt64(&amp;v.i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Int)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> strconv.FormatInt(atomic.LoadInt64(&amp;v.i), <span class="hljs-number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Int)</span> <span class="hljs-title">Add</span><span class="hljs-params">(delta <span class="hljs-keyword">int64</span>)</span></span> &#123;</span><br><span class="line">atomic.AddInt64(&amp;v.i, delta)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Int)</span> <span class="hljs-title">Set</span><span class="hljs-params">(value <span class="hljs-keyword">int64</span>)</span></span> &#123;</span><br><span class="line">atomic.StoreInt64(&amp;v.i, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以int64作为基本类型,然后使用atomic包下等原子操作。</p><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Float is a 64-bit float variable that satisfies the Var interface.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Float <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">f <span class="hljs-keyword">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Float)</span> <span class="hljs-title">Value</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> math.Float64frombits(atomic.LoadUint64(&amp;v.f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Float)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> strconv.FormatFloat(</span><br><span class="line">math.Float64frombits(atomic.LoadUint64(&amp;v.f)), <span class="hljs-string">'g'</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">64</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Add adds delta to v.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Float)</span> <span class="hljs-title">Add</span><span class="hljs-params">(delta <span class="hljs-keyword">float64</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">cur := atomic.LoadUint64(&amp;v.f)</span><br><span class="line">curVal := math.Float64frombits(cur)</span><br><span class="line">nxtVal := curVal + delta</span><br><span class="line">nxt := math.Float64bits(nxtVal)</span><br><span class="line"><span class="hljs-keyword">if</span> atomic.CompareAndSwapUint64(&amp;v.f, cur, nxt) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Set sets v to value.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Float)</span> <span class="hljs-title">Set</span><span class="hljs-params">(value <span class="hljs-keyword">float64</span>)</span></span> &#123;</span><br><span class="line">atomic.StoreUint64(&amp;v.f, math.Float64bits(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以uint64作为基本类型,来实现float类型等原子操作。</p><ul><li><code>Add(delta float64)</code>使用cas算法不断拿到最新值,重复进行cas设置,直到成功为止。</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Float64bits returns the IEEE 754 binary representation of f,</span></span><br><span class="line"><span class="hljs-comment">// with the sign bit of f and the result in the same bit position,</span></span><br><span class="line"><span class="hljs-comment">// and Float64bits(Float64frombits(x)) == x.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Float64bits</span><span class="hljs-params">(f <span class="hljs-keyword">float64</span>)</span> <span class="hljs-title">uint64</span></span> &#123; <span class="hljs-keyword">return</span> *(*<span class="hljs-keyword">uint64</span>)(unsafe.Pointer(&amp;f)) &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Float64frombits returns the floating-point number corresponding</span></span><br><span class="line"><span class="hljs-comment">// to the IEEE 754 binary representation b, with the sign bit of b</span></span><br><span class="line"><span class="hljs-comment">// and the result in the same bit position.</span></span><br><span class="line"><span class="hljs-comment">// Float64frombits(Float64bits(x)) == x.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Float64frombits</span><span class="hljs-params">(b <span class="hljs-keyword">uint64</span>)</span> <span class="hljs-title">float64</span></span> &#123; <span class="hljs-keyword">return</span> *(*<span class="hljs-keyword">float64</span>)(unsafe.Pointer(&amp;b)) &#125;</span><br></pre></td></tr></table></figure><p>在其中使用到了<code>func Float64bits(f float64) uint64</code>将float类型转换为uint64类型进行存储,使用<code>Float64frombits(b uint64) float64</code>将uint64类型转换为float类型。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LoadUint64 atomically loads *addr.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadUint64</span><span class="hljs-params">(addr *<span class="hljs-keyword">uint64</span>)</span> <span class="hljs-params">(val <span class="hljs-keyword">uint64</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// StoreUint64 atomically stores val into *addr.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StoreUint64</span><span class="hljs-params">(addr *<span class="hljs-keyword">uint64</span>, val <span class="hljs-keyword">uint64</span>)</span></span></span><br></pre></td></tr></table></figure><p>转换为uint64类型,使用atomic包下到存储和去出uint64类型。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Var is an abstract type for all exported variables.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Var <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line"><span class="hljs-comment">// String returns a valid JSON value for the variable.</span></span><br><span class="line"><span class="hljs-comment">// Types with String methods that do not return valid JSON</span></span><br><span class="line"><span class="hljs-comment">// (such as time.Time) must not be used as a Var.</span></span><br><span class="line">String() <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Map is a string-to-Var map variable that satisfies the Var interface.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">m      sync.Map <span class="hljs-comment">// map[string]Var</span></span><br><span class="line">keysMu sync.RWMutex</span><br><span class="line">keys   []<span class="hljs-keyword">string</span> <span class="hljs-comment">// sorted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从定义上很清楚的知道<code>Var</code>是一个抽象接口,<code>String()</code>方法返回的是一个json字符串<br><code>Map</code>类型是一个<code>string</code>类型作为key, 实现了Var接口类型的值作为value的键值对,结构体如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// KeyValue represents a single entry in a Map.</span></span><br><span class="line"><span class="hljs-keyword">type</span> KeyValue <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Key   <span class="hljs-keyword">string</span></span><br><span class="line">Value Var</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map</code>本身也是一个实现了Var接口对类型,其,<code>String()</code>方法会返回<code>Map</code>内的全部键值对作为json字符串</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> b strings.Builder</span><br><span class="line">fmt.Fprintf(&amp;b, <span class="hljs-string">"&#123;"</span>)</span><br><span class="line">first := <span class="hljs-literal">true</span></span><br><span class="line">v.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(kv KeyValue)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> !first &#123;</span><br><span class="line">fmt.Fprintf(&amp;b, <span class="hljs-string">", "</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(&amp;b, <span class="hljs-string">"%q: %v"</span>, kv.Key, kv.Value)</span><br><span class="line">first = <span class="hljs-literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Fprintf(&amp;b, <span class="hljs-string">"&#125;"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> b.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其中调用<code>Map</code>本身的<code>Do()</code>方法,首先要对整个方法加读锁,这个Do()方法里面有一个循环遍历map的所有的键,然后通过key取出value,包装成<code>KeyValue</code>结构体,然后被传入<code>f func(KeyValue)</code>调用。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Do calls f for each entry in the map.</span></span><br><span class="line"><span class="hljs-comment">// The map is locked during the iteration,</span></span><br><span class="line"><span class="hljs-comment">// but existing entries may be concurrently updated.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">Do</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(KeyValue)</span>)</span> &#123;</span><br><span class="line">v.keysMu.RLock()</span><br><span class="line"><span class="hljs-keyword">defer</span> v.keysMu.RUnlock()</span><br><span class="line"><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> v.keys &#123;</span><br><span class="line">i, _ := v.m.Load(k)</span><br><span class="line">f(KeyValue&#123;k, i.(Var)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我看看添加key的方法</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// addKey updates the sorted list of keys in v.keys.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">addKey</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">v.keysMu.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> v.keysMu.Unlock()</span><br><span class="line"><span class="hljs-comment">// Using insertion sort to place key into the already-sorted v.keys.</span></span><br><span class="line"><span class="hljs-keyword">if</span> i := sort.SearchStrings(v.keys, key); i &gt;= <span class="hljs-built_in">len</span>(v.keys) &#123;</span><br><span class="line">v.keys = <span class="hljs-built_in">append</span>(v.keys, key)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v.keys[i] != key &#123;</span><br><span class="line">v.keys = <span class="hljs-built_in">append</span>(v.keys, <span class="hljs-string">""</span>)</span><br><span class="line"><span class="hljs-built_in">copy</span>(v.keys[i+<span class="hljs-number">1</span>:], v.keys[i:])</span><br><span class="line">v.keys[i] = key</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先加了一个读锁,使用插入排序将键放入已排序的v.keys中。通过key在keys中找到要插入的合适的位置,然后将keys的长度加1,将<code>i - n-1</code>位置的值移动到<code>i+1 - n</code>上,然后将keys[i]设置为key。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">Get</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">Var</span></span> &#123;</span><br><span class="line">i, _ := v.m.Load(key)</span><br><span class="line">av, _ := i.(Var)</span><br><span class="line"><span class="hljs-keyword">return</span> av</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">Set</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, av Var)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// Before we store the value, check to see whether the key is new. Try a Load</span></span><br><span class="line"><span class="hljs-comment">// before LoadOrStore: LoadOrStore causes the key interface to escape even on</span></span><br><span class="line"><span class="hljs-comment">// the Load path.</span></span><br><span class="line"><span class="hljs-keyword">if</span> _, ok := v.m.Load(key); !ok &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> _, dup := v.m.LoadOrStore(key, av); !dup &#123;</span><br><span class="line">v.addKey(key)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v.m.Store(key, av)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法很简单,一个是取值,通过sync.map的Load方法,一个是设置值,但是这里除了用sync.map的LoadOrStore方法,还需要将key加入到keys中。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Add adds delta to the *Int value stored under the given map key.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">Add</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, delta <span class="hljs-keyword">int64</span>)</span></span> &#123;</span><br><span class="line">i, ok := v.m.Load(key)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> dup <span class="hljs-keyword">bool</span></span><br><span class="line">i, dup = v.m.LoadOrStore(key, <span class="hljs-built_in">new</span>(Int))</span><br><span class="line"><span class="hljs-keyword">if</span> !dup &#123;</span><br><span class="line">v.addKey(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Add to Int; ignore otherwise.</span></span><br><span class="line"><span class="hljs-keyword">if</span> iv, ok := i.(*Int); ok &#123;</span><br><span class="line">iv.Add(delta)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// AddFloat adds delta to the *Float value stored under the given map key.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">AddFloat</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, delta <span class="hljs-keyword">float64</span>)</span></span> &#123;</span><br><span class="line">i, ok := v.m.Load(key)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> dup <span class="hljs-keyword">bool</span></span><br><span class="line">i, dup = v.m.LoadOrStore(key, <span class="hljs-built_in">new</span>(Float))</span><br><span class="line"><span class="hljs-keyword">if</span> !dup &#123;</span><br><span class="line">v.addKey(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Add to Float; ignore otherwise.</span></span><br><span class="line"><span class="hljs-keyword">if</span> iv, ok := i.(*Float); ok &#123;</span><br><span class="line">iv.Add(delta)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个都是添加的方法,一个是value为Int的方法,一个是value为Float的方法,先找到这个是否有这个key,如果没有就创建这个key,设置value为一个默认值,然后将累加值再后面进行相加（如果没有这个值的话,默认值就是0）。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Deletes the given key from the map.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Map)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">v.keysMu.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> v.keysMu.Unlock()</span><br><span class="line">i := sort.SearchStrings(v.keys, key)</span><br><span class="line"><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(v.keys) &amp;&amp; key == v.keys[i] &#123;</span><br><span class="line">v.keys = <span class="hljs-built_in">append</span>(v.keys[:i], v.keys[i+<span class="hljs-number">1</span>:]...)</span><br><span class="line">v.m.Delete(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除这个key,首先也是用过插入排序的方法吗,该值在目标索引的位置,然后通过切片的方法,重新拼装一个keys,然后再从sync.map中删除这个keyvalue</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// String is a string variable, and satisfies the Var interface.</span></span><br><span class="line"><span class="hljs-keyword">type</span> String <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">s atomic.Value <span class="hljs-comment">// string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *String)</span> <span class="hljs-title">Value</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">p, _ := v.s.Load().(<span class="hljs-keyword">string</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// String implements the Var interface. To get the unquoted string</span></span><br><span class="line"><span class="hljs-comment">// use Value.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *String)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">s := v.Value()</span><br><span class="line">b, _ := json.Marshal(s)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *String)</span> <span class="hljs-title">Set</span><span class="hljs-params">(value <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">v.s.Store(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>String</code>结构体也很简单,同样也是实现了<code>Var</code>接口,每一个操作都是原子操作</p><h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Func implements Var by calling the function</span></span><br><span class="line"><span class="hljs-comment">// and formatting the returned value using JSON.</span></span><br><span class="line"><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Func)</span> <span class="hljs-title">Value</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Func)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line">v, _ := json.Marshal(f())</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Func通过调用函数并使用JSON格式化返回值来实现Var。类型Func Func（）接口{}</p><p>使用方法如下:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFunc</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">RemoveAll()</span><br><span class="line"><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125; = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>&#125;</span><br><span class="line">f := Func(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123; <span class="hljs-keyword">return</span> x &#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> s, exp := f.String(),<span class="hljs-string">`["a","b"]`</span>; s != exp &#123;</span><br><span class="line">t.Errorf(<span class="hljs-string">`f.String() = %q, want %q`</span>, s, exp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> v := f.Value(); !reflect.DeepEqual(v, x) &#123;</span><br><span class="line">t.Errorf(<span class="hljs-string">`f.Value() = %q, want %q`</span>, v, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="hljs-number">17</span></span><br><span class="line"><span class="hljs-keyword">if</span> s, exp := f.String(),<span class="hljs-string">`17`</span>; s != exp &#123;</span><br><span class="line">t.Errorf(<span class="hljs-string">`f.String() = %q, want %q`</span>, s, exp)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="All-published-variables"><a href="#All-published-variables" class="headerlink" title="All published variables"></a>All published variables</h2><p>下面是所有所有已发布的变量。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// All published variables.</span></span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">vars      sync.Map <span class="hljs-comment">// map[string]Var</span></span><br><span class="line">varKeysMu sync.RWMutex</span><br><span class="line">varKeys   []<span class="hljs-keyword">string</span> <span class="hljs-comment">// sorted</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Publish declares a named exported variable. This should be called from a</span></span><br><span class="line"><span class="hljs-comment">// package's init function when it creates its Vars. If the name is already</span></span><br><span class="line"><span class="hljs-comment">// registered then this will log.Panic.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Publish</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, v Var)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> _, dup := vars.LoadOrStore(name, v); dup &#123;</span><br><span class="line">log.Panicln(<span class="hljs-string">"Reuse of exported var name:"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">varKeysMu.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> varKeysMu.Unlock()</span><br><span class="line">varKeys = <span class="hljs-built_in">append</span>(varKeys, name)</span><br><span class="line">sort.Strings(varKeys)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Get retrieves a named exported variable. It returns nil if the name has</span></span><br><span class="line"><span class="hljs-comment">// not been registered.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">Var</span></span> &#123;</span><br><span class="line">i, _ := vars.Load(name)</span><br><span class="line">v, _ := i.(Var)</span><br><span class="line"><span class="hljs-keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一部分代码的作用就是一些公共遍历被存储的地方,vars是一个存储keyvalue的map,varKeysMu则是一个读写锁,varKeys则是一个keys的集合,这个和<code>Map</code>的数据类型很像。</p><ul><li><code>Publish(name string, v Var)</code>  Publish声明一个命名的导出变量。当包创建变量时,应该从包的init函数调用它。如果名称已经注册,则这将导致log.Panic。</li><li><code>Get(name string) Var</code>Get检索命名的导出变量。如果名称尚未注册,则返回nil。</li></ul><p>下面是创建新导出变量的工具函数。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Convenience functions for creating new exported variables.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewInt</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">Int</span></span> &#123;</span><br><span class="line">v := <span class="hljs-built_in">new</span>(Int)</span><br><span class="line">Publish(name, v)</span><br><span class="line"><span class="hljs-keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewFloat</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">Float</span></span> &#123;</span><br><span class="line">v := <span class="hljs-built_in">new</span>(Float)</span><br><span class="line">Publish(name, v)</span><br><span class="line"><span class="hljs-keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMap</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">Map</span></span> &#123;</span><br><span class="line">v := <span class="hljs-built_in">new</span>(Map).Init()</span><br><span class="line">Publish(name, v)</span><br><span class="line"><span class="hljs-keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewString</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">String</span></span> &#123;</span><br><span class="line">v := <span class="hljs-built_in">new</span>(String)</span><br><span class="line">Publish(name, v)</span><br><span class="line"><span class="hljs-keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Do(f func(KeyValue))</code>方法为每个导出的变量调用f。全局变量映射在迭代期间被锁定,但是现有的条目可以同时更新。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Do calls f for each exported variable.</span></span><br><span class="line"><span class="hljs-comment">// The global variable map is locked during the iteration,</span></span><br><span class="line"><span class="hljs-comment">// but existing entries may be concurrently updated.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Do</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(KeyValue)</span>)</span> &#123;</span><br><span class="line">varKeysMu.RLock()</span><br><span class="line"><span class="hljs-keyword">defer</span> varKeysMu.RUnlock()</span><br><span class="line"><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> varKeys &#123;</span><br><span class="line">val, _ := vars.Load(k)</span><br><span class="line">f(KeyValue&#123;k, val.(Var)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>expvarHandler(w http.ResponseWriter, r *http.Request)</code>,通过http服务器,查看当前所有的公共发布变量,同样保存了机器的命令行启动参数以及内存状态</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">expvarHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"application/json; charset=utf-8"</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="hljs-string">"&#123;\n"</span>)</span><br><span class="line">first := <span class="hljs-literal">true</span></span><br><span class="line">Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(kv KeyValue)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> !first &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="hljs-string">",\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">first = <span class="hljs-literal">false</span></span><br><span class="line">fmt.Fprintf(w, <span class="hljs-string">"%q: %s"</span>, kv.Key, kv.Value)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Fprintf(w, <span class="hljs-string">"\n&#125;\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Handler returns the expvar HTTP Handler.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// This is only needed to install the handler in a non-standard location.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handler</span><span class="hljs-params">()</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> http.HandlerFunc(expvarHandler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cmdline</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> os.Args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">memstats</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">stats := <span class="hljs-built_in">new</span>(runtime.MemStats)</span><br><span class="line">runtime.ReadMemStats(stats)</span><br><span class="line"><span class="hljs-keyword">return</span> *stats</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/debug/vars"</span>, expvarHandler)</span><br><span class="line">Publish(<span class="hljs-string">"cmdline"</span>, Func(cmdline))</span><br><span class="line">Publish(<span class="hljs-string">"memstats"</span>, Func(memstats))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init()</code>会初始化的将公共变量发布到http服务器,如果服务器开启的话就可以访问到这些信息 。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>个人认为expvar是一个很有用的工具包,可以替代繁琐的atomic包下的内容,同时map也是,并且<code>String（）</code>方法返回的json字符串也是很有用的。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go源码分析(3) - io</title>
      <link href="/2019/11/23/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(3)-io/"/>
      <url>/2019/11/23/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(3)-io/</url>
      
        <content type="html"><![CDATA[<p>io包下分为io和iotuil,提供了缓冲io和非缓冲io,拷贝文件等常见操作。</p><a id="more"></a><h2 id="io-go"><a href="#io-go" class="headerlink" title="io.go"></a>io.go</h2><p>提供了四种基本通用api</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Writer <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Write(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Closer <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Close() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Seeker <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Seek(offset <span class="hljs-keyword">int64</span>, whence <span class="hljs-keyword">int</span>) (<span class="hljs-keyword">int64</span>, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Reader</code>接口提供了读操作接口</li><li><code>Writer</code>接口提供了写操作接口</li><li><code>Closer</code>接口关闭当前io操作以及资源释放</li><li><code>Seeker</code>接口将当前读取或者移动指针移动到特定到位置</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ReadWriter is the interface that groups the basic Read and Write methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ReadCloser is the interface that groups the basic Read and Close methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReadCloser <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Closer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// WriteCloser is the interface that groups the basic Write and Close methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> WriteCloser <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Writer</span><br><span class="line">Closer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ReadWriteCloser is the interface that groups the basic Read, Write and Close methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReadWriteCloser <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Writer</span><br><span class="line">Closer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ReadSeeker is the interface that groups the basic Read and Seek methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReadSeeker <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Seeker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// WriteSeeker is the interface that groups the basic Write and Seek methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> WriteSeeker <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Writer</span><br><span class="line">Seeker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ReadWriteSeeker is the interface that groups the basic Read, Write and Seek methods.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReadWriteSeeker <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Reader</span><br><span class="line">Writer</span><br><span class="line">Seeker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上几个接口都是对几种基本接口的组合</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ReaderFrom is the interface that wraps the ReadFrom method.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// ReadFrom reads data from r until EOF or error.</span></span><br><span class="line"><span class="hljs-comment">// The return value n is the number of bytes read.</span></span><br><span class="line"><span class="hljs-comment">// Any error except io.EOF encountered during the read is also returned.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The Copy function uses ReaderFrom if available.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReaderFrom <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">ReadFrom(r Reader) (n <span class="hljs-keyword">int64</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// WriterTo is the interface that wraps the WriteTo method.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// WriteTo writes data to w until there's no more data to write or</span></span><br><span class="line"><span class="hljs-comment">// when an error occurs. The return value n is the number of bytes</span></span><br><span class="line"><span class="hljs-comment">// written. Any error encountered during the write is also returned.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The Copy function uses WriterTo if available.</span></span><br><span class="line"><span class="hljs-keyword">type</span> WriterTo <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">WriteTo(w Writer) (n <span class="hljs-keyword">int64</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ReaderFrom</code>从一个reader读取内容</li><li><code>WriterTo</code>将当前当前writer的内容读取到另一个w中</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ReaderAt is the interface that wraps the basic ReadAt method.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// ReadAt reads len(p) bytes into p starting at offset off in the</span></span><br><span class="line"><span class="hljs-comment">// underlying input source. It returns the number of bytes</span></span><br><span class="line"><span class="hljs-comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// When ReadAt returns n &lt; len(p), it returns a non-nil error</span></span><br><span class="line"><span class="hljs-comment">// explaining why more bytes were not returned. In this respect,</span></span><br><span class="line"><span class="hljs-comment">// ReadAt is stricter than Read.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Even if ReadAt returns n &lt; len(p), it may use all of p as scratch</span></span><br><span class="line"><span class="hljs-comment">// space during the call. If some data is available but not len(p) bytes,</span></span><br><span class="line"><span class="hljs-comment">// ReadAt blocks until either all the data is available or an error occurs.</span></span><br><span class="line"><span class="hljs-comment">// In this respect ReadAt is different from Read.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// If the n = len(p) bytes returned by ReadAt are at the end of the</span></span><br><span class="line"><span class="hljs-comment">// input source, ReadAt may return either err == EOF or err == nil.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// If ReadAt is reading from an input source with a seek offset,</span></span><br><span class="line"><span class="hljs-comment">// ReadAt should not affect nor be affected by the underlying</span></span><br><span class="line"><span class="hljs-comment">// seek offset.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Clients of ReadAt can execute parallel ReadAt calls on the</span></span><br><span class="line"><span class="hljs-comment">// same input source.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="hljs-keyword">type</span> ReaderAt <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">ReadAt(p []<span class="hljs-keyword">byte</span>, off <span class="hljs-keyword">int64</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// WriterAt is the interface that wraps the basic WriteAt method.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// WriteAt writes len(p) bytes from p to the underlying data stream</span></span><br><span class="line"><span class="hljs-comment">// at offset off. It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class="line"><span class="hljs-comment">// and any error encountered that caused the write to stop early.</span></span><br><span class="line"><span class="hljs-comment">// WriteAt must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// If WriteAt is writing to a destination with a seek offset,</span></span><br><span class="line"><span class="hljs-comment">// WriteAt should not affect nor be affected by the underlying</span></span><br><span class="line"><span class="hljs-comment">// seek offset.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Clients of WriteAt can execute parallel WriteAt calls on the same</span></span><br><span class="line"><span class="hljs-comment">// destination if the ranges do not overlap.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="hljs-keyword">type</span> WriterAt <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">WriteAt(p []<span class="hljs-keyword">byte</span>, off <span class="hljs-keyword">int64</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从指定偏移量开始读取或者写</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// StringWriter is the interface that wraps the WriteString method.</span></span><br><span class="line"><span class="hljs-keyword">type</span> StringWriter <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">WriteString(s <span class="hljs-keyword">string</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// WriteString writes the contents of the string s to w, which accepts a slice of bytes.</span></span><br><span class="line"><span class="hljs-comment">// If w implements StringWriter, its WriteString method is invoked directly.</span></span><br><span class="line"><span class="hljs-comment">// Otherwise, w.Write is called exactly once.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteString</span><span class="hljs-params">(w Writer, s <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> sw, ok := w.(StringWriter); ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> sw.WriteString(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> w.Write([]<span class="hljs-keyword">byte</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WriteString</code>可以将字符串写入<code>Writer</code>中,如果该<code>Writer</code>是<code>WriteString</code>类型,则会调用该对象自己的<code>WriteString</code>方法</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadAtLeast</span><span class="hljs-params">(r Reader, buf []<span class="hljs-keyword">byte</span>, min <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) &lt; min &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, ErrShortBuffer</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> n &lt; min &amp;&amp; err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> nn <span class="hljs-keyword">int</span></span><br><span class="line">nn, err = r.Read(buf[n:])</span><br><span class="line">n += nn</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n &gt;= min &#123;</span><br><span class="line">err = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; err == EOF &#123;</span><br><span class="line">err = ErrUnexpectedEOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果当前buf长度小于最少读取的字节,返回太短的buffer错误</li><li>循环读取当前reader中的内容到buffer,比较是已经读取到min长度</li><li>如果当前读取的长度小于min并且错误等于EOF,代表reader里面没有足够对长度,抛出EOF错误</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CopyN</span><span class="hljs-params">(dst Writer, src Reader, n <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(written <span class="hljs-keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">written, err = Copy(dst, LimitReader(src, n))</span><br><span class="line"><span class="hljs-keyword">if</span> written == n &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> written &lt; n &amp;&amp; err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-comment">// src stopped early; must have been EOF.</span></span><br><span class="line">err = EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Copy</span><span class="hljs-params">(dst Writer, src Reader)</span> <span class="hljs-params">(written <span class="hljs-keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> copyBuffer(dst, src, <span class="hljs-literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CopyBuffer</span><span class="hljs-params">(dst Writer, src Reader, buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(written <span class="hljs-keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> buf != <span class="hljs-literal">nil</span> &amp;&amp; <span class="hljs-built_in">len</span>(buf) == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"empty buffer in io.CopyBuffer"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> copyBuffer(dst, src, buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyBuffer</span><span class="hljs-params">(dst Writer, src Reader, buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(written <span class="hljs-keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// If the reader has a WriteTo method, use it to do the copy.</span></span><br><span class="line"><span class="hljs-comment">// Avoids an allocation and a copy.</span></span><br><span class="line"><span class="hljs-keyword">if</span> wt, ok := src.(WriterTo); ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> wt.WriteTo(dst)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Similarly, if the writer has a ReadFrom method, use it to do the copy.</span></span><br><span class="line"><span class="hljs-keyword">if</span> rt, ok := dst.(ReaderFrom); ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> rt.ReadFrom(src)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> buf == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">size := <span class="hljs-number">32</span> * <span class="hljs-number">1024</span></span><br><span class="line"><span class="hljs-keyword">if</span> l, ok := src.(*LimitedReader); ok &amp;&amp; <span class="hljs-keyword">int64</span>(size) &gt; l.N &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> l.N &lt; <span class="hljs-number">1</span> &#123;</span><br><span class="line">size = <span class="hljs-number">1</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">size = <span class="hljs-keyword">int</span>(l.N)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">nr, er := src.Read(buf)</span><br><span class="line"><span class="hljs-keyword">if</span> nr &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">nw, ew := dst.Write(buf[<span class="hljs-number">0</span>:nr])</span><br><span class="line"><span class="hljs-keyword">if</span> nw &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">written += <span class="hljs-keyword">int64</span>(nw)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> ew != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = ew</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> nr != nw &#123;</span><br><span class="line">err = ErrShortWrite</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> er != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> er != EOF &#123;</span><br><span class="line">err = er</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> written, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>CopyN(dst Writer, src Reader, n int64) (written int64, err error)</code>调用<code>Copy</code>方法并包装当前reader为LimitReader</li><li><code>Copy(dst Writer, src Reader) (written int64, err error)</code>调用<code>copyBuffer(dst, src, nil)</code>方法传入buf为nil,不是用缓冲区</li><li><code>copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error)</code>是这些方法中最关键的一个方法<ol><li>如果当前reader方法实现WriterTo方法,则直接调用</li><li>如果当前writer方法实现ReadFrom方法,则直接调用</li><li>如果buf为空,处理直接为Copy或者CopyN的情况<ol><li>首先如果强转为<code>LimitedReader</code>方法,如果可以则直接将buf的大小设置为LimitedReader.N的大小</li><li>buf大小为32*1024,既为32mb大小</li></ol></li><li>循环从read中读取到buf,然后从buf中写入到writer中,reader中的数据被读取完毕,或者出现读写大小不一样的错误</li></ol></li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LimitReader returns a Reader that reads from r</span></span><br><span class="line"><span class="hljs-comment">// but stops with EOF after n bytes.</span></span><br><span class="line"><span class="hljs-comment">// The underlying implementation is a *LimitedReader.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LimitReader</span><span class="hljs-params">(r Reader, n <span class="hljs-keyword">int64</span>)</span> <span class="hljs-title">Reader</span></span> &#123; <span class="hljs-keyword">return</span> &amp;LimitedReader&#123;r, n&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A LimitedReader reads from R but limits the amount of</span></span><br><span class="line"><span class="hljs-comment">// data returned to just N bytes. Each call to Read</span></span><br><span class="line"><span class="hljs-comment">// updates N to reflect the new amount remaining.</span></span><br><span class="line"><span class="hljs-comment">// Read returns EOF when N &lt;= 0 or when the underlying R returns EOF.</span></span><br><span class="line"><span class="hljs-keyword">type</span> LimitedReader <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">R Reader <span class="hljs-comment">// underlying reader</span></span><br><span class="line">N <span class="hljs-keyword">int64</span>  <span class="hljs-comment">// max bytes remaining</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *LimitedReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> l.N &lt;= <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(p)) &gt; l.N &#123;</span><br><span class="line">p = p[<span class="hljs-number">0</span>:l.N]</span><br><span class="line">&#125;</span><br><span class="line">n, err = l.R.Read(p)</span><br><span class="line">l.N -= <span class="hljs-keyword">int64</span>(n)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限制被读取的大小,通过切片的方式来限制buf的大小</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// NewSectionReader returns a SectionReader that reads from r</span></span><br><span class="line"><span class="hljs-comment">// starting at offset off and stops with EOF after n bytes.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSectionReader</span><span class="hljs-params">(r ReaderAt, off <span class="hljs-keyword">int64</span>, n <span class="hljs-keyword">int64</span>)</span> *<span class="hljs-title">SectionReader</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;SectionReader&#123;r, off, off, off + n&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// SectionReader implements Read, Seek, and ReadAt on a section</span></span><br><span class="line"><span class="hljs-comment">// of an underlying ReaderAt.</span></span><br><span class="line"><span class="hljs-keyword">type</span> SectionReader <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">r     ReaderAt</span><br><span class="line">base  <span class="hljs-keyword">int64</span></span><br><span class="line">off   <span class="hljs-keyword">int64</span></span><br><span class="line">limit <span class="hljs-keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SectionReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> s.off &gt;= s.limit &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> max := s.limit - s.off; <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(p)) &gt; max &#123;</span><br><span class="line">p = p[<span class="hljs-number">0</span>:max]</span><br><span class="line">&#125;</span><br><span class="line">n, err = s.r.ReadAt(p, s.off)</span><br><span class="line">s.off += <span class="hljs-keyword">int64</span>(n)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> errWhence = errors.New(<span class="hljs-string">"Seek: invalid whence"</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> errOffset = errors.New(<span class="hljs-string">"Seek: invalid offset"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SectionReader)</span> <span class="hljs-title">Seek</span><span class="hljs-params">(offset <span class="hljs-keyword">int64</span>, whence <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">switch</span> whence &#123;</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, errWhence</span><br><span class="line"><span class="hljs-keyword">case</span> SeekStart:</span><br><span class="line">offset += s.base</span><br><span class="line"><span class="hljs-keyword">case</span> SeekCurrent:</span><br><span class="line">offset += s.off</span><br><span class="line"><span class="hljs-keyword">case</span> SeekEnd:</span><br><span class="line">offset += s.limit</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> offset &lt; s.base &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, errOffset</span><br><span class="line">&#125;</span><br><span class="line">s.off = offset</span><br><span class="line"><span class="hljs-keyword">return</span> offset - s.base, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SectionReader)</span> <span class="hljs-title">ReadAt</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>, off <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> off &lt; <span class="hljs-number">0</span> || off &gt;= s.limit-s.base &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br><span class="line">off += s.base</span><br><span class="line"><span class="hljs-keyword">if</span> max := s.limit - off; <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(p)) &gt; max &#123;</span><br><span class="line">p = p[<span class="hljs-number">0</span>:max]</span><br><span class="line">n, err = s.r.ReadAt(p, off)</span><br><span class="line"><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> s.r.ReadAt(p, off)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Size returns the size of the section in bytes.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SectionReader)</span> <span class="hljs-title">Size</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123; <span class="hljs-keyword">return</span> s.limit - s.base &#125;</span><br></pre></td></tr></table></figure><p><code>SectionReader</code>部分读取,<code>base</code>是基础的读取的位置,<code>off</code>为偏移量,<code>limit</code>限制的最大偏移量.</p><ul><li><code>Seek(offset int64, whence int) (int64, error)</code>方法中<code>whence</code>是一个枚举类型有三个值<code>SeekStart</code>,<code>SeekCurrent</code>,<code>SeekEnd</code>从开头,当前位置,和结尾位置作为初始下标,返回寻找的下表位置</li><li><code>(s *SectionReader) ReadAt(p []byte, off int64) (n int, err error)</code>从指定位置开始读取,如果当前偏移量超出了限制,就返回EOF,并且如果结尾的数量小于当前buf的大小,就对buf进行重新切片,再调用reader的<code>ReadAt（）</code>方法防止超出。</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// TeeReader returns a Reader that writes to w what it reads from r.</span></span><br><span class="line"><span class="hljs-comment">// All reads from r performed through it are matched with</span></span><br><span class="line"><span class="hljs-comment">// corresponding writes to w. There is no internal buffering -</span></span><br><span class="line"><span class="hljs-comment">// the write must complete before the read completes.</span></span><br><span class="line"><span class="hljs-comment">// Any error encountered while writing is reported as a read error.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TeeReader</span><span class="hljs-params">(r Reader, w Writer)</span> <span class="hljs-title">Reader</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;teeReader&#123;r, w&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> teeReader <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">r Reader</span><br><span class="line">w Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *teeReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">n, err = t.r.Read(p)</span><br><span class="line"><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> n, err := t.w.Write(p[:n]); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> n, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将buffer中的所有内容全部都传输入到writer中</p><h2 id="multi-go"><a href="#multi-go" class="headerlink" title="multi.go"></a>multi.go</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> eofReader <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(eofReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个eofReader实现reader接口作为EOF处理</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> multiReader <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">readers []Reader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mr *multiReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(mr.readers) &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Optimization to flatten nested multiReaders (Issue 13558).</span></span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(mr.readers) == <span class="hljs-number">1</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> r, ok := mr.readers[<span class="hljs-number">0</span>].(*multiReader); ok &#123;</span><br><span class="line">mr.readers = r.readers</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n, err = mr.readers[<span class="hljs-number">0</span>].Read(p)</span><br><span class="line"><span class="hljs-keyword">if</span> err == EOF &#123;</span><br><span class="line"><span class="hljs-comment">// Use eofReader instead of nil to avoid nil panic</span></span><br><span class="line"><span class="hljs-comment">// after performing flatten (Issue 18232).</span></span><br><span class="line">mr.readers[<span class="hljs-number">0</span>] = eofReader&#123;&#125; <span class="hljs-comment">// permit earlier GC</span></span><br><span class="line">mr.readers = mr.readers[<span class="hljs-number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> || err != EOF &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err == EOF &amp;&amp; <span class="hljs-built_in">len</span>(mr.readers) &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Don't return EOF yet. More readers remain.</span></span><br><span class="line">err = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// MultiReader returns a Reader that's the logical concatenation of</span></span><br><span class="line"><span class="hljs-comment">// the provided input readers. They're read sequentially. Once all</span></span><br><span class="line"><span class="hljs-comment">// inputs have returned EOF, Read will return EOF.  If any of the readers</span></span><br><span class="line"><span class="hljs-comment">// return a non-nil, non-EOF error, Read will return that error.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MultiReader</span><span class="hljs-params">(readers ...Reader)</span> <span class="hljs-title">Reader</span></span> &#123;</span><br><span class="line">r := <span class="hljs-built_in">make</span>([]Reader, <span class="hljs-built_in">len</span>(readers))</span><br><span class="line"><span class="hljs-built_in">copy</span>(r, readers)</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;multiReader&#123;r&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>multiReader</code>是一个多readers多读取的一个结构体,实现了reader接口,构造方法为传入多个reader,调用系统内置<code>copy()</code>方法防止该multireader对原始对reader进行修改。</p><ul><li><code>Read(p []byte) (n int, err error)</code>,查看构造的reader是否有可用数量的reader,如果构造的reader本身也<code>multiReader</code>类型,那么将当前reader解包添加到readers中,然后调用<code>readers[0]</code>的<code>Read(p)</code>方法,返回结果之后,如果已经读取到结尾,当前reader从readers中剔除,但是这里不用nil来避免panic,而是使用一个<code>eofReader</code>来表示这个reader已经不可用了,同时加快GC。继续判断如果读取的字节是大于0或者错误不是是EOF就直接返回。实质上mulitReader就是一个序列化的读取reader,从<code>readers[0]</code>读取到<code>readers[n]</code>。</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> multiWriter <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">writers []Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *multiWriter)</span> <span class="hljs-title">Write</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> t.writers &#123;</span><br><span class="line">n, err = w.Write(p)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n != <span class="hljs-built_in">len</span>(p) &#123;</span><br><span class="line">err = ErrShortWrite</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p), <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> _ StringWriter = (*multiWriter)(<span class="hljs-literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *multiWriter)</span> <span class="hljs-title">WriteString</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> p []<span class="hljs-keyword">byte</span> <span class="hljs-comment">// lazily initialized if/when needed</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> t.writers &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> sw, ok := w.(StringWriter); ok &#123;</span><br><span class="line">n, err = sw.WriteString(s)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> p == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">p = []<span class="hljs-keyword">byte</span>(s)</span><br><span class="line">&#125;</span><br><span class="line">n, err = w.Write(p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n != <span class="hljs-built_in">len</span>(s) &#123;</span><br><span class="line">err = ErrShortWrite</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s), <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// MultiWriter creates a writer that duplicates its writes to all the</span></span><br><span class="line"><span class="hljs-comment">// provided writers, similar to the Unix tee(1) command.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Each write is written to each listed writer, one at a time.</span></span><br><span class="line"><span class="hljs-comment">// If a listed writer returns an error, that overall write operation</span></span><br><span class="line"><span class="hljs-comment">// stops and returns the error; it does not continue down the list.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MultiWriter</span><span class="hljs-params">(writers ...Writer)</span> <span class="hljs-title">Writer</span></span> &#123;</span><br><span class="line">allWriters := <span class="hljs-built_in">make</span>([]Writer, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(writers))</span><br><span class="line"><span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> writers &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> mw, ok := w.(*multiWriter); ok &#123;</span><br><span class="line">allWriters = <span class="hljs-built_in">append</span>(allWriters, mw.writers...)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">allWriters = <span class="hljs-built_in">append</span>(allWriters, w)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;multiWriter&#123;allWriters&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>multiWriter</code>和<code>multiReader</code>的实现过程非常相似,从<code>writers[0]</code>顺序写入到<code>writers[n]</code>中。</p><h2 id="pipe-go"><a href="#pipe-go" class="headerlink" title="pipe.go"></a>pipe.go</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// atomicError is a type-safe atomic value for errors.</span></span><br><span class="line"><span class="hljs-comment">// We use a struct&#123; error &#125; to ensure consistent use of a concrete type.</span></span><br><span class="line"><span class="hljs-keyword">type</span> atomicError <span class="hljs-keyword">struct</span>&#123; v atomic.Value &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *atomicError)</span> <span class="hljs-title">Store</span><span class="hljs-params">(err error)</span></span> &#123;</span><br><span class="line">a.v.Store(<span class="hljs-keyword">struct</span>&#123; error &#125;&#123;err&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *atomicError)</span> <span class="hljs-title">Load</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">err, _ := a.v.Load().(<span class="hljs-keyword">struct</span>&#123; error &#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> err.error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ErrClosedPipe is the error used for read or write operations on a closed pipe.</span></span><br><span class="line"><span class="hljs-keyword">var</span> ErrClosedPipe = errors.New(<span class="hljs-string">"io: read/write on closed pipe"</span>)</span><br></pre></td></tr></table></figure><p>该文件定一个原子错误的结构体,这个结构体是没有向外暴露的,仅内部使用。然后定一个关闭pipe的错误</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A pipe is the shared pipe structure underlying PipeReader and PipeWriter.</span></span><br><span class="line"><span class="hljs-keyword">type</span> pipe <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">wrMu sync.Mutex <span class="hljs-comment">// Serializes Write operations</span></span><br><span class="line">wrCh <span class="hljs-keyword">chan</span> []<span class="hljs-keyword">byte</span></span><br><span class="line">rdCh <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line">once sync.Once <span class="hljs-comment">// Protects closing done</span></span><br><span class="line">done <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line">rerr atomicError</span><br><span class="line">werr atomicError</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>wrMu</code>piple需要保持序列化,所需要加锁</li><li><code>wrCh</code>写管道</li><li><code>rdCh</code>读管道,表示需要读取多少字节</li><li><code>once</code>让关闭只被执行一次的操作</li><li><code>done</code>监听是否关闭</li><li><code>rerr</code>读错误</li><li><code>werr</code>写错误</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">Read</span><span class="hljs-params">(b []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-p.done:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, p.readCloseError()</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> bw := &lt;-p.wrCh:</span><br><span class="line">nr := <span class="hljs-built_in">copy</span>(b, bw)</span><br><span class="line">p.rdCh &lt;- nr</span><br><span class="line"><span class="hljs-keyword">return</span> nr, <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-p.done:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, p.readCloseError()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断管道是否被关闭,如果关闭直接返回关闭的错误,从写管道中读取内容,然后将管道中的内容<code>copy（）</code>出来,防止元数据发生改变后读取后的内容也跟着改变了,然后将当前读取了多少字节给读通道,在其中要判断是否管道是否发生关闭,防止这个时候管道被关闭。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">readCloseError</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">rerr := p.rerr.Load()</span><br><span class="line"><span class="hljs-keyword">if</span> werr := p.werr.Load(); rerr == <span class="hljs-literal">nil</span> &amp;&amp; werr != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> werr</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ErrClosedPipe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回读关闭错误</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">CloseRead</span><span class="hljs-params">(err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = ErrClosedPipe</span><br><span class="line">&#125;</span><br><span class="line">p.rerr.Store(err)</span><br><span class="line">p.once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-built_in">close</span>(p.done) &#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从读错误里面存储关闭管道的错误,然后调用close方法关闭p.done,来通知关闭了管道,使用once.Do()来防止被关闭多次,导致报错</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">Write</span><span class="hljs-params">(b []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-p.done:</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, p.writeCloseError()</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">p.wrMu.Lock()</span><br><span class="line"><span class="hljs-keyword">defer</span> p.wrMu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> once := <span class="hljs-literal">true</span>; once || <span class="hljs-built_in">len</span>(b) &gt; <span class="hljs-number">0</span>; once = <span class="hljs-literal">false</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> p.wrCh &lt;- b:</span><br><span class="line">nw := &lt;-p.rdCh</span><br><span class="line">b = b[nw:]</span><br><span class="line">n += nw</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-p.done:</span><br><span class="line"><span class="hljs-keyword">return</span> n, p.writeCloseError()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写方法依然后是先判断管道有没有被关闭,如果没有关闭就对整个方法加速,然后将bytes写入到写管道中,然后从读管道中得到读取数量,作为下一次buf的开始位置,直到byte长度为0,也就是写入完毕,或者管道被关闭。最后返回当前写入的数量。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">writeCloseError</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">werr := p.werr.Load()</span><br><span class="line"><span class="hljs-keyword">if</span> rerr := p.rerr.Load(); werr == <span class="hljs-literal">nil</span> &amp;&amp; rerr != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> rerr</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ErrClosedPipe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *pipe)</span> <span class="hljs-title">CloseWrite</span><span class="hljs-params">(err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = EOF</span><br><span class="line">&#125;</span><br><span class="line">p.werr.Store(err)</span><br><span class="line">p.once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-built_in">close</span>(p.done) &#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这两个方法和读操作是类似的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Go中的io操作有很多精妙的操作,比如不将数组中的对象置为nil,避免panic,使用另一个对象来代替,从而使原来数组的对象没有被引用到,使其防止到白色区域,下一次的时候就可以被GC回收掉。然后该文件定义了相当多的接口,很多都没有在这个包下实现,大多是在其他包中进行实现,该包没有承担过多的责任,使其扩展起来也可以很容易明白。定义了很多工具和通用的一些结构体,多个readers的类,管道,部分阅读器,TeeReader等类型。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go源码分析(2) - errors</title>
      <link href="/2019/11/19/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(2)-errors/"/>
      <url>/2019/11/19/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(2)-errors/</url>
      
        <content type="html"><![CDATA[<p>错误类型处理在go中是非常重要的,但是代码不多,本文将分析源码内容。</p><a id="more"></a><h2 id="errors-go"><a href="#errors-go" class="headerlink" title="errors.go"></a>errors.go</h2><p>error是一个内建的类型,实现了error接口</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> error <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>errors包下通过New创建一个error对象,事实上返回的就是一个实现了error接口类型的结构体,其中Error（）返回了该错误信息的内容。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// New returns an error that formats as the given text.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(text <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// errorString is a trivial implementation of error.</span></span><br><span class="line"><span class="hljs-keyword">type</span> errorString <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">s <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *errorString)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> e.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="warp-go"><a href="#warp-go" class="headerlink" title="warp.go"></a>warp.go</h2><p>在warp文件下,有三个方法,分别为<code>Unwrap(err error) error</code>,<code>Is(err, target error) bool</code>,<code>As(err error, target interface{}) bool</code><br>,都是在1.13新加入的方法。</p><p><code>Unwrap(err error) error</code>使用该方法,需要传入的<code>error</code>类型实现<code>Unwrap() error</code></p><ul><li>通过判断是否实现了<code>Unwrap() error</code><ul><li>是,调用Unwrap()方法,返回err</li><li>否,返回nil</li></ul></li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Unwrap returns the result of calling the Unwrap method on err, if err's</span></span><br><span class="line"><span class="hljs-comment">// type contains an Unwrap method returning error.</span></span><br><span class="line"><span class="hljs-comment">// Otherwise, Unwrap returns nil.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Unwrap</span><span class="hljs-params">(err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">u, ok := err.(<span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Unwrap() error</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> u.Unwrap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Is(err, target error) bool</code>判断该错误类型是否和目标类型是一致类型</p><ol><li>如果目标类型为nil,则判断被比较类型是否也是nil</li><li>通过一个for循环不断判断<ol><li>如果目标类型能被比较并且被比较类型和目标类型值相等就返回true</li><li>如果被比较类型实现了<code>Is(error) bool</code>接口,则调用接口方法,判断是否是相等的</li><li>解包被比较类型,继续下一轮循环,或者解包到最里层都没有寻找到被比较类型与目标类型可匹配</li></ol></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Is reports whether any error in err's chain matches target.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// An error is considered to match a target if it is equal to that target or if</span></span><br><span class="line"><span class="hljs-comment">// it implements a method Is(error) bool such that Is(target) returns true.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Is</span><span class="hljs-params">(err, target error)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> target == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err == target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isComparable := reflectlite.TypeOf(target).Comparable()</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> isComparable &amp;&amp; err == target &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> x, ok := err.(<span class="hljs-keyword">interface</span>&#123; Is(error) <span class="hljs-keyword">bool</span> &#125;); ok &amp;&amp; x.Is(target) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> consider supporing target.Is(err). This would allow</span></span><br><span class="line"><span class="hljs-comment">// user-definable predicates, but also may allow for coping with sloppy</span></span><br><span class="line"><span class="hljs-comment">// APIs, thereby making it easier to get away with them.</span></span><br><span class="line"><span class="hljs-keyword">if</span> err = Unwrap(err); err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>As(err error, target interface{}) bool</code>As方法应将目标设置为其值,如果err匹配目标指向的类型,则返回true。</p><ol><li>如果目标类型为nil,或者不是指针类型,或者该类型没有实现error接口,则panic</li><li>通过一个for循环不断判断<ol><li>如果被比较类型能被目标类型赋值,就进行赋值,返回true</li><li>如果被比较类型实现了<code>As(interface{}) bool</code>接口,则调用接口方法,进行赋值,并返回true</li><li>解包被比较类型,继续下一轮循环,或者解包到最里层都没有寻找到实现的As方法都没有赋值成功</li></ol></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// As finds the first error in err's chain that matches the type to which target</span></span><br><span class="line"><span class="hljs-comment">// points, and if so, sets the target to its value and returns true. An error</span></span><br><span class="line"><span class="hljs-comment">// matches a type if it is assignable to the target type, or if it has a method</span></span><br><span class="line"><span class="hljs-comment">// As(interface&#123;&#125;) bool such that As(target) returns true. As will panic if</span></span><br><span class="line"><span class="hljs-comment">// target is not a non-nil pointer to a type which implements error or is of</span></span><br><span class="line"><span class="hljs-comment">// interface type. As returns false if error is nil.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The As method should set the target to its value and return true if err</span></span><br><span class="line"><span class="hljs-comment">// matches the type to which target points.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">As</span><span class="hljs-params">(err error, target <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> target == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"errors: target cannot be nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">val := reflectlite.ValueOf(target)</span><br><span class="line">typ := val.Type()</span><br><span class="line"><span class="hljs-keyword">if</span> typ.Kind() != reflectlite.Ptr || val.IsNil() &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"errors: target must be a non-nil pointer"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> e := typ.Elem(); e.Kind() != reflectlite.Interface &amp;&amp; !e.Implements(errorType) &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"errors: *target must be interface or implement error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">targetType := typ.Elem()</span><br><span class="line"><span class="hljs-keyword">for</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> reflectlite.TypeOf(err).AssignableTo(targetType) &#123;</span><br><span class="line">val.Elem().Set(reflectlite.ValueOf(err))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> x, ok := err.(<span class="hljs-keyword">interface</span>&#123; As(<span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">bool</span> &#125;); ok &amp;&amp; x.As(target) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">err = Unwrap(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> errorType = reflectlite.TypeOf((*error)(<span class="hljs-literal">nil</span>)).Elem()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go 1.13中的错误处理</title>
      <link href="/2019/11/18/Go/Golang%E8%AF%91%E6%96%87/Go1.13%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2019/11/18/Go/Golang%E8%AF%91%E6%96%87/Go1.13%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在过去的十年中, Go的errors are values的理念在编码实践中运行得也很良好。</p><a id="more"></a><p>尽管标准库对错误处理的的支持很少（只有errors.New和fmt.Errorf函数可以用来构造仅包含字符串消息的错误）,但是内置的error接口使Go程序员可以添加所需的任何信息。它所需要的只是一个实现Error方法的类型：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> QueryError <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Query <span class="hljs-keyword">string</span></span><br><span class="line">    Err   error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *QueryError)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123; <span class="hljs-keyword">return</span> e.Query + <span class="hljs-string">": "</span> + e.Err.Error() &#125;</span><br></pre></td></tr></table></figure><p>像这样的错误类型无处不在,它们存储的信息变化很大,从时间戳到文件名再到服务器地址。通常,该信息包括另一个较低级别的错误以提供其他上下文信息。</p><p>在Go代码中,使用一个包含了另一个错误的错误类型的模式十分普遍,以至于经过广泛讨论后,Go 1.13为其添加了明确的支持。这篇文章描述了标准库提供的支持：errors包中的三个新功能,以及fmt.Errorf中添加的新格式化动词。</p><p>在详细描述这些变化之前,让我们先回顾一下在Go语言的早期版本中如何检查和构造错误。</p><h1 id="一、Go-1-13版本之前的错误处理"><a href="#一、Go-1-13版本之前的错误处理" class="headerlink" title="一、Go 1.13版本之前的错误处理"></a>一、Go 1.13版本之前的错误处理</h1><h2 id="检查错误"><a href="#检查错误" class="headerlink" title="检查错误"></a>检查错误</h2><p>错误是值(errors are values)。程序通过几种方式基于这些值来做出决策。最常见的是通过与nil的比较来确定操作是否失败。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 出错了!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时我们将错误与已知的哨兵值(sentinel value)进行比较来查看是否发生了特定错误。比如：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> ErrNotFound = errors.New(<span class="hljs-string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err == ErrNotFound &#123;</span><br><span class="line">    <span class="hljs-comment">// something wasn't found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误值可以是满足语言定义的error 接口的任何类型。程序可以使用类型断言(type assertion)或类型开关(type switch)来判断错误值是否可被视为特定的错误类型。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> NotFoundError <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *NotFoundError)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123; <span class="hljs-keyword">return</span> e.Name + <span class="hljs-string">": not found"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> e, ok := err.(*NotFoundError); ok &#123;</span><br><span class="line">    <span class="hljs-comment">// e.Name wasn't found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加信息"><a href="#添加信息" class="headerlink" title="添加信息"></a>添加信息</h2><p>函数通常在将错误向上传递给调用堆栈时添加额外错误信息,例如对错误发生时所发生情况的简短描述。一种简单的方法是构造一个新错误,并在其中包括上一个错误：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"decompress %v: %v"</span>, name, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用fmt.Errorf创建的新错误将丢弃原始错误中的所有内容（文本除外）。就像我们在前面所看到的QueryError那样,有时我们可能想要定义一个包含基础错误的新错误类型,并将其保存下来以供代码检查。我们再次来看一下QueryError：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> QueryError <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Query <span class="hljs-keyword">string</span></span><br><span class="line">    Err   error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序可以查看一个*QueryError值的内部以根据潜在的错误进行决策。有时您会看到称为“展开”错误的信息。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> e, ok := err.(*QueryError); ok &amp;&amp; e.Err == ErrPermission &#123;</span><br><span class="line">    <span class="hljs-comment">// query failed because of a permission problem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准库中的os.PathError类型就是另外一个在错误中包含另一个错误的示例。</p><h1 id="二、Go-1-13版本的错误处理"><a href="#二、Go-1-13版本的错误处理" class="headerlink" title="二、Go 1.13版本的错误处理"></a>二、Go 1.13版本的错误处理</h1><h2 id="Unwrap方法"><a href="#Unwrap方法" class="headerlink" title="Unwrap方法"></a>Unwrap方法</h2><p>Go 1.13在errors和fmt标准库包中引入了新功能以简化处理包含其他错误的错误。其中最重要的不是改变,而是一个约定：包含另一个错误的错误可以实现Unwrap方法来返回所包含的底层错误。如果e1.Unwrap()返回了e2,那么我们说e1包装了e2,您可以Unwrap e1来得到e2。</p><p>遵循此约定,我们可以为上面的QueryError类型提供一个Unwrap方法来返回其包含的错误：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *QueryError)</span> <span class="hljs-title">Unwrap</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123; <span class="hljs-keyword">return</span> e.Err &#125;</span><br></pre></td></tr></table></figure><p>Unwrap错误的结果本身(底层错误)可能也具有Unwrap方法。我们将这种通过重复unwrap而得到的错误序列为错误链。</p><h2 id="使用Is和As检查错误"><a href="#使用Is和As检查错误" class="headerlink" title="使用Is和As检查错误"></a>使用Is和As检查错误</h2><p>Go 1.13的errors包中包括了两个用于检查错误的新函数：Is和As。</p><p>errors.Is函数将错误与值进行比较。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Similar to:</span></span><br><span class="line"><span class="hljs-comment">//   if err == ErrNotFound &#123; … &#125;</span></span><br><span class="line"><span class="hljs-keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">    <span class="hljs-comment">// something wasn't found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As函数用于测试错误是否为特定类型。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Similar to:</span></span><br><span class="line"><span class="hljs-comment">//   if e, ok := err.(*QueryError); ok &#123; … &#125;</span></span><br><span class="line"><span class="hljs-keyword">var</span> e *QueryError</span><br><span class="line"><span class="hljs-keyword">if</span> errors.As(err, &amp;e) &#123;</span><br><span class="line">    <span class="hljs-comment">// err is a *QueryError, and e is set to the error's value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最简单的情况下,errors.Is函数的行为类似于上面对哨兵错误(sentinel error))的比较,而errors.As函数的行为类似于类型断言(type assertion)。但是,在处理包装错误(包含其他错误的错误）时,这些函数会考虑错误链中的所有错误。让我们再次看一下通过展开QueryError以检查潜在错误：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> e, ok := err.(*QueryError); ok &amp;&amp; e.Err == ErrPermission &#123;</span><br><span class="line">    <span class="hljs-comment">// query failed because of a permission problem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用errors.Is函数,我们可以这样写：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> errors.Is(err, ErrPermission) &#123;</span><br><span class="line">    <span class="hljs-comment">// err, or some error that it wraps, is a permission problem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>errors包还包括一个新Unwrap函数,该函数返回调用错误Unwrap方法的结果,或者当错误没有Unwrap方法时返回nil。通常我们最好使用errors.Is或errors.As,因为这些函数将在单个调用中检查整个错误链。</p><h2 id="用-w包装错误"><a href="#用-w包装错误" class="headerlink" title="用%w包装错误"></a>用%w包装错误</h2><p>如前面所述,我们通常使用fmt.Errorf函数向错误添加其他信息。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"decompress %v: %v"</span>, name, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Go 1.13中,fmt.Errorf函数支持新的%w动词。当存在该动词时,所返回的错误fmt.Errorf将具有Unwrap方法,该方法返回参数%w对应的错误。%w对应的参数必须是错误(类型)。在所有其他方面,%w与%v等同。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Return an error which unwraps to err.</span></span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"decompress %v: %w"</span>, name, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用%w创建的包装错误可用于errors.Is和errors.As：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err := fmt.Errorf(<span class="hljs-string">"access denied: %w”, ErrPermission)</span></span><br><span class="line"><span class="hljs-string">    ...</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">if errors.Is(err, ErrPermission)&#123;</span></span><br><span class="line"><span class="hljs-string">    ...</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="是否包装"><a href="#是否包装" class="headerlink" title="是否包装"></a>是否包装</h2><p>在使用fmt.Errorf或通过实现自定义类型将其他上下文添加到错误时,您需要确定新错误是否应该包装原始错误。这个问题没有统一答案。它取决于创建新错误的上下文。包装错误将会被公开给调用者。如果要避免暴露实现细节,那么请不要包装错误。</p><p>举一个例子,假设一个Parse函数从io.Reader读取复杂的数据结构。如果发生错误,我们希望报告发生错误的行号和列号。如果从io.Reader读取时发生错误,我们将包装该错误以供检查底层问题。由于调用者为函数提供了io.Reader,因此有理由公开它产生的错误。</p><p>相反,一个对数据库进行多次调用的函数可能不应该将其中调用之一的结果解开的错误返回。如果该函数使用的数据库是实现细节,那么暴露这些错误就是对抽象的违反。例如,如果你的程序包pkg中的函数LookupUser使用了Go的database/sql程序包,则可能会遇到sql.ErrNoRows错误。如果使用fmt.Errorf(“accessing DB: %v”, err)来返回该错误,则调用者无法检视到内部的sql.ErrNoRows。但是,如果函数使用fmt.Errorf(“accessing DB: %w”, err)返回错误,则调用者可以编写下面代码：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err := pkg.LookupUser(...)</span><br><span class="line"><span class="hljs-keyword">if</span> errors.Is(err, sql.ErrNoRows) …</span><br></pre></td></tr></table></figure><p>此时,如果您不希望对客户端源码产生影响,该函数也必须始终返回sql.ErrNoRows,即使您切换到其他数据库程序包。换句话说,包装错误会使该错误成为您API的一部分。如果您不想将来将错误作为API的一部分来支持,则不应包装该错误。</p><p>重要的是要记住,无论是否包装错误,错误文本都将相同。那些试图理解错误的人将得到相同的信息,无论采用哪种方式; 是否要包装错误的选择是关于是否要给程序提供更多信息,以便他们可以做出更明智的决策,还是保留该信息以保留抽象层。</p><h2 id="使用Is和As方法自定义错误测试"><a href="#使用Is和As方法自定义错误测试" class="headerlink" title="使用Is和As方法自定义错误测试"></a>使用Is和As方法自定义错误测试</h2><p>errors.Is函数检查错误链中的每个错误是否与目标值匹配。默认情况下,如果两者相等,则错误与目标匹配。另外,链中的错误可能会通过实现Is方法来声明它与目标匹配。</p><p>例如,下面的错误类型定义是受Upspin error包的启发,它将错误与模板进行了比较,并且仅考虑模板中非零的字段：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Error <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Path <span class="hljs-keyword">string</span></span><br><span class="line">    User <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Error)</span> <span class="hljs-title">Is</span><span class="hljs-params">(target error)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">    t, ok := target.(*Error)</span><br><span class="line">    <span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> (e.Path == t.Path || t.Path == <span class="hljs-string">""</span>) &amp;&amp;</span><br><span class="line">           (e.User == t.User || t.User == <span class="hljs-string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> errors.Is(err, &amp;Error&#123;User: <span class="hljs-string">"someuser"</span>&#125;) &#123;</span><br><span class="line">    <span class="hljs-comment">// err's User field is "someuser".</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样,errors.As函数将使用链中某个错误的As方法,如果该错误实现了As方法。</p><h2 id="错误和包API"><a href="#错误和包API" class="headerlink" title="错误和包API"></a>错误和包API</h2><p>返回错误的程序包（大多数都会返回错误）应描述程序员可能依赖的那些错误的属性。一个经过精心设计的程序包也将避免返回带有不应依赖的属性的错误。</p><p>最简单的规约是用于说明操作成功或失败的属性,分别返回nil或non-nil错误值。在许多情况下,不需要进一步的信息了。</p><p>如果我们希望函数返回可识别的错误条件,例如“item not found”,则可能会返回包装哨兵的错误。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> ErrNotFound = errors.New(<span class="hljs-string">"not found"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// FetchItem returns the named item.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// If no item with the name exists, FetchItem returns an error</span></span><br><span class="line"><span class="hljs-comment">// wrapping ErrNotFound.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FetchItem</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(*Item, error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> itemNotFound(name) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"%q: %w"</span>, name, ErrNotFound)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有其他现有的提供错误的模式,可以由调用方进行语义检查,例如直接返回哨兵值,特定类型或可以使用谓词函数检查的值。</p><p>在所有情况下,都应注意不要向用户公开内部细节。正如我们在上面的“是否要包装”中提到的那样,当您从另一个包中返回错误时,应该将错误转换为不暴露基本错误的形式,除非您愿意将来再返回该特定错误。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(filename)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// The *os.PathError returned by os.Open is an internal detail.</span></span><br><span class="line">    <span class="hljs-comment">// To avoid exposing it to the caller, repackage it as a new</span></span><br><span class="line">    <span class="hljs-comment">// error with the same text. We use the %v formatting verb, since</span></span><br><span class="line">    <span class="hljs-comment">// %w would permit the caller to unwrap the original *os.PathError.</span></span><br><span class="line">    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"%v"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将函数定义为返回包装某些标记或类型的错误,请不要直接返回基础错误。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> ErrPermission = errors.New(<span class="hljs-string">"permission denied"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// DoSomething returns an error wrapping ErrPermission if the user</span></span><br><span class="line"><span class="hljs-comment">// does not have permission to do something.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DoSomething</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> !userHasPermission() &#123;</span><br><span class="line">        <span class="hljs-comment">// If we return ErrPermission directly, callers might come</span></span><br><span class="line">        <span class="hljs-comment">// to depend on the exact error value, writing code like this:</span></span><br><span class="line">        <span class="hljs-comment">//</span></span><br><span class="line">        <span class="hljs-comment">//     if err := pkg.DoSomething(); err == pkg.ErrPermission &#123; … &#125;</span></span><br><span class="line">        <span class="hljs-comment">//</span></span><br><span class="line">        <span class="hljs-comment">// This will cause problems if we want to add additional</span></span><br><span class="line">        <span class="hljs-comment">// context to the error in the future. To avoid this, we</span></span><br><span class="line">        <span class="hljs-comment">// return an error wrapping the sentinel so that users must</span></span><br><span class="line">        <span class="hljs-comment">// always unwrap it:</span></span><br><span class="line">        <span class="hljs-comment">//</span></span><br><span class="line">        <span class="hljs-comment">//     if err := pkg.DoSomething(); errors.Is(err, pkg.ErrPermission) &#123; ... &#125;</span></span><br><span class="line">        <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"%w"</span>, ErrPermission)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>尽管我们讨论的更改仅包含三个函数和一个格式化动词(%w),但我们希望它们能大幅改善Go程序中错误处理的方式。我们希望通过包装来提供其他上下文的方式得到Gopher们地普遍使用,从而帮助程序做出更好的决策,并帮助程序员更快地发现错误。</p><p>正如Russ Cox在GopherCon 2019主题演讲中所说的那样,在Go2的道路上,我们进行了实验,简化和发布。现在,我们已经发布了这些更改,我们期待接下来的实验。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Etcd 中 Raft 协议源码的不完全分析（1）</title>
      <link href="/2019/09/12/Go/Etcd%E4%B8%ADRaft%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89/"/>
      <url>/2019/09/12/Go/Etcd%E4%B8%ADRaft%E5%8D%8F%E8%AE%AE%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>etcd 是 CoreOS 团队于2013年6月发起的开源项目,它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd 内部采用 raft 协议作为一致性, 现在就来看看 raft 在 etcd 中是如何实现的。必须先阅读 raft 协议的论文,再对协议论文有深刻理解的情况下,理解实现会更加轻松。</p><a id="more"></a><h1 id="一、分析流程"><a href="#一、分析流程" class="headerlink" title="一、分析流程"></a>一、分析流程</h1><p><strong>阅读readMe.md文件</strong></p><h3 id="运行单节点raftexample"><a href="#运行单节点raftexample" class="headerlink" title="运行单节点raftexample"></a>运行单节点raftexample</h3><p>首先启动一个raftexample的单成员集群：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raftexample --id 1 --cluster http://127.0.0.1:12379 --port 12380</span><br></pre></td></tr></table></figure><p>每个raftexample进程都维护一个raft实例和一个键值服务器。<br>进程的逗号分隔对等体（–cluster）列表,其对等列表（–id）的raft ID索引和http键值服务器端口（–port）通过命令行传递。</p><p>接下来,将值（“hello”）存储到键（“my-key”）：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://127.0.0.1:12380/my-key -XPUT -d hello</span><br></pre></td></tr></table></figure><p>最后,检索存储的密钥：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://127.0.0.1:12380/my-key</span><br></pre></td></tr></table></figure><h3 id="运行本地群集"><a href="#运行本地群集" class="headerlink" title="运行本地群集"></a>运行本地群集</h3><p>首先安装[goreman]（<a href="https://github.com/mattn/goreman）,它管理基于Procfile的应用程序。" target="_blank" rel="noopener">https://github.com/mattn/goreman）,它管理基于Procfile的应用程序。</a></p><p>[Procfile脚本]（./ Procfile）将设置本地示例集群。从以下开始：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goreman start</span><br></pre></td></tr></table></figure><p>这将带来三个raftexample实例。</p><p>现在可以将键值对写入集群的任何成员,并同样从任何成员中检索它。</p><h3 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h3><p>要测试群集恢复,首先启动群集并写入值“foo”：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goreman start</span><br><span class="line">curl -L http://127.0.0.1:12380/my-key -XPUT -d foo</span><br></pre></td></tr></table></figure><p>接下来,删除节点并将值替换为“bar”以检查群集可用性：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goreman run stop raftexample2</span><br><span class="line">curl -L http://127.0.0.1:12380/my-key -XPUT -d bar</span><br><span class="line">curl -L http://127.0.0.1:32380/my-key</span><br></pre></td></tr></table></figure><p>最后,重新启动节点并使用更新后的值“bar”验证它是否恢复：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goreman run start raftexample2</span><br><span class="line">curl -L http://127.0.0.1:22380/my-key</span><br></pre></td></tr></table></figure><h3 id="动态集群重新配置"><a href="#动态集群重新配置" class="headerlink" title="动态集群重新配置"></a>动态集群重新配置</h3><p>可以使用对REST API的请求将节点添加到正在运行的集群中或从中删除节点。</p><p>例如,假设我们有一个使用命令启动的3节点集群：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">raftexample --id 1 --cluster http://127.0.0.1:12379,http://127.0.0.1:22379,http://127.0.0.1:32379 --port 12380</span><br><span class="line">raftexample --id 2 --cluster http://127.0.0.1:12379,http://127.0.0.1:22379,http://127.0.0.1:32379 --port 22380</span><br><span class="line">raftexample --id 3 --cluster http://127.0.0.1:12379,http://127.0.0.1:22379,http://127.0.0.1:32379 --port 32380</span><br></pre></td></tr></table></figure><p>可以通过发出POST来添加ID为4的第四个节点：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://127.0.0.1:12380/4 -XPOST -d http://127.0.0.1:42379</span><br></pre></td></tr></table></figure><p>然后使用–join选项可以像其他节点一样启动新节点：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raftexample --id 4 --cluster http://127.0.0.1:12379,http://127.0.0.1:22379,http://127.0.0.1:32379,http://127.0.0.1:42379 --port 42380 --join</span><br></pre></td></tr></table></figure><p>新节点应加入群集,并能够为密钥/值请求提供服务。</p><p>我们可以使用DELETE请求删除节点：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://127.0.0.1:12380/3 -XDELETE</span><br></pre></td></tr></table></figure><p>一旦集群处理了此请求,节点3就应该自行关闭。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>raftexample由三个组件组成：一个由raft支持的键值存储,一个REST API服务器和一个基于etcd的raft实现的raft共识服务器。</p><p>支持raft的键值存储是一个键值映射,它包含所有已提交的键值。该存储桥接了raft服务器和REST服务器之间的通信。键值更新通过存储发送到raft服务器。一旦raft报告提交更新,存储就会更新其地图。</p><p>REST服务器通过访问raft支持的键值存储来公开当前的raft共识。GET命令在存储中查找键并返回值（如果有）。键值PUT命令向存储发出更新提议。</p><p>raft服务器与其集群对等方达成共识。当REST服务器提交提议时,raft服务器将提议发送给其对等方。当raft达成共识时,服务器通过提交通道发布所有已提交的更新。对于raftexample,此提交通道由键值存储使用。</p><h1 id="二、介绍raft库代码结构及核心数据结构"><a href="#二、介绍raft库代码结构及核心数据结构" class="headerlink" title="二、介绍raft库代码结构及核心数据结构"></a>二、介绍raft库代码结构及核心数据结构</h1><p>为什么要首先介绍核心数据结构,如果不介绍核心数据结构就可能看不懂后面我的分析,每一个Msg具体代表什么含义,所以先看核心数据结构,这里只需要大概浏览一遍就可以了,忘记了可以在这里看。</p><h3 id="MsgHup消息"><a href="#MsgHup消息" class="headerlink" title="MsgHup消息"></a>MsgHup消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgHup</td><td>不用于节点间通信,仅用于发送给本节点让本节点进行选举</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr></tbody></table><h3 id="MsgBeat消息"><a href="#MsgBeat消息" class="headerlink" title="MsgBeat消息"></a>MsgBeat消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgBeat</td><td>不用于节点间通信 ,仅用于leader节点在heartbeat定时器到期时向集群中其他节点发送心跳消息</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr></tbody></table><h3 id="MsgProp消息"><a href="#MsgProp消息" class="headerlink" title="MsgProp消息"></a>MsgProp消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgProp</td><td>raft库使用者提议（propose）数据</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr><tr><td>entries</td><td>Entry</td><td>日志条目数组</td></tr></tbody></table><h3 id="MsgApp-MsgSnap消息"><a href="#MsgApp-MsgSnap消息" class="headerlink" title="MsgApp/MsgSnap消息"></a>MsgApp/MsgSnap消息</h3><h3 id="MsgApp消息"><a href="#MsgApp消息" class="headerlink" title="MsgApp消息"></a>MsgApp消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgApp</td><td>用于leader向集群中其他节点同步数据的消息</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr><tr><td>entries</td><td>Entry     日志条目数组 </td></tr><tr><td>logTerm</td><td>uint64     日志所处的任期ID </td></tr><tr><td>index</td><td>uint64     索引ID </td></tr></tbody></table><h3 id="MsgSnap消息"><a href="#MsgSnap消息" class="headerlink" title="MsgSnap消息"></a>MsgSnap消息</h3><table><thead><tr><th>成员    类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgSnap    用于leader向follower同步数据用的快照消息</td></tr><tr><td>to    uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64    本节点ID</td></tr><tr><td>snapshot</td><td>Snapshot    快照数据</td></tr></tbody></table><h3 id="MsgAppResp消息"><a href="#MsgAppResp消息" class="headerlink" title="MsgAppResp消息"></a>MsgAppResp消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgAppResp</td><td>集群中其他节点针对leader的MsgApp/MsgSnap消息的应答消息</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr><tr><td>index</td><td>uint64</td><td>日志索引ID,用于节点向leader汇报自己已经commit的日志数据ID</td></tr><tr><td>reject</td><td>bool</td><td>是否拒绝同步日志的请求</td></tr><tr><td>rejectHint</td><td>uint64</td><td>拒绝同步日志请求时返回的当前节点日志ID,用于被拒绝方快速定位到下一次合适的同步日志位置</td></tr></tbody></table><h3 id="MsgVote-MsgPreVote消息"><a href="#MsgVote-MsgPreVote消息" class="headerlink" title="MsgVote/MsgPreVote消息"></a>MsgVote/MsgPreVote消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgVote/MsgPreVote</td><td>节点投票给自己以进行新一轮的选举</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr><tr><td>term</td><td>uint64</td><td>任期ID</td></tr><tr><td>index</td><td>uint64</td><td>日志索引ID,用于节点向leader汇报自己已经commit的日志数据ID</td></tr><tr><td>logTerm</td><td>uint64</td><td>日志所处的任期ID</td></tr><tr><td>context</td><td>bytes</td><td>上下文数据</td></tr></tbody></table><h3 id="MsgVoteResp-MsgPreVoteResp消息"><a href="#MsgVoteResp-MsgPreVoteResp消息" class="headerlink" title="MsgVoteResp/MsgPreVoteResp消息"></a>MsgVoteResp/MsgPreVoteResp消息</h3><table><thead><tr><th>成员</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>MsgVoteResp/MsgPreVoteResp</td><td>投票应答消息</td></tr><tr><td>to</td><td>uint64</td><td>消息接收者的节点ID</td></tr><tr><td>from</td><td>uint64</td><td>本节点ID</td></tr><tr><td>reject</td><td>bool</td><td>是否拒绝</td></tr></tbody></table><h1 id="三、分析源码"><a href="#三、分析源码" class="headerlink" title="三、分析源码"></a>三、分析源码</h1><p>按照上面README.md文档开始分析,首先把单个实例跑起来。然后根据源码的顺序一个一个的看。</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 用于节点之间通信</span></span><br><span class="line">cluster := flag.String(<span class="hljs-string">"cluster"</span>, <span class="hljs-string">"http://127.0.0.1:9021"</span>, <span class="hljs-string">"comma separated cluster peers"</span>)</span><br><span class="line">id := flag.Int(<span class="hljs-string">"id"</span>, <span class="hljs-number">1</span>, <span class="hljs-string">"node ID"</span>)</span><br><span class="line"><span class="hljs-comment">// 用于 key value</span></span><br><span class="line">kvport := flag.Int(<span class="hljs-string">"port"</span>, <span class="hljs-number">9121</span>, <span class="hljs-string">"key-value server port"</span>)</span><br><span class="line">join := flag.Bool(<span class="hljs-string">"join"</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">"join an existing cluster"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">proposeC := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(proposeC)</span><br><span class="line">confChangeC := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> raftpb.ConfChange)</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(confChangeC)</span><br><span class="line"><span class="hljs-keyword">var</span> kvs *kvstore</span><br><span class="line">getSnapshot := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123; <span class="hljs-keyword">return</span> kvs.getSnapshot() &#125;</span><br><span class="line">commitC, errorC, snapshotterReady := newRaftNode(*id, strings.Split(*cluster, <span class="hljs-string">","</span>), *join, getSnapshot, proposeC, confChangeC)</span><br><span class="line">kvs = newKVStore(&lt;-snapshotterReady, proposeC, commitC, errorC)</span><br><span class="line">serveHttpKVAPI(kvs, *kvport, confChangeC, errorC)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>proposeC</code>创建一个提议channel,用于提议请求的通信</li><li><code>confChangeC</code>创建一个配置更改的channel,用于配置更改的通信</li><li><code>newRaftNode</code>创建raft协议的node节点,然后返回一个提交的channel,和一个错误通知的channel</li><li><code>snapshotterReady</code>用于等待快照创建完毕,然后执行<code>newKVStore</code>方法创建一个key存储容器</li><li><code>serveHttpKVAPI</code>创建一个http服务</li></ol><h3 id="main-newKVStore"><a href="#main-newKVStore" class="headerlink" title="main.newKVStore"></a>main.newKVStore</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newKVStore</span><span class="hljs-params">(snapshotter *snap.Snapshotter, proposeC <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">string</span>, commitC &lt;-<span class="hljs-keyword">chan</span> *<span class="hljs-keyword">string</span>, errorC &lt;-<span class="hljs-keyword">chan</span> error)</span> *<span class="hljs-title">kvstore</span></span> &#123;</span><br><span class="line">s := &amp;kvstore&#123;proposeC: proposeC, kvStore: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>), snapshotter: snapshotter&#125;</span><br><span class="line"><span class="hljs-comment">// 回应日志进入到key value map</span></span><br><span class="line">s.readCommits(commitC, errorC)</span><br><span class="line"><span class="hljs-comment">//从raft读取提交到kvStore映射直到错误</span></span><br><span class="line"><span class="hljs-keyword">go</span> s.readCommits(commitC, errorC)</span><br><span class="line"><span class="hljs-keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个KV存储对象,读取提交信息到kv存储容器中</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> kvstore <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">proposeC    <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">string</span> <span class="hljs-comment">// channel for proposing updates</span></span><br><span class="line">mu          sync.RWMutex</span><br><span class="line">kvStore     <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span> <span class="hljs-comment">// current committed key-value pairs</span></span><br><span class="line">snapshotter *snap.Snapshotter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proposeC</code>是一个提议channel,<code>sync.RWMutex</code>因为是在多个 go 协程中运行的,所以需要加锁,存储实际上就是一个<code>map</code>类型</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Snapshotter <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">lg  *zap.Logger</span><br><span class="line">dir <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Snapshotter</code>类型则是一个zap类型的日志,会持久化到磁盘中</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *kvstore)</span> <span class="hljs-title">readCommits</span><span class="hljs-params">(commitC &lt;-<span class="hljs-keyword">chan</span> *<span class="hljs-keyword">string</span>, errorC &lt;-<span class="hljs-keyword">chan</span> error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> data := <span class="hljs-keyword">range</span> commitC &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> data == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">snapshot, err := s.snapshotter.Load()</span><br><span class="line"><span class="hljs-keyword">if</span> err == snap.ErrNoSnapshot &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="hljs-string">"loading snapshot at term %d and index %d"</span>, snapshot.Metadata.Term, snapshot.Metadata.Index)</span><br><span class="line"><span class="hljs-keyword">if</span> err := s.recoverFromSnapshot(snapshot.Data); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> dataKv kv</span><br><span class="line">dec := gob.NewDecoder(bytes.NewBufferString(*data))</span><br><span class="line"><span class="hljs-keyword">if</span> err := dec.Decode(&amp;dataKv); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="hljs-string">"raftexample: could not decode message (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s.mu.Lock()</span><br><span class="line">s.kvStore[dataKv.Key] = dataKv.Val</span><br><span class="line">s.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err, ok := &lt;-errorC; ok &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据提交然后加载快照中的信息,从快照中的信息恢复到kv存储容器中,然后再从commit日志中恢复信息</p><h3 id="main-serveHttpKVAPI"><a href="#main-serveHttpKVAPI" class="headerlink" title="main.serveHttpKVAPI"></a>main.serveHttpKVAPI</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// serveHttpKVAPI starts a key-value server with a GET/PUT API and listens.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveHttpKVAPI</span><span class="hljs-params">(kv *kvstore, port <span class="hljs-keyword">int</span>, confChangeC <span class="hljs-keyword">chan</span>&lt;- raftpb.ConfChange, errorC &lt;-<span class="hljs-keyword">chan</span> error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// httpKAPi 因为实现了serverhttp方法所以可以传入作为handler</span></span><br><span class="line">srv := http.Server&#123;</span><br><span class="line">Addr: <span class="hljs-string">":"</span> + strconv.Itoa(port),</span><br><span class="line"><span class="hljs-comment">// 只需要关心httpKVAPI的实现就可以了</span></span><br><span class="line">Handler: &amp;httpKVAPI&#123;</span><br><span class="line">store:       kv,</span><br><span class="line">confChangeC: confChangeC,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 打开监听端口</span></span><br><span class="line"><span class="hljs-keyword">if</span> err := srv.ListenAndServe(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-comment">// exit when raft goes down</span></span><br><span class="line"><span class="hljs-keyword">if</span> err, ok := &lt;-errorC; ok &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启http服务</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *httpKVAPI)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">key := r.RequestURI</span><br><span class="line"><span class="hljs-keyword">defer</span> r.Body.Close()</span><br><span class="line"><span class="hljs-comment">//HttpServer主循环:</span></span><br><span class="line"><span class="hljs-comment">//接收用户提交的数据：</span></span><br><span class="line"><span class="hljs-comment">//如果是PUT请求：</span></span><br><span class="line"><span class="hljs-comment">//将数据写入到proposeC中</span></span><br><span class="line"><span class="hljs-comment">//如果是POST请求：</span></span><br><span class="line"><span class="hljs-comment">//将配置变更数据写入到confChangeC中</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">switch</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 如果方式put方法  更新某个key</span></span><br><span class="line"><span class="hljs-keyword">case</span> r.Method == <span class="hljs-string">"PUT"</span>:</span><br><span class="line">v, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"Failed to read on PUT (%v)\n"</span>, err)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Failed on PUT"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 建议 != 事实</span></span><br><span class="line"><span class="hljs-comment">// 在这里调用了key value 的更新建议</span></span><br><span class="line">h.store.Propose(key, <span class="hljs-keyword">string</span>(v))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//乐观的无需等Raft的确认。值尚未提交,因此键上的后续GET可能返回旧值</span></span><br><span class="line">w.WriteHeader(http.StatusNoContent)</span><br><span class="line"><span class="hljs-comment">// 如果方式get方法  查找某个key</span></span><br><span class="line"><span class="hljs-keyword">case</span> r.Method == <span class="hljs-string">"GET"</span>:</span><br><span class="line"><span class="hljs-keyword">if</span> v, ok := h.store.Lookup(key); ok &#123;</span><br><span class="line"><span class="hljs-comment">// 查看某一个key的配置</span></span><br><span class="line">w.Write([]<span class="hljs-keyword">byte</span>(v))</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">http.Error(w, <span class="hljs-string">"Failed to GET"</span>, http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> r.Method == <span class="hljs-string">"POST"</span>:</span><br><span class="line">url, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"Failed to read on POST (%v)\n"</span>, err)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Failed on POST"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nodeId, err := strconv.ParseUint(key[<span class="hljs-number">1</span>:], <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"Failed to convert ID for conf change (%v)\n"</span>, err)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Failed on POST"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc := raftpb.ConfChange&#123;</span><br><span class="line"><span class="hljs-comment">// 删除传入的添加</span></span><br><span class="line">Type:    raftpb.ConfChangeAddNode,</span><br><span class="line">NodeID:  nodeId,</span><br><span class="line">Context: url,</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 更新配置</span></span><br><span class="line">h.confChangeC &lt;- cc</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如上所述,乐观地认为raft会应用变化</span></span><br><span class="line">w.WriteHeader(http.StatusNoContent)</span><br><span class="line"><span class="hljs-keyword">case</span> r.Method == <span class="hljs-string">"DELETE"</span>:</span><br><span class="line">nodeId, err := strconv.ParseUint(key[<span class="hljs-number">1</span>:], <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"Failed to convert ID for conf change (%v)\n"</span>, err)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Failed on DELETE"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc := raftpb.ConfChange&#123;</span><br><span class="line"><span class="hljs-comment">// 删除传入的nodeid</span></span><br><span class="line">Type:   raftpb.ConfChangeRemoveNode,</span><br><span class="line">NodeID: nodeId,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 删除配置</span></span><br><span class="line">h.confChangeC &lt;- cc</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//如上,乐观地认为筏将应用conf更改</span></span><br><span class="line">        w.WriteHeader(http.StatusNoContent)</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">w.Header().Set(<span class="hljs-string">"Allow"</span>, <span class="hljs-string">"PUT"</span>)</span><br><span class="line">w.Header().Add(<span class="hljs-string">"Allow"</span>, <span class="hljs-string">"GET"</span>)</span><br><span class="line">w.Header().Add(<span class="hljs-string">"Allow"</span>, <span class="hljs-string">"POST"</span>)</span><br><span class="line">w.Header().Add(<span class="hljs-string">"Allow"</span>, <span class="hljs-string">"DELETE"</span>)</span><br><span class="line">http.Error(w, <span class="hljs-string">"Method not allowed"</span>, http.StatusMethodNotAllowed)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以分为两类,一类是属性信息,第二类是节点配置的信息</p><ul><li>1.属性信息<ul><li><code>PUT</code>通过<code>h.store.Propose(key, string(v))</code>该方法往<code>s.proposeC</code>中提交建议</li><li><code>GET</code>通过<code>h.store.Lookup(key)</code>在<code>v, ok := s.kvStore[key]</code>集合中查找数据,然后返回</li></ul></li><li>2.节点配置的信息<ul><li><code>POST</code>  因为设置的<code>Type:  raftpb.ConfChangeAddNode</code>信息为添加类型,再由<code>h.confChangeC &lt;- cc</code>传输到配置更改的channel,实现添加节点</li><li><code>DELTE</code>因为设置的<code>Type:   raftpb.ConfChangeRemoveNode</code>信息为添加类型,再由<code>h.confChangeC &lt;- cc</code>传输到配置更改的channel,实现删除节点</li></ul></li></ul><h3 id="main-newRaftNode"><a href="#main-newRaftNode" class="headerlink" title="main.newRaftNode"></a>main.newRaftNode</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newRaftNode</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, peers []<span class="hljs-keyword">string</span>, join <span class="hljs-keyword">bool</span>, getSnapshot <span class="hljs-keyword">func</span>()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span>, <span class="hljs-title">proposeC</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">string</span>,</span></span><br><span class="line">confChangeC &lt;-<span class="hljs-keyword">chan</span> raftpb.ConfChange) (&lt;-<span class="hljs-keyword">chan</span> *<span class="hljs-keyword">string</span>, &lt;-<span class="hljs-keyword">chan</span> error, &lt;-<span class="hljs-keyword">chan</span> *snap.Snapshotter) &#123;</span><br><span class="line"></span><br><span class="line">commitC := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *<span class="hljs-keyword">string</span>)</span><br><span class="line">errorC := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error)</span><br><span class="line"></span><br><span class="line">rc := &amp;raftNode&#123;</span><br><span class="line">proposeC:    proposeC,</span><br><span class="line">confChangeC: confChangeC,</span><br><span class="line">commitC:     commitC,</span><br><span class="line">errorC:      errorC,</span><br><span class="line">id:          id,</span><br><span class="line">peers:       peers,</span><br><span class="line">join:        join,</span><br><span class="line">waldir:      fmt.Sprintf(<span class="hljs-string">"raftexample-%d"</span>, id),</span><br><span class="line">snapdir:     fmt.Sprintf(<span class="hljs-string">"raftexample-%d-snap"</span>, id),</span><br><span class="line">getSnapshot: getSnapshot,</span><br><span class="line">snapCount:   defaultSnapshotCount,</span><br><span class="line">stopc:       <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),</span><br><span class="line">httpstopc:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),</span><br><span class="line">httpdonec:   <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),</span><br><span class="line"></span><br><span class="line">snapshotterReady: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *snap.Snapshotter, <span class="hljs-number">1</span>),</span><br><span class="line">            <span class="hljs-comment">// WAL回应后填充的其余结构</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">go</span> rc.startRaft()</span><br><span class="line"><span class="hljs-keyword">return</span> commitC, errorC, rc.snapshotterReady</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个raft的node节点,然后启用协程开启调用<code>startRaft()</code>,启动raft协议,后面的方法会等待<code>snapshotterReady</code>快照信息准备完毕</p><h3 id="main-newRaftNode-startRaft"><a href="#main-newRaftNode-startRaft" class="headerlink" title="main.newRaftNode.startRaft"></a>main.newRaftNode.startRaft</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rc *raftNode)</span> <span class="hljs-title">startRaft</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 创建快照目录</span></span><br><span class="line"><span class="hljs-keyword">if</span> !fileutil.Exist(rc.snapdir) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := os.Mkdir(rc.snapdir, <span class="hljs-number">0750</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="hljs-string">"raftexample: cannot create dir for snapshot (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rc.snapshotter = snap.New(zap.NewExample(), rc.snapdir)</span><br><span class="line">rc.snapshotterReady &lt;- rc.snapshotter</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 是否存在wal日志</span></span><br><span class="line">oldwal := wal.Exist(rc.waldir)</span><br><span class="line">rc.wal = rc.replayWAL()</span><br><span class="line"></span><br><span class="line">rpeers := <span class="hljs-built_in">make</span>([]raft.Peer, <span class="hljs-built_in">len</span>(rc.peers))</span><br><span class="line"><span class="hljs-comment">// 为遍历每一个peer节点都设置id  从1开始设置</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rpeers &#123;</span><br><span class="line">rpeers[i] = raft.Peer&#123;ID: <span class="hljs-keyword">uint64</span>(i + <span class="hljs-number">1</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 创建配置文件 弹性时间戳为10  心跳为1  用内存都方式存储   节点之间最大消息大小为1024*1024字节   乐观复制中最大追加消息数为256条  未提交的最大条目数量</span></span><br><span class="line">c := &amp;raft.Config&#123;</span><br><span class="line">ID:                        <span class="hljs-keyword">uint64</span>(rc.id),</span><br><span class="line">ElectionTick:              <span class="hljs-number">10</span>,</span><br><span class="line">HeartbeatTick:             <span class="hljs-number">1</span>,</span><br><span class="line">Storage:                   rc.raftStorage,</span><br><span class="line">MaxSizePerMsg:             <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,</span><br><span class="line">MaxInflightMsgs:           <span class="hljs-number">256</span>,</span><br><span class="line">MaxUncommittedEntriesSize: <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 如果存在wal日志</span></span><br><span class="line"><span class="hljs-keyword">if</span> oldwal &#123;</span><br><span class="line"><span class="hljs-comment">// 就根据之前的配置来恢复这个节点</span></span><br><span class="line">rc.node = raft.RestartNode(c)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 否则就启动node节点</span></span><br><span class="line">startPeers := rpeers</span><br><span class="line"><span class="hljs-comment">// 如果是参加节点,那么当前节点就不启动</span></span><br><span class="line"><span class="hljs-keyword">if</span> rc.join &#123;</span><br><span class="line">startPeers = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 启动node节点</span></span><br><span class="line">rc.node = raft.StartNode(c, startPeers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// raft传输</span></span><br><span class="line">rc.transport = &amp;rafthttp.Transport&#123;</span><br><span class="line">Logger:      zap.NewExample(),</span><br><span class="line">ID:          types.ID(rc.id),</span><br><span class="line">ClusterID:   <span class="hljs-number">0x1000</span>,</span><br><span class="line">Raft:        rc,</span><br><span class="line">ServerStats: stats.NewServerStats(<span class="hljs-string">""</span>, <span class="hljs-string">""</span>),</span><br><span class="line">LeaderStats: stats.NewLeaderStats(strconv.Itoa(rc.id)),</span><br><span class="line">ErrorC:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error),</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 传输服务启动</span></span><br><span class="line">rc.transport.Start()</span><br><span class="line"><span class="hljs-comment">// 添加传输的对等节点,如果不是本身节点,就添加</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rc.peers &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> != rc.id &#123;</span><br><span class="line">rc.transport.AddPeer(types.ID(i+<span class="hljs-number">1</span>), []<span class="hljs-keyword">string</span>&#123;rc.peers[i]&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 启动HTTP服务</span></span><br><span class="line"><span class="hljs-keyword">go</span> rc.serveRaft()</span><br><span class="line"><span class="hljs-comment">// 开始监听各个channel然后消费</span></span><br><span class="line"><span class="hljs-keyword">go</span> rc.serveChannels()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>是否本地时候存在快照信息<ul><li>如果有快照就读取之前快照信息</li><li>否则就在本地初始化创建一个快照</li></ul></li><li>是否本地存在wal日志,<ul><li>如果存在wal日志,就根据之前的配置来恢复这个节点</li><li>否则就创建node节点,启动node节点</li></ul></li><li>启动传输服务启动,并将对等节点放入到要传入的服务中</li><li>启动节点之间需要的tcp连接</li><li>监听各个节点给他发送的消息</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Transport)</span> <span class="hljs-title">Start</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> err error</span><br><span class="line"><span class="hljs-comment">// stream 流  一般是维护节点状态,以及心跳</span></span><br><span class="line">t.streamRt, err = newStreamRoundTripper(t.TLSInfo, t.DialTimeout)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// pipeline流  通常传输较大到数据,例如快照</span></span><br><span class="line">t.pipelineRt, err = NewRoundTripper(t.TLSInfo, t.DialTimeout)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.remotes = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[types.ID]*remote)</span><br><span class="line">t.peers = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[types.ID]Peer)</span><br><span class="line">t.pipelineProber = probing.NewProber(t.pipelineRt)</span><br><span class="line">t.streamProber = probing.NewProber(t.streamRt)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> t.DialRetryFrequency == <span class="hljs-number">0</span> &#123;</span><br><span class="line">t.DialRetryFrequency = rate.Every(<span class="hljs-number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个传输服务,分为stream类型,和pipeline类型, 其中stream类型是一个长链接,而pipeline类型是一个短链接类型。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">streamRt   http.RoundTripper <span class="hljs-comment">// roundTripper used by streams</span></span><br><span class="line">pipelineRt http.RoundTripper <span class="hljs-comment">// roundTripper used by pipelines</span></span><br></pre></td></tr></table></figure><ol><li>stream类型<ul><li>用来发送心跳和日志的信息</li></ul></li><li>pipeline类型<ul><li>用来传输快照</li><li>用来发送心跳和日志的信息(仅当stream类型不可用是,才会使用)</li></ul></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rc *raftNode)</span> <span class="hljs-title">serveRaft</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 解析节点地址</span></span><br><span class="line">url, err := url.Parse(rc.peers[rc.id<span class="hljs-number">-1</span>])</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="hljs-string">"raftexample: Failed parsing URL (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 打开可以停止的tcp连接</span></span><br><span class="line">ln, err := newStoppableListener(url.Host, rc.httpstopc)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="hljs-string">"raftexample: Failed to listen rafthttp (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//transport.Handler方法放回一个实现来net.http包下的handler接口,调用其服务Serve接口</span></span><br><span class="line">err = (&amp;http.Server&#123;Handler: rc.transport.Handler()&#125;).Serve(ln)</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-rc.httpstopc:</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">log.Fatalf(<span class="hljs-string">"raftexample: Failed to serve rafthttp (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">close</span>(rc.httpdonec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间这个方法只是打开了一个tcp连接,然后将<code>rc.transport.Handler()</code>传入</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Transport)</span> <span class="hljs-title">Handler</span><span class="hljs-params">()</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;</span><br><span class="line">pipelineHandler := newPipelineHandler(t, t.Raft, t.ClusterID)</span><br><span class="line">streamHandler := newStreamHandler(t, t, t.Raft, t.ID, t.ClusterID)</span><br><span class="line">snapHandler := newSnapshotHandler(t, t.Raft, t.Snapshotter, t.ClusterID)</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.Handle(RaftPrefix, pipelineHandler)</span><br><span class="line">mux.Handle(RaftStreamPrefix+<span class="hljs-string">"/"</span>, streamHandler)</span><br><span class="line">mux.Handle(RaftSnapshotPrefix, snapHandler)</span><br><span class="line">mux.Handle(ProbingPrefix, probing.NewHandler())</span><br><span class="line"><span class="hljs-keyword">return</span> mux</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入了四种handler,分别对应四种类型</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RaftPrefix         = <span class="hljs-string">"/raft"</span></span><br><span class="line">  ProbingPrefix      = path.Join(RaftPrefix, <span class="hljs-string">"probing"</span>)</span><br><span class="line">  RaftStreamPrefix   = path.Join(RaftPrefix, <span class="hljs-string">"stream"</span>)</span><br><span class="line">  RaftSnapshotPrefix = path.Join(RaftPrefix, <span class="hljs-string">"snapshot"</span>)</span><br></pre></td></tr></table></figure><p>管道类型,探测类型,流类型,快照类型,至于每一个类型handler的httpServer实现,我这里就不讲了。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rc *raftNode)</span> <span class="hljs-title">serveChannels</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 拿到快照</span></span><br><span class="line">snap, err := rc.raftStorage.Snapshot()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">rc.confState = snap.Metadata.ConfState</span><br><span class="line">rc.snapshotIndex = snap.Metadata.Index</span><br><span class="line">rc.appliedIndex = snap.Metadata.Index</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">defer</span> rc.wal.Close()</span><br><span class="line"></span><br><span class="line">ticker := time.NewTicker(<span class="hljs-number">100</span> * time.Millisecond)</span><br><span class="line"><span class="hljs-keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//通过raft发送提案</span></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">confChangeCount := <span class="hljs-keyword">uint64</span>(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> rc.proposeC != <span class="hljs-literal">nil</span> &amp;&amp; rc.confChangeC != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 消费数据</span></span><br><span class="line"><span class="hljs-keyword">case</span> prop, ok := &lt;-rc.proposeC:</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">rc.proposeC = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//阻止直到被raft状态机接受</span></span><br><span class="line"><span class="hljs-comment">// 调用node的建议操作</span></span><br><span class="line">rc.node.Propose(context.TODO(), []<span class="hljs-keyword">byte</span>(prop))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 配置变更</span></span><br><span class="line"><span class="hljs-keyword">case</span> cc, ok := &lt;-rc.confChangeC:</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">rc.confChangeC = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">confChangeCount++</span><br><span class="line">cc.ID = confChangeCount</span><br><span class="line">rc.node.ProposeConfChange(context.TODO(), cc)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//客户关闭渠道;如果还没有关掉raft</span></span><br><span class="line"><span class="hljs-built_in">close</span>(rc.stopc)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//在raft状态机更新时的事件循环</span></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-ticker.C:</span><br><span class="line">rc.node.Tick()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//将raft条目存储到wal,然后通过提交通道发布</span></span><br><span class="line"><span class="hljs-keyword">case</span> rd := &lt;-rc.node.Ready():</span><br><span class="line">rc.wal.Save(rd.HardState, rd.Entries)</span><br><span class="line"><span class="hljs-comment">// 如果快照不为空</span></span><br><span class="line"><span class="hljs-keyword">if</span> !raft.IsEmptySnap(rd.Snapshot) &#123;</span><br><span class="line"><span class="hljs-comment">// 保存快照状态</span></span><br><span class="line">rc.saveSnap(rd.Snapshot)</span><br><span class="line"><span class="hljs-comment">// 应用快照状态</span></span><br><span class="line">rc.raftStorage.ApplySnapshot(rd.Snapshot)</span><br><span class="line"><span class="hljs-comment">// 发布快照</span></span><br><span class="line">rc.publishSnapshot(rd.Snapshot)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 添加条目到本地存储</span></span><br><span class="line">rc.raftStorage.Append(rd.Entries)</span><br><span class="line"><span class="hljs-comment">// 发送消息</span></span><br><span class="line">rc.transport.Send(rd.Messages)</span><br><span class="line"><span class="hljs-comment">// 发布条目</span></span><br><span class="line"><span class="hljs-keyword">if</span> ok := rc.publishEntries(rc.entriesToApply(rd.CommittedEntries)); !ok &#123;</span><br><span class="line"><span class="hljs-comment">// 如果没有成功就停止节点</span></span><br><span class="line">rc.stop()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//可能触发快照</span></span><br><span class="line">rc.maybeTriggerSnapshot()</span><br><span class="line"><span class="hljs-comment">// 通知进行下一步</span></span><br><span class="line">rc.node.Advance()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">case</span> err := &lt;-rc.transport.ErrorC:</span><br><span class="line">rc.writeError(err)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-rc.stopc:</span><br><span class="line">rc.stop()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有有两个 for 循环,一个是来接收提议和配置更改的信息 ,一个是类处理node节点之间的信息</p><ol><li>接收提议和配置更改的信息的for循环<ul><li><code>case prop, ok := &lt;-rc.proposeC:</code>  然后调用<code>rc.node.Propose(context.TODO(), []byte(prop))</code>发送提议</li><li><code>case cc, ok := &lt;-rc.confChangeC:</code>  然后调用<code>rc.node.ProposeConfChange(context.TODO(), cc)</code>发送配置更改</li></ul></li><li>处理node节点之间的信息的 for 循环<ul><li><code>case &lt;-ticker.C:</code>使用<code>rc.node.Tick()</code>用来处理超时和心跳的逻辑</li><li><code>rd := &lt;-rc.node.Ready():</code>返回当前时间点状态的通道,将条目存储到wal,然后通过提交通道发布,然后调用<code>Advance</code>它准备节点返回下一个可用的Ready。</li><li><code>case err := &lt;-rc.transport.ErrorC:</code>使用rc.writeError(err)产生错误就把错误写到通道里</li><li><code>case &lt;-rc.stopc:</code>  停止该节点</li></ul></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RestartNode</span><span class="hljs-params">(c *Config)</span> <span class="hljs-title">Node</span></span> &#123;</span><br><span class="line">r := newRaft(c)</span><br><span class="line"></span><br><span class="line">n := newNode()</span><br><span class="line">n.logger = c.Logger</span><br><span class="line"><span class="hljs-keyword">go</span> n.run(r)</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果重启节点,就从配置中恢复节点的状态</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// StartNode 返回一个新的Node给定配置和一个raft对等列表。</span></span><br><span class="line"><span class="hljs-comment">//它将每个给定对等体的ConfChangeAddNode条目附加到初始日志。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StartNode</span><span class="hljs-params">(c *Config, peers []Peer)</span> <span class="hljs-title">Node</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 创建一个raft协议</span></span><br><span class="line">r := newRaft(c)</span><br><span class="line"><span class="hljs-comment">// 成为第1任期的追随者并应用第1任期的初始配置条目</span></span><br><span class="line">r.becomeFollower(<span class="hljs-number">1</span>, None)</span><br><span class="line"><span class="hljs-keyword">for</span> _, peer := <span class="hljs-keyword">range</span> peers &#123;</span><br><span class="line">cc := pb.ConfChange&#123;Type: pb.ConfChangeAddNode, NodeID: peer.ID, Context: peer.Context&#125;</span><br><span class="line">d, err := cc.Marshal()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"unexpected marshal error"</span>)</span><br><span class="line">&#125;</span><br><span class="line">e := pb.Entry&#123;Type: pb.EntryConfChange, Term: <span class="hljs-number">1</span>, Index: r.raftLog.lastIndex() + <span class="hljs-number">1</span>, Data: d&#125;</span><br><span class="line">r.raftLog.<span class="hljs-built_in">append</span>(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//将这些初始条目标记为已提交。</span></span><br><span class="line"><span class="hljs-comment">// TODO（bdarnell）：这些条目仍然不稳定;我们需要保留吗？</span></span><br><span class="line"><span class="hljs-comment">//提交&lt;unstable的不变量？  持久化存储和非持久化存储,它们之间的分界线就是lastIndex</span></span><br><span class="line">r.raftLog.committed = r.raftLog.lastIndex()</span><br><span class="line"><span class="hljs-comment">//现在应用它们,主要是为了让应用程序可以调用Campaign</span></span><br><span class="line"><span class="hljs-comment">//在测试中的StartNode之后立即执行。请注意,这些节点将</span></span><br><span class="line"><span class="hljs-comment">//被添加到raft两次：此处和应用程序准备就绪</span></span><br><span class="line"><span class="hljs-comment">//循环调用ApplyConfChange。必须追求对addNode的调用</span></span><br><span class="line"><span class="hljs-comment">//所有对raftLog.append的调用都是在这些之后设置progress.next</span></span><br><span class="line"><span class="hljs-comment">// bootstrapping条目（如果我们尝试附加这些条目,则会出错</span></span><br><span class="line"><span class="hljs-comment">//条目,因为它们已经提交了）。</span></span><br><span class="line"><span class="hljs-comment">//我们没有设置raftLog.applied,所以应用程序就可以了</span></span><br><span class="line"><span class="hljs-comment">//通过Ready.CommittedEntries观察所有conf更改。</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, peer := <span class="hljs-keyword">range</span> peers &#123;</span><br><span class="line"><span class="hljs-comment">// 添加节点</span></span><br><span class="line">r.addNode(peer.ID)</span><br><span class="line">&#125;</span><br><span class="line">n := newNode()</span><br><span class="line">n.logger = c.Logger</span><br><span class="line"><span class="hljs-comment">// 运行raft协议</span></span><br><span class="line"><span class="hljs-keyword">go</span> n.run(r)</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先创建一个raft协议,成为第1任期的追随者并应用第1任期的初始配置条目,将领导者设置为空</li><li>并将条目添到wal中  </li><li>添加对等节点</li><li>运行<code>run</code>方法,调用处理过程</li></ol><h3 id="main-newRaftNode-startRaft-run"><a href="#main-newRaftNode-startRaft-run" class="headerlink" title="main.newRaftNode.startRaft.run"></a>main.newRaftNode.startRaft.run</h3><p>该方法是一个相当重要的方法</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span> <span class="hljs-title">run</span><span class="hljs-params">(r *raft)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> propc <span class="hljs-keyword">chan</span> msgWithResult</span><br><span class="line"><span class="hljs-keyword">var</span> readyc <span class="hljs-keyword">chan</span> Ready</span><br><span class="line"><span class="hljs-keyword">var</span> advancec <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> prevLastUnstablei, prevLastUnstablet <span class="hljs-keyword">uint64</span></span><br><span class="line"><span class="hljs-keyword">var</span> havePrevLastUnstablei <span class="hljs-keyword">bool</span></span><br><span class="line"><span class="hljs-keyword">var</span> prevSnapi <span class="hljs-keyword">uint64</span></span><br><span class="line"><span class="hljs-keyword">var</span> applyingToI <span class="hljs-keyword">uint64</span></span><br><span class="line"><span class="hljs-keyword">var</span> rd Ready</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// None 是没有领导者时使用的占位符节点ID。</span></span><br><span class="line">lead := None</span><br><span class="line">prevSoftSt := r.softState()</span><br><span class="line">prevHardSt := emptyState</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// raft Node</span></span><br><span class="line"><span class="hljs-comment">//raftNode结构体主循环：</span></span><br><span class="line"><span class="hljs-comment">//如果proposeC中有数据写入：</span></span><br><span class="line"><span class="hljs-comment">//调用node.Propose向raft库提交数据</span></span><br><span class="line"><span class="hljs-comment">//如果confChangeC中有数据写入：</span></span><br><span class="line"><span class="hljs-comment">//调用node.Node.ProposeConfChange向raft库提交配置变更数据</span></span><br><span class="line"><span class="hljs-comment">//如果tick定时器到期：</span></span><br><span class="line"><span class="hljs-comment">//调用node.Tick函数进行raft库的定时操作</span></span><br><span class="line"><span class="hljs-comment">//如果node.Ready()函数返回的Ready结构体channel有数据变更：</span></span><br><span class="line"><span class="hljs-comment">//依次处理Ready结构体中各成员数据</span></span><br><span class="line"><span class="hljs-comment">//处理完毕之后调用node.Advance函数进行收尾处理</span></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> advancec != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">readyc = <span class="hljs-literal">nil</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//  这里做一个准备,msg 是从这里开始创建的</span></span><br><span class="line">rd = newReady(r, prevSoftSt, prevHardSt)</span><br><span class="line"><span class="hljs-keyword">if</span> rd.containsUpdates() &#123;</span><br><span class="line">readyc = n.readyc</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">readyc = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> lead != r.lead &#123;</span><br><span class="line"><span class="hljs-comment">// 如果有leader节点</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.hasLeader() &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> lead == None &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"raft.node: %x elected leader %x at term %d"</span>, r.id, r.lead, r.Term)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"raft.node: %x changed leader from %x to %x at term %d"</span>, r.id, lead, r.lead, r.Term)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 处理消息结果集</span></span><br><span class="line">propc = n.propc</span><br><span class="line"><span class="hljs-comment">// 如果没有leader节点</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"raft.node: %x lost leader %x at term %d"</span>, r.id, lead, r.Term)</span><br><span class="line">propc = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 设置当前的leader鸡诶单</span></span><br><span class="line">lead = r.lead</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-comment">// TODO：如果存在配置,可能缓冲配置建议（方式</span></span><br><span class="line"><span class="hljs-comment">// 在raft文中描述）</span></span><br><span class="line"><span class="hljs-comment">// 目前它在静默中被丢弃。</span></span><br><span class="line"><span class="hljs-comment">// 从处理结果集中拿到消息</span></span><br><span class="line"><span class="hljs-keyword">case</span> pm := &lt;-propc:</span><br><span class="line">m := pm.m</span><br><span class="line">m.From = r.id</span><br><span class="line"><span class="hljs-comment">// 修改状态机的状态</span></span><br><span class="line">err := r.Step(m)</span><br><span class="line"><span class="hljs-keyword">if</span> pm.result != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">pm.result &lt;- err</span><br><span class="line"><span class="hljs-built_in">close</span>(pm.result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 从接受的消息</span></span><br><span class="line"><span class="hljs-keyword">case</span> m := &lt;-n.recvc:</span><br><span class="line"><span class="hljs-comment">// 从未知发件人中筛选出响应消息。</span></span><br><span class="line"><span class="hljs-keyword">if</span> pr := r.getProgress(m.From); pr != <span class="hljs-literal">nil</span> || !IsResponseMsg(m.Type) &#123;</span><br><span class="line"><span class="hljs-comment">// 修改状态机状态</span></span><br><span class="line">r.Step(m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 从配置消息中</span></span><br><span class="line"><span class="hljs-keyword">case</span> cc := &lt;-n.confc:</span><br><span class="line"><span class="hljs-keyword">if</span> cc.NodeID == None &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> n.confstatec &lt;- pb.ConfState&#123;</span><br><span class="line">Nodes:    r.nodes(),</span><br><span class="line">Learners: r.learnerNodes()&#125;:</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-n.done:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">switch</span> cc.Type &#123;</span><br><span class="line"><span class="hljs-comment">// 添加节点</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.ConfChangeAddNode:</span><br><span class="line">r.addNode(cc.NodeID)</span><br><span class="line"><span class="hljs-comment">// 添加学习者节点</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.ConfChangeAddLearnerNode:</span><br><span class="line">r.addLearner(cc.NodeID)</span><br><span class="line"><span class="hljs-comment">// 移除节点</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.ConfChangeRemoveNode:</span><br><span class="line"><span class="hljs-comment">// 删除本地节点时阻止传入的建议</span></span><br><span class="line"><span class="hljs-keyword">if</span> cc.NodeID == r.id &#123;</span><br><span class="line">propc = <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">r.removeNode(cc.NodeID)</span><br><span class="line"><span class="hljs-comment">// 更新节点</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.ConfChangeUpdateNode:</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"unexpected conf type"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> n.confstatec &lt;- pb.ConfState&#123;</span><br><span class="line">Nodes:    r.nodes(),</span><br><span class="line">Learners: r.learnerNodes()&#125;:</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-n.done:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 心跳和选举的timeout</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-n.tickc:</span><br><span class="line">r.tick()</span><br><span class="line"><span class="hljs-comment">// Ready是各种准备好的变更</span></span><br><span class="line"><span class="hljs-keyword">case</span> readyc &lt;- rd:</span><br><span class="line"><span class="hljs-keyword">if</span> rd.SoftState != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">prevSoftSt = rd.SoftState</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rd.Entries) &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line">prevLastUnstablei = rd.Entries[<span class="hljs-built_in">len</span>(rd.Entries)<span class="hljs-number">-1</span>].Index</span><br><span class="line">prevLastUnstablet = rd.Entries[<span class="hljs-built_in">len</span>(rd.Entries)<span class="hljs-number">-1</span>].Term</span><br><span class="line">havePrevLastUnstablei = <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !IsEmptyHardState(rd.HardState) &#123;</span><br><span class="line">prevHardSt = rd.HardState</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !IsEmptySnap(rd.Snapshot) &#123;</span><br><span class="line">prevSnapi = rd.Snapshot.Metadata.Index</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> index := rd.appliedCursor(); index != <span class="hljs-number">0</span> &#123;</span><br><span class="line">applyingToI = index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.msgs = <span class="hljs-literal">nil</span></span><br><span class="line">r.readStates = <span class="hljs-literal">nil</span></span><br><span class="line">r.reduceUncommittedSize(rd.CommittedEntries)</span><br><span class="line">advancec = n.advancec</span><br><span class="line"><span class="hljs-comment">// 确认Ready已经处理完的</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-advancec:</span><br><span class="line"><span class="hljs-keyword">if</span> applyingToI != <span class="hljs-number">0</span> &#123;</span><br><span class="line">r.raftLog.appliedTo(applyingToI)</span><br><span class="line">applyingToI = <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> havePrevLastUnstablei &#123;</span><br><span class="line">r.raftLog.stableTo(prevLastUnstablei, prevLastUnstablet)</span><br><span class="line">havePrevLastUnstablei = <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">r.raftLog.stableSnapTo(prevSnapi)</span><br><span class="line">advancec = <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-comment">// 状态变更的消息</span></span><br><span class="line"><span class="hljs-keyword">case</span> c := &lt;-n.status:</span><br><span class="line">c &lt;- getStatus(r)</span><br><span class="line"><span class="hljs-comment">// 是否有停止节点的消息</span></span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-n.stop:</span><br><span class="line"><span class="hljs-built_in">close</span>(n.done)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>raftNode结构体主循环：</p><ol><li>如果proposeC中有数据写入（外部通信）:调用状态机进行处理</li><li>如果recvc中有数据写入(内部通信),调用状态机进行处理</li><li>如果confChangeC中有数据写入：调用node.Node.ProposeConfChange向raft库提交配置变更数据</li><li>如果tick定时器到期：,调用node.Tick函数进行raft库的定时操作</li><li>如果node.Ready()函数返回的Ready结构体channel有数据变更：依次处理Ready结构体中各成员数据</li><li>处理完毕之后调用node.Advance函数,进行持久化或者快照操作</li><li>如果状态有变更就变更状态</li><li>监听节点是否停止的消息</li></ol><h3 id="main-newRaftNode-startRaft-Step"><a href="#main-newRaftNode-startRaft-Step" class="headerlink" title="main.newRaftNode.startRaft.Step"></a>main.newRaftNode.startRaft.Step</h3><p>状态机器处理过程,这是raft的核心逻辑</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 状态机器理过程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *raft)</span> <span class="hljs-title">Step</span><span class="hljs-params">(m pb.Message)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//处理消息任期,这可能导致我们踩到追随者。</span></span><br><span class="line"><span class="hljs-keyword">switch</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 如果任期为0</span></span><br><span class="line"><span class="hljs-keyword">case</span> m.Term == <span class="hljs-number">0</span>:</span><br><span class="line"><span class="hljs-comment">// local message</span></span><br><span class="line"><span class="hljs-comment">// 如果传入消息的任期大于当前节点的任期</span></span><br><span class="line"><span class="hljs-comment">//1.首先该函数会判断msg.Term是否大于本节点的Term,如果消息的任期号更大则说明是一次新的选举。这种情况下将根据msg.Context是否等于“CampaignTransfer”字符串来确定是不是一次由于leader迁移导致的强制选举过</span></span><br><span class="line"><span class="hljs-comment">// 程。同时也会根据当前的electionElapsed是否小于electionTimeout来确定是否还在租约期以内。如果既不是强制leader选举又在租约期以内,那么节点将忽略该消息的处理,在论文4.2.3部分论述这样做的原因,是为了避免</span></span><br><span class="line"><span class="hljs-comment">// 已经离开集群的节点在不知道自己已经不在集群内的情况下,仍然频繁的向集群内节点发起选举导致耗时在这种无效的选举流程中。如果以上检查流程通过了,说明可以进行选举了,如果消息类型还不是MsgPreVote类型,那么此时节</span></span><br><span class="line"><span class="hljs-comment">// 点会切换到follower状态且认为发送消息过来的节点msg.From是新的leader。</span></span><br><span class="line"><span class="hljs-keyword">case</span> m.Term &gt; r.Term:</span><br><span class="line"><span class="hljs-comment">// 如果是 投票或者 与投票类型</span></span><br><span class="line"><span class="hljs-keyword">if</span> m.Type == pb.MsgVote || m.Type == pb.MsgPreVote &#123;</span><br><span class="line"><span class="hljs-comment">// 当context为campaignTransfer时表示强制要求进行竞选</span></span><br><span class="line">force := bytes.Equal(m.Context, []<span class="hljs-keyword">byte</span>(campaignTransfer))</span><br><span class="line"><span class="hljs-comment">// 判断当前是否在租约期以内,判断的条件包括：checkQuorum为true,当前节点保存的leader不为空,没有到选举超时,前面这三个条件同时满足。</span></span><br><span class="line">inLease := r.checkQuorum &amp;&amp; r.lead != None &amp;&amp; r.electionElapsed &lt; r.electionTimeout</span><br><span class="line"><span class="hljs-keyword">if</span> !force &amp;&amp; inLease &#123;</span><br><span class="line"><span class="hljs-comment">// 如果非强制,而且又在租约期以内,就不做任何处理</span></span><br><span class="line"><span class="hljs-comment">// 非强制又在租约期内可以忽略选举消息,见论文的4.2.3,这是为了阻止已经离开集群的节点再次发起投票请求</span></span><br><span class="line"><span class="hljs-comment">// If a server receives a RequestVote request within the minimum election timeout</span></span><br><span class="line"><span class="hljs-comment">// of hearing from a current leader, it does not update its term or grant its vote</span></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [logterm: %d, index: %d, vote: %x] ignored %s from %x [logterm: %d, index: %d] at term %d: lease is not expired (remaining ticks: %d)"</span>,</span><br><span class="line">r.id, r.raftLog.lastTerm(), r.raftLog.lastIndex(), r.Vote, m.Type, m.From, m.LogTerm, m.Index, r.Term, r.electionTimeout-r.electionElapsed)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 如果是与投票类型</span></span><br><span class="line"><span class="hljs-keyword">switch</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> m.Type == pb.MsgPreVote:</span><br><span class="line"><span class="hljs-comment">// 在应答一个prevote消息时不对任期term做修改</span></span><br><span class="line"><span class="hljs-comment">// Never change our term in response to a PreVote</span></span><br><span class="line"><span class="hljs-keyword">case</span> m.Type == pb.MsgPreVoteResp &amp;&amp; !m.Reject:</span><br><span class="line"><span class="hljs-comment">//我们将在未来发送带有期限的投票前请求。如果</span></span><br><span class="line"><span class="hljs-comment">//投票前获得批准,当我们获得投票时,我们将增加我们的期限</span></span><br><span class="line"><span class="hljs-comment">//法定人数如果不是,则该任期来自节点</span></span><br><span class="line"><span class="hljs-comment">//拒绝了我们的投票,所以我们应该成为新的追随者期限</span></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term: %d] received a %s message with higher term from %x [term: %d]"</span>,</span><br><span class="line">r.id, r.Term, m.Type, m.From, m.Term)</span><br><span class="line"><span class="hljs-comment">// 如果是日志复制复制,或者心跳,或者快照信息  认为发送过来的节点是新的leader</span></span><br><span class="line"><span class="hljs-keyword">if</span> m.Type == pb.MsgApp || m.Type == pb.MsgHeartbeat || m.Type == pb.MsgSnap &#123;</span><br><span class="line"><span class="hljs-comment">// 成为发送消息方等的跟随者</span></span><br><span class="line">r.becomeFollower(m.Term, m.From)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 当前节点领导者设置为空,并更新任期为传入消息的任期,因为传入消息任期是大的</span></span><br><span class="line">r.becomeFollower(m.Term, None)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 如果传入消息的任期小于当前节点的任期</span></span><br><span class="line"><span class="hljs-keyword">case</span> m.Term &lt; r.Term:</span><br><span class="line"><span class="hljs-comment">// check quorum  eader 向集群的所有节点发起广播,如果还能收到大多数节点的响应,处理读请求。</span></span><br><span class="line"><span class="hljs-keyword">if</span> (r.checkQuorum || r.preVote) &amp;&amp; (m.Type == pb.MsgHeartbeat || m.Type == pb.MsgApp) &#123;</span><br><span class="line"><span class="hljs-comment">//我们收到了来自低任期领导的消息。有可能的</span></span><br><span class="line"><span class="hljs-comment">//这些消息只是在网络中被延迟了,但是这可以</span></span><br><span class="line"><span class="hljs-comment">//也表示此节点在网络中提升了其任期编号</span></span><br><span class="line"><span class="hljs-comment">//分区,它现在无法赢得选举或重新加入</span></span><br><span class="line"><span class="hljs-comment">//旧词的多数。如果checkQuorum为false,则为</span></span><br><span class="line"><span class="hljs-comment">//通过递增任期编号来响应MsgVote来处理</span></span><br><span class="line"><span class="hljs-comment">//更高的任期,但如果checkQuorum为真,我们可能无法推进该任期</span></span><br><span class="line"><span class="hljs-comment">// MsgVote并且必须生成其他消息以推进该任期。互联网</span></span><br><span class="line"><span class="hljs-comment">//这两个功能的结果是最小化由中断引起的</span></span><br><span class="line"><span class="hljs-comment">//已从群集配置中删除的节点：a</span></span><br><span class="line"><span class="hljs-comment">//删除的节点将发送将被忽略的MsgVotes（或MsgPreVotes）,</span></span><br><span class="line"><span class="hljs-comment">//但它不会收到MsgApp或MsgHeartbeat,所以它不会创建</span></span><br><span class="line"><span class="hljs-comment">//通过通知领导者此节点的活动性来增加破坏性任期。</span></span><br><span class="line"><span class="hljs-comment">//以上评论也适用于预投票</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//当追随者被隔离时,很快就会开始选举结束</span></span><br><span class="line"><span class="hljs-comment">//比起领导者更高的学期,虽然不会得到足够的</span></span><br><span class="line"><span class="hljs-comment">//投票赢得大选。当它重新获得连接时,这种反应</span></span><br><span class="line"><span class="hljs-comment">//使用更高级别的“pb.MsgAppResp”会迫使领导者下台。</span></span><br><span class="line"><span class="hljs-comment">//但是,这种中断是不可避免的</span></span><br><span class="line"><span class="hljs-comment">//新选举这可以通过预投票阶段来预防。</span></span><br><span class="line">r.send(pb.Message&#123;To: m.From, Type: pb.MsgAppResp&#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> m.Type == pb.MsgPreVote &#123;</span><br><span class="line"><span class="hljs-comment">//在预投票启用之前,可能有更高期限的候选人,</span></span><br><span class="line"><span class="hljs-comment">//但更少的日志。更新到Pre-Vote后,群集可能会死锁</span></span><br><span class="line"><span class="hljs-comment">//我们删除较低期限的邮件。</span></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [logterm: %d, index: %d, vote: %x] rejected %s from %x [logterm: %d, index: %d] at term %d"</span>,</span><br><span class="line">r.id, r.raftLog.lastTerm(), r.raftLog.lastIndex(), r.Vote, m.Type, m.From, m.LogTerm, m.Index, r.Term)</span><br><span class="line">r.send(pb.Message&#123;To: m.From, Term: r.Term, Type: pb.MsgPreVoteResp, Reject: <span class="hljs-literal">true</span>&#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">//忽略其他情况</span></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term: %d] ignored a %s message with lower term from %x [term: %d]"</span>,</span><br><span class="line">r.id, r.Term, m.Type, m.From, m.Term)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">switch</span> m.Type &#123;</span><br><span class="line"><span class="hljs-comment">// 选举信息</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgHup:</span><br><span class="line"><span class="hljs-keyword">if</span> r.state != StateLeader &#123;</span><br><span class="line">ents, err := r.raftLog.slice(r.raftLog.applied+<span class="hljs-number">1</span>, r.raftLog.committed+<span class="hljs-number">1</span>, noLimit)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">r.logger.Panicf(<span class="hljs-string">"unexpected error getting unapplied entries (%v)"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n := numOfPendingConf(ents); n != <span class="hljs-number">0</span> &amp;&amp; r.raftLog.committed &gt; r.raftLog.applied &#123;</span><br><span class="line">r.logger.Warningf(<span class="hljs-string">"%x cannot campaign at term %d since there are still %d pending configuration changes to apply"</span>, r.id, r.Term, n)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x is starting a new election at term %d"</span>, r.id, r.Term)</span><br><span class="line"><span class="hljs-keyword">if</span> r.preVote &#123;</span><br><span class="line">r.campaign(campaignPreElection)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.campaign(campaignElection)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x ignoring MsgHup because already leader"</span>, r.id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//2.在raft.Step函数的后面,会判断消息类型是MsgVote或者MsgPreVote来进一步进行处理。其判断条件是以下两个条件同时成立：</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//2.1.当前没有给任何节点进行过投票（r.Vote == None ）,或者消息的任期号更大（m.Term &gt; r.Term ）,或者是之前已经投过票的节点（r.Vote == m.From)）。这个条件是检查是否可以还能给该节点投票。</span></span><br><span class="line"><span class="hljs-comment">//2.2.同时该节点的日志数据是最新的（r.raftLog.isUpToDate(m.Index, m.LogTerm) ）。这个条件是检查这个节点上的日志数据是否足够的新。 只有在满足以上两个条件的情况下,节点才投票给这个消息节点,将修改raft.Vote为消息发送者ID。如果不满足条件,将应答msg.Reject=true,拒绝该节点的投票消息。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgVote, pb.MsgPreVote:</span><br><span class="line"><span class="hljs-comment">//如果是在续租之内那么就忽视</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.isLearner &#123;</span><br><span class="line"><span class="hljs-comment">// TODO：学习者可能需要投票,如果节点在交换时失败。</span></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [logterm: %d, index: %d, vote: %x] ignored %s from %x [logterm: %d, index: %d] at term %d: learner can not vote"</span>,</span><br><span class="line">r.id, r.raftLog.lastTerm(), r.raftLog.lastIndex(), r.Vote, m.Type, m.From, m.LogTerm, m.Index, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//之前已经投过票的节点</span></span><br><span class="line">canVote := r.Vote == m.From ||</span><br><span class="line"><span class="hljs-comment">// 当前没有给任何节点进行过投票,并且没有领导者......</span></span><br><span class="line">(r.Vote == None &amp;&amp; r.lead == None) ||</span><br><span class="line"><span class="hljs-comment">// 消息i和一个预投票,并且消息的任期号更大</span></span><br><span class="line">(m.Type == pb.MsgPreVote &amp;&amp; m.Term &gt; r.Term)</span><br><span class="line"><span class="hljs-comment">// r.raftLog.isUpToDate该节点的日志数据是最新的</span></span><br><span class="line"><span class="hljs-keyword">if</span> canVote &amp;&amp; r.raftLog.isUpToDate(m.Index, m.LogTerm) &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [logterm: %d, index: %d, vote: %x] cast %s for %x [logterm: %d, index: %d] at term %d"</span>,</span><br><span class="line">r.id, r.raftLog.lastTerm(), r.raftLog.lastIndex(), r.Vote, m.Type, m.From, m.LogTerm, m.Index, r.Term)</span><br><span class="line">r.send(pb.Message&#123;To: m.From, Term: m.Term, Type: voteRespMsgType(m.Type)&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> m.Type == pb.MsgVote &#123;</span><br><span class="line">r.electionElapsed = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">r.Vote = m.From</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [logterm: %d, index: %d, vote: %x] rejected %s from %x [logterm: %d, index: %d] at term %d"</span>,</span><br><span class="line">r.id, r.raftLog.lastTerm(), r.raftLog.lastIndex(), r.Vote, m.Type, m.From, m.LogTerm, m.Index, r.Term)</span><br><span class="line"><span class="hljs-comment">// 否则拒绝投票</span></span><br><span class="line">r.send(pb.Message&#123;To: m.From, Term: r.Term, Type: voteRespMsgType(m.Type), Reject: <span class="hljs-literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">err := r.step(r, m)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件是:</p><ol><li>如果任期为0,不做处理</li><li>如果消息任期大于当前节点的任期<ul><li>如果是预投票或者和投票类型<ul><li>如果非强制,而且又在租约期以内,就不做任何处理（见论文的4.2.3,这是为了阻止已经离开集群的节点再次发起投票请求） ⚠️结束</li></ul></li><li>如果是MsgPreVote类型,在应答一个prevote消息时不对任期term做修改 (防止分区导致的,领导人重新选举)</li><li>如果是MsgPreVoteResp类型并且没有拒绝</li><li>如果上面两者都不是的话<ul><li>如果是领导者给跟随者发的消息或者收到了心跳或者收到了快照信息,就将当前节点,设置为跟随者。（根据论文 5.2 领导人选举 这一节）</li><li>否则就将领导者设置为空,因为不满足上面的条件不应当处理</li></ul></li></ul></li><li>如果传入消息的任期小于当前节点的任期<ul><li>在等待投票的时候,候选人可能会从其他的服务器接收到声明它是领导人的附加日志项 RPC。如果这个领导人的任期号（包含在此次的 RPC中）不小于候选人当前的任期号,那么候选人会承认领导人合法并回到跟随者状态 （根据论文 5.2 领导人选举 这一节）</li><li>如果是MsgPreVote类型,会拒绝,因为候选人的任期没有当前节点的任期大,日志不是最新的。</li><li>否则忽略其他类型 ⚠️结束</li></ul></li><li>如果是选举类型 （该类型只会由本节点发送给自己）<ul><li>如果状态不是领导者<ul><li>如果待处理的配置更改要应用,因此无法进行选举  ⚠️结束</li><li>如果状态是预投票,就开始预选举</li><li>如果状态是正式投票,就开始正式选举</li></ul></li><li>如果是领导者就是忽略这条消息</li></ul></li><li>如果是预投票或者和投票类型<ul><li>如果该节点是学习者,学习者不能投票  ⚠️结束</li><li>如果  （1.)之前已经投过票的节点 或者 2.)当前没有给任何节点进行过投票,并且没有领导者 或者 3.)消息是预投票,并且消息的任期号更大）并且（该节点的日志数据是最新的） 就投票给这个消息节点,将修改raft.Vote为消息发送者ID</li><li>否则 将应答msg.Reject=true,拒绝该节点的投票消息</li></ul><ol start="6"><li>如果上面两种状态都不是,就进入特有身份处理步骤中</li></ol><ul><li>stepLeader</li><li>stepCandidate</li><li>stepFollower</li></ul></li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stepLeader</span><span class="hljs-params">(r *raft, m pb.Message)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">//这些消息类型不需要m.From的任何进展。</span></span><br><span class="line"><span class="hljs-keyword">switch</span> m.Type &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgBeat:</span><br><span class="line">r.bcastHeartbeat()</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-comment">//leader的定时器函数,在超过选举时间时,如果当前打开了raft.checkQuorum开关,那么leader将给自己发送一条MsgCheckQuorum消息,对该消息的处理是：</span></span><br><span class="line"><span class="hljs-comment">//检查集群中所有节点的状态,如果超过半数的节点都不活跃了,那么leader也切换到follower状态。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgCheckQuorum:</span><br><span class="line"><span class="hljs-keyword">if</span> !r.checkQuorumActive() &#123;</span><br><span class="line">r.logger.Warningf(<span class="hljs-string">"%x stepped down to follower since quorum is not active"</span>, r.id)</span><br><span class="line">r.becomeFollower(r.Term, None)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//  raft库的使用者向raft库propose数据时,最后会封装成这个类型的消息来进行提交,不同类型的节点处理还不尽相同。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgProp:</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(m.Entries) == <span class="hljs-number">0</span> &#123;</span><br><span class="line">r.logger.Panicf(<span class="hljs-string">"%x stepped empty MsgProp"</span>, r.id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> _, ok := r.prs[r.id]; !ok &#123;</span><br><span class="line"><span class="hljs-comment">//如果我们当前不是范围的成员（即此节点）</span></span><br><span class="line"><span class="hljs-comment">//作为领导者从配置中删除了）,</span></span><br><span class="line"><span class="hljs-comment">//删除任何新提案。</span></span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> r.leadTransferee != None &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x [term %d] transfer leadership to %x is in progress; dropping proposal"</span>, r.id, r.Term, r.leadTransferee)</span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i, e := <span class="hljs-keyword">range</span> m.Entries &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> e.Type == pb.EntryConfChange &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> r.pendingConfIndex &gt; r.raftLog.applied &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"propose conf %s ignored since pending unapplied configuration [index %d, applied %d]"</span>,</span><br><span class="line">e.String(), r.pendingConfIndex, r.raftLog.applied)</span><br><span class="line">m.Entries[i] = pb.Entry&#123;Type: pb.EntryNormal&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.pendingConfIndex = r.raftLog.lastIndex() + <span class="hljs-keyword">uint64</span>(i) + <span class="hljs-number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> !r.appendEntry(m.Entries...) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line">&#125;</span><br><span class="line">r.bcastAppend()</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-comment">// 其中,entries数组只会有一条数据,带上的是应用层此次请求的标识数据,在follower收到MsgReadIndex消息进行应答时,同样需要把这个数据原样带回返回给leader,详细的线性读一致性的实现在后面展开分析。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgReadIndex:</span><br><span class="line"><span class="hljs-keyword">if</span> r.quorum() &gt; <span class="hljs-number">1</span> &#123;</span><br><span class="line"><span class="hljs-comment">//  首先如果该leader在成为新的leader之后没有提交过任何值,那么会直接返回不做处理。</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.raftLog.zeroTermOnErrCompacted(r.raftLog.term(r.raftLog.committed)) != r.Term &#123;</span><br><span class="line"><span class="hljs-comment">//当此领导者未在其任期内提交任何日志条目时,拒绝只读请求。</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//思考：使用一个内部定义的上下文而不是用户给定的上下文。</span></span><br><span class="line"><span class="hljs-comment">//我们可以用任期和索引来表示,而不是用户提供的值。</span></span><br><span class="line"><span class="hljs-comment">//这将允许多次读取捎带在同一条消息上。</span></span><br><span class="line"><span class="hljs-keyword">switch</span> r.readOnly.option &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> ReadOnlySafe:</span><br><span class="line"><span class="hljs-comment">// 保存该MsgreadIndex请求到来时的commit索引。</span></span><br><span class="line">r.readOnly.addRequest(r.raftLog.committed, m)</span><br><span class="line"><span class="hljs-comment">// 向集群中所有其他节点广播一个心跳消息MsgHeartbeat,并且在其中带上该读请求的唯一标识。</span></span><br><span class="line">r.bcastHeartbeatWithCtx(m.Entries[<span class="hljs-number">0</span>].Data)</span><br><span class="line"><span class="hljs-keyword">case</span> ReadOnlyLeaseBased:</span><br><span class="line">ri := r.raftLog.committed</span><br><span class="line"><span class="hljs-keyword">if</span> m.From == None || m.From == r.id &#123; <span class="hljs-comment">// from local member</span></span><br><span class="line">r.readStates = <span class="hljs-built_in">append</span>(r.readStates, ReadState&#123;Index: r.raftLog.committed, RequestCtx: m.Entries[<span class="hljs-number">0</span>].Data&#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.send(pb.Message&#123;To: m.From, Type: pb.MsgReadIndexResp, Index: ri, Entries: m.Entries&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;                                  <span class="hljs-comment">// there is only one voting member (the leader) in the cluster</span></span><br><span class="line"><span class="hljs-keyword">if</span> m.From == None || m.From == r.id &#123; <span class="hljs-comment">// from leader itself</span></span><br><span class="line">r.readStates = <span class="hljs-built_in">append</span>(r.readStates, ReadState&#123;Index: r.raftLog.committed, RequestCtx: m.Entries[<span class="hljs-number">0</span>].Data&#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//来自学习者成员</span></span><br><span class="line">r.send(pb.Message&#123;To: m.From, Type: pb.MsgReadIndexResp, Index: r.raftLog.committed, Entries: m.Entries&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All other message types require a progress for m.From (pr).</span></span><br><span class="line">pr := r.getProgress(m.From)</span><br><span class="line"><span class="hljs-keyword">if</span> pr == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x no progress available for %x"</span>, r.id, m.From)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">switch</span> m.Type &#123;</span><br><span class="line"><span class="hljs-comment">//在节点收到leader的MsgApp/MsgSnap消息时,可能出现leader上的数据与自身节点数据不一致的情况,这种情况下会返回reject为true的MsgAppResp消息,同时rejectHint字段是本节点raft最后一条日志的索引ID。</span></span><br><span class="line"><span class="hljs-comment">//而index字段则返回的是当前节点的日志索引ID,用于向leader汇报自己已经commit的日志数据ID,这样leader就知道下一次同步数据给这个节点时,从哪条日志数据继续同步了。</span></span><br><span class="line"><span class="hljs-comment">//leader节点在收到MsgAppResp消息的处理流程大体如下（stepLeader函数中MsgAppResp case的处理流程）。</span></span><br><span class="line"><span class="hljs-comment">//首先,收到节点的MsgAppResp消息,说明该节点是活跃的,因此保存节点状态的RecentActive成员置为true。</span></span><br><span class="line"><span class="hljs-comment">//接下来,再根据msg.Reject的返回值,即节点是否拒绝了这次数据同步,来区分两种情况进行处理。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//msg.Reject为true的情况</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果msg.Reject为true,说明节点拒绝了前面的MsgApp/MsgSnap消息,根据msg.RejectHint成员回退leader上保存的关于该节点的日志记录状态。比如leader前面认为从日志索引为10的位置开始向节点A同步数据,但是节点A拒绝了这次数据同步,同时返回RejectHint为2,说明节点A告知leader在它上面保存的最大日志索引ID为2,这样下一次leader就可以直接从索引为2的日志数据开始同步数据到节点A。而如果没有这个RejectHint成员,leader只能在每次被拒绝数据同步后都递减1进行下一次数据同步,显然这样是低效的。</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//1.因为上面节点拒绝了这次数据同步,所以节点的状态可能存在一些异常,此时如果leader上保存的节点状态为ProgressStateReplicate,那么将切换到ProgressStateProbe状态（关于这几种状态,下面会谈到）。</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//2.前面已经按照msg.RejectHint修改了leader上关于该节点日志状态的索引数据,接着再次尝试按照这个新的索引数据向该节点再次同步数据。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//msg.Reject为false的情况</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//这种情况说明这个节点通过了leader的这一次数据同步请求,这种情况下根据msg.Index来判断在leader中保存的该节点日志数据索引是否发生了更新,如果发生了更新那么就说明这个节点通过了新的数据,这种情况下会做以下的几个操作。</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//1.修改节点状态</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//1.1如果该节点之前在ProgressStateProbe状态,说明之前处于探测状态,此时可以切换到ProgressStateReplicate,开始正常的接收leader的同步数据了。</span></span><br><span class="line"><span class="hljs-comment">//1.2如果之前处于ProgressStateSnapshot状态,即还在同步副本,说明节点之前可能落后leader数据比较多才采用了接收副本的状态。这里还需要多做一点解释,因为在节点落后leader数据很多的情况下,可能leader会多次通过snapshot同步数据给节点,而当 pr.Match &gt;= pr.PendingSnapshot的时候,说明通过快照来同步数据的流程完成了,这时可以进入正常的接收同步数据状态了,这就是函数Progress.needSnapshotAbort要做的判断。</span></span><br><span class="line"><span class="hljs-comment">//1.3.如果之前处于ProgressStateReplicate状态,此时可以修改leader关于这个节点的滑动窗口索引,释放掉这部分数据索引,好让节点可以接收新的数据了。关于这个滑动窗口设计,见下面详细解释。</span></span><br><span class="line"><span class="hljs-comment">//2.判断是否有新的数据可以提交（commit）了。因为raft的提交数据的流程是这样的：首先节点将数据提议（propose）给leader,leader在将数据写入到自己的日志成功之后,再通过MsgApp把这些提议的数据广播给集群中的其他节点,在某一条日志数据收到超过半数（qurom）的节点同意之后,才认为是可以提交（commit）的。因此每次leader节点在收到一条MsgAppResp类型消息,同时msg.Reject又是false的情况下,都需要去检查当前有哪些日志是超过半数的节点同意的,再将这些可以提交（commit）的数据广播出去。而在没有数据可以提交的情况下,如果之前节点处于暂停状态,那么将继续向该节点同步数据。</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//3.最后还要做一个跟leader迁移相关的操作。如果该消息节点是准备迁移过去的新leader节点（raft.leadTransferee == msg.From）,而且此时该节点上的Match索引已经跟旧的leader的日志最大索引一致,说明新旧节点的日志数据已经同步,可以正式进行集群leader迁移操作了。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgAppResp:</span><br><span class="line">pr.RecentActive = <span class="hljs-literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> m.Reject &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x received msgApp rejection(lastindex: %d) from %x for index %d"</span>,</span><br><span class="line">r.id, m.RejectHint, m.From, m.Index)</span><br><span class="line"><span class="hljs-keyword">if</span> pr.maybeDecrTo(m.Index, m.RejectHint) &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x decreased progress of %x to [%s]"</span>, r.id, m.From, pr)</span><br><span class="line"><span class="hljs-keyword">if</span> pr.State == ProgressStateReplicate &#123;</span><br><span class="line">pr.becomeProbe()</span><br><span class="line">&#125;</span><br><span class="line">r.sendAppend(m.From)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">oldPaused := pr.IsPaused()</span><br><span class="line"><span class="hljs-keyword">if</span> pr.maybeUpdate(m.Index) &#123;</span><br><span class="line"><span class="hljs-keyword">switch</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> pr.State == ProgressStateProbe:</span><br><span class="line">pr.becomeReplicate()</span><br><span class="line"><span class="hljs-keyword">case</span> pr.State == ProgressStateSnapshot &amp;&amp; pr.needSnapshotAbort():</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x snapshot aborted, resumed sending replication messages to %x [%s]"</span>, r.id, m.From, pr)</span><br><span class="line"><span class="hljs-comment">// Transition back to replicating state via probing state</span></span><br><span class="line"><span class="hljs-comment">// (which takes the snapshot into account). If we didn't</span></span><br><span class="line"><span class="hljs-comment">// move to replicating state, that would only happen with</span></span><br><span class="line"><span class="hljs-comment">// the next round of appends (but there may not be a next</span></span><br><span class="line"><span class="hljs-comment">// round for a while, exposing an inconsistent RaftStatus).</span></span><br><span class="line">pr.becomeProbe()</span><br><span class="line">pr.becomeReplicate()</span><br><span class="line"><span class="hljs-keyword">case</span> pr.State == ProgressStateReplicate:</span><br><span class="line">pr.ins.freeTo(m.Index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> r.maybeCommit() &#123;</span><br><span class="line">r.bcastAppend()</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> oldPaused &#123;</span><br><span class="line"><span class="hljs-comment">// If we were paused before, this node may be missing the</span></span><br><span class="line"><span class="hljs-comment">// latest commit index, so send it.</span></span><br><span class="line">r.sendAppend(m.From)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// We've updated flow control information above, which may</span></span><br><span class="line"><span class="hljs-comment">// allow us to send multiple (size-limited) in-flight messages</span></span><br><span class="line"><span class="hljs-comment">// at once (such as when transitioning from probe to</span></span><br><span class="line"><span class="hljs-comment">// replicate, or when freeTo() covers multiple messages). If</span></span><br><span class="line"><span class="hljs-comment">// we have more entries to send, send as many messages as we</span></span><br><span class="line"><span class="hljs-comment">// can (without sending empty messages for the commit index)</span></span><br><span class="line"><span class="hljs-keyword">for</span> r.maybeSendAppend(m.From, <span class="hljs-literal">false</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Transfer leadership is in progress.</span></span><br><span class="line"><span class="hljs-keyword">if</span> m.From == r.leadTransferee &amp;&amp; pr.Match == r.raftLog.lastIndex() &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x sent MsgTimeoutNow to %x after received MsgAppResp"</span>, r.id, m.From)</span><br><span class="line">r.sendTimeoutNow(m.From)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//leader中会定时向集群中其他节点发送心跳消息,该消息的作用除了探测节点的存活情况之外,还包括：</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">//commit成员：leader选择min[节点上的Match,leader日志最大提交索引],用于告知节点哪些日志可以进行提交（commit）。</span></span><br><span class="line"><span class="hljs-comment">//context：与线性一致性读相关,后面会进行解释。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgHeartbeatResp:</span><br><span class="line">pr.RecentActive = <span class="hljs-literal">true</span></span><br><span class="line">pr.resume()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// free one slot for the full inflights window to allow progress.</span></span><br><span class="line"><span class="hljs-keyword">if</span> pr.State == ProgressStateReplicate &amp;&amp; pr.ins.full() &#123;</span><br><span class="line">pr.ins.freeFirstOne()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> pr.Match &lt; r.raftLog.lastIndex() &#123;</span><br><span class="line">r.sendAppend(m.From)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// leader在接收到MsgHeartbeatResp消息后,如果其中有ctx字段,说明该MsgHeartbeatResp消息对应的MsgHeartbeat消息,是收到ReadIndex时leader消息为了确认自己还是集群leader发送的心跳消息</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.readOnly.option != ReadOnlySafe || <span class="hljs-built_in">len</span>(m.Context) == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 首先会调用r.readOnly.recvAck(m)函数,根据消息中的ctx字段,到全局的pendingReadIndex中查找是否有保存该ctx的带处理的readIndex请求,如果有就在acks map中记录下该follower已经进行了应答。</span></span><br><span class="line">ackCount := r.readOnly.recvAck(m)</span><br><span class="line"><span class="hljs-comment">// 当ack数量超过了集群半数时,意味着该leader仍然还是集群的leader,此时调用r.readOnly.advance(m)函数</span></span><br><span class="line"><span class="hljs-keyword">if</span> ackCount &lt; r.quorum() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 将该readIndex之前的所有readIndex请求都认为是已经成功进行确认的了,所有成功确认的readIndex请求,将会加入到readStates数组中,同时leader也会向follower发送MsgReadIndexResp。</span></span><br><span class="line">rss := r.readOnly.advance(m)</span><br><span class="line"><span class="hljs-keyword">for</span> _, rs := <span class="hljs-keyword">range</span> rss &#123;</span><br><span class="line">req := rs.req</span><br><span class="line"><span class="hljs-keyword">if</span> req.From == None || req.From == r.id &#123; <span class="hljs-comment">// from local member</span></span><br><span class="line">r.readStates = <span class="hljs-built_in">append</span>(r.readStates, ReadState&#123;Index: rs.index, RequestCtx: req.Entries[<span class="hljs-number">0</span>].Data&#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.send(pb.Message&#123;To: req.From, Type: pb.MsgReadIndexResp, Index: rs.index, Entries: req.Entries&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//仅leader处理这类消息：</span></span><br><span class="line"><span class="hljs-comment">//1.如果reject为false：表示接收快照成功,将切换该节点状态到探测状态。</span></span><br><span class="line"><span class="hljs-comment">//2.否则接收失败。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgSnapStatus:</span><br><span class="line"><span class="hljs-keyword">if</span> pr.State != ProgressStateSnapshot &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !m.Reject &#123;</span><br><span class="line">pr.becomeProbe()</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x snapshot succeeded, resumed sending replication messages to %x [%s]"</span>, r.id, m.From, pr)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">pr.snapshotFailure()</span><br><span class="line">pr.becomeProbe()</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x snapshot failed, resumed sending replication messages to %x [%s]"</span>, r.id, m.From, pr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//如果快照完成,请在发送之前等待来自远程节点的msgAppResp</span></span><br><span class="line"><span class="hljs-comment">//淘汰下一个msgApp。</span></span><br><span class="line"><span class="hljs-comment">//如果快照失败,请在下次尝试之前等待心跳间隔</span></span><br><span class="line">pr.pause()</span><br><span class="line"><span class="hljs-comment">// 仅leader才处理这类消息,leader如果判断该节点此时处于正常接收数据的状态（ProgressStateReplicate）,那么就切换到探测状态。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgUnreachable:</span><br><span class="line"><span class="hljs-comment">//在乐观复制期间,如果远程无法访问,</span></span><br><span class="line"><span class="hljs-comment">// MsgApp很有可能丢失。</span></span><br><span class="line"><span class="hljs-keyword">if</span> pr.State == ProgressStateReplicate &#123;</span><br><span class="line">pr.becomeProbe()</span><br><span class="line">&#125;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x failed to send message to %x because it is unreachable [%s]"</span>, r.id, m.From, pr)</span><br><span class="line"><span class="hljs-comment">//3.这类消息follower将转发给leader处理,因为follower并没有修改集群配置状态的权限。</span></span><br><span class="line"><span class="hljs-comment">//leader在收到这类消息时,是以下的处理流程。</span></span><br><span class="line"><span class="hljs-comment">//3.1.如果当前的raft.leadTransferee成员不为空,说明有正在进行的leader迁移流程。此时会判断是否与这次迁移是同样的新leader ID,如果是则忽略该消息直接返回；否则将终止前面还没有完毕的迁移流程。</span></span><br><span class="line"><span class="hljs-comment">//3.2.如果这次迁移过去的新节点,就是当前的leader ID,也直接返回不进行处理。</span></span><br><span class="line"><span class="hljs-comment">//到了这一步就是正式开始这一次的迁移leader流程了,一个节点能成为一个集群的leader,其必要条件是上面的日志与当前leader的一样多,所以这里会判断是否满足这个条件,如果满足那么发送MsgTimeoutNow消息给新的leader通知该节点进行leader迁移,否则就先进行日志同步操作让新的leader追上旧leader的日志数据。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgTransferLeader:</span><br><span class="line"><span class="hljs-comment">// 如果是学习者 就不能进行转发给leader</span></span><br><span class="line"><span class="hljs-keyword">if</span> pr.IsLearner &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x is learner. Ignored transferring leadership"</span>, r.id)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">leadTransferee := m.From</span><br><span class="line">lastLeadTransferee := r.leadTransferee</span><br><span class="line"><span class="hljs-keyword">if</span> lastLeadTransferee != None &#123;</span><br><span class="line"><span class="hljs-comment">// 判断是否已经有相同节点的leader转让流程在进行中</span></span><br><span class="line"><span class="hljs-keyword">if</span> lastLeadTransferee == leadTransferee &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term %d] transfer leadership to %x is in progress, ignores request to same node %x"</span>,</span><br><span class="line">r.id, r.Term, leadTransferee, leadTransferee)</span><br><span class="line"><span class="hljs-comment">// 如果是,直接返回</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 否则中断之前的转让流程</span></span><br><span class="line">r.abortLeaderTransfer()</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term %d] abort previous transferring leadership to %x"</span>, r.id, r.Term, lastLeadTransferee)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 判断是否转让过来的leader是否本节点,如果是也直接返回,因为本节点已经是leader了</span></span><br><span class="line"><span class="hljs-keyword">if</span> leadTransferee == r.id &#123;</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x is already leader. Ignored transferring leadership to self"</span>, r.id)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//将领导权转移给第三方。</span></span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term %d] starts to transfer leadership to %x"</span>, r.id, r.Term, leadTransferee)</span><br><span class="line"><span class="hljs-comment">//转移领导应该在一个electionTimeout中完成,所以重置r.electionElapsed。</span></span><br><span class="line">r.electionElapsed = <span class="hljs-number">0</span></span><br><span class="line">r.leadTransferee = leadTransferee</span><br><span class="line"><span class="hljs-keyword">if</span> pr.Match == r.raftLog.lastIndex() &#123;</span><br><span class="line"><span class="hljs-comment">// 如果日志已经匹配了,那么就发送timeoutnow协议过去</span></span><br><span class="line">r.sendTimeoutNow(leadTransferee)</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x sends MsgTimeoutNow to %x immediately as %x already has up-to-date log"</span>, r.id, leadTransferee, leadTransferee)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 否则继续追加日志</span></span><br><span class="line">r.sendAppend(leadTransferee)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>case pb.MsgBeat:</code>向所有跟随者,广播心跳,⚠️结束</li><li><code>case pb.MsgCheckQuorum:</code>  检查是否有一半以上的跟随者在自己的状态机中处于活跃,⚠️结束</li><li><code>case pb.MsgProp:</code>raft库的使用者向raft库propose数据时,最后会封装成这个类型的消息来进行提交,不同类型的节点处理还不尽相同。⚠️结束</li><li><code>case pb.MsgReadIndex:</code><ol><li>如果总节点人数大于一个,也就是除了自己还有其他节点<ol><li>首先如果该leader在成为新的leader之后没有提交过任何值,那么会直接返回不做处理。</li><li>然后检查只读类型是<code>ReadOnlySafe</code>还是<code>ReadOnlyLeaseBased</code>,<ul><li>如果是<code>ReadOnlySafe</code>, 保存该MsgreadIndex请求到来时的commit索引,向集群中所有其他节点广播一个心跳消息MsgHeartbeat,并且在其中带上该读请求的唯一标识。</li><li>如果是<code>ReadOnlyLeaseBased</code><ul><li>如果消息是当前成员,如果没有提交过任何数据,那么在它所在的这个任期（term）内的commit索引当时是并不知道的,因此在成为leader之后,需要马上提交一个no-op的空日志,这样拿到该任期的第一个commit索引。</li><li>否则就发送消息回应给跟随者</li></ul></li></ul></li></ol></li><li>否则<ul><li>如果消息是当前成员,如果没有提交过任何数据,那么在它所在的这个任期（term）内的commit索引当时是并不知道的,因此在成为leader之后,需要马上提交一个no-op的空日志,这样拿到该任期的第一个commit索引。</li><li>否则就回应该消息,因为是因为是来自学习者<ol start="3"><li>⚠️结束    </li></ol></li></ul></li></ol></li><li>获取跟随者的进度</li><li><code>case pb.MsgAppResp:</code><ol><li>msg.Reject为true的情况,说明节点拒绝了前面的MsgApp/MsgSnap消息,根据msg.RejectHint成员回退leader上保存的关于该节点的日志记录状态。比如leader前面认为从日志索引为10的位置开始向节点A同步数据,但是节点A拒绝了这次数据同步,同时返回RejectHint为2,说明节点A告知leader在它上面保存的最大日志索引ID为2,这样下一次leader就可以直接从索引为2的日志数据开始同步数据到节点A。而如果没有这个RejectHint成员,leader只能在每次被拒绝数据同步后都递减1进行下一次数据同步,显然这样是低效的。<ol><li>因为上面节点拒绝了这次数据同步,所以节点的状态可能存在一些异常,此时如果leader上保存的节点状态为ProgressStateReplicate,那么将切换到ProgressStateProbe状态（关于这几种状态,下面会谈到）。</li><li>前面已经按照msg.RejectHint修改了leader上关于该节点日志状态的索引数据,接着再次尝试按照这个新的索引数据向该节点再次同步数据。</li></ol></li><li>msg.Reject为false的情况<ol><li>更新进度,如果不是过时的<ol><li>如果该节点之前在ProgressStateProbe状态,说明之前处于探测状态,此时可以切换到ProgressStateReplicate,开始正常的接收leader的同步数据了。</li><li>如果之前处于ProgressStateSnapshot状态,即还在同步副本,说明节点之前可能落后leader数据比较多才采用了接收副本的状态。这里还需要多做一点解释,因为在节点落后leader数据很多的情况下,可能leader会多次通过snapshot同步数据给节点,而当 pr.Match &gt;= pr.PendingSnapshot的时候,说明通过快照来同步数据的流程完成了,这时可以进入正常的接收同步数据状态了,这就是函数Progress.needSnapshotAbort要做的判断。</li><li>如果之前处于ProgressStateReplicate状态,此时可以修改leader关于这个节点的滑动窗口索引,释放掉这部分数据索引,好让节点可以接收新的数据了。关于这个滑动窗口设计,见下面详细解释。</li></ol></li></ol></li><li>判断是否有新的数据可以提交（commit）了。因为raft的提交数据的流程是这样的：首先节点将数据提议（propose）给leader,leader在将数据写入到自己的日志成功之后,再通过MsgApp把这些提议的数据广播给集群中的其他节点,在某一条日志数据收到超过半数（qurom）的节点同意之后,才认为是可以提交（commit）的。因此每次leader节点在收到一条MsgAppResp类型消息,同时msg.Reject又是false的情况下,都需要去检查当前有哪些日志是超过半数的节点同意的,再将这些可以提交（commit）的数据广播出去。而在没有数据可以提交的情况下,如果之前节点处于暂停状态,那么将继续向该节点同步数据。</li><li>最后还要做一个跟leader迁移相关的操作。如果该消息节点是准备迁移过去的新leader节点（raft.leadTransferee == msg.From）,而且此时该节点上的Match索引已经跟旧的leader的日志最大索引一致,说明新旧节点的日志数据已经同步,可以正式进行集群leader迁移操作了。</li></ol></li><li><code>case pb.MsgHeartbeatResp:</code><ol><li>将进度设置为活跃</li><li>为完整滑动窗口释放一个插槽以允许进度</li><li>如果消息节点是日志索引是落后的就发送追加</li><li>leader在接收到MsgHeartbeatResp消息后,如果其中有ctx字段,说明该MsgHeartbeatResp消息对应的MsgHeartbeat消息,是收到ReadIndex时leader消息为了确认自己还是集群leader发送的心跳消息</li><li>通知raft状态机收到的只读结构对只读请求附加的心跳的确认上下文,根据消息中的ctx字段,到全局的pendingReadIndex中查找是否有保存该ctx的带处理的readIndex请求,如果有就在acks map中记录下该follower已经进行了应答</li><li>当ack数量超过了集群半数时,意味着该leader仍然还是集群的leader,此时调用r.readOnly.advance(m)函数</li><li>将该readIndex之前的所有readIndex请求都认为是已经成功进行确认的了,所有成功确认的readIndex请求,将会加入到readStates数组中,同时leader也会向follower发送MsgReadIndexResp。</li></ol></li><li><code>case pb.MsgSnapStatus:</code>仅leader处理这类消息<ol><li>如果reject为false：表示接收快照成功,将切换该节点状态到探测状态。</li><li>否则接收失败,将切换该节点状态到探测状态。</li><li>当Paused为true时,raft应暂停向此对等方发送复制消息。</li></ol></li><li><code>case pb.MsgUnreachable:</code>在乐观复制期间,如果远程无法访问,MsgApp很有可能丢失。<ol><li>如果远程节点状态变为复制状态,就变为探测状态</li></ol></li><li><p><code>case pb.MsgTransferLeader:</code>这类消息follower将转发给leader处理,因为follower并没有修改集群配置状态的权限。</p><ol><li>如果是学习者 就不能进行转发给leader</li><li>如果当前的raft.leadTransferee成员不为空,说明有正在进行的leader迁移流程。此时会判断是否与这次迁移是同样的新leader ID,如果是则忽略该消息直接返回；否则将终止前面还没有完毕的迁移流程。</li><li>判断是否转让过来的leader是否本节点,如果是也直接返回,因为本节点已经是leader了</li><li>如果日志已经匹配了,那么就发送timeoutnow协议过去</li><li>否则继续追加日志到新的领导者<figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// stepCandidate 由StateCandidate和StatePreCandidate共享;不同的是</span></span><br><span class="line"><span class="hljs-comment">//它们是否响应MsgVoteResp或MsgPreVoteResp。</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stepCandidate</span><span class="hljs-params">(r *raft, m pb.Message)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 只处理与我们的候选资格相对应的投票回复 (当在StateCandidate, 在这个任期中,我们可能会收到陈旧的MsgPreVoteResp消息从我们的 pre-candidate 状态).</span></span><br><span class="line"><span class="hljs-keyword">var</span> myVoteRespType pb.MessageType</span><br><span class="line"><span class="hljs-keyword">if</span> r.state == StatePreCandidate &#123;</span><br><span class="line">myVoteRespType = pb.MsgPreVoteResp</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">myVoteRespType = pb.MsgVoteResp</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">switch</span> m.Type &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgProp:</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x no leader at term %d; dropping proposal"</span>, r.id, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgApp:</span><br><span class="line">r.becomeFollower(m.Term, m.From) <span class="hljs-comment">// always m.Term == r.Term</span></span><br><span class="line">r.handleAppendEntries(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgHeartbeat:</span><br><span class="line">r.becomeFollower(m.Term, m.From) <span class="hljs-comment">// always m.Term == r.Term</span></span><br><span class="line">r.handleHeartbeat(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgSnap:</span><br><span class="line">r.becomeFollower(m.Term, m.From) <span class="hljs-comment">// always m.Term == r.Term</span></span><br><span class="line">r.handleSnapshot(m)</span><br><span class="line"><span class="hljs-keyword">case</span> myVoteRespType:</span><br><span class="line"><span class="hljs-comment">//1.节点调用raft.poll函数,其中传入msg.Reject参数表示发送者是否同意这次选举,根据这些来计算当前集群中有多少节点给这次选举投了同意票。</span></span><br><span class="line"><span class="hljs-comment">//2.如果有半数的节点同意了,如果选举类型是PreVote,那么进行Vote状态正式进行一轮选举；否则该节点就成为了新的leader,调用raft.becomeLeader函数切换状态,然后开始同步日志数据给集群中其他节点了。</span></span><br><span class="line"><span class="hljs-comment">//3.而如果半数以上的节点没有同意,那么重新切换到follower状态。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 计算当前集群中有多少节点给自己投了票</span></span><br><span class="line">gr := r.poll(m.From, m.Type, !m.Reject)</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [quorum:%d] has received %d %s votes and %d vote rejections"</span>, r.id, r.quorum(), gr, m.Type, <span class="hljs-built_in">len</span>(r.votes)-gr)</span><br><span class="line"><span class="hljs-keyword">switch</span> r.quorum() &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> gr: <span class="hljs-comment">// 如果进行投票的节点数量正好是半数以上节点数量</span></span><br><span class="line"><span class="hljs-comment">//如果选举类型是PreVote,那么进行Vote状态正式进行一轮选举；</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.state == StatePreCandidate &#123;</span><br><span class="line">r.campaign(campaignElection)</span><br><span class="line"><span class="hljs-comment">//vote状态正式的一轮选举</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 变成leader</span></span><br><span class="line">r.becomeLeader()</span><br><span class="line">r.bcastAppend()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-built_in">len</span>(r.votes) - gr: <span class="hljs-comment">// 如果是半数以上节点拒绝了投票</span></span><br><span class="line"><span class="hljs-comment">// 变成follower</span></span><br><span class="line"><span class="hljs-comment">// pb.MsgPreVoteResp包含未来候选人的期限</span></span><br><span class="line"><span class="hljs-comment">// m.Term &gt; r.Term; reuse r.Term</span></span><br><span class="line">r.becomeFollower(r.Term, None)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgTimeoutNow:</span><br><span class="line">r.logger.Debugf(<span class="hljs-string">"%x [term %d state %v] ignored MsgTimeoutNow from %x"</span>, r.id, r.Term, r.state, m.From)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>pb.MsgProp:</code>如果是提议属性消息,那么就直接放弃,因为在候选人阶段是不能够添加日志。</p></li><li><code>pb.MsgApp:</code>如果收到领导人消息,直接将当前节点转为跟随者,并且向领导人发送当前的commitid</li><li><code>pb.MsgHeartbeat:</code>如果收到心跳,也变为跟随者,然后处理心跳</li><li><code>pb.MsgSnap:</code>如果收到快照,也变为跟随者,然后处理快照</li><li><code>case myVoteRespType:</code><ol><li>节点调用raft.poll函数,其中传入msg.Reject参数表示发送者是否同意这次选举,根据这些来计算当前集群中有多少节点给这次选举投了同意票。</li><li>如果有半数的节点同意了,如果选举类型是PreVote,那么进行Vote状态正式进行一轮选举；否则该节点就成为了新的leader,调用raft.becomeLeader函数切换状态,然后开始同步日志数据给集群中其他节点了。</li><li>而如果半数以上的节点没有同意,那么重新切换到follower状态。</li></ol></li><li><code>case pb.MsgTimeoutNow:</code>忽略这条信息,因为状态不对。</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stepFollower</span><span class="hljs-params">(r *raft, m pb.Message)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">switch</span> m.Type &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgProp:</span><br><span class="line"><span class="hljs-keyword">if</span> r.lead == None &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x no leader at term %d; dropping proposal"</span>, r.id, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> r.disableProposalForwarding &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x not forwarding to leader %x at term %d; dropping proposal"</span>, r.id, r.lead, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> ErrProposalDropped</span><br><span class="line">&#125;</span><br><span class="line">m.To = r.lead</span><br><span class="line">r.send(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgApp:</span><br><span class="line">r.electionElapsed = <span class="hljs-number">0</span></span><br><span class="line">r.lead = m.From</span><br><span class="line">r.handleAppendEntries(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgHeartbeat:</span><br><span class="line">r.electionElapsed = <span class="hljs-number">0</span></span><br><span class="line">r.lead = m.From</span><br><span class="line">r.handleHeartbeat(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgSnap:</span><br><span class="line">r.electionElapsed = <span class="hljs-number">0</span></span><br><span class="line">r.lead = m.From</span><br><span class="line">r.handleSnapshot(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgTransferLeader:</span><br><span class="line"><span class="hljs-keyword">if</span> r.lead == None &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x no leader at term %d; dropping leader transfer msg"</span>, r.id, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">m.To = r.lead</span><br><span class="line">r.send(m)</span><br><span class="line"><span class="hljs-comment">// 新的leader节点,在还未迁移之前仍然是follower,在收到这条消息后,就可以进行迁移了,此时会调用前面分析MsgVote时说过的campaign函数,传入的参数是campaignTransfer,表示这是一次由于迁移leader导致的选举流程。</span></span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgTimeoutNow:</span><br><span class="line"><span class="hljs-keyword">if</span> r.promotable() &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x [term %d] received MsgTimeoutNow from %x and starts an election to get leadership."</span>, r.id, r.Term, m.From)</span><br><span class="line"><span class="hljs-comment">// Leadership transfers never use pre-vote even if r.preVote is true; we</span></span><br><span class="line"><span class="hljs-comment">// know we are not recovering from a partition so there is no need for the</span></span><br><span class="line"><span class="hljs-comment">// extra round trip.</span></span><br><span class="line">r.campaign(campaignTransfer)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x received MsgTimeoutNow from %x but is not promotable"</span>, r.id, m.From)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgReadIndex:</span><br><span class="line"><span class="hljs-keyword">if</span> r.lead == None &#123;</span><br><span class="line">r.logger.Infof(<span class="hljs-string">"%x no leader at term %d; dropping index reading msg"</span>, r.id, r.Term)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">m.To = r.lead</span><br><span class="line">r.send(m)</span><br><span class="line"><span class="hljs-keyword">case</span> pb.MsgReadIndexResp:</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(m.Entries) != <span class="hljs-number">1</span> &#123;</span><br><span class="line">r.logger.Errorf(<span class="hljs-string">"%x invalid format of MsgReadIndexResp from %x, entries count: %d"</span>, r.id, m.From, <span class="hljs-built_in">len</span>(m.Entries))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">r.readStates = <span class="hljs-built_in">append</span>(r.readStates, ReadState&#123;Index: m.Index, RequestCtx: m.Entries[<span class="hljs-number">0</span>].Data&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>case pb.MsgProp:</code>将消息转发给领导人</li><li><code>case pb.MsgApp:</code>收到了领导人了消息,重置弹性超时时间,并且添加日志</li><li><code>case pb.MsgHeartbeat:</code>收到心跳,重置弹性超时时间,处理心跳</li><li><code>case pb.MsgSnap:</code>收到快照,重置弹性超时时间,处理快照</li><li><code>case pb.MsgTransferLeader:</code>转移领导人</li><li><code>case pb.MsgTimeoutNow:</code>新的leader节点,在还未迁移之前仍然是follower,在收到这条消息后,就可以进行迁移了,此时会调用前面分析MsgVote时说过的campaign函数,传入的参数是campaignTransfer,表示这是一次由于迁移leader导致的选举流程。</li><li><code>case pb.MsgReadIndex:</code>像领导人发送读请求</li><li><code>case pb.MsgReadIndexResp:</code>从远程条目里面,添加到本地条目到读状态数组</li></ol><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>源码还是比较难的,还有一些地方我还需要仔细分析,在后面会慢慢加上去,目前就先分析主要流程。最核心的代码依然是在状态机中,Step()函数,以及三个身份的步骤的状态函数。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Etcd </tag>
            
            <tag> Raft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Raft 论文</title>
      <link href="/2019/09/09/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Raft%E8%AE%BA%E6%96%87(%E8%AF%91%E6%96%87)/"/>
      <url>/2019/09/09/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Raft%E8%AE%BA%E6%96%87(%E8%AF%91%E6%96%87)/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能,但是它的算法结构和 Paxos 不同,使得 Raft 算法更加容易理解并且更容易构建实际的系统。为了提升可理解性,Raft 将一致性算法分解成了几个关键模块,例如领导人选举、日志复制和安全性。同时它通过实施一个更强的一致性来减少需要考虑的状态的数量。从一个用户研究的结果可以证明,对于学生而言,Raft 算法比 Paxos 算法更加容易学习。Raft 算法还包括一个新的机制来允许集群成员的动态改变,它利用重叠的大多数来保证安全性。</p><a id="more"></a><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p>一致性算法允许一组机器像一个整体一样工作,即使其中一些机器出现故障也能够继续工作下去。正因为如此,一致性算法在构建可信赖的大规模软件系统中扮演着重要的角色。在过去的 10 年里,Paxos  算法统治着一致性算法这一领域：绝大多数的实现都是基于 Paxos 或者受其影响。同时 Paxos 也成为了教学领域里讲解一致性问题时的示例。</p><p>但是不幸的是,尽管有很多工作都在尝试降低它的复杂性,但是 Paxos 算法依然十分难以理解。并且,Paxos 自身的算法结构需要进行大幅的修改才能够应用到实际的系统中。这些都导致了工业界和学术界都对 Paxos 算法感到十分头疼。</p><p>和 Paxos 算法进行过努力之后,我们开始寻找一种新的一致性算法,可以为构建实际的系统和教学提供更好的基础。我们的做法是不寻常的,我们的首要目标是可理解性：我们是否可以在实际系统中定义一个一致性算法,并且能够比 Paxos 算法以一种更加容易的方式来学习。此外,我们希望该算法方便系统构建者的直觉的发展。不仅一个算法能够工作很重要,而且能够显而易见的知道为什么能工作也很重要。</p><p>Raft 一致性算法就是这些工作的结果。在设计 Raft 算法的时候,我们使用一些特别的技巧来提升它的可理解性,包括算法分解（Raft 主要被分成了领导人选举,日志复制和安全三个模块）和减少状态机的状态（相对于 Paxos,Raft 减少了非确定性和服务器互相处于非一致性的方式）。一份针对两所大学 43 个学生的研究表明 Raft 明显比 Paxos 算法更加容易理解。在这些学生同时学习了这两种算法之后,和 Paxos 比起来,其中 33 个学生能够回答有关于 Raft 的问题。</p><p>Raft 算法在许多方面和现有的一致性算法都很相似（主要是 Oki 和 Liskov 的 Viewstamped Replication）,但是它也有一些独特的特性：</p><ul><li><strong>强领导者</strong>：和其他一致性算法相比,Raft 使用一种更强的领导能力形式。比如,日志条目只从领导者发送给其他的服务器。这种方式简化了对复制日志的管理并且使得 Raft 算法更加易于理解。</li><li><strong>领导选举</strong>：Raft 算法使用一个随机计时器来选举领导者。这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。在解决冲突的时候会更加简单快捷。</li><li><strong>成员关系调整</strong>：Raft 使用一种共同一致的方法来处理集群成员变换的问题,在这种方法下,处于调整过程中的两种不同的配置集群中大多数机器会有重叠,这就使得集群在成员变换的时候依然可以继续工作。</li></ul><p>我们相信,Raft 算法不论出于教学目的还是作为实践项目的基础都是要比 Paxos 或者其他一致性算法要优异的。它比其他算法更加简单,更加容易理解；它的算法描述足以实现一个现实的系统；它有好多开源的实现并且在很多公司里使用；它的安全性已经被证明；它的效率和其他算法比起来也不相上下。</p><p>接下来,这篇论文会介绍以下内容：复制状态机问题（第 2 节）,讨论 Paxos 的优点和缺点（第 3 节）,讨论我们为了可理解性而采取的方法（第 4 节）,阐述 Raft 一致性算法（第 5-8 节）,评价 Raft 算法（第 9 节）,以及一些相关的工作（第 10 节）。</p><h1 id="2-复制状态机"><a href="#2-复制状态机" class="headerlink" title="2 复制状态机"></a>2 复制状态机</h1><p>一致性算法是从复制状态机的背景下提出的（参考英文原文引用37）。在这种方法中,一组服务器上的状态机产生相同状态的副本,并且在一些机器宕掉的情况下也可以继续运行。复制状态机在分布式系统中被用于解决很多容错的问题。例如,大规模的系统中通常都有一个集群领导者,像 GFS、HDFS 和 RAMCloud,典型应用就是一个独立的的复制状态机去管理领导选举和存储配置信息并且在领导人宕机的情况下也要存活下来。比如 Chubby 和 ZooKeeper。</p><p><img src="https://static001.infoq.cn/resource/image/8d/02/8d9e55e9f4841f110715b3fa67c31b02.jpg" alt="图 1 "></p><blockquote><p>图 1 ：复制状态机的结构。一致性算法管理着来自客户端指令的复制日志。状态机从日志中处理相同顺序的相同指令,所以产生的结果也是相同的。</p></blockquote><p>复制状态机通常都是基于复制日志实现的,如图 1。每一个服务器存储一个包含一系列指令的日志,并且按照日志的顺序进行执行。每一个日志都按照相同的顺序包含相同的指令,所以每一个服务器都执行相同的指令序列。因为每个状态机都是确定的,每一次执行操作都产生相同的状态和同样的序列。</p><blockquote><p>感悟：这种机制类似于redis的aof实现,用日志来恢复状态,将日志放到复制状态中执行,最终会得到一个状态,也和redis很像,到一定程度到时候会进行日志压缩,生成快照</p></blockquote><p>保证复制日志相同就是一致性算法的工作了。在一台服务器上,一致性模块接收客户端发送来的指令然后增加到自己的日志中去。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求,尽管有些服务器会宕机。一旦指令被正确的复制,每一个服务器的状态机按照日志顺序处理他们,然后输出结果被返回给客户端。因此,服务器集群看起来形成一个高可靠的状态机。</p><p>实际系统中使用的一致性算法通常含有以下特性：</p><ul><li>安全性保证（绝对不会返回一个错误的结果）：在非拜占庭错误情况下,包括网络延迟、分区、丢包、冗余和乱序等错误都可以保证正确。</li><li>可用性：集群中只要有大多数的机器可运行并且能够相互通信、和客户端通信,就可以保证可用。因此,一个典型的包含 5 个节点的集群可以容忍两个节点的失败。服务器被停止就认为是失败。他们当有稳定的存储的时候可以从状态中恢复回来并重新加入集群。</li><li>不依赖时序来保证一致性：物理时钟错误或者极端的消息延迟只有在最坏情况下才会导致可用性问题。</li><li>通常情况下,一条指令可以尽可能快的在集群中大多数节点响应一轮远程过程调用时完成。小部分比较慢的节点不会影响系统整体的性能。</li></ul><h1 id="3-Paxos-算法的问题"><a href="#3-Paxos-算法的问题" class="headerlink" title="3 Paxos 算法的问题"></a>3 Paxos 算法的问题</h1><p>在过去的 10 年里,Leslie Lamport 的 Paxos 算法几乎已经成为一致性的代名词：Paxos 是在课程教学中最经常使用的算法,同时也是大多数一致性算法实现的起点。Paxos 首先定义了一个能够达成单一决策一致的协议,比如单条的复制日志项。我们把这一子集叫做单决策 Paxos。然后通过组合多个 Paxos 协议的实例来促进一系列决策的达成。Paxos 保证安全性和活性,同时也支持集群成员关系的变更。Paxos 的正确性已经被证明,在通常情况下也很高效。</p><p>不幸的是,Paxos 有两个明显的缺点。第一个缺点是 Paxos 算法特别的难以理解。完整的解释是出了名的不透明；通过极大的努力之后,也只有少数人成功理解了这个算法。因此,有了几次用更简单的术语来解释 Paxos 的尝试。尽管这些解释都只关注了单决策的子集问题,但依然很具有挑战性。在 2012 年 NSDI 的会议中的一次调查显示,很少有人对 Paxos 算法感到满意,甚至在经验老道的研究者中也是如此。我们自己也尝试去理解 Paxos；我们一直没能理解 Paxos 直到我们读了很多对 Paxos 的简化解释并且设计了我们自己的算法之后,这一过程花了近一年时间。</p><p>我们假设 Paxos 的不透明性来自它选择单决策问题作为它的基础。单决策 Paxos 是晦涩微妙的,它被划分成了两种没有简单直观解释和无法独立理解的情景。因此,这导致了很难建立起直观的感受为什么单决策 Paxos 算法能够工作。构成多决策 Paxos 增加了很多错综复杂的规则。我们相信,在多决策上达成一致性的问题（一份日志而不是单一的日志记录）能够被分解成其他的方式并且更加直接和明显。</p><p>Paxos算法的第二个问题就是它没有提供一个足够好的用来构建一个现实系统的基础。一个原因是还没有一种被广泛认同的多决策问题的算法。Lamport 的描述基本上都是关于单决策 Paxos 的；他简要描述了实施多决策 Paxos 的方法,但是缺乏很多细节。当然也有很多具体化 Paxos 的尝试,但是他们都互相不一样,和 Paxos 的概述也不同。例如 Chubby 这样的系统实现了一个类似于 Paxos 的算法,但是大多数的细节并没有被公开。</p><p>而且,Paxos 算法的结构也不是十分易于构建实践的系统；单决策分解也会产生其他的结果。例如,独立的选择一组日志条目然后合并成一个序列化的日志并没有带来太多的好处,仅仅增加了不少复杂性。围绕着日志来设计一个系统是更加简单高效的；新日志条目以严格限制的顺序增添到日志中去。另一个问题是,Paxos 使用了一种对等的点对点的方式作为它的核心（尽管它最终提议了一种弱领导人的方法来优化性能）。在只有一个决策会被制定的简化世界中是很有意义的,但是很少有现实的系统使用这种方式。如果有一系列的决策需要被制定,首先选择一个领导人,然后让他去协调所有的决议,会更加简单快速。</p><p>因此,实际的系统中很少有和 Paxos 相似的实践。每一种实现都是从 Paxos 开始研究,然后发现很多实现上的难题,再然后开发了一种和 Paxos 明显不一样的结构。这样是非常费时和容易出错的,并且理解 Paxos 的难度使得这个问题更加糟糕。Paxos 算法在理论上被证明是正确可行的,但是现实的系统和 Paxos 差别是如此的大,以至于这些证明没有什么太大的价值。下面来自 Chubby 实现非常典型：</p><blockquote><p>在Paxos算法描述和实现现实系统中间有着巨大的鸿沟。最终的系统建立在一种没有经过证明的算法之上。</p></blockquote><p>由于以上问题,我们认为 Paxos 算法既没有提供一个良好的基础给实践的系统,也没有给教学很好的帮助。基于一致性问题在大规模软件系统中的重要性,我们决定看看我们是否可以设计一个拥有更好特性的替代 Paxos 的一致性算法。Raft算法就是这次实验的结果。</p><h1 id="4-为了可理解性的设计"><a href="#4-为了可理解性的设计" class="headerlink" title="4 为了可理解性的设计"></a>4 为了可理解性的设计</h1><p>设计 Raft 算法我们有几个初衷：它必须提供一个完整的实际的系统实现基础,这样才能大大减少开发者的工作；它必须在任何情况下都是安全的并且在大多数的情况下都是可用的；并且它的大部分操作必须是高效的。但是我们最重要也是最大的挑战是可理解性。它必须保证对于普遍的人群都可以十分容易的去理解。另外,它必须能够让人形成直观的认识,这样系统的构建者才能够在现实中进行必然的扩展。</p><p>在设计 Raft 算法的时候,有很多的点需要我们在各种备选方案中进行选择。在这种情况下,我们评估备选方案基于可理解性原则：解释各个备选方案有多大的难度（例如,Raft 的状态空间有多复杂,是否有微妙的暗示）？对于一个读者而言,完全理解这个方案和暗示是否容易？</p><p>我们意识到对这种可理解性分析上具有高度的主观性；尽管如此,我们使用了两种通常适用的技术来解决这个问题。第一个技术就是众所周知的问题分解：只要有可能,我们就将问题分解成几个相对独立的,可被解决的、可解释的和可理解的子问题。例如,Raft 算法被我们分成领导人选举,日志复制,安全性和角色改变几个部分。</p><p>我们使用的第二个方法是通过减少状态的数量来简化需要考虑的状态空间,使得系统更加连贯并且在可能的时候消除不确定性。特别的,所有的日志是不允许有空洞的,并且 Raft 限制了日志之间变成不一致状态的可能。尽管在大多数情况下我们都试图去消除不确定性,但是也有一些情况下不确定性可以提升可理解性。尤其是,随机化方法增加了不确定性,但是他们有利于减少状态空间数量,通过处理所有可能选择时使用相似的方法。我们使用随机化去简化 Raft 中领导人选举算法。</p><h1 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5 Raft 一致性算法"></a>5 Raft 一致性算法</h1><p>Raft 是一种用来管理章节 2 中描述的复制日志的算法。图 2 为了参考之用,总结这个算法的简略版本,图 3 列举了这个算法的一些关键特性。图中的这些元素会在剩下的章节逐一介绍。</p><p>Raft 通过选举一个高贵的领导人,然后给予他全部的管理复制日志的责任来实现一致性。领导人从客户端接收日志条目,把日志条目复制到其他服务器上,并且当保证安全性的时候告诉其他的服务器应用日志条目到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如,领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议,并且数据都从领导人流向其他服务器。一个领导人可以宕机,可以和其他服务器失去连接,这时一个新的领导人会被选举出来。</p><p>通过领导人的方式,Raft 将一致性问题分解成了三个相对独立的子问题,这些问题会在接下来的子章节中进行讨论：</p><ul><li><strong>领导选举</strong>：一个新的领导人需要被选举出来,当现存的领导人宕机的时候（章节 5.2）</li><li><strong>日志复制</strong>：领导人必须从客户端接收日志然后复制到集群中的其他节点,并且强制要求其他节点的日志保持和自己相同。</li><li><strong>安全性</strong>：在 Raft 中安全性的关键是在图 3 中展示的状态机安全：如果有任何的服务器节点已经应用了一个确定的日志条目到它的状态机中,那么其他服务器节点不能在同一个日志索引位置应用一个不同的指令。章节 5.4 阐述了 Raft 算法是如何保证这个特性的；这个解决方案涉及到一个额外的选举机制（5.2 节）上的限制。</li></ul><p>在展示一致性算法之后,这一章节会讨论可用性的一些问题和计时在系统的作用。</p><p><strong>状态</strong>：</p><table><thead><tr><th>状态</th><th>所有服务器上持久存在的</th></tr></thead><tbody><tr><td>currentTerm</td><td>服务器最后一次知道的任期号（初始化为 0,持续递增）</td></tr><tr><td>votedFor</td><td>在当前获得选票的候选人的 Id</td></tr><tr><td>log[]</td><td>日志条目集；每一个条目包含一个用户状态机执行的指令,和收到时的任期号</td></tr></tbody></table><table><thead><tr><th>状态</th><th>所有服务器上经常变的</th></tr></thead><tbody><tr><td>commitIndex</td><td>已知的最大的已经被提交的日志条目的索引值</td></tr><tr><td>lastApplied</td><td>最后被应用到状态机的日志条目索引值（初始化为 0,持续递增）</td></tr></tbody></table><blockquote><p>感悟：commitIndex &gt; lastApplied ,已经被提交的日志不一定会被应用到状态机中,只是代表我已经提交了这个日志<br>要分为两个独立的索引的原因是因为,提交需要被大部分节点所接受才可以应用,否则不能保证集群的安全性</p></blockquote><table><thead><tr><th>状态</th><th>在领导人里经常改变的 （选举后重新初始化）</th></tr></thead><tbody><tr><td>nextIndex[]</td><td>对于每一个服务器,需要发送给他的下一个日志条目的索引值（初始化为领导人最后索引值加一）</td></tr><tr><td>matchIndex[]</td><td>对于每一个服务器,已经复制给他的日志的最高索引值</td></tr></tbody></table><p><strong>附加日志 RPC</strong>：</p><p>由领导人负责调用来复制日志指令；也会用作heartbeat</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>leaderId</td><td>领导人的 Id,以便于跟随者重定向请求</td></tr><tr><td>prevLogIndex</td><td>新的日志条目紧随之前的索引值</td></tr><tr><td>prevLogTerm</td><td>prevLogIndex 条目的任期号</td></tr><tr><td>entries[]</td><td>准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）</td></tr><tr><td>leaderCommit</td><td>领导人已经提交的日志的索引值</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前的任期号,用于领导人去更新自己</td></tr><tr><td>success</td><td>跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真</td></tr></tbody></table><p>接收者实现：</p><ol><li>如果<code>term &lt; currentTerm</code>就返回 false （5.1 节）</li><li>如果日志在 prevLogIndex 位置处的日志条目的任期号和 prevLogTerm 不匹配,则返回 false （5.3 节）</li><li>如果已经存在的日志条目和新的产生冲突（索引值相同但是任期号不同）,删除这一条和之后所有的 （5.3 节）</li><li>附加日志中尚未存在的任何新条目</li><li>如果<code>leaderCommit &gt; commitIndex</code>,令 commitIndex 等于 leaderCommit 和 新日志条目索引值中较小的一个</li></ol><p><strong>请求投票 RPC</strong>：</p><p>由候选人负责调用用来征集选票（5.2 节）</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>候选人的任期号</td></tr><tr><td>candidateId</td><td>请求选票的候选人的 Id</td></tr><tr><td>lastLogIndex</td><td>候选人的最后日志条目的索引值</td></tr><tr><td>lastLogTerm</td><td>候选人最后日志条目的任期号</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前任期号,以便于候选人去更新自己的任期号</td></tr><tr><td>voteGranted</td><td>候选人赢得了此张选票时为真</td></tr></tbody></table><p>接收者实现：</p><ol><li>如果<code>term &lt; currentTerm</code>返回 false （5.2 节）</li><li>如果 votedFor 为空或者为 candidateId,并且候选人的日志至少和自己一样新,那么就投票给他（5.2 节,5.4 节）</li></ol><blockquote><p>感悟：因为候选人到term肯定是要大于当前跟随者到term的,否则的话,候选人的日志进度肯定是落后的,肯定不能作为领导者,否则会导致日志丢失</p></blockquote><p><strong>所有服务器需遵守的规则</strong>：</p><p>所有服务器：</p><ul><li>如果<code>commitIndex &gt; lastApplied</code>,那么就 lastApplied 加一,并把<code>log[lastApplied]</code>应用到状态机中（5.3 节）</li><li>如果接收到的 RPC 请求或响应中,任期号<code>T &gt; currentTerm</code>,那么就令 currentTerm 等于 T,并切换状态为跟随者（5.1 节）</li></ul><blockquote><p>感悟：<code>T &gt; currentTerm</code>对于领导者也是适用的,所以在etcd的实现中,增加prevote来防止因为网络分区的原因,导致不必要的重新选举</p></blockquote><p>跟随者（5.2 节）：</p><ul><li>响应来自候选人和领导者的请求</li><li>如果在超过选举超时时间的情况之前都没有收到领导人的心跳,或者是候选人请求投票的,就自己变成候选人</li></ul><p>候选人（5.2 节）：</p><ul><li>在转变成候选人后就立即开始选举过程<ul><li>自增当前的任期号（currentTerm）</li><li>给自己投票</li><li>重置选举超时计时器</li><li>发送请求投票的 RPC 给其他所有服务器</li></ul></li><li>如果接收到大多数服务器的选票,那么就变成领导人</li><li>如果接收到来自新的领导人的附加日志 RPC,转变成跟随者</li><li>如果选举过程超时,再次发起一轮选举</li></ul><blockquote><p>感悟：先增加自己的任期号,这样的话,当前候选人的任期应该是比跟随者大的,这样的话就会被投,然后候选人都是要先给自己投才行,然后让大家投票</p></blockquote><p>领导人：</p><ul><li>一旦成为领导人：发送空的附加日志 RPC（心跳）给其他所有的服务器；在一定的空余时间之后不停的重复发送,以阻止跟随者超时（5.2 节）</li><li>如果接收到来自客户端的请求：附加条目到本地日志中,在条目被应用到状态机后响应客户端（5.3 节）</li><li>如果对于一个跟随者,最后日志条目的索引值大于等于 nextIndex,那么：发送从 nextIndex 开始的所有日志条目：<ul><li>如果成功：更新相应跟随者的 nextIndex 和 matchIndex</li><li>如果因为日志不一致而失败,减少 nextIndex 重试</li></ul></li><li>如果存在一个满足<code>N &gt; commitIndex</code>的 N,并且大多数的<code>matchIndex[i] ≥ N</code>成立,并且<code>log[N].term == currentTerm</code>成立,那么令 commitIndex 等于这个 N （5.3 和 5.4 节）</li></ul><blockquote><p>感悟：在etcd的raft实现中不是一下一下减少nextIndex的值来实现的,而是通过返回一个 rejectHint 拒绝同步日志请求时返回的当前节点日志ID,用于被拒绝方快速定位到下一次合适的同步日志位置<code>N &gt; commitIndex</code>表示的是大部分节点都拥有都共同日志,作为leader节点都commitIndex</p></blockquote><p><img src="https://md.ulovecode.com/static/images/posts/image-20200614012301321.png?imageView2/2/w/1280/h/847" alt="图 2"><br><img src="https://md.ulovecode.com/static/images/posts/image-20200614012321776.png?imageView2/2/w/1280/h/847" alt="图 2"><br><img src="https://md.ulovecode.com/static/images/posts/image-20200614012351295.png?imageView2/2/w/1280/h/847" alt="图 2"><br><img src="https://md.ulovecode.com/static/images/posts/image-20200614012415510.png?imageView2/2/w/1280/h/847" alt="图 2"></p><blockquote><p>图 2：一个关于 Raft 一致性算法的浓缩总结（不包括成员变换和日志压缩）。</p></blockquote><table><thead><tr><th>特性</th><th>解释</th></tr></thead><tbody><tr><td>选举安全特性</td><td>对于一个给定的任期号,最多只会有一个领导人被选举出来（5.2 节）</td></tr><tr><td>领导人只附加原则</td><td>领导人绝对不会删除或者覆盖自己的日志,只会增加（5.3 节）</td></tr><tr><td>日志匹配原则</td><td>如果两个日志在相同的索引位置的日志条目的任期号相同,那么我们就认为这个日志从头到这个索引位置之间全部完全相同（5.3 节）</td></tr><tr><td>领导人完全特性</td><td>如果某个日志条目在某个任期号中已经被提交,那么这个条目必然出现在更大任期号的所有领导人中（5.4 节）</td></tr><tr><td>状态机安全特性</td><td>如果一个领导人已经在给定的索引值位置的日志条目应用到状态机中,那么其他任何的服务器在这个索引位置不会提交一个不同的日志（5.4.3 节）</td></tr></tbody></table><p><img src="https://md.ulovecode.com/static/images/posts/image-20200614012439709.png?imageView2/2/w/1280/h/847" alt="图 3"></p><blockquote><p>图 3：Raft 在任何时候都保证以上的各个特性。</p></blockquote><h2 id="5-1-Raft-基础"><a href="#5-1-Raft-基础" class="headerlink" title="5.1 Raft 基础"></a>5.1 Raft 基础</h2><p>一个 Raft 集群包含若干个服务器节点；通常是 5 个,这允许整个系统容忍 2 个节点的失效。在任何时刻,每一个服务器节点都处于这三个状态之一：领导人、跟随者或者候选人。在通常情况下,系统中只有一个领导人并且其他的节点全部都是跟随者。跟随者都是被动的：他们不会发送任何请求,只是简单的响应来自领导者或者候选人的请求。领导人处理所有的客户端请求（如果一个客户端和跟随者联系,那么跟随者会把请求重定向给领导人）。第三种状态,候选人,是用来在 5.2 节描述的选举新领导人时使用。图 4 展示了这些状态和他们之间的转换关系；这些转换关系会在接下来进行讨论。</p><p><img src="https://static001.infoq.cn/resource/image/07/94/0758bfb601f9f39ee3f18bc170f55b94.jpg" alt="图 4 "></p><blockquote><p>图 4：服务器状态。跟随者只响应来自其他服务器的请求。如果跟随者接收不到消息,那么他就会变成候选人并发起一次选举。获得集群中大多数选票的候选人将成为领导者。在一个任期内,领导人一直都会是领导人直到自己宕机了。</p></blockquote><p><img src="https://static001.infoq.cn/resource/image/d4/59/d4b906bd24fc2e85925f132122573f59.jpg" alt="图 5"></p><blockquote><p>图 5：时间被划分成一个个的任期,每个任期开始都是一次选举。在选举成功后,领导人会管理整个集群直到任期结束。有时候选举会失败,那么这个任期就会没有领导人而结束。任期之间的切换可以在不同的时间不同的服务器上观察到。</p></blockquote><p>Raft 把时间分割成任意长度的<strong>任期</strong>,如图 5。任期用连续的整数标记。每一段任期从一次<strong>选举</strong>开始,就像章节 5.2 描述的一样,一个或者多个候选人尝试成为领导者。如果一个候选人赢得选举,然后他就在接下来的任期内充当领导人的职责。在某些情况下,一次选举过程会造成选票的瓜分。在这种情况下,这一任期会以没有领导人结束；一个新的任期（和一次新的选举）会很快重新开始。Raft 保证了在一个给定的任期内,最多只有一个领导者。</p><p>不同的服务器节点可能多次观察到任期之间的转换,但在某些情况下,一个节点也可能观察不到任何一次选举或者整个任期全程。任期在 Raft 算法中充当逻辑时钟的作用,这会允许服务器节点查明一些过期的信息比如陈旧的领导者。每一个节点存储一个当前任期号,这一编号在整个时期内单调的增长。当服务器之间通信的时候会交换当前任期号；如果一个服务器的当前任期号比其他人小,那么他会更新自己的编号到较大的编号值。如果一个候选人或者领导者发现自己的任期号过期了,那么他会立即恢复成跟随者状态。如果一个节点接收到一个包含过期的任期号的请求,那么他会直接拒绝这个请求。</p><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs）,并且基本的一致性算法只需要两种类型的 RPCs。请求投票（RequestVote） RPCs 由候选人在选举期间发起（章节  5.2）,然后附加条目（AppendEntries）RPCs 由领导人发起,用来复制日志和提供一种心跳机制（章节 5.3）。第 7 节为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时,会进行重试, 并且他们能够并行的发起 RPCs 来获得最佳的性能。</p><blockquote><p>感悟：有可能在一个任期内没有领导人,因为领导人没有被选出来（可能是多个候选人通过竞争这个领导人都位置,但是都得到了一样都票数,并没有得到大多数人都票数,所以超过了选举时间,重新开始一轮选举）</p></blockquote><h2 id="5-2-领导人选举"><a href="#5-2-领导人选举" class="headerlink" title="5.2 领导人选举"></a>5.2 领导人选举</h2><p>Raft 使用一种心跳机制来触发领导人选举。当服务器程序启动时,他们都是跟随者身份。一个服务器节点继续保持着跟随者状态只要他从领导人或者候选者处接收到有效的 RPCs。领导者周期性的向所有跟随者发送心跳包（即不包含日志项内容的附加日志项 RPCs）来维持自己的权威。如果一个跟随者在一段时间里没有接收到任何消息,也就是<strong>选举超时</strong>,那么他就会认为系统中没有可用的领导者,并且发起选举以选出新的领导者。</p><p>要开始一次选举过程,跟随者先要增加自己的当前任期号并且转换到候选人状态。然后他会并行的向集群中的其他服务器节点发送请求投票的 RPCs 来给自己投票。候选人会继续保持着当前状态直到以下三件事情之一发生：</p><ol><li>(a) 他自己赢得了这次的选举</li><li>(b) 其他的服务器成为领导者</li><li>(c) 一段时间之后没有任何一个获胜的人。这些结果会分别的在下面的段落里进行讨论。</li></ol><p>当一个候选人从整个集群的大多数服务器节点获得了针对同一个任期号的选票,那么他就赢得了这次选举并成为领导人。每一个服务器最多会对一个任期号投出一张选票,按照先来先服务的原则（注意：5.4 节在投票上增加了一点额外的限制）。要求大多数选票的规则确保了最多只会有一个候选人赢得此次选举（图 3 中的选举安全性）。一旦候选人赢得选举,他就立即成为领导人。然后他会向其他的服务器发送心跳消息来建立自己的权威并且阻止新的领导人的产生。</p><p>在等待投票的时候,候选人可能会从其他的服务器接收到声明它是领导人的附加日志项 RPC。如果这个领导人的任期号（包含在此次的 RPC中）不小于候选人当前的任期号,那么候选人会承认领导人合法并回到跟随者状态。 如果此次 RPC 中的任期号比自己小,那么候选人就会拒绝这次的 RPC 并且继续保持候选人状态。</p><p>第三种可能的结果是候选人既没有赢得选举也没有输：如果有多个跟随者同时成为候选人,那么选票可能会被瓜分以至于没有候选人可以赢得大多数人的支持。当这种情况发生的时候,每一个候选人都会超时,然后通过增加当前任期号来开始一轮新的选举。然而,没有其他机制的话,选票可能会被无限的重复瓜分。</p><p>Raft 算法使用随机选举超时时间的方法来确保很少会发生选票瓜分的情况,就算发生也能很快的解决。为了阻止选票起初就被瓜分,选举超时时间是从一个固定的区间（例如 150-300 毫秒）随机选择。这样可以把服务器都分散开以至于在大多数情况下只有一个服务器会选举超时；然后他赢得选举并在其他服务器超时之前发送心跳包。同样的机制被用在选票瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间,然后在超时时间内等待投票的结果；这样减少了在新的选举中另外的选票瓜分的可能性。9.3 节展示了这种方案能够快速的选出一个领导人。</p><p>领导人选举这个例子,体现了可理解性原则是如何指导我们进行方案设计的。起初我们计划使用一种排名系统：每一个候选人都被赋予一个唯一的排名,供候选人之间竞争时进行选择。如果一个候选人发现另一个候选人拥有更高的排名,那么他就会回到跟随者状态,这样高排名的候选人能够更加容易的赢得下一次选举。但是我们发现这种方法在可用性方面会有一点问题（如果高排名的服务器宕机了,那么低排名的服务器可能会超时并再次进入候选人状态。而且如果这个行为发生得足够快,则可能会导致整个选举过程都被重置掉）。我们针对算法进行了多次调整,但是每次调整之后都会有新的问题。最终我们认为随机重试的方法是更加明显和易于理解的。</p><blockquote><p>感悟：领导者产生的原因是因为集群里没有领导者,跟随者没有收到心跳,超过了弹性超时时间,所以跟随者变为候选人开始竞选,但竞选候选人有一个问题,如果弹性超时时间设置为一个统一但时间, 那么同时会有很多候选人开始竞争,这样会导致一直没有领导人选出来,对性能有很大对影响,解决的方法就是使用随机弹性时间,把随机实现分布了,这样先产生的候选人,就会成为领导人,避免多个候选人同时竞争。</p></blockquote><h2 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3 日志复制"></a>5.3 日志复制</h2><p>一旦一个领导人被选举出来,他就开始为客户端提供服务。客户端的每一个请求都包含一条被复制状态机执行的指令。领导人把这条指令作为一条新的日志条目附加到日志中去,然后并行的发起附加条目 RPCs 给其他的服务器,让他们复制这条日志条目。当这条日志条目被安全的复制（下面会介绍）,领导人会应用这条日志条目到它的状态机中然后把执行的结果返回给客户端。如果跟随者崩溃或者运行缓慢,再或者网络丢包,领导人会不断的重复尝试附加日志条目 RPCs （尽管已经回复了客户端）直到所有的跟随者都最终存储了所有的日志条目。</p><blockquote><p>感悟：当跟随者的日志是落后的情况下,领导人会不断的重复尝试附加日志条目 RPCs</p></blockquote><p><img src="https://static001.infoq.cn/resource/image/f8/17/f8c0dbf1686e6aff7052a9c399141a17.jpg" alt="图 6"></p><blockquote><p>图 6：日志由有序序号标记的条目组成。每个条目都包含创建时的任期号（图中框中的数字）,和一个状态机需要执行的指令。一个条目当可以安全的被应用到状态机中去的时候,就认为是可以提交了。</p></blockquote><p>日志以图 6 展示的方式组织。每一个日志条目存储一条状态机指令和从领导人收到这条指令时的任期号。日志中的任期号用来检查是否出现不一致的情况,同时也用来保证图 3 中的某些性质。每一条日志条目同时也都有一个整数索引值来表明它在日志中的位置。</p><p>领导人来决定什么时候把日志条目应用到状态机中是安全的；这种日志条目被称为<strong>已提交</strong>。Raft 算法保证所有已提交的日志条目都是持久化的并且最终会被所有可用的状态机执行。在领导人将创建的日志条目复制到大多数的服务器上的时候,日志条目就会被提交（例如在图 6 中的条目 7）。同时,领导人的日志中之前的所有日志条目也都会被提交,包括由其他领导人创建的条目。5.4 节会讨论某些当在领导人改变之后应用这条规则的隐晦内容,同时他也展示了这种提交的定义是安全的。领导人跟踪了最大的将会被提交的日志项的索引,并且索引值会被包含在未来的所有附加日志 RPCs （包括心跳包）,这样其他的服务器才能最终知道领导人的提交位置。一旦跟随者知道一条日志条目已经被提交,那么他也会将这个日志条目应用到本地的状态机中（按照日志的顺序）。</p><blockquote><p>感悟：被提交的日志都是持久化的并且都最终会被所有可用状态机执行</p></blockquote><p>我们设计了 Raft 的日志机制来维护一个不同服务器的日志之间的高层次的一致性。这么做不仅简化了系统的行为也使得更加可预计,同时他也是安全性保证的一个重要组件。Raft 维护着以下的特性,这些同时也组成了图 3 中的日志匹配特性：</p><ul><li>如果在不同的日志中的两个条目拥有相同的索引和任期号,那么他们存储了相同的指令。</li><li>如果在不同的日志中的两个条目拥有相同的索引和任期号,那么他们之前的所有日志条目也全部相同。</li></ul><p>第一个特性来自这样的一个事实,领导人最多在一个任期里在指定的一个日志索引位置创建一条日志条目,同时日志条目在日志中的位置也从来不会改变。第二个特性由附加日志 RPC 的一个简单的一致性检查所保证。在发送附加日志 RPC 的时候,领导人会把新的日志条目紧接着之前的条目的索引位置和任期号包含在里面。如果跟随者在它的日志中找不到包含相同索引位置和任期号的条目,那么他就会拒绝接收新的日志条目。一致性检查就像一个归纳步骤：一开始空的日志状态肯定是满足日志匹配特性的,然后一致性检查保护了日志匹配特性当日志扩展的时候。因此,每当附加日志 RPC 返回成功时,领导人就知道跟随者的日志一定是和自己相同的了。</p><blockquote><p>感悟：一致性检查过程是一个递推过程,dp[i] = dp[i-1]+1</p></blockquote><p>在正常的操作中,领导人和跟随者的日志保持一致性,所以附加日志 RPC 的一致性检查从来不会失败。然而,领导人崩溃的情况会使得日志处于不一致的状态（老的领导人可能还没有完全复制所有的日志条目）。这种不一致问题会在领导人和跟随者的一系列崩溃下加剧。图 7 展示了跟随者的日志可能和新的领导人不同的方式。跟随者可能会丢失一些在新的领导人中有的日志条目,他也可能拥有一些领导人没有的日志条目,或者两者都发生。丢失或者多出日志条目可能会持续多个任期。</p><p><img src="https://static001.infoq.cn/resource/image/cf/0b/cff0e4e90e60eb320c59218f3ae6c60b.jpg" alt="图 7"></p><blockquote><p>图 7：当一个领导人成功当选时,跟随者可能是任何情况（a-f）。每一个盒子表示是一个日志条目；里面的数字表示任期号。跟随者可能会缺少一些日志条目（a-b）,可能会有一些未被提交的日志条目（c-d）,或者两种情况都存在（e-f）。例如,场景 f 可能会这样发生,某服务器在任期 2 的时候是领导人,已附加了一些日志条目到自己的日志中,但在提交之前就崩溃了；很快这个机器就被重启了,在任期 3 重新被选为领导人,并且又增加了一些日志条目到自己的日志中；在任期 2 和任期 3 的日志被提交之前,这个服务器又宕机了,并且在接下来的几个任期里一直处于宕机状态。</p></blockquote><p>在 Raft 算法中,领导人处理不一致是通过强制跟随者直接复制自己的日志来解决了。这意味着在跟随者中的冲突的日志条目会被领导人的日志覆盖。5.4 节会阐述如何通过增加一些限制来使得这样的操作是安全的。</p><p>要使得跟随者的日志进入和自己一致的状态,领导人必须找到最后两者达成一致的地方,然后删除从那个点之后的所有日志条目,发送自己的日志给跟随者。所有的这些操作都在进行附加日志 RPCs 的一致性检查时完成。领导人针对每一个跟随者维护了一个 <strong>nextIndex</strong>,这表示下一个需要发送给跟随者的日志条目的索引地址。当一个领导人刚获得权力的时候,他初始化所有的 nextIndex 值为自己的最后一条日志的index加1（图 7 中的 11）。如果一个跟随者的日志和领导人不一致,那么在下一次的附加日志 RPC 时的一致性检查就会失败。在被跟随者拒绝之后,领导人就会减小 nextIndex 值并进行重试。最终 nextIndex 会在某个位置使得领导人和跟随者的日志达成一致。当这种情况发生,附加日志 RPC 就会成功,这时就会把跟随者冲突的日志条目全部删除并且加上领导人的日志。一旦附加日志 RPC 成功,那么跟随者的日志就会和领导人保持一致,并且在接下来的任期里一直继续保持。</p><p>如果需要的话,算法可以通过减少被拒绝的附加日志 RPCs 的次数来优化。例如,当附加日志 RPC 的请求被拒绝的时候,跟随者可以包含冲突的条目的任期号和自己存储的那个任期的最早的索引地址。借助这些信息,领导人可以减小 nextIndex 越过所有那个任期冲突的所有日志条目；这样就变成每个任期需要一次附加条目 RPC 而不是每个条目一次。在实践中,我们十分怀疑这种优化是否是必要的,因为失败是很少发生的并且也不大可能会有这么多不一致的日志。</p><p>通过这种机制,领导人在获得权力的时候就不需要任何特殊的操作来恢复一致性。他只需要进行正常的操作,然后日志就能自动的在回复附加日志 RPC 的一致性检查失败的时候自动趋于一致。领导人从来不会覆盖或者删除自己的日志（图 3 的领导人只附加特性）。</p><p>日志复制机制展示出了第 2 节中形容的一致性特性：Raft 能够接受,复制并应用新的日志条目只要大部分的机器是工作的；在通常的情况下,新的日志条目可以在一次 RPC 中被复制给集群中的大多数机器；并且单个的缓慢的跟随者不会影响整体的性能。</p><blockquote><p>感悟：如果领导者日志和跟随者日志产生来冲突,会强制覆盖领导人的日志到跟随者的日志,与etcd的raft实现中不一样的情况是领导人不会见效nextIndex中的值来进行重试,而是通过跟随者响应的一个rejectHint值快速定位到下一次同步日志d位置</p></blockquote><h2 id="5-4-安全性"><a href="#5-4-安全性" class="headerlink" title="5.4 安全性"></a>5.4 安全性</h2><p>前面的章节里描述了 Raft 算法是如何选举和复制日志的。然而,到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令。例如,一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目,然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此,不同的状态机可能会执行不同的指令序列。</p><p>这一节通过在领导选举的时候增加一些限制来完善 Raft 算法。这一限制保证了任何的领导人对于给定的任期号,都拥有了之前任期的所有被提交的日志条目（图 3 中的领导人完整特性）。增加这一选举时的限制,我们对于提交时的规则也更加清晰。最终,我们将展示对于领导人完整特性的简要证明,并且说明领导人是如何领导复制状态机的做出正确行为的。</p><h3 id="5-4-1-选举限制"><a href="#5-4-1-选举限制" class="headerlink" title="5.4.1 选举限制"></a>5.4.1 选举限制</h3><p>在任何基于领导人的一致性算法中,领导人都必须存储所有已经提交的日志条目。在某些一致性算法中,例如 Viewstamped Replication,某个节点即使是一开始并没有包含所有已经提交的日志条目,它也能被选为领导者。这些算法都包含一些额外的机制来识别丢失的日志条目并把他们传送给新的领导人,要么是在选举阶段要么在之后很快进行。不幸的是,这种方法会导致相当大的额外的机制和复杂性。Raft 使用了一种更加简单的方法,它可以保证所有之前的任期号中已经提交的日志条目在选举的时候都会出现在新的领导人中,不需要传送这些日志条目给领导人。这意味着日志条目的传送是单向的,只从领导人传给跟随者,并且领导人从不会覆盖自身本地日志中已经存在的条目。</p><p>Raft 使用投票的方式来阻止一个候选人赢得选举除非这个候选人包含了所有已经提交的日志条目。候选人为了赢得选举必须联系集群中的大部分节点,这意味着每一个已经提交的日志条目在这些服务器节点中肯定存在于至少一个节点上。如果候选人的日志至少和大多数的服务器节点一样新（这个新的定义会在下面讨论）,那么他一定持有了所有已经提交的日志条目。请求投票 RPC 实现了这样的限制： RPC 中包含了候选人的日志信息,然后投票人会拒绝掉那些日志没有自己新的投票请求。</p><p>Raft 通过比较两份日志中最后一条日志条目的索引值和任期号定义谁的日志比较新。如果两份日志最后的条目的任期号不同,那么任期号大的日志更加新。如果两份日志最后的条目任期号相同,那么日志比较长的那个就更加新。</p><h3 id="5-4-2-提交之前任期内的日志条目"><a href="#5-4-2-提交之前任期内的日志条目" class="headerlink" title="5.4.2 提交之前任期内的日志条目"></a>5.4.2 提交之前任期内的日志条目</h3><p>如同 5.3 节介绍的那样,领导人知道一条当前任期内的日志记录是可以被提交的,只要它被存储到了大多数的服务器上。如果一个领导人在提交日志条目之前崩溃了,未来后续的领导人会继续尝试复制这条日志记录。然而,一个领导人不能断定一个之前任期里的日志条目被保存到大多数服务器上的时候就一定已经提交了。图 8 展示了一种情况,一条已经被存储到大多数节点上的老日志条目,也依然有可能会被未来的领导人覆盖掉。</p><blockquote><p>感悟：领导人在提交日志条目之前崩溃了,未来后续的领导人会继续尝试复制这条日志记录。一条已经被存储到大多数节点上的老日志条目,也依然有可能会被未来的领导人覆盖掉,因为无法断定之前任期里面到日志已经被大多数服务器提交。</p></blockquote><p><img src="https://static001.infoq.cn/resource/image/d7/84/d73cf61ce742ac0cb736cfad24665a84.jpg" alt="图 8"></p><blockquote><p>图 8：如图的时间序列展示了为什么领导人无法决定对老任期号的日志条目进行提交。在 (a) 中,S1 是领导者,部分的复制了索引位置 2 的日志条目。在 (b) 中,S1 崩溃了,然后 S5 在任期 3 里通过 S3、S4 和自己的选票赢得选举,然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c),S5 又崩溃了；S1 重新启动,选举成功,开始复制日志。在这时,来自任期 2 的那条日志已经被复制到了集群中的大多数机器上,但是还没有被提交。如果 S1 在 (d) 中又崩溃了,S5 可以重新被选举成功（通过来自 S2,S3 和 S4 的选票）,然后覆盖了他们在索引 2 处的日志。反之,如果在崩溃之前,S1 把自己主导的新任期里产生的日志条目复制到了大多数机器上,就如 (e) 中那样,那么在后面任期里面这些新的日志条目就会被提交（因为S5 就不可能选举成功）。 这样在同一时刻就同时保证了,之前的所有老的日志条目就会被提交。</p></blockquote><p>为了消除图 8 里描述的情况,Raft 永远不会通过计算副本数目的方式去提交一个之前任期内的日志条目。只有领导人当前任期里的日志条目通过计算副本数目可以被提交；一旦当前任期的日志条目以这种方式被提交,那么由于日志匹配特性,之前的日志条目也都会被间接的提交。在某些情况下,领导人可以安全的知道一个老的日志条目是否已经被提交（例如,该条目是否存储到所有服务器上）,但是 Raft 为了简化问题使用一种更加保守的方法。</p><p>当领导人复制之前任期里的日志时,Raft 会为所有日志保留原始的任期号, 这在提交规则上产生了额外的复杂性。在其他的一致性算法中,如果一个新的领导人要重新复制之前的任期里的日志时,它必须使用当前新的任期号。Raft 使用的方法更加容易辨别出日志,因为它可以随着时间和日志的变化对日志维护着同一个任期编号。另外,和其他的算法相比,Raft 中的新领导人只需要发送更少日志条目（其他算法中必须在他们被提交之前发送更多的冗余日志条目来为他们重新编号）。</p><blockquote><p>感悟： 只有领导人当前任期里的日志条目通过计算副本数目可以被提交</p></blockquote><h3 id="5-4-3-安全性论证"><a href="#5-4-3-安全性论证" class="headerlink" title="5.4.3 安全性论证"></a>5.4.3 安全性论证</h3><p>在给定了完整的 Raft 算法之后,我们现在可以更加精确的讨论领导人完整性特性（这一讨论基于 9.2 节的安全性证明）。我们假设领导人完全性特性是不存在的,然后我们推出矛盾来。假设任期 T 的领导人（领导人 T）在任期内提交了一条日志条目,但是这条日志条目没有被存储到未来某个任期的领导人的日志中。设大于 T 的最小任期 U 的领导人 U 没有这条日志条目。</p><p><img src="https://static001.infoq.cn/resource/image/a7/3c/a7b8fcd715efadfd084de4458fbc3b3c.jpg" alt="图 9"></p><blockquote><p>图 9：如果 S1 （任期 T 的领导者）提交了一条新的日志在它的任期里,然后 S5 在之后的任期 U 里被选举为领导人,然后至少会有一个机器,如 S3,既拥有来自 S1 的日志,也给 S5 投票了。</p></blockquote><ol><li>在领导人 U 选举的时候一定没有那条被提交的日志条目（领导人从不会删除或者覆盖任何条目）。</li><li>领导人 T 复制这条日志条目给集群中的大多数节点,同时,领导人U 从集群中的大多数节点赢得了选票。因此,至少有一个节点（投票者、选民）同时接受了来自领导人T 的日志条目,并且给领导人U 投票了,如图 9。这个投票者是产生这个矛盾的关键。</li><li>这个投票者必须在给领导人 U 投票之前先接受了从领导人 T 发来的已经被提交的日志条目；否则他就会拒绝来自领导人 T 的附加日志请求（因为此时他的任期号会比 T 大）。</li><li>投票者在给领导人 U 投票时依然保存有这条日志条目,因为任何中间的领导人都包含该日志条目（根据上述的假设）,领导人从不会删除条目,并且跟随者只有在和领导人冲突的时候才会删除条目。</li><li>投票者把自己选票投给领导人 U 时,领导人 U 的日志必须和投票者自己一样新。这就导致了两者矛盾之一。</li><li>首先,如果投票者和领导人 U 的最后一条日志的任期号相同,那么领导人 U 的日志至少和投票者一样长,所以领导人 U 的日志一定包含所有投票者的日志。这是另一处矛盾,因为投票者包含了那条已经被提交的日志条目,但是在上述的假设里,领导人 U 是不包含的。</li><li>除此之外,领导人 U 的最后一条日志的任期号就必须比投票人大了。此外,他也比 T 大,因为投票人的最后一条日志的任期号至少和 T 一样大（他包含了来自任期 T 的已提交的日志）。创建了领导人 U 最后一条日志的之前领导人一定已经包含了那条被提交的日志（根据上述假设,领导人 U 是第一个不包含该日志条目的领导人）。所以,根据日志匹配特性,领导人 U 一定也包含那条被提交的日志,这里产生矛盾。</li><li>这里完成了矛盾。因此,所有比 T 大的领导人一定包含了所有来自 T 的已经被提交的日志。</li><li>日志匹配原则保证了未来的领导人也同时会包含被间接提交的条目,例如图 8 (d) 中的索引 2。</li></ol><p>通过领导人完全特性,我们就能证明图 3 中的状态机安全特性,即如果服务器已经在某个给定的索引值应用了日志条目到自己的状态机里,那么其他的服务器不会应用一个不一样的日志到同一个索引值上。在一个服务器应用一条日志条目到他自己的状态机中时,他的日志必须和领导人的日志,在该条目和之前的条目上相同,并且已经被提交。现在我们来考虑在任何一个服务器应用一个指定索引位置的日志的最小任期；日志完全特性保证拥有更高任期号的领导人会存储相同的日志条目,所以之后的任期里应用某个索引位置的日志条目也会是相同的值。因此,状态机安全特性是成立的。</p><p>最后,Raft 要求服务器按照日志中索引位置顺序应用日志条目。和状态机安全特性结合起来看,这就意味着所有的服务器会应用相同的日志序列集到自己的状态机中,并且是按照相同的顺序。</p><h2 id="5-5-跟随者和候选人崩溃"><a href="#5-5-跟随者和候选人崩溃" class="headerlink" title="5.5 跟随者和候选人崩溃"></a>5.5 跟随者和候选人崩溃</h2><p>到目前为止,我们都只关注了领导人崩溃的情况。跟随者和候选人崩溃后的处理方式比领导人要简单的多,并且他们的处理方式是相同的。如果跟随者或者候选人崩溃了,那么后续发送给他们的 RPCs 都会失败。Raft 中处理这种失败就是简单的通过无限的重试；如果崩溃的机器重启了,那么这些 RPC 就会完整的成功。如果一个服务器在完成了一个 RPC,但是还没有响应的时候崩溃了,那么在他重新启动之后就会再次收到同样的请求。Raft 的 RPCs 都是幂等的,所以这样重试不会造成任何问题。例如一个跟随者如果收到附加日志请求但是他已经包含了这一日志,那么他就会直接忽略这个新的请求。</p><blockquote><p>感悟：跟随者或者候选人崩溃了,领导者会通过无限重试到方式给他们发送RPC,直到他们能够响应</p></blockquote><h2 id="5-6-时间和可用性"><a href="#5-6-时间和可用性" class="headerlink" title="5.6 时间和可用性"></a>5.6 时间和可用性</h2><p>Raft 的要求之一就是安全性不能依赖时间：整个系统不能因为某些事件运行的比预期快一点或者慢一点就产生了错误的结果。但是,可用性（系统可以及时的响应客户端）不可避免的要依赖于时间。例如,如果消息交换比服务器故障间隔时间长,候选人将没有足够长的时间来赢得选举；没有一个稳定的领导人,Raft 将无法工作。</p><p>领导人选举是 Raft 中对时间要求最为关键的方面。Raft 可以选举并维持一个稳定的领导人,只要系统满足下面的时间要求：</p><blockquote><p>广播时间（broadcastTime）  &lt;&lt;  选举超时时间（electionTimeout） &lt;&lt;  平均故障间隔时间（MTBF）</p></blockquote><p>在这个不等式中,广播时间指的是从一个服务器并行的发送 RPCs 给集群中的其他服务器并接收响应的平均时间；选举超时时间就是在 5.2 节中介绍的选举的超时时间限制；然后平均故障间隔时间就是对于一台服务器而言,两次故障之间的平均时间。广播时间必须比选举超时时间小一个量级,这样领导人才能够发送稳定的心跳消息来阻止跟随者开始进入选举状态；通过随机化选举超时时间的方法,这个不等式也使得选票瓜分的情况变得不可能。选举超时时间应该要比平均故障间隔时间小上几个数量级,这样整个系统才能稳定的运行。当领导人崩溃后,整个系统会大约相当于选举超时的时间里不可用；我们希望这种情况在整个系统的运行中很少出现。</p><p>广播时间和平均故障间隔时间是由系统决定的,但是选举超时时间是我们自己选择的。Raft 的 RPCs 需要接收方将信息持久化的保存到稳定存储中去,所以广播时间大约是 0.5 毫秒到 20 毫秒,取决于存储的技术。因此,选举超时时间可能需要在 10 毫秒到 500 毫秒之间。大多数的服务器的平均故障间隔时间都在几个月甚至更长,很容易满足时间的需求。</p><h1 id="6-集群成员变化"><a href="#6-集群成员变化" class="headerlink" title="6 集群成员变化"></a>6 集群成员变化</h1><p>到目前为止,我们都假设集群的配置（加入到一致性算法的服务器集合）是固定不变的。但是在实践中,偶尔是会改变集群的配置的,例如替换那些宕机的机器或者改变复制级别。尽管可以通过暂停整个集群,更新所有配置,然后重启整个集群的方式来实现,但是在更改的时候集群会不可用。另外,如果存在手工操作步骤,那么就会有操作失误的风险。为了避免这样的问题,我们决定自动化配置改变并且将其纳入到 Raft 一致性算法中来。</p><p>为了让配置修改机制能够安全,那么在转换的过程中不能够存在任何时间点使得两个领导人同时被选举成功在同一个任期里。不幸的是,任何服务器直接从旧的配置直接转换到新的配置的方案都是不安全的。一次性自动的转换所有服务器是不可能的,所以在转换期间整个集群存在划分成两个独立的大多数群体的可能性（见图 10）。</p><p><img src="https://static001.infoq.cn/resource/image/4c/8a/4ca9603f828210f2a8d56315cdcf788a.jpg" alt="图 10"></p><blockquote><p>图 10：直接从一种配置转到新的配置是十分不安全的,因为各个机器可能在任何的时候进行转换。在这个例子中,集群配额从 3 台机器变成了 5 台。不幸的是,存在这样的一个时间点,两个不同的领导人在同一个任期里都可以被选举成功。一个是通过旧的配置,一个通过新的配置。</p></blockquote><p>为了保证安全性,配置更改必须使用两阶段方法。目前有很多种两阶段的实现。例如,有些系统在第一阶段停掉旧的配置所以集群就不能处理客户端请求；然后在第二阶段在启用新的配置。在 Raft 中,集群先切换到一个过渡的配置,我们称之为共同一致；一旦共同一致已经被提交了,那么系统就切换到新的配置上。共同一致是老配置和新配置的结合：</p><ul><li>日志条目被复制给集群中新、老配置的所有服务器。</li><li>新、旧配置的服务器都可以成为领导人。</li><li>达成一致（针对选举和提交）需要分别在两种配置上获得大多数的支持。</li></ul><p>共同一致允许独立的服务器在不影响安全性的前提下,在不同的时间进行配置转换过程。此外,共同一致可以让集群在配置转换的过程人依然响应客户端的请求。</p><p>集群配置在复制日志中以特殊的日志条目来存储和通信；图 11 展示了配置转换的过程。当一个领导人接收到一个改变配置从 C-old 到 C-new 的请求,他会为了共同一致存储配置（图中的 C-old,new）,以前面描述的日志条目和副本的形式。一旦一个服务器将新的配置日志条目增加到它的日志中,他就会用这个配置来做出未来所有的决定（服务器总是使用最新的配置,无论他是否已经被提交）。这意味着领导人要使用  C-old,new 的规则来决定日志条目 C-old,new 什么时候需要被提交。如果领导人崩溃了,被选出来的新领导人可能是使用 C-old 配置也可能是 C-old,new 配置,这取决于赢得选举的候选人是否已经接收到了 C-old,new 配置。在任何情况下, C-new 配置在这一时期都不会单方面的做出决定。</p><p>一旦 C-old,new 被提交,那么无论是 C-old 还是 C-new,在没有经过他人批准的情况下都不可能做出决定,并且领导人完全特性保证了只有拥有 C-old,new 日志条目的服务器才有可能被选举为领导人。这个时候,领导人创建一条关于 C-new 配置的日志条目并复制给集群就是安全的了。再者,每个服务器在见到新的配置的时候就会立即生效。当新的配置在 C-new 的规则下被提交,旧的配置就变得无关紧要,同时不使用新的配置的服务器就可以被关闭了。如图 11,C-old 和 C-new 没有任何机会同时做出单方面的决定；这保证了安全性。</p><p><img src="https://static001.infoq.cn/resource/image/ed/ca/ed3b92e35e4e553784d3fcffd3cd3dca.jpg" alt="图 11"></p><blockquote><p>图 11：一个配置切换的时间线。虚线表示已经被创建但是还没有被提交的条目,实线表示最后被提交的日志条目。领导人首先创建了 C-old,new 的配置条目在自己的日志中,并提交到 C-old,new 中（C-old 的大多数和  C-new 的大多数）。然后他创建 C-new 条目并提交到 C-new 中的大多数。这样就不存在  C-new 和 C-old 可以同时做出决定的时间点。</p></blockquote><p>在关于重新配置还有三个问题需要提出。</p><ol><li><p>第一个问题是,新的服务器可能初始化没有存储任何的日志条目。当这些服务器以这种状态加入到集群中,那么他们需要一段时间来更新追赶,这时还不能提交新的日志条目。为了避免这种可用性的间隔时间,Raft 在配置更新的时候使用了一种额外的阶段,在这个阶段,新的服务器以没有投票权身份加入到集群中来（领导人复制日志给他们,但是不考虑他们是大多数）。一旦新的服务器追赶上了集群中的其他机器,重新配置可以像上面描述的一样处理。</p></li><li><p>第二个问题是,集群的领导人可能不是新配置的一员。在这种情况下,领导人就会在提交了 C-new 日志之后退位（回到跟随者状态）。这意味着有这样的一段时间,领导人管理着集群,但是不包括他自己；他复制日志但是不把他自己算作是大多数之一。当 C-new 被提交时,会发生领导人过渡,因为这时是最早新的配置可以独立工作的时间点（将总是能够在 C-new 配置下选出新的领导人）。在此之前,可能只能从 C-old 中选出领导人。</p></li><li><p>第三个问题是,移除不在 C-new 中的服务器可能会扰乱集群。这些服务器将不会再接收到心跳,所以当选举超时,他们就会进行新的选举过程。他们会发送拥有新的任期号的请求投票 RPCs,这样会导致当前的领导人回退成跟随者状态。新的领导人最终会被选出来,但是被移除的服务器将会再次超时,然后这个过程会再次重复,导致整体可用性大幅降低。</p></li></ol><p>为了避免这个问题,当服务器确认当前领导人存在时,服务器会忽略请求投票 RPCs。特别的,当服务器在当前最小选举超时时间内收到一个请求投票 RPC,他不会更新当前的任期号或者投出选票。这不会影响正常的选举,每个服务器在开始一次选举之前,至少等待一个最小选举超时时间。然而,这有利于避免被移除的服务器扰乱：如果领导人能够发送心跳给集群,那么他就不会被更大的任期号废黜。</p><blockquote><p>感悟：当确认有领导人当时候,会忽略投票请求</p></blockquote><h1 id="7-日志压缩"><a href="#7-日志压缩" class="headerlink" title="7 日志压缩"></a>7 日志压缩</h1><p>Raft 的日志在正常操作中不断的增长,但是在实际的系统中,日志不能无限制的增长。随着日志不断增长,他会占用越来越多的空间,花费越来越多的时间来重置。如果没有一定的机制去清除日志里积累的陈旧的信息,那么会带来可用性问题。</p><p>快照是最简单的压缩方法。在快照系统中,整个系统的状态都以快照的形式写入到稳定的持久化存储中,然后到那个时间点之前的日志全部丢弃。快照技术被使用在 Chubby 和 ZooKeeper 中,接下来的章节会介绍 Raft 中的快照技术。</p><p>增量压缩的方法,例如日志清理或者日志结构合并树,都是可行的。这些方法每次只对一小部分数据进行操作,这样就分散了压缩的负载压力。首先,他们先选择一个已经积累的大量已经被删除或者被覆盖对象的区域,然后重写那个区域还活跃的对象,之后释放那个区域。和简单操作整个数据集合的快照相比,需要增加复杂的机制来实现。状态机可以实现 LSM tree 使用和快照相同的接口,但是日志清除方法就需要修改 Raft 了。</p><p><img src="https://static001.infoq.cn/resource/image/a0/03/a054763c5a06c86ced30f8db0a414b03.jpg" alt="图 12"></p><blockquote><p>图 12：一个服务器用新的快照替换了从 1 到 5 的条目,快照值存储了当前的状态。快照中包含了最后的索引位置和任期号。</p></blockquote><p>图 12 展示了 Raft 中快照的基础思想。每个服务器独立的创建快照,只包括已经被提交的日志。主要的工作包括将状态机的状态写入到快照中。Raft 也包含一些少量的元数据到快照中：<strong>最后被包含索引</strong>指的是被快照取代的最后的条目在日志中的索引值（状态机最后应用的日志）,<strong>最后被包含的任期</strong>指的是该条目的任期号。保留这些数据是为了支持快照后紧接着的第一个条目的附加日志请求时的一致性检查,因为这个条目需要前一日志条目的索引值和任期号。为了支持集群成员更新（第 6 节）,快照中也将最后的一次配置作为最后一个条目存下来。一旦服务器完成一次快照,他就可以删除最后索引位置之前的所有日志和快照了。</p><p>尽管通常服务器都是独立的创建快照,但是领导人必须偶尔的发送快照给一些落后的跟随者。这通常发生在当领导人已经丢弃了下一条需要发送给跟随者的日志条目的时候。幸运的是这种情况不是常规操作：一个与领导人保持同步的跟随者通常都会有这个条目。然而一个运行非常缓慢的跟随者或者新加入集群的服务器（第 6 节）将不会有这个条目。这时让这个跟随者更新到最新的状态的方式就是通过网络把快照发送给他们。</p><p><strong>安装快照 RPC</strong>：</p><p>由领导人调用以将快照的分块发送给跟随者。领导者总是按顺序发送分块。</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>leaderId</td><td>领导人的 Id,以便于跟随者重定向请求</td></tr><tr><td>lastIncludedIndex</td><td>快照中包含的最后日志条目的索引值</td></tr><tr><td>lastIncludedTerm</td><td>快照中包含的最后日志条目的任期号</td></tr><tr><td>offset</td><td>分块在快照中的字节偏移量</td></tr><tr><td>data[]</td><td>原始数据</td></tr><tr><td>done</td><td>如果这是最后一个分块则为 true</td></tr></tbody></table><table><thead><tr><th>结果</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前任期号（currentTerm）,便于领导人更新自己</td></tr></tbody></table><p><strong>接收者实现</strong>：</p><ol><li>如果<code>term &lt; currentTerm</code>就立即恢复</li><li>如果是第一个分块（offset 为 0）就创建一个新的快照</li><li>在指定偏移量写入数据</li><li>如果 done 是 false,则继续等待更多的数据</li><li>保存快照文件,丢弃具有较小索引的任何现有或部分快照</li><li>如果现存的日志条目与快照中最后包含的日志条目具有相同的索引值和任期号,则保留其后的日志条目并进行回复</li><li>丢弃整个日志</li><li>使用快照重置状态机（并加载快照的集群配置）</li></ol><p><img src="https://md.ulovecode.com/static/images/posts/image-20200614012559141.png?imageView2/2/w/1280/h/847" alt="图 13"></p><blockquote><p>图 13：一个关于安装快照的简要概述。为了便于传输,快照都是被分成分块的；每个分块都给了跟随者生命的迹象,所以跟随者可以重置选举超时计时器。</p></blockquote><p>在这种情况下领导人使用一种叫做安装快照的新的 RPC 来发送快照给太落后的跟随者；见图 13。当跟随者通过这种  RPC 接收到快照时,他必须自己决定对于已经存在的日志该如何处理。通常快照会包含没有在接收者日志中存在的信息。在这种情况下,跟随者丢弃其整个日志；它全部被快照取代,并且可能包含与快照冲突的未提交条目。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误）,那么被快照包含的条目将会被全部删除,但是快照后面的条目仍然有效,必须保留。</p><p>这种快照的方式背离了 Raft 的强领导人原则,因为跟随者可以在不知道领导人情况下创建快照。但是我们认为这种背离是值得的。领导人的存在,是为了解决在达成一致性的时候的冲突,但是在创建快照的时候,一致性已经达成,这时不存在冲突了,所以没有领导人也是可以的。数据依然是从领导人传给跟随者,只是跟随者可以重新组织他们的数据了。</p><p>我们考虑过一种替代的基于领导人的快照方案,即只有领导人创建快照,然后发送给所有的跟随者。但是这样做有两个缺点。</p><ol><li>第一,发送快照会浪费网络带宽并且延缓了快照处理的时间。每个跟随者都已经拥有了所有产生快照需要的信息,而且很显然,自己从本地的状态中创建快照比通过网络接收别人发来的要经济。</li><li>第二,领导人的实现会更加复杂。例如,领导人需要发送快照的同时并行的将新的日志条目发送给跟随者,这样才不会阻塞新的客户端请求。</li></ol><p>还有两个问题影响了快照的性能。</p><ol><li>首先,服务器必须决定什么时候应该创建快照。如果快照创建的过于频繁,那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低,他就要承受耗尽存储容量的风险,同时也增加了从日志重建的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置的显著大于期望的快照的大小,那么快照对磁盘压力的影响就会很小了。</li><li>第二个影响性能的问题就是写入快照需要花费显著的一段时间,并且我们还不希望影响到正常操作。解决方案是通过写时复制的技术,这样新的更新就可以被接收而不影响到快照。例如,具有函数式数据结构的状态机天然支持这样的功能。另外,操作系统的写时复制技术的支持（如 Linux 上的 fork）可以被用来创建完整的状态机的内存快照（我们的实现就是这样的）。</li></ol><h1 id="8-客户端交互"><a href="#8-客户端交互" class="headerlink" title="8 客户端交互"></a>8 客户端交互</h1><p>这一节将介绍客户端是如何和 Raft 进行交互的,包括客户端如何发现领导人和 Raft 是如何支持线性化语义的。这些问题对于所有基于一致性的系统都存在,并且 Raft 的解决方案和其他的也差不多。</p><p>Raft 中的客户端发送所有请求给领导人。当客户端启动的时候,他会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是领导人,那么那个服务器会拒绝客户端的请求并且提供他最近接收到的领导人的信息（附加条目请求包含了领导人的网络地址）。如果领导人已经崩溃了,那么客户端的请求就会超时；客户端之后会再次重试随机挑选服务器的过程。</p><p>我们 Raft 的目标是要实现线性化语义（每一次操作立即执行,只执行一次,在他调用和收到回复之间）。但是,如上述,Raft 是可以执行同一条命令多次的：例如,如果领导人在提交了这条日志之后,但是在响应客户端之前崩溃了,那么客户端会和新的领导人重试这条指令,导致这条命令就被再次执行了。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后,状态机跟踪每条指令最新的序列号和相应的响应。如果接收到一条指令,它的序列号已经被执行了,那么就立即返回结果,而不重新执行指令。</p><blockquote><p>感悟：通过序列号实现线性化语义,如果序列号被执行过了,就立即返回结果</p></blockquote><p>只读的操作可以直接处理而不需要记录日志。但是,在不增加任何限制的情况下,这么做可能会冒着返回脏数据的风险,因为领导人响应客户端请求时可能已经被新的领导人作废了,但是他还不知道。线性化的读操作必须不能返回脏数据,Raft 需要使用两个额外的措施在不使用日志的情况下保证这一点。</p><ol><li>首先,领导人必须有关于被提交日志的最新信息。领导人完全特性保证了领导人一定拥有所有已经被提交的日志条目,但是在他任期开始的时候,他可能不知道那些是已经被提交的。为了知道这些信息,他需要在他的任期里提交一条日志条目。Raft 中通过领导人在任期开始的时候提交一个空白的没有任何操作的日志条目到日志中去来实现。</li><li>第二,领导人在处理只读的请求之前必须检查自己是否已经被废黜了（他自己的信息已经变脏了如果一个更新的领导人被选举出来）。Raft 中通过让领导人在响应只读请求之前,先和集群中的大多数节点交换一次心跳信息来处理这个问题。</li></ol><p>可选的,领导人可以依赖心跳机制来实现一种租约的机制,但是这种方法依赖时间来保证安全性（假设时间误差是有界的）。</p><blockquote><p>感悟：etcd中就使用了租约机制,来实现线性化当读操作</p></blockquote><h1 id="9-算法实现和评估"><a href="#9-算法实现和评估" class="headerlink" title="9 算法实现和评估"></a>9 算法实现和评估</h1><p>我们已经为 RAMCloud 实现了 Raft 算法作为存储配置信息的复制状态机的一部分,并且帮助 RAMCloud 协调故障转移。这个 Raft 实现包含大约 2000 行 C++ 代码,其中不包括测试、注释和空行。这些代码是开源的。同时也有大约 25 个其他独立的第三方的基于这篇论文草稿的开源实现,针对不同的开发场景。同时,很多公司已经部署了基于 Raft 的系统。</p><p>这一节会从三个方面来评估 Raft 算法：可理解性、正确性和性能。</p><h2 id="9-1-可理解性"><a href="#9-1-可理解性" class="headerlink" title="9.1 可理解性"></a>9.1 可理解性</h2><p>为了和 Paxos 比较 Raft 算法的可理解能力,我们针对高层次的本科生和研究生,在斯坦福大学的高级操作系统课程和加州大学伯克利分校的分布式计算课程上,进行了一次学习的实验。我们分别拍了针对 Raft 和 Paxos 的视频课程,并准备了相应的小测验。Raft 的视频讲课覆盖了这篇论文的所有内容除了日志压缩；Paxos 讲课包含了足够的资料来创建一个等价的复制状态机,包括单决策 Paxos,多决策 Paxos,重新配置和一些实际系统需要的性能优化（例如领导人选举）。小测验测试一些对算法的基本理解和解释一些边角的示例。每个学生都是看完第一个视频,回答相应的测试,再看第二个视频,回答相应的测试。大约有一半的学生先进行 Paxos 部分,然后另一半先进行 Raft 部分,这是为了说明两者从第一部分的算法学习中获得的表现和经验的差异。我们计算参加人员的每一个小测验的得分来看参与者是否在 Raft 算法上更加容易理解。</p><p>我们尽可能的使得 Paxos 和 Raft 的比较更加公平。这个实验偏爱 Paxos 表现在两个方面：43 个参加者中有 15 个人在之前有一些  Paxos 的经验,并且 Paxos 的视频要长 14%。如表格 1 总结的那样,我们采取了一些措施来减轻这种潜在的偏见。我们所有的材料都可供审查。</p><table><thead><tr><th>关心</th><th>缓和偏见采取的手段</th><th>可供查看的材料</th></tr></thead><tbody><tr><td>相同的讲课质量</td><td>两者使用同一个讲师。Paxos 使用的是现在很多大学里经常使用的。Paxos 会长 14%。</td><td>视频</td></tr><tr><td>相同的测验难度</td><td>问题以难度分组,在两个测验里成对出现。</td><td>小测验</td></tr><tr><td>公平评分</td><td>使用评价量规。随机顺序打分,两个测验交替进行。</td><td>评价量规（rubric）</td></tr></tbody></table><blockquote><p>表 1：考虑到可能会存在的偏见,对于每种情况的解决方法,和相应的材料。</p></blockquote><p>参加者平均在 Raft 的测验中比 Paxos 高 4.9 分（总分 60,那么 Raft 的平均得分是 25.7,而 Paxos 是 20.8）；图 14 展示了每个参与者的得分。配置t-检验（又称student‘s t-test）表明,在 95% 的可信度下,真实的 Raft 分数分布至少比 Paxos 高 2.5 分。</p><p><img src="https://static001.infoq.cn/resource/image/cb/8e/cb9316d142ba258afe9c4612287de08e.jpg" alt="图 14"></p><blockquote><p>图 14：一个散点图表示了 43 个学生在 Paxos 和 Raft 的小测验中的成绩。在对角线之上的点表示在 Raft 获得了更高分数的学生。</p></blockquote><p>我们也建立了一个线性回归模型来预测一个新的学生的测验成绩,基于以下三个因素：他们使用的是哪个小测验,之前对 Paxos 的经验,和学习算法的顺序。模型预测,对小测验的选择会产生 12.5 分的差别。这显著的高于之前的 4.9 分,因为很多学生在之前都已经有了对于 Paxos 的经验,这相当明显的帮助 Paxos,对 Raft 就没什么太大影响了。但是奇怪的是,模型预测对于先进行 Paxos 小测验的人而言,Raft的得分低了6.3分; 虽然我们不知道为什么,这似乎在统计上是有意义的。</p><p>我们同时也在测验之后调查了参与者,他们认为哪个算法更加容易实现和解释；这个的结果在图 15 上。压倒性的结果表明 Raft 算法更加容易实现和解释（41 人中的 33个）。但是,这种自己报告的结果不如参与者的成绩更加可信,并且参与者可能因为我们的 Raft 更加易于理解的假说而产生偏见。</p><p><img src="https://static001.infoq.cn/resource/image/a2/0b/a267124e60849ea77c1f0b313f29e00b.jpg" alt="图 15"></p><blockquote><p>图 15：通过一个 5 分制的问题,参与者（左边）被问哪个算法他们觉得在一个高效正确的系统里更容易实现,右边被问哪个更容易向学生解释。</p></blockquote><p>关于 Raft 用户学习有一个更加详细的讨论。</p><h2 id="9-2-正确性"><a href="#9-2-正确性" class="headerlink" title="9.2 正确性"></a>9.2 正确性</h2><p>在第 5 节,我们已经制定了正式的规范,和对一致性机制的安全性证明。这个正式规范使用 TLA+ 规范语言使图 2 中总结的信息非常清晰。它长约400行,并作为证明的主题。同时对于任何想实现 Raft 的人也是十分有用的。我们通过 TLA 证明系统非常机械的证明了日志完全特性。然而,这个证明依赖的约束前提还没有被机械证明（例如,我们还没有证明规范的类型安全）。而且,我们已经写了一个非正式的证明关于状态机安全性是完备的,并且是相当清晰的（大约 3500 个词）。</p><h2 id="9-3-性能"><a href="#9-3-性能" class="headerlink" title="9.3 性能"></a>9.3 性能</h2><p>Raft 和其他一致性算法例如 Paxos 有着差不多的性能。在性能方面,最重要的关注点是,当领导人被选举成功时,什么时候复制新的日志条目。Raft 通过很少数量的消息包（一轮从领导人到集群大多数机器的消息）就达成了这个目的。同时,进一步提升 Raft 的性能也是可行的。例如,很容易通过支持批量操作和管道操作来提高吞吐量和降低延迟。对于其他一致性算法已经提出过很多性能优化方案；其中有很多也可以应用到 Raft 中来,但是我们暂时把这个问题放到未来的工作中去。</p><p>我们使用我们自己的 Raft 实现来衡量 Raft 领导人选举的性能并且回答两个问题。首先,领导人选举的过程收敛是否快速？第二,在领导人宕机之后,最小的系统宕机时间是多久？</p><p><img src="https://static001.infoq.cn/resource/image/2e/5f/2e9b9fdd782ce027b15837276899745f.jpg" alt="图 16"></p><blockquote><p>图 16：发现并替换一个已经崩溃的领导人的时间。上面的图考察了在选举超时时间上的随机化程度,下面的图考察了最小选举超时时间。每条线代表了 1000 次实验（除了 150-150 毫秒只试了 100 次）,和相应的确定的选举超时时间。例如,150-155 毫秒意思是,选举超时时间从这个区间范围内随机选择并确定下来。这个实验在一个拥有 5 个节点的集群上进行,其广播时延大约是 15 毫秒。对于 9 个节点的集群,结果也差不多。</p></blockquote><p>为了衡量领导人选举,我们反复的使一个拥有五个节点的服务器集群的领导人宕机,并计算需要多久才能发现领导人已经宕机并选出一个新的领导人（见图 16）。为了构建一个最坏的场景,在每一的尝试里,服务器都有不同长度的日志,意味着有些候选人是没有成为领导人的资格的。另外,为了促成选票瓜分的情况,我们的测试脚本在终止领导人之前同步的发送了一次心跳广播（这大约和领导人在崩溃前复制一个新的日志给其他机器很像）。领导人均匀的随机的在心跳间隔里宕机,也就是最小选举超时时间的一半。因此,最小宕机时间大约就是最小选举超时时间的一半。</p><p>图 16 中上面的图表明,只需要在选举超时时间上使用很少的随机化就可以大大避免选票被瓜分的情况。在没有随机化的情况下,在我们的测试里,选举过程往往都需要花费超过 10 秒钟由于太多的选票瓜分的情况。仅仅增加 5 毫秒的随机化时间,就大大的改善了选举过程,现在平均的宕机时间只有 287 毫秒。增加更多的随机化时间可以大大改善最坏情况：通过增加 50 毫秒的随机化时间,最坏的完成情况（1000 次尝试）只要 513 毫秒。</p><p>图 16 中下面的图显示,通过减少选举超时时间可以减少系统的宕机时间。在选举超时时间为 12-24 毫秒的情况下,只需要平均 35 毫秒就可以选举出新的领导人（最长的一次花费了 152 毫秒）。然而,进一步降低选举超时时间的话就会违反 Raft 的时间不等式需求：在选举新领导人之前,领导人就很难发送完心跳包。这会导致没有意义的领导人改变并降低了系统整体的可用性。我们建议使用更为保守的选举超时时间,比如 150-300 毫秒；这样的时间不大可能导致没有意义的领导人改变,而且依然提供不错的可用性。</p><h1 id="10-相关工作"><a href="#10-相关工作" class="headerlink" title="10 相关工作"></a>10 相关工作</h1><p>已经有很多关于一致性算法的工作被发表出来,其中很多都可以归到下面的类别中：</p><ul><li>Lamport 关于 Paxos 的原始描述,和尝试描述的更清晰。</li><li>关于 Paxos 的更详尽的描述,补充遗漏的细节并修改算法,使得可以提供更加容易的实现基础。</li><li>实现一致性算法的系统,例如 Chubby,ZooKeeper 和 Spanner。对于 Chubby 和 Spanner 的算法并没有公开发表其技术细节,尽管他们都声称是基于 Paxos 的。ZooKeeper 的算法细节已经发表,但是和 Paxos 着实有着很大的差别。</li><li>Paxos 可以应用的性能优化。</li><li>Oki 和 Liskov 的 Viewstamped Replication（VR）,一种和 Paxos 差不多的替代算法。原始的算法描述和分布式传输协议耦合在了一起,但是核心的一致性算法在最近的更新里被分离了出来。VR 使用了一种基于领导人的方法,和 Raft 有很多相似之处。</li></ul><p>Raft 和 Paxos 最大的不同之处就在于 Raft 的强领导特性：Raft 使用领导人选举作为一致性协议里必不可少的部分,并且将尽可能多的功能集中到了领导人身上。这样就可以使得算法更加容易理解。例如,在 Paxos 中,领导人选举和基本的一致性协议是正交的：领导人选举仅仅是性能优化的手段,而且不是一致性所必须要求的。但是,这样就增加了多余的机制：Paxos 同时包含了针对基本一致性要求的两阶段提交协议和针对领导人选举的独立的机制。相比较而言,Raft 就直接将领导人选举纳入到一致性算法中,并作为两阶段一致性的第一步。这样就减少了很多机制。</p><p>像 Raft 一样,VR 和 ZooKeeper 也是基于领导人的,因此他们也拥有一些 Raft 的优点。但是,Raft 比 VR 和 ZooKeeper 拥有更少的机制因为 Raft 尽可能的减少了非领导人的功能。例如,Raft 中日志条目都遵循着从领导人发送给其他人这一个方向：附加条目 RPC 是向外发送的。在 VR 中,日志条目的流动是双向的（领导人可以在选举过程中接收日志）；这就导致了额外的机制和复杂性。根据 ZooKeeper 公开的资料看,它的日志条目也是双向传输的,但是它的实现更像 Raft。</p><p>和上述我们提及的其他基于一致性的日志复制算法中,Raft 的消息类型更少。例如,我们数了一下 VR 和 ZooKeeper 使用的用来基本一致性需要和成员改变的消息数（排除了日志压缩和客户端交互,因为这些都比较独立且和算法关系不大）。VR 和 ZooKeeper 都分别定义了 10 中不同的消息类型,相对的,Raft 只有 4 中消息类型（两种 RPC 请求和对应的响应）。Raft 的消息都稍微比其他算法的要信息量大,但是都很简单。另外,VR 和 ZooKeeper 都在领导人改变时传输了整个日志；所以为了能够实践中使用,额外的消息类型就很必要了。</p><p>Raft 的强领导人模型简化了整个算法,但是同时也排斥了一些性能优化的方法。例如,平等主义 Paxos （EPaxos）在某些没有领导人的情况下可以达到很高的性能。平等主义 Paxos 充分发挥了在状态机指令中的交换性。任何服务器都可以在一轮通信下就提交指令,除非其他指令同时被提出了。然而,如果指令都是并发的被提出,并且互相之间不通信沟通,那么 EPaxos 就需要额外的一轮通信。因为任何服务器都可以提交指令,所以 EPaxos 在服务器之间的负载均衡做的很好,并且很容易在 WAN 网络环境下获得很低的延迟。但是,他在 Paxos 上增加了非常明显的复杂性。</p><p>一些集群成员变换的方法已经被提出或者在其他的工作中被实现,包括 Lamport 的原始的讨论,VR 和 SMART。我们选择使用共同一致的方法因为他对一致性协议的其他部分影响很小,这样我们只需要很少的一些机制就可以实现成员变换。Lamport 的基于 α 的方法之所以没有被 Raft 选择是因为它假设在没有领导人的情况下也可以达到一致性。和 VR 和 SMART 相比较,Raft 的重新配置算法可以在不限制正常请求处理的情况下进行；相比较的,VR 需要停止所有的处理过程,SMART 引入了一个和 α 类似的方法,限制了请求处理的数量。Raft 的方法同时也需要更少的额外机制来实现,和 VR、SMART 比较而言。</p><h1 id="11-结论"><a href="#11-结论" class="headerlink" title="11 结论"></a>11 结论</h1><p>算法的设计通常会把正确性,效率或者简洁作为主要的目标。尽管这些都是很有意义的目标,但是我们相信,可理解性也是一样的重要。在开发者把算法应用到实际的系统中之前,这些目标没有一个会被实现,这些都会必然的偏离发表时的形式。除非开发人员对这个算法有着很深的理解并且有着直观的感觉,否则将会对他们而言很难在实现的时候保持原有期望的特性。</p><p>在这篇论文中,我们尝试解决分布式一致性问题,但是一个广为接受但是十分令人费解的算法 Paxos 已经困扰了无数学生和开发者很多年了。我们创造了一种新的算法 Raft,显而易见的比 Paxos 要容易理解。我们同时也相信,Raft 也可以为实际的实现提供坚实的基础。把可理解性作为设计的目标改变了我们设计 Raft 的方式；随着设计的进展,我们发现自己重复使用了一些技术,比如分解问题和简化状态空间。这些技术不仅提升了 Raft 的可理解性,同时也使我们坚信其正确性。</p><h1 id="12-感谢"><a href="#12-感谢" class="headerlink" title="12 感谢"></a>12 感谢</h1><p>这项研究必须感谢以下人员的支持：Ali Ghodsi,David Mazie`res,和伯克利 CS 294-91 课程、斯坦福 CS 240 课程的学生。Scott Klemmer 帮我们设计了用户调查,Nelson Ray 建议我们进行统计学的分析。在用户调查时使用的关于 Paxos 的幻灯片很大一部分是从 Lorenzo Alvisi 的幻灯片上借鉴过来的。特别的,非常感谢 DavidMazieres 和 Ezra Hoch,他们找到了 Raft 中一些难以发现的漏洞。许多人提供了关于这篇论文十分有用的反馈和用户调查材料,包括 Ed Bugnion,Michael Chan,Hugues Evrard,Daniel Giffin,Arjun Gopalan,Jon Howell,Vimalkumar Jeyakumar,Ankita Kejriwal,Aleksandar Kracun,Amit Levy,Joel Martin,Satoshi Matsushita,Oleg Pesok,David Ramos,Robbert van Renesse,Mendel Rosenblum,Nicolas Schiper,Deian Stefan,Andrew Stone,Ryan Stutsman,David Terei,Stephen Yang,Matei Zaharia 以及 24 位匿名的会议审查人员（可能有重复）,并且特别感谢我们的领导人 Eddie Kohler。Werner Vogels 发了一条早期草稿链接的推特,给 Raft 带来了极大的关注。我们的工作由 Gigascale 系统研究中心和 Multiscale 系统研究中心给予支持,这两个研究中心由关注中心研究程序资金支持,一个是半导体研究公司的程序,由 STARnet 支持,一个半导体研究公司的程序由 MARCO 和 DARPA 支持,在国家科学基金会的 0963859 号批准,并且获得了来自 Facebook,Google,Mellanox,NEC,NetApp,SAP 和 Samsung 的支持。Diego Ongaro 由 Junglee 公司,斯坦福的毕业团体支持。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go源码分析(1) - net.http</title>
      <link href="/2019/09/03/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(1)-net.http/"/>
      <url>/2019/09/03/Go/Golang%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(1)-net.http/</url>
      
        <content type="html"><![CDATA[<p>Golang 中 net/http 包下是非常关键的源码,gin 中的框架也是实现了 Golang 中的<code>handler</code>接口的<code>SeverHttp</code>方法才能够适配,可以见的该包是网络编程的核心,我针对于其中一部分源码进行了分析,希望能够帮助大家更好的理解 Golang 网络编程。</p><a id="more"></a><h1 id="一、分析过程"><a href="#一、分析过程" class="headerlink" title="一、分析过程"></a>一、分析过程</h1><p>通过自顶向下的分析方式来分析整个源码,不关心其他实现,只关心整个调用的核心过程。</p><h1 id="二、编写一个正常运行的例子"><a href="#二、编写一个正常运行的例子" class="headerlink" title="二、编写一个正常运行的例子"></a>二、编写一个正常运行的例子</h1><p>随便写一个例子,查看其调用链 ,<code>http.NewServeMux()</code>返回一个多路复用的服务,其结构如下:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/a"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"aaaaaa"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/b"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"bbbbbb"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">":3000"</span>,mux)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>m     map[string]muxEntry</code>包含了请求路径对应的映射方法, 内部过程是并发的,需要加锁。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> ServeMux <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">mu    sync.RWMutex</span><br><span class="line">m     <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]muxEntry</span><br><span class="line">es    []muxEntry <span class="hljs-comment">// slice of entries sorted from longest to shortest.</span></span><br><span class="line">hosts <span class="hljs-keyword">bool</span>       <span class="hljs-comment">// whether any patterns contain hostnames</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下<code>mux.HandleFunc</code>这个方法,将路径与处理该路径的方法对应其内部调用了<code>mux.Handle(pattern, HandlerFunc(handler))</code>,其作用也不言而喻,将路由器表以及对应的处理方法注册到多路服务中。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// HandleFunc registers the handler function for the given pattern.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mux *ServeMux)</span> <span class="hljs-title">HandleFunc</span><span class="hljs-params">(pattern <span class="hljs-keyword">string</span>, handler <span class="hljs-keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">"http: nil handler"</span>)</span><br><span class="line">&#125;</span><br><span class="line">mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http.ListenAndServe(&quot;:3000&quot;,mux)</code>监听了<code>3000</code>端口,传入创建好的多路复用服务,其内部又包装了一个<code>Server</code>,然后通过<code>server.ListenAndServe()</code>开启内部调用过程。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ListenAndServe listens on the TCP network address addr and then calls</span></span><br><span class="line"><span class="hljs-comment">// Serve with handler to handle requests on incoming connections.</span></span><br><span class="line"><span class="hljs-comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>, handler Handler)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、内部调用过程"><a href="#三、内部调用过程" class="headerlink" title="三、内部调用过程"></a>三、内部调用过程</h1><p><code>ListenAndServe()</code>方法中使用<code>ln, err := net.Listen(&quot;tcp&quot;, addr)</code>打开了tcp连接（这个过程在后序的文章会进行分析）,最后调用了<code>srv.Serve(tcpKeepAliveListener{ln.(*net.TCPListener)})</code>处理。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> srv.shuttingDown() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ErrServerClosed</span><br><span class="line">&#125;</span><br><span class="line">addr := srv.Addr</span><br><span class="line"><span class="hljs-keyword">if</span> addr == <span class="hljs-string">""</span> &#123;</span><br><span class="line">addr = <span class="hljs-string">":http"</span></span><br><span class="line">&#125;</span><br><span class="line">ln, err := net.Listen(<span class="hljs-string">"tcp"</span>, addr)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> srv.Serve(tcpKeepAliveListener&#123;ln.(*net.TCPListener)&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Serve(l net.Listener) error</code>方法是一个监听端口消息的处理器。其过程可以简化描述为首先监听请求,如果当前有错误信息,直接关闭服务,如果没有错误信息,创建新的连接去处理这个请求。</p><p>接受<code>Listener l</code>上的传入连接,创建一个每个新服务<code>goroutine</code>。服务<code>goroutines</code>读取请求和调用<code>srv.Handler</code>来回复他们的请求。整个过程最重要的就是整个<code>for</code>循环,他做了什么呢？</p><ol><li><code>rw, e := l.Accept()</code>  Accept等待并返回与侦听器的下一个连接</li><li><code>&lt;-srv.getDoneChan()</code>如果收到结束的通知,就停止监听</li><li><code>if ne, ok := e.(net.Error); ok &amp;&amp; ne.Temporary()</code>如果发生错误就进行重试<ol><li><code>tempDelay = 5 * time.Millisecond</code>重试时间最初设置为5毫秒</li><li><code>tempDelay *= 2</code>每次重试时间为2的指数级</li><li><code>max := 1 * time.Second ；tempDelay = max</code>重试时间最大为1秒钟</li><li><code>time.Sleep(tempDelay)</code>执行休眠的过程（非阻塞）</li></ol></li><li><code>c := srv.newConn(rw)</code>建立连接</li><li><code>c.setState(c.rwc, StateNew) // before Serve can return</code>设置连接状态为<code>StateNew</code></li><li><code>go c.serve(ctx)</code>创建一个协程去处理</li></ol><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Serve accepts incoming connections on the Listener l, creating a</span></span><br><span class="line"><span class="hljs-comment">// new service goroutine for each. The service goroutines read requests and</span></span><br><span class="line"><span class="hljs-comment">// then call srv.Handler to reply to them.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// HTTP/2 support is only enabled if the Listener returns *tls.Conn</span></span><br><span class="line"><span class="hljs-comment">// connections and they were configured with "h2" in the TLS</span></span><br><span class="line"><span class="hljs-comment">// Config.NextProtos.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// Serve always returns a non-nil error and closes l.</span></span><br><span class="line"><span class="hljs-comment">// After Shutdown or Close, the returned error is ErrServerClosed.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span> <span class="hljs-title">Serve</span><span class="hljs-params">(l net.Listener)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> fn := testHookServerServe; fn != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fn(srv, l) <span class="hljs-comment">// call hook with unwrapped listener</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l = &amp;onceCloseListener&#123;Listener: l&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> l.Close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err := srv.setupHTTP2_Serve(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> !srv.trackListener(&amp;l, <span class="hljs-literal">true</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ErrServerClosed</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> srv.trackListener(&amp;l, <span class="hljs-literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> tempDelay time.Duration     <span class="hljs-comment">// how long to sleep on accept failure</span></span><br><span class="line">baseCtx := context.Background() <span class="hljs-comment">// base is always background, per Issue 16220</span></span><br><span class="line">ctx := context.WithValue(baseCtx, ServerContextKey, srv)</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">rw, e := l.Accept()</span><br><span class="line"><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> &lt;-srv.getDoneChan():</span><br><span class="line"><span class="hljs-keyword">return</span> ErrServerClosed</span><br><span class="line"><span class="hljs-keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> ne, ok := e.(net.Error); ok &amp;&amp; ne.Temporary() &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> tempDelay == <span class="hljs-number">0</span> &#123;</span><br><span class="line">tempDelay = <span class="hljs-number">5</span> * time.Millisecond</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">tempDelay *= <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> max := <span class="hljs-number">1</span> * time.Second; tempDelay &gt; max &#123;</span><br><span class="line">tempDelay = max</span><br><span class="line">&#125;</span><br><span class="line">srv.logf(<span class="hljs-string">"http: Accept error: %v; retrying in %v"</span>, e, tempDelay)</span><br><span class="line">time.Sleep(tempDelay)</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line">tempDelay = <span class="hljs-number">0</span></span><br><span class="line">c := srv.newConn(rw)</span><br><span class="line">c.setState(c.rwc, StateNew) <span class="hljs-comment">// before Serve can return</span></span><br><span class="line"><span class="hljs-keyword">go</span> c.serve(ctx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入是一个<code>tcpKeepAliveListener</code>,所以会设置keepAlive,其默认设置为设置为3分钟保持活动之间的时间间隔,保持tcp连接不会马上中断。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ln tcpKeepAliveListener)</span> <span class="hljs-title">Accept</span><span class="hljs-params">()</span> <span class="hljs-params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">tc, err := ln.AcceptTCP()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">tc.SetKeepAlive(<span class="hljs-literal">true</span>)</span><br><span class="line">tc.SetKeepAlivePeriod(<span class="hljs-number">3</span> * time.Minute)</span><br><span class="line"><span class="hljs-keyword">return</span> tc, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 处理整个过程的关键又到了<code>c.serve(ctx)</code>这个方法,核心就是将<code>c.server</code>的参数传给一个实现了<code>Handler</code>接口的类去处理这件事情。</p> <figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Serve a new connection.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *conn)</span> <span class="hljs-title">serve</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">c.remoteAddr = c.rwc.RemoteAddr().String()</span><br><span class="line">ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())</span><br><span class="line"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &amp;&amp; err != ErrAbortHandler &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> size = <span class="hljs-number">64</span> &lt;&lt; <span class="hljs-number">10</span></span><br><span class="line">buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, size)</span><br><span class="line">buf = buf[:runtime.Stack(buf, <span class="hljs-literal">false</span>)]</span><br><span class="line">c.server.logf(<span class="hljs-string">"http: panic serving %v: %v\n%s"</span>, c.remoteAddr, err, buf)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !c.hijacked() &#123;</span><br><span class="line">c.<span class="hljs-built_in">close</span>()</span><br><span class="line">c.setState(c.rwc, StateClosed)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> tlsConn, ok := c.rwc.(*tls.Conn); ok &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> d := c.server.ReadTimeout; d != <span class="hljs-number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> d := c.server.WriteTimeout; d != <span class="hljs-number">0</span> &#123;</span><br><span class="line">c.rwc.SetWriteDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := tlsConn.Handshake(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-comment">// If the handshake failed due to the client not speaking</span></span><br><span class="line"><span class="hljs-comment">// TLS, assume they're speaking plaintext HTTP and write a</span></span><br><span class="line"><span class="hljs-comment">// 400 response on the TLS conn's underlying net.Conn.</span></span><br><span class="line"><span class="hljs-keyword">if</span> re, ok := err.(tls.RecordHeaderError); ok &amp;&amp; re.Conn != <span class="hljs-literal">nil</span> &amp;&amp; tlsRecordHeaderLooksLikeHTTP(re.RecordHeader) &#123;</span><br><span class="line">io.WriteString(re.Conn, <span class="hljs-string">"HTTP/1.0 400 Bad Request\r\n\r\nClient sent an HTTP request to an HTTPS server.\n"</span>)</span><br><span class="line">re.Conn.Close()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.server.logf(<span class="hljs-string">"http: TLS handshake error from %s: %v"</span>, c.rwc.RemoteAddr(), err)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.tlsState = <span class="hljs-built_in">new</span>(tls.ConnectionState)</span><br><span class="line">*c.tlsState = tlsConn.ConnectionState()</span><br><span class="line"><span class="hljs-keyword">if</span> proto := c.tlsState.NegotiatedProtocol; validNPN(proto) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> fn := c.server.TLSNextProto[proto]; fn != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">h := initNPNRequest&#123;tlsConn, serverHandler&#123;c.server&#125;&#125;</span><br><span class="line">fn(c.server, tlsConn, h)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// HTTP/1.x from here on.</span></span><br><span class="line"></span><br><span class="line">ctx, cancelCtx := context.WithCancel(ctx)</span><br><span class="line">c.cancelCtx = cancelCtx</span><br><span class="line"><span class="hljs-keyword">defer</span> cancelCtx()</span><br><span class="line"></span><br><span class="line">c.r = &amp;connReader&#123;conn: c&#125;</span><br><span class="line">c.bufr = newBufioReader(c.r)</span><br><span class="line">c.bufw = newBufioWriterSize(checkConnErrorWriter&#123;c&#125;, <span class="hljs-number">4</span>&lt;&lt;<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">w, err := c.readRequest(ctx)</span><br><span class="line"><span class="hljs-keyword">if</span> c.r.remain != c.server.initialReadLimitSize() &#123;</span><br><span class="line"><span class="hljs-comment">// If we read any bytes off the wire, we're active.</span></span><br><span class="line">c.setState(c.rwc, StateActive)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> errorHeaders = <span class="hljs-string">"\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err == errTooLarge &#123;</span><br><span class="line"><span class="hljs-comment">// Their HTTP client may or may not be</span></span><br><span class="line"><span class="hljs-comment">// able to read this if we're</span></span><br><span class="line"><span class="hljs-comment">// responding to them and hanging up</span></span><br><span class="line"><span class="hljs-comment">// while they're still writing their</span></span><br><span class="line"><span class="hljs-comment">// request. Undefined behavior.</span></span><br><span class="line"><span class="hljs-keyword">const</span> publicErr = <span class="hljs-string">"431 Request Header Fields Too Large"</span></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="hljs-string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> isCommonNetReadError(err) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-comment">// don't reply</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publicErr := <span class="hljs-string">"400 Bad Request"</span></span><br><span class="line"><span class="hljs-keyword">if</span> v, ok := err.(badRequestError); ok &#123;</span><br><span class="line">publicErr = publicErr + <span class="hljs-string">": "</span> + <span class="hljs-keyword">string</span>(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="hljs-string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Expect 100 Continue support</span></span><br><span class="line">req := w.req</span><br><span class="line"><span class="hljs-keyword">if</span> req.expectsContinue() &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> req.ProtoAtLeast(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &amp;&amp; req.ContentLength != <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Wrap the Body reader with one that replies on the connection</span></span><br><span class="line">req.Body = &amp;expectContinueReader&#123;readCloser: req.Body, resp: w&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> req.Header.get(<span class="hljs-string">"Expect"</span>) != <span class="hljs-string">""</span> &#123;</span><br><span class="line">w.sendExpectationFailed()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.curReq.Store(w)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> requestBodyRemains(req.Body) &#123;</span><br><span class="line">registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">w.conn.r.startBackgroundRead()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// HTTP cannot have multiple simultaneous active requests.[*]</span></span><br><span class="line"><span class="hljs-comment">// Until the server replies to this request, it can't read another,</span></span><br><span class="line"><span class="hljs-comment">// so we might as well run the handler in this goroutine.</span></span><br><span class="line"><span class="hljs-comment">// [*] Not strictly true: HTTP pipelining. We could let them all process</span></span><br><span class="line"><span class="hljs-comment">// in parallel even if their responses need to be serialized.</span></span><br><span class="line"><span class="hljs-comment">// But we're not going to implement HTTP pipelining because it</span></span><br><span class="line"><span class="hljs-comment">// was never deployed in the wild and the answer is HTTP/2.</span></span><br><span class="line">serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</span><br><span class="line">w.cancelCtx()</span><br><span class="line"><span class="hljs-keyword">if</span> c.hijacked() &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.finishRequest()</span><br><span class="line"><span class="hljs-keyword">if</span> !w.shouldReuseConnection() &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() &#123;</span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.setState(c.rwc, StateIdle)</span><br><span class="line">c.curReq.Store((*response)(<span class="hljs-literal">nil</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> !w.conn.server.doKeepAlives() &#123;</span><br><span class="line"><span class="hljs-comment">// We're in shutdown mode. We might've replied</span></span><br><span class="line"><span class="hljs-comment">// to the user without "Connection: close" and</span></span><br><span class="line"><span class="hljs-comment">// they might think they can send another</span></span><br><span class="line"><span class="hljs-comment">// request, but such is life with HTTP/1.1.</span></span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> d := c.server.idleTimeout(); d != <span class="hljs-number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line"><span class="hljs-keyword">if</span> _, err := c.bufr.Peek(<span class="hljs-number">4</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.rwc.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>  调用<code>ServeHTTP</code>方法.</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> serverHandler <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">srv *Server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结构体,实现了<code>Handler</code>接口的<code>ServeHTTP(ResponseWriter, *Request)</code>方法</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sh serverHandler)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class="line">handler := sh.srv.Handler</span><br><span class="line"><span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">handler = DefaultServeMux</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> req.RequestURI == <span class="hljs-string">"*"</span> &amp;&amp; req.Method == <span class="hljs-string">"OPTIONS"</span> &#123;</span><br><span class="line">handler = globalOptionsHandler&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">handler.ServeHTTP(rw, req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就将<code>c.server</code>传入的参数<code>sh.srv.Handler</code>直接调用<code>handler.ServeHTTP(rw, req)</code>。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ServeHTTP dispatches the request to the handler whose</span></span><br><span class="line"><span class="hljs-comment">// pattern most closely matches the request URL.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mux *ServeMux)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> r.RequestURI == <span class="hljs-string">"*"</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> r.ProtoAtLeast(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &#123;</span><br><span class="line">w.Header().Set(<span class="hljs-string">"Connection"</span>, <span class="hljs-string">"close"</span>)</span><br><span class="line">&#125;</span><br><span class="line">w.WriteHeader(StatusBadRequest)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">h, _ := mux.Handler(r)</span><br><span class="line">h.ServeHTTP(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会调用<code>h, _ := mux.Handler(r)</code>方法,对请求对数据进行查找路径,重定向,加工之类对操作,调用<code>mux.handler(host, r.URL.Path)</code>在路由表里查找路径对应对方法,返回的一个对应该请求的处理<code>handler</code>。<code>handler</code>再调用<code>ServeHTTP</code>方法进行处理。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mux *ServeMux)</span> <span class="hljs-title">Handler</span><span class="hljs-params">(r *Request)</span> <span class="hljs-params">(h Handler, pattern <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// CONNECT requests are not canonicalized.</span></span><br><span class="line"><span class="hljs-keyword">if</span> r.Method == <span class="hljs-string">"CONNECT"</span> &#123;</span><br><span class="line"><span class="hljs-comment">// If r.URL.Path is /tree and its handler is not registered,</span></span><br><span class="line"><span class="hljs-comment">// the /tree -&gt; /tree/ redirect applies to CONNECT requests</span></span><br><span class="line"><span class="hljs-comment">// but the path canonicalization does not.</span></span><br><span class="line"><span class="hljs-keyword">if</span> u, ok := mux.redirectToPathSlash(r.URL.Host, r.URL.Path, r.URL); ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> RedirectHandler(u.String(), StatusMovedPermanently), u.Path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> mux.handler(r.Host, r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// All other requests have any port stripped and path cleaned</span></span><br><span class="line"><span class="hljs-comment">// before passing to mux.handler.</span></span><br><span class="line">host := stripHostPort(r.Host)</span><br><span class="line">path := cleanPath(r.URL.Path)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// If the given path is /tree and its handler is not registered,</span></span><br><span class="line"><span class="hljs-comment">// redirect for /tree/.</span></span><br><span class="line"><span class="hljs-keyword">if</span> u, ok := mux.redirectToPathSlash(host, path, r.URL); ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> RedirectHandler(u.String(), StatusMovedPermanently), u.Path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> path != r.URL.Path &#123;</span><br><span class="line">_, pattern = mux.handler(host, path)</span><br><span class="line">url := *r.URL</span><br><span class="line">url.Path = path</span><br><span class="line"><span class="hljs-keyword">return</span> RedirectHandler(url.String(), StatusMovedPermanently), pattern</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> mux.handler(host, r.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终处理流程还是交给了<code>HandlerFunc</code>去处理了这些请求。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ServeHTTP calls f(w, r).</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f HandlerFunc)</span> <span class="hljs-title">ServeHTTP</span><span class="hljs-params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整个过程我们在总结一下,我用一个流程符号来表示一下整个调用过程吧</p><pre><code>http.ListenAndServe(&quot;:3000&quot;,mux) -&gt; server.ListenAndServe()  -&gt; srv.Serve(tcpKeepAliveListener{ln.(*net.TCPListener)}) -&gt;  c.serve(ctx) -&gt;serverHandler{c.server}.ServeHTTP(w, w.req) -&gt;         h, _ := mux.Handler(r) -&gt; h.ServeHTTP(w, r)</code></pre><p>对于调用过程,我的理解是一共分成了三层,第一层为<code>server</code>这一层对请求进行处理,处理错误请求,是否需要创建连接。第二层 为<code>connect</code>创建http请求,处理安全认证.第三层为<code>serverHandler</code>,进行路由,查找对应的方法,调用最终的处理。每一层的职责进行处理,分工明确,采用委托的方式来实现自定义的处理。如果文中有错误或者可以补充的,不吝指教。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的垃圾收集：第三部分 - GC步伐</title>
      <link href="/2019/08/08/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-GC%E6%AD%A5%E4%BC%90/"/>
      <url>/2019/08/08/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-GC%E6%AD%A5%E4%BC%90/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第三篇文章,它将提供对Go中垃圾收集器背后的机制和语义的理解。这篇文章重点介绍GC如何自我调整。</p><a id="more"></a><p>三部分系列的索引：<br>1）Go中的垃圾收集：第一部分 - 语义<br>2）Go中的垃圾收集：第二部分 - GC跟踪<br>3）Go中的垃圾收集：第三部分 - GC步伐</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在第二篇文章中,我向你展示了垃圾收集器的行为以及如何使用工具查看收集器对正在运行的应用程序造成的延迟。我带你了解了一个真实的Web应用程序,并向你展示了如何生成GC跟踪和应用程序配置文件。然后,我向你展示了如何解释这些工具的输出,以便你可以找到提高应用程序性能的方法。</p><p>该帖子的最终结论与第一篇相同：如果减少堆上的压力,你将减少延迟成本,从而提高应用程序的性能。与垃圾收集器同情的最佳策略是减少每个工作的分配数量或数量。在这篇文章中,我将展示调步算法如何能够识别给定工作负载随时间的最佳速度。</p><h1 id="并发示例代码"><a href="#并发示例代码" class="headerlink" title="并发示例代码"></a>并发示例代码</h1><p>我将使用此链接中的代码。</p><p><a href="https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/trace" target="_blank" rel="noopener">https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/trace</a></p><p>该程序确定在RSS新闻订阅源文档集合中可以找到特定主题的频率。跟踪程序包含不同版本的查找算法,以测试不同的并发模式。我将集中在freq,freqConcurrent和freqNumCPU的算法版本。</p><p>注意：我在Macbook Pro上运行代码,使用带有12个硬件线程的Intel i9处理器,使用go1.12.7。你将在不同的体系结构,操作系统和Go版本上看到不同的结果。该职位的核心成果应保持不变。</p><p>我先从freq版本开始。它表示程序的非并发顺序版本。这将为后续的并发版本提供基线。</p><p>清单1</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">freq</span><span class="hljs-params">(topic <span class="hljs-keyword">string</span>, docs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">02</span>     <span class="hljs-keyword">var</span> found <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">03</span></span><br><span class="line"><span class="hljs-number">04</span>     <span class="hljs-keyword">for</span> _, doc := <span class="hljs-keyword">range</span> docs &#123;</span><br><span class="line"><span class="hljs-number">05</span>         file := fmt.Sprintf(<span class="hljs-string">"%s.xml"</span>, doc[:<span class="hljs-number">8</span>])</span><br><span class="line"><span class="hljs-number">06</span>         f, err := os.OpenFile(file, os.O_RDONLY, <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-number">07</span>         <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">08</span>             log.Printf(<span class="hljs-string">"Opening Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">09</span>             <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">10</span>         &#125;</span><br><span class="line"><span class="hljs-number">11</span>         <span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line"><span class="hljs-number">12</span></span><br><span class="line"><span class="hljs-number">13</span>         data, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="hljs-number">14</span>         <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">15</span>             log.Printf(<span class="hljs-string">"Reading Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">16</span>             <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">17</span>         &#125;</span><br><span class="line"><span class="hljs-number">18</span></span><br><span class="line"><span class="hljs-number">19</span>         <span class="hljs-keyword">var</span> d document</span><br><span class="line"><span class="hljs-number">20</span>         <span class="hljs-keyword">if</span> err := xml.Unmarshal(data, &amp;d); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">21</span>             log.Printf(<span class="hljs-string">"Decoding Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">22</span>             <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">23</span>         &#125;</span><br><span class="line"><span class="hljs-number">24</span></span><br><span class="line"><span class="hljs-number">25</span>         <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> d.Channel.Items &#123;</span><br><span class="line"><span class="hljs-number">26</span>             <span class="hljs-keyword">if</span> strings.Contains(item.Title, topic) &#123;</span><br><span class="line"><span class="hljs-number">27</span>                 found++</span><br><span class="line"><span class="hljs-number">28</span>                 <span class="hljs-keyword">continue</span></span><br><span class="line"><span class="hljs-number">29</span>             &#125;</span><br><span class="line"><span class="hljs-number">30</span></span><br><span class="line"><span class="hljs-number">31</span>             <span class="hljs-keyword">if</span> strings.Contains(item.Description, topic) &#123;</span><br><span class="line"><span class="hljs-number">32</span>                 found++</span><br><span class="line"><span class="hljs-number">33</span>             &#125;</span><br><span class="line"><span class="hljs-number">34</span>        &#125;</span><br><span class="line"><span class="hljs-number">35</span>     &#125;</span><br><span class="line"><span class="hljs-number">36</span></span><br><span class="line"><span class="hljs-number">37</span>     <span class="hljs-keyword">return</span> found</span><br><span class="line"><span class="hljs-number">38</span> &#125;</span><br></pre></td></tr></table></figure><p>清单1显示了该freq函数。此顺序版本的范围超过文件名集合,并执行四个操作：打开,读取,解码和搜索。它为每个文件执行此操作,一次一个。</p><p>当我freq在我的机器上运行此版本时,我得到以下结果。</p><p>清单2</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ time ./trace</span><br><span class="line">2019/07/02 13:40:49 Searching 4000 files, found president 28000 <span class="hljs-built_in">times</span>.</span><br><span class="line">./trace  2.54s user 0.12s system 105% cpu 2.512 total</span><br></pre></td></tr></table></figure><p>你可以通过输出时间看到,程序需要大约2.5秒来处理4000个文件。很高兴看到在垃圾收集中花费了多少时间。你可以通过查看程序的痕迹来做到这一点。由于这是一个启动和完成的程序,因此你可以使用跟踪包生成跟踪。</p><p>清单3</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">03 import <span class="hljs-string">"runtime/trace"</span></span><br><span class="line">04</span><br><span class="line">05 func <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;</span><br><span class="line">06     trace.Start(os.Stdout)</span><br><span class="line">07     defer trace.Stop()</span><br></pre></td></tr></table></figure><p>清单3显示了从程序生成跟踪所需的代码。trace从runtime标准库中的文件夹导入包后,调用trace.Start和trace.Stop。将跟踪输出os.Stdout定向为简化代码。</p><p>使用此代码,现在你可以重新生成并再次运行该程序。不要忘记重定向stdout到文件。</p><p>清单4</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">$ time ./trace &gt; t.out</span><br><span class="line">Searching 4000 files, found president 28000 <span class="hljs-built_in">times</span>.</span><br><span class="line">./trace &gt; t.out  2.67s user 0.13s system 106% cpu 2.626 total</span><br></pre></td></tr></table></figure><p>运行时添加了100多毫秒,但这是预期的。跟踪捕获每个函数调用,进出,直到微秒。重要的是,现在有一个名为t.out包含跟踪数据的文件。</p><p>要查看跟踪,需要通过跟踪工具运行跟踪数据。</p><p>清单5</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go tool trace t.out</span><br></pre></td></tr></table></figure><p>运行该命令会使用以下屏幕启动Chrome浏览器。</p><p>注意：跟踪工具使用Chrome浏览器内置的工具。此工具仅适用于Chrome。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure1.png" alt=""><br>图1</p><p>图1显示了跟踪工具启动时显示的9个链接。现在重要的链接是第一个链接View trace。选择该链接后,你将看到类似于以下内容的内容。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure2.png" alt=""><br>图2</p><p>图2显示了在我的机器上运行程序的完整跟踪窗口。对于这篇文章,我将重点介绍与垃圾收集器相关的部分。这是第二部分标记Heap,第四部分标记GC。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure3.png" alt=""><br>图3</p><p>图3更详细地展示了跟踪的前200毫秒。将注意力集中在Heap（绿色和橙色区域）和GC（底部的蓝线）上。该Heap部分向你展示了两件事。橙色区域是堆上任何给定微秒的当前正在使用的空间。绿色是堆上将触发下一个集合的正在使用的空间量。这就是为什么每当橙色区域到达绿色区域的顶部时,就会发生垃圾收集。蓝线代表垃圾收集。</p><p>在此版本的程序中,堆上使用的内存在整个程序运行时保持在~4mcg。要查看有关发生的所有单个垃圾收集的统计信息,请使用选择工具并在所有蓝线周围绘制一个框。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure4.png" alt=""><br>图4</p><p>图4显示了如何使用箭头工具在蓝线周围绘制蓝​​框。你想在每一行画出框。框内的数字表示从图表中选择的项目消耗的时间量。在这种情况下,选择接近316毫秒（ms,μs,ns）来生成此图像。选择所有蓝线后,将提供以下统计数据。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure5.png" alt=""><br>图5</p><p>图5显示图中的所有蓝线都在15.911毫秒标记到2.596秒标记之间。共有232个垃圾收集,代表64.524毫秒的时间,平均收集时间为287.121微秒。知道程序运行需要2.626秒,这意味着垃圾收集只占总运行时间的2％。基本上垃圾收集器是运行该程序的一个微不足道的成本。</p><p>有了可以使用的基线,可以使用并发算法执行相同的工作,以期加快程序的速度。</p><p>清单6</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">freqConcurrent</span><span class="hljs-params">(topic <span class="hljs-keyword">string</span>, docs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">02</span>     <span class="hljs-keyword">var</span> found <span class="hljs-keyword">int32</span></span><br><span class="line"><span class="hljs-number">03</span></span><br><span class="line"><span class="hljs-number">04</span>     g := <span class="hljs-built_in">len</span>(docs)</span><br><span class="line"><span class="hljs-number">05</span>     <span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-number">06</span>     wg.Add(g)</span><br><span class="line"><span class="hljs-number">07</span></span><br><span class="line"><span class="hljs-number">08</span>     <span class="hljs-keyword">for</span> _, doc := <span class="hljs-keyword">range</span> docs &#123;</span><br><span class="line"><span class="hljs-number">09</span>         <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(doc <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">10</span>             <span class="hljs-keyword">var</span> lFound <span class="hljs-keyword">int32</span></span><br><span class="line"><span class="hljs-number">11</span>             <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">12</span>                 atomic.AddInt32(&amp;found, lFound)</span><br><span class="line"><span class="hljs-number">13</span>                 wg.Done()</span><br><span class="line"><span class="hljs-number">14</span>             &#125;()</span><br><span class="line"><span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">16</span>             file := fmt.Sprintf(<span class="hljs-string">"%s.xml"</span>, doc[:<span class="hljs-number">8</span>])</span><br><span class="line"><span class="hljs-number">17</span>             f, err := os.OpenFile(file, os.O_RDONLY, <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-number">18</span>             <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">19</span>                 log.Printf(<span class="hljs-string">"Opening Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">20</span>                 <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">21</span>             &#125;</span><br><span class="line"><span class="hljs-number">22</span>             <span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line"><span class="hljs-number">23</span></span><br><span class="line"><span class="hljs-number">24</span>             data, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="hljs-number">25</span>             <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">26</span>                 log.Printf(<span class="hljs-string">"Reading Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">27</span>                 <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">28</span>             &#125;</span><br><span class="line"><span class="hljs-number">29</span></span><br><span class="line"><span class="hljs-number">30</span>             <span class="hljs-keyword">var</span> d document</span><br><span class="line"><span class="hljs-number">31</span>             <span class="hljs-keyword">if</span> err := xml.Unmarshal(data, &amp;d); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">32</span>                 log.Printf(<span class="hljs-string">"Decoding Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">33</span>                 <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">34</span>             &#125;</span><br><span class="line"><span class="hljs-number">35</span></span><br><span class="line"><span class="hljs-number">36</span>             <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> d.Channel.Items &#123;</span><br><span class="line"><span class="hljs-number">37</span>                 <span class="hljs-keyword">if</span> strings.Contains(item.Title, topic) &#123;</span><br><span class="line"><span class="hljs-number">38</span>                     lFound++</span><br><span class="line"><span class="hljs-number">39</span>                     <span class="hljs-keyword">continue</span></span><br><span class="line"><span class="hljs-number">40</span>                 &#125;</span><br><span class="line"><span class="hljs-number">41</span></span><br><span class="line"><span class="hljs-number">42</span>                 <span class="hljs-keyword">if</span> strings.Contains(item.Description, topic) &#123;</span><br><span class="line"><span class="hljs-number">43</span>                     lFound++</span><br><span class="line"><span class="hljs-number">44</span>                 &#125;</span><br><span class="line"><span class="hljs-number">45</span>             &#125;</span><br><span class="line"><span class="hljs-number">46</span>         &#125;(doc)</span><br><span class="line"><span class="hljs-number">47</span>     &#125;</span><br><span class="line"><span class="hljs-number">48</span></span><br><span class="line"><span class="hljs-number">49</span>     wg.Wait()</span><br><span class="line"><span class="hljs-number">50</span>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">int</span>(found)</span><br><span class="line"><span class="hljs-number">51</span> &#125;</span><br></pre></td></tr></table></figure><p>清单6显示了一个可能的并发版本freq。此版本的核心设计模式是使用扇出模式。对于docs集合中列出的每个文件,都会创建一个Goroutine来处理该文件。如果要处理4000个文档,则使用4000个Goroutine。这种算法的优点是它是利用并发性的最简单方法。每个Goroutine处理1个且只有1个文件。等待处理每个文档的编排可以使用a来执行WaitGroup,并且原子指令可以使计数器保持同步。</p><p>该算法的缺点在于它不能很好地适应文档或核心的数量。所有的Goroutine都会有时间在程序开始时很早就运行,这意味着很快就会消耗大量的内存。found在第12行添加变量也存在缓存一致性问题。由于每个核心共享该变量的相同缓存行,这将导致内存抖动。随着文件或核心数量的增加,这会变得更糟。</p><p>使用此代码,现在你可以重新生成并再次运行该程序。</p><p>清单7</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">$ time ./trace &gt; t.out</span><br><span class="line">Searching 4000 files, found president 28000 <span class="hljs-built_in">times</span>.</span><br><span class="line">./trace &gt; t.out  6.49s user 2.46s system 941% cpu 0.951 total</span><br></pre></td></tr></table></figure><p>你可以通过清单7中的输出看到,程序现在需要951毫秒来处理相同的4000个文件。这是性能提升约64％。看看跟踪。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure6.png" alt=""><br>图6</p><p>图6显示了此版本程序正在使用的计算机上的CPU容量。图表的开头有很多密度。这是因为当所有Goroutine都被创建时,它们会运行并开始尝试在堆中分配内存。一旦分配了前4兆内存,这很快就会启动GC。在此GC期间,每个Goroutine都有时间运行,并且当它们在堆上请求内存时,大多数都会进入等待状态。到GC完成时,至少有9个Goroutine继续运行并将堆增加到~26 meg。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure7.png" alt=""><br>图7</p><p>图7显示了第一个GC的大部分时间内大量的Goroutine处于Runnable和Running状态以及如何快速重新启动。请注意,堆配置文件看起来不规则,并且集合不像以前那样处于任何常规节奏上。如果仔细观察,第二个GC几乎会在第一个GC后立即开始。</p><p>如果你选择此图表中的所有集合,你将看到以下内容。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure8.png" alt=""><br>图8</p><p>图8显示图中的所有蓝线都在4.828毫秒标记到906.939毫秒标记之间。共有23个垃圾收集,代表284.447毫秒的时间,平均收集时间为12.367毫秒。知道该程序运行需要951毫秒,这意味着垃圾收集占总运行时间的约34％。</p><p>这与顺序版本在性能和GC时间方面存在显着差异。但是,按照它的方式并行运行更多的Goroutine,可以让工作完成~64％的速度。成本需要更多的资源在机器上。不幸的是,在堆上一次正在使用大约200兆的内存。</p><p>使用并发基线,下一个并发算法会尝试使用资源更高效。</p><p>清单8</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">freqNumCPU</span><span class="hljs-params">(topic <span class="hljs-keyword">string</span>, docs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">02</span>     <span class="hljs-keyword">var</span> found <span class="hljs-keyword">int32</span></span><br><span class="line"><span class="hljs-number">03</span></span><br><span class="line"><span class="hljs-number">04</span>     g := runtime.NumCPU()</span><br><span class="line"><span class="hljs-number">05</span>     <span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-number">06</span>     wg.Add(g)</span><br><span class="line"><span class="hljs-number">07</span></span><br><span class="line"><span class="hljs-number">08</span>     ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, g)</span><br><span class="line"><span class="hljs-number">09</span></span><br><span class="line"><span class="hljs-number">10</span>     <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; g; i++ &#123;</span><br><span class="line"><span class="hljs-number">11</span>         <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">12</span>             <span class="hljs-keyword">var</span> lFound <span class="hljs-keyword">int32</span></span><br><span class="line"><span class="hljs-number">13</span>             <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">14</span>                 atomic.AddInt32(&amp;found, lFound)</span><br><span class="line"><span class="hljs-number">15</span>                 wg.Done()</span><br><span class="line"><span class="hljs-number">16</span>             &#125;()</span><br><span class="line"><span class="hljs-number">17</span></span><br><span class="line"><span class="hljs-number">18</span>             <span class="hljs-keyword">for</span> doc := <span class="hljs-keyword">range</span> ch &#123;</span><br><span class="line"><span class="hljs-number">19</span>                 file := fmt.Sprintf(<span class="hljs-string">"%s.xml"</span>, doc[:<span class="hljs-number">8</span>])</span><br><span class="line"><span class="hljs-number">20</span>                 f, err := os.OpenFile(file, os.O_RDONLY, <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-number">21</span>                 <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">22</span>                     log.Printf(<span class="hljs-string">"Opening Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">23</span>                     <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">24</span>                 &#125;</span><br><span class="line"><span class="hljs-number">25</span></span><br><span class="line"><span class="hljs-number">26</span>                 data, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="hljs-number">27</span>                 <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">28</span>                     f.Close()</span><br><span class="line"><span class="hljs-number">29</span>                     log.Printf(<span class="hljs-string">"Reading Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">23</span>                     <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">24</span>                 &#125;</span><br><span class="line"><span class="hljs-number">25</span>                 f.Close()</span><br><span class="line"><span class="hljs-number">26</span></span><br><span class="line"><span class="hljs-number">27</span>                 <span class="hljs-keyword">var</span> d document</span><br><span class="line"><span class="hljs-number">28</span>                 <span class="hljs-keyword">if</span> err := xml.Unmarshal(data, &amp;d); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">29</span>                     log.Printf(<span class="hljs-string">"Decoding Document [%s] : ERROR : %v"</span>, doc, err)</span><br><span class="line"><span class="hljs-number">30</span>                     <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">31</span>                 &#125;</span><br><span class="line"><span class="hljs-number">32</span></span><br><span class="line"><span class="hljs-number">33</span>                 <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> d.Channel.Items &#123;</span><br><span class="line"><span class="hljs-number">34</span>                     <span class="hljs-keyword">if</span> strings.Contains(item.Title, topic) &#123;</span><br><span class="line"><span class="hljs-number">35</span>                         lFound++</span><br><span class="line"><span class="hljs-number">36</span>                         <span class="hljs-keyword">continue</span></span><br><span class="line"><span class="hljs-number">37</span>                     &#125;</span><br><span class="line"><span class="hljs-number">38</span></span><br><span class="line"><span class="hljs-number">39</span>                     <span class="hljs-keyword">if</span> strings.Contains(item.Description, topic) &#123;</span><br><span class="line"><span class="hljs-number">40</span>                         lFound++</span><br><span class="line"><span class="hljs-number">41</span>                     &#125;</span><br><span class="line"><span class="hljs-number">42</span>                 &#125;</span><br><span class="line"><span class="hljs-number">43</span>             &#125;</span><br><span class="line"><span class="hljs-number">44</span>         &#125;()</span><br><span class="line"><span class="hljs-number">45</span>     &#125;</span><br><span class="line"><span class="hljs-number">46</span></span><br><span class="line"><span class="hljs-number">47</span>     <span class="hljs-keyword">for</span> _, doc := <span class="hljs-keyword">range</span> docs &#123;</span><br><span class="line"><span class="hljs-number">48</span>         ch &lt;- doc</span><br><span class="line"><span class="hljs-number">49</span>     &#125;</span><br><span class="line"><span class="hljs-number">50</span>     <span class="hljs-built_in">close</span>(ch)</span><br><span class="line"><span class="hljs-number">51</span></span><br><span class="line"><span class="hljs-number">52</span>     wg.Wait()</span><br><span class="line"><span class="hljs-number">53</span>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">int</span>(found)</span><br><span class="line"><span class="hljs-number">54</span> &#125;</span><br></pre></td></tr></table></figure><p>清单8显示了freqNumCPU该程序的版本。此版本的核心设计模式是使用池模式。基于处理所有文件的逻辑处理器数量的Goroutine池。如果有12个逻辑处理器可供使用,则使用12个Goroutine。该算法的优点在于它始终保持程序的资源使用一致。由于使用了固定数量的Goroutine,因此只需要在任何给定时间需要12个Goroutine的存储器。这也解决了缓存一致性问题与内存抖动。这是因为对第14行的原子指令的调用只需要发生很小的固定次数。</p><p>该算法的缺点是更复杂。它增加了一个通道的使用来为Goroutines池提供所有工作。在使用任何时间池时,识别池的“正确”数量的Goroutine是复杂的。作为一般规则,我为每个逻辑处理器启用池1一个Goroutine。然后执行负载测试或使用生产指标,可以计算池的最终值。</p><p>使用此代码,现在你可以重新生成并再次运行该程序。</p><p>清单9</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">$ time ./trace &gt; t.out</span><br><span class="line">Searching 4000 files, found president 28000 <span class="hljs-built_in">times</span>.</span><br><span class="line">./trace &gt; t.out  6.22s user 0.64s system 909% cpu 0.754 total</span><br></pre></td></tr></table></figure><p>你可以通过清单9中的输出看到,该程序现在需要754毫秒来处理相同的4000个文件。该程序的速度提高约200毫秒,这对于这个小负载来说非常重要。看看跟踪。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure9.png" alt=""><br>图9</p><p>图9显示了此版本程序如何使用我机器上的所有CPU容量。如果你密切关注,那么该计划将再次具有一致的干扰。与顺序版非常相似。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure10.png" alt=""><br>图10</p><p>图10显示了如何仔细查看程序前20毫秒的核心指标。这些集合肯定比顺序版本更长,但有12个Goroutines正在运行。堆上使用的内存在整个程序运行时保持在~4mcg。同样,与程序的顺序版本相同。</p><p>如果你选择此图表中的所有集合,你将看到以下内容。</p><p><img src="https://www.ardanlabs.com/images/goinggo/103_figure11.png" alt=""><br>图11</p><p>图11显示图中的所有蓝线都在3.055毫秒标记到719.928毫秒标记之间。共有467个垃圾收集,代表177.709毫秒的时间,平均收集时间为380.535微秒。知道该程序运行需要754毫秒,这意味着垃圾收集占总运行时间的约25％。比其他并发版本提高9％。</p><p>此版本的并发算法似乎可以使用更多文件和内核进行更好的扩展。我认为复杂性成本是值得的。可以通过将列表切换成每个<code>Goroutin</code>e的工作桶来替换该通道。这肯定会增加更多的复杂性,尽管它可以减少通道产生的一些延迟成本。在更多文件和核心上,这可能是重要的,但需要测量复杂性成本。这是你可以自己尝试的东西。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我喜欢比较算法的三个版本是GC如何处理每种情况。处理文件所需的内存总量不会随任何版本而变化。程序如何分配有什么变化。</p><p>当只有一个Goroutine时,只需要一个4兆的基础堆。当程序立即将所有工作都放在运行时时,GC采用了让堆增长的方法,减少了集合的数量,但运行了更长的集合。当程序控制在任何给定时间处理的文件数时,GC采取了再次保持堆小的方法,增加了集合的数量但运行较小的集合。GC采用的每种方法基本上允许程序运行,GC可能对程序产生最小的影响。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Algorithm  | Program | GC Time  | % Of GC | <span class="hljs-comment"># of GC’s | Avg GC   | Max Heap |</span></span><br><span class="line">|------------|---------|----------|---------|-----------|----------|----------|</span><br><span class="line">| freq       | 2626 ms |  64.5 ms |     ~2% |       232 |   278 μs |    4 meg |</span><br><span class="line">| concurrent |  951 ms | 284.4 ms |    ~34% |        23 |  12.3 ms |  200 meg |</span><br><span class="line">| numCPU     |  754 ms | 177.7 ms |    ~25% |       467 | 380.5 μs |    4 meg |</span><br></pre></td></tr></table></figure><p>该freqNumCPU版本还有其他功能,比如更好地处理缓存一致性,这是有帮助的。但是,每个程序的GC时间总量的差异非常接近,约为284.4毫秒vs 177.7毫秒。有些日子在我的机器上运行这个程序,这些数字更接近。使用版本1.13.beta1运行一些实验,我看到两个算法在相同的时间运行。潜在地暗示它们可能会有一些改进,使GC能够更好地预测如何运行。</p><p>所有这些让我有信心在运行时抛出大量工作。这是一个使用50k Goroutines的Web服务,它本质上是一个类似于第一个并发算法的扇出模式。GC将研究工作量并找到服务的最佳速度以避开它。至少对我来说,不必考虑任何这个是值得入场的代价。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的垃圾收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的垃圾收集：第二部分 - GC痕迹</title>
      <link href="/2019/08/08/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-GC%E7%97%95%E8%BF%B9/"/>
      <url>/2019/08/08/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-GC%E7%97%95%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第二篇文章,它将提供对Go中垃圾收集器背后的机制和语义的理解。本文重点介绍如何生成GC跟踪并解释它们。</p><a id="more"></a><p>三部分系列的索引：<br>1）Go中的垃圾收集：第一部分 - 语义<br>2）Go中的垃圾收集：第二部分 - GC跟踪<br>3）Go中的垃圾收集：第三部分 - GC步伐</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在第一篇文章中,我花时间描述了垃圾收集器的行为,并显示了收集器对正在运行的应用程序造成的延迟。我分享了如何生成和解释GC跟踪,显示堆上的内存如何变化,并解释了GC的不同阶段以及它们如何影响延迟成本。</p><p>该帖子的最终结论是,如果减少堆上的压力,你将减少延迟成本,从而提高应用程序的性能。我还指出,通过寻找增加任何两个系列之间的时间来减少收集开始的步伐并不是一个好的策略。一致的速度,即使它很快,也会更好地保持应用程序以最佳性能运行。</p><p>在这篇文章中,我将引导你完成运行真实Web应用程序并向你展示如何生成GC跟踪和应用程序配置文件。然后,我将向你展示如何解释这些工具的输出,以便你可以找到提高应用程序性能的方法。</p><h1 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h1><p>看看我在Go学习中使用的这个Web应用程序。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure1.png" alt=""><br>图1<br><a href="https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/project" target="_blank" rel="noopener">https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/project</a></p><p>图1显示了应用程序的外观。此应用程序从不同的新闻提供商下载三组RSS订阅源,并允许用户执行搜索。构建Web应用程序后,将启动该应用程序。</p><p>清单1</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">$ GOGC=off ./project &gt; /dev/null</span><br></pre></td></tr></table></figure><p>清单1显示了如何使用GOGC变量设置启动应用程序为off,从而关闭垃圾回收。日志将重定向到/dev/null设备。在应用程序运行时,可以将请求发布到服务器中。</p><p>清单2</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hey -m POST -c 100 -n 10000 <span class="hljs-string">"http://localhost:5000/search?term=topic&amp;cnn=on&amp;bbc=on&amp;nyt=on"</span></span><br></pre></td></tr></table></figure><p>清单2显示了如何使用该hey工具在服务器上运行使用100个连接的10k请求。一旦通过服务器发送了所有请求,就会产生以下结果。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure2.png" alt=""><br>图2</p><p>图2显示了关闭垃圾收集器处理10k请求的直观表示。处理10k请求需要4,188ms,这导致服务器每秒处理~2,387个请求。</p><h1 id="打开垃圾收集"><a href="#打开垃圾收集" class="headerlink" title="打开垃圾收集"></a>打开垃圾收集</h1><p>为此应用程序启用垃圾收集时会发生什么？</p><p>清单3</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=gctrace=1 ./project &gt; /dev/null</span><br></pre></td></tr></table></figure><p>清单3显示了如何启动应用程序以查看GC跟踪GOGC变量被删除并替换为GODEBUG变量。将GODEBUG被设定在运行时会生成一个GC跟踪每一个集合发生时。现在可以再次通过服务器运行相同的10k请求。通过服务器发送所有请求后hey,可以分析工具提供的GC跟踪和信息。</p><p>清单4</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=gctrace=1 ./project &gt; /dev/null</span><br><span class="line">gc 3 @3.182s 0%: 0.015+0.59+0.096 ms clock, 0.19+0.10/1.3/3.0+1.1 ms cpu, 4-&gt;4-&gt;2 MB, 5 MB goal, 12 P</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">gc 2553 @8.452s 14%: 0.004+0.33+0.051 ms clock, 0.056+0.12/0.56/0.94+0.61 ms cpu, 4-&gt;4-&gt;2 MB, 5 MB goal, 12 P</span><br></pre></td></tr></table></figure><p>清单4显示了运行中第三个和最后一个集合的GC跟踪。自从在收集发生之后通过服务器发送加载以来,我没有显示前两个集合。最后一个集合显示它处理了10k个请求,需要2551个集合（减去前两个集合,因为它们不计算）。</p><p>以下是跟踪中每个部分的细分。</p><p>清单5</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">gc 2553 @8.452s 14%: 0.004+0.33+0.051 ms clock, 0.056+0.12/0.56/0.94+0.61 ms cpu, 4-&gt;4-&gt;2 MB, 5 MB goal, 12 P</span><br><span class="line"></span><br><span class="line">gc 2553     : The 2553 GC runs since the program started</span><br><span class="line">@8.452s     : Eight seconds since the program started</span><br><span class="line">14%         : Fourteen percent of the available CPU so far has been spent <span class="hljs-keyword">in</span> GC</span><br><span class="line"></span><br><span class="line">// wall-clock</span><br><span class="line">0.004ms     : STW        : Write-Barrier - Wait <span class="hljs-keyword">for</span> all Ps to reach a GC safe-point.</span><br><span class="line">0.33ms      : Concurrent : Marking</span><br><span class="line">0.051ms     : STW        : Mark Term     - Write Barrier off and clean up.</span><br><span class="line"></span><br><span class="line">// CPU time</span><br><span class="line">0.056ms     : STW        : Write-Barrier</span><br><span class="line">0.12ms      : Concurrent : Mark - Assist Time (GC performed <span class="hljs-keyword">in</span> line with allocation)</span><br><span class="line">0.56ms      : Concurrent : Mark - Background GC time</span><br><span class="line">0.94ms      : Concurrent : Mark - Idle GC time</span><br><span class="line">0.61ms      : STW        : Mark Term</span><br><span class="line"></span><br><span class="line">4MB         : Heap memory <span class="hljs-keyword">in</span>-use before the Marking started</span><br><span class="line">4MB         : Heap memory <span class="hljs-keyword">in</span>-use after the Marking finished</span><br><span class="line">2MB         : Heap memory marked as live after the Marking finished</span><br><span class="line">5MB         : Collection goal <span class="hljs-keyword">for</span> heap memory <span class="hljs-keyword">in</span>-use after Marking finished</span><br><span class="line"></span><br><span class="line">// Threads</span><br><span class="line">12P         : Number of logical processors or threads used to run Goroutines.</span><br></pre></td></tr></table></figure><p>清单5显示了最后一个集合的实际数字。多亏了hey,这些是运行的性能结果。</p><p>清单6</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Requests            : 10,000</span><br><span class="line">------------------------------------------------------</span><br><span class="line">Requests/sec        : 1,882 r/s   - Hey</span><br><span class="line">Total Duration      : 5,311ms     - Hey</span><br><span class="line">Percent Time <span class="hljs-keyword">in</span> GC  : 14%         - GC Trace</span><br><span class="line">Total Collections   : 2,551       - GC Trace</span><br><span class="line">------------------------------------------------------</span><br><span class="line">Total GC Duration   : 744.54ms    - (5,311ms * .14)</span><br><span class="line">Average Pace of GC  : ~2.08ms     - (5,311ms / 2,551)</span><br><span class="line">Requests/Collection : ~3.98 r/gc  - (10,000 / 2,511)</span><br></pre></td></tr></table></figure><p>清单6显示了结果。以下内容提供了更多关于所发生事件的视觉效果。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure3.png" alt=""><br>图3</p><p>图3显示了视觉上发生的事情。当收集器打开时,它必须运行〜2.5k次以处理相同的10k请求。每个集合平均以~2.0ms的速度开始,并且运行所有这些集合增加了额外的~1.1秒的延迟。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure4.png" alt=""><br>图4</p><p>图4显示了到目前为止应用程序的两次运行的比较。</p><h1 id="减少分配"><a href="#减少分配" class="headerlink" title="减少分配"></a>减少分配</h1><p>获取堆的配置文件并查看是否有任何可以删除的不必要的产生对象将会很棒。</p><p>清单7</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof http://localhost:5000/debug/pprof/allocs</span><br></pre></td></tr></table></figure><p>清单7显示了使用该pprof工具调用/debug/pprof/allocs端点从正在运行的应用程序中提取内存配置文件。由于以下代码,该端点存在。</p><p>清单8</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-string">"net/http/pprof"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="hljs-string">"localhost:5000"</span>, http.DefaultServeMux)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>清单8显示了如何将/debug/pprof/allocs端点绑定到任何应用程序。添加导入以net/http/pprof将端点绑定到默认服务器mux。然后,使用http.ListenAndServer与http.DefaultServerMux恒使端点可用。</p><p>一旦分析器启动,该top命令可用于查看分配最多的前6个功能。</p><p>清单9</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(pprof) top 6 -cum</span><br><span class="line">Showing nodes accounting <span class="hljs-keyword">for</span> 0.56GB, 5.84% of 9.56GB total</span><br><span class="line">Dropped 80 nodes (cum &lt;= 0.05GB)</span><br><span class="line">Showing top 6 nodes out of 51</span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">         0     0%     0%     4.96GB 51.90%  net/http.(*conn).serve</span><br><span class="line">    0.49GB  5.11%  5.11%     4.93GB 51.55%  project/service.handler</span><br><span class="line">         0     0%  5.11%     4.93GB 51.55%  net/http.(*ServeMux).ServeHTTP</span><br><span class="line">         0     0%  5.11%     4.93GB 51.55%  net/http.HandlerFunc.ServeHTTP</span><br><span class="line">         0     0%  5.11%     4.93GB 51.55%  net/http.serverHandler.ServeHTTP</span><br><span class="line">    0.07GB  0.73%  5.84%     4.55GB 47.63%  project/search.rssSearch</span><br></pre></td></tr></table></figure><p>清单9显示了如何在列表底部rssSearch显示该函数。此功能迄今为止分配了4.56GB的5.96GB。接下来,是时候rssSearch使用该list命令检查功能的细节。</p><p>清单10</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(pprof) list rssSearch</span><br><span class="line">Total: 9.56GB</span><br><span class="line">ROUTINE ======================== project/search.rssSearch <span class="hljs-keyword">in</span> project/search/rss.go</span><br><span class="line">   71.53MB     4.55GB (flat, cum) 47.63% of Total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         .          .    117:// Capture the data we need <span class="hljs-keyword">for</span> our results <span class="hljs-keyword">if</span> we find ...</span><br><span class="line">         .          .    118:<span class="hljs-keyword">for</span> _, item := range d.Channel.Items &#123;</span><br><span class="line">         .     4.48GB    119:<span class="hljs-keyword">if</span> strings.Contains(strings.ToLower(item.Description), strings.ToLower(term)) &#123;</span><br><span class="line">   48.53MB    48.53MB    120:results = append(results, Result&#123;</span><br><span class="line">         .          .    121:Engine:  engine,</span><br><span class="line">         .          .    122:Title:   item.Title,</span><br><span class="line">         .          .    123:Link:    item.Link,</span><br><span class="line">         .          .    124:Content: item.Description,</span><br><span class="line">         .          .    125:&#125;)</span><br></pre></td></tr></table></figure><p>清单11显示了有问题的代码行。仅该行占据了迄今为止已分配的4.55GB内存的4.48GB。接下来,是时候查看这行代码,看看有什么可以做的。</p><p>清单12</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">117</span> <span class="hljs-comment">// Capture the data we need for our results if we find the search term.</span></span><br><span class="line"><span class="hljs-number">118</span> <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> d.Channel.Items &#123;</span><br><span class="line"><span class="hljs-number">119</span>     <span class="hljs-keyword">if</span> strings.Contains(strings.ToLower(item.Description), strings.ToLower(term)) &#123;</span><br><span class="line"><span class="hljs-number">120</span>         results = <span class="hljs-built_in">append</span>(results, Result&#123;</span><br><span class="line"><span class="hljs-number">121</span>             Engine:  engine,</span><br><span class="line"><span class="hljs-number">122</span>             Title:   item.Title,</span><br><span class="line"><span class="hljs-number">123</span>             Link:    item.Link,</span><br><span class="line"><span class="hljs-number">124</span>             Content: item.Description,</span><br><span class="line"><span class="hljs-number">125</span>        &#125;)</span><br><span class="line"><span class="hljs-number">126</span>    &#125;</span><br><span class="line"><span class="hljs-number">127</span> &#125;</span><br></pre></td></tr></table></figure><p>清单12显示了该代码行如何处于紧密循环中。调用strings.ToLower是创建分配,因为它们创建了需要在堆上分配的新字符串。这些调用strings.ToLower是不必要的,因为这些调用可以在循环外完成。</p><p>可以更改第119行以删除所有这些分配。</p><p>清单13</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Before the code change.</span></span><br><span class="line"><span class="hljs-keyword">if</span> strings.Contains(strings.ToLower(item.Description), strings.ToLower(term)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// After the code change.</span></span><br><span class="line"><span class="hljs-keyword">if</span> strings.Contains(item.Description, term) &#123;</span><br></pre></td></tr></table></figure><p>注意：你没有看到的其他代码更改是在将Feed放入缓存之前调用较低的描述。新闻源每15分钟缓存一次。term降低调用是在循环外部完成的。</p><p>清单13显示了如何<code>strings.ToLower</code>删除被调用者。通过这些新的代码更改再次构建项目,并再次通过服务器运行10k请求。</p><p>清单14</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go build</span><br><span class="line">$ GODEBUG=gctrace=1 ./project &gt; /dev/null</span><br><span class="line">gc 3 @6.156s 0%: 0.011+0.72+0.068 ms clock, 0.13+0.21/1.5/3.2+0.82 ms cpu, 4-&gt;4-&gt;2 MB, 5 MB goal, 12 P</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">gc 1404 @8.808s 7%: 0.005+0.54+0.059 ms clock, 0.060+0.47/0.79/0.25+0.71 ms cpu, 4-&gt;5-&gt;2 MB, 5 MB goal, 12 P</span><br></pre></td></tr></table></figure><p>清单14显示了在代码更改后,现在如何处理1402个集合来处理相同的10k请求。这些是两次运行的完整结果。</p><p>清单15</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">With Extra Allocations              Without Extra Allocations</span><br><span class="line">======================================================================</span><br><span class="line">Requests            : 10,000        Requests            : 10,000</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Requests/sec        : 1,882 r/s     Requests/sec        : 3,631 r/s</span><br><span class="line">Total Duration      : 5,311ms       Total Duration      : 2,753 ms</span><br><span class="line">Percent Time <span class="hljs-keyword">in</span> GC  : 14%           Percent Time <span class="hljs-keyword">in</span> GC  : 7%</span><br><span class="line">Total Collections   : 2,551         Total Collections   : 1,402</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Total GC Duration   : 744.54ms      Total GC Duration   : 192.71 ms</span><br><span class="line">Average Pace of GC  : ~2.08ms       Average Pace of GC  : ~1.96ms</span><br><span class="line">Requests/Collection : ~3.98 r/gc    Requests/Collection : 7.13 r/gc</span><br></pre></td></tr></table></figure><p>清单15显示了与上一结果相比的结果。以下内容提供了更多关于所发生事件的视觉效果。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure5.png" alt=""><br>图5</p><p>图5显示了视觉上发生的事情。这次收集器运行1149次（1,402对2,551）来处理相同的10k请求。这导致GC总时间的百分比从14％降低到7％。这使得应用程序运行速度提高了48％,收集时间减少了74％。</p><p><img src="https://www.ardanlabs.com/images/goinggo/101_figure6.png" alt=""><br>图6</p><p>图6显示了应用程序的所有不同运行的比较。我包含了一系列运行优化的代码而没有完成垃圾收集器。</p><h1 id="我们学到了什么"><a href="#我们学到了什么" class="headerlink" title="我们学到了什么"></a>我们学到了什么</h1><p>正如我在上一篇文章中所说,支持收集器是为了减少堆上的压力。请记住,压力可以定义为应用程序在给定时间内分配堆上所有可用内存的速度。当压力减小时,收集器造成的延迟将会减少。这种延迟会降低你的应用程序速度。</p><p>这不是要放慢收集的速度。这真的是在每个集合之间或集合期间完成更多的工作。你可以通过减少任何工作添加到堆中的分配数量或数量来影响它。</p><p>清单16</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">With Extra Allocations              Without Extra Allocations</span><br><span class="line">======================================================================</span><br><span class="line">Requests            : 10,000        Requests            : 10,000</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Requests/sec        : 1,882 r/s     Requests/sec        : 3,631 r/s</span><br><span class="line">Total Duration      : 5,311ms       Total Duration      : 2,753 ms</span><br><span class="line">Percent Time <span class="hljs-keyword">in</span> GC  : 14%           Percent Time <span class="hljs-keyword">in</span> GC  : 7%</span><br><span class="line">Total Collections   : 2,551         Total Collections   : 1,402</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Total GC Duration   : 744.54ms      Total GC Duration   : 192.71 ms</span><br><span class="line">Average Pace of GC  : ~2.08ms       Average Pace of GC  : ~1.96ms</span><br><span class="line">Requests/Collection : ~3.98 r/gc    Requests/Collection : 7.13 r/gc</span><br></pre></td></tr></table></figure><p>清单16显示了带有垃圾收集的两个版本应用程序的结果。很明显,删除4.48GB的分配使应用程序运行得更快。有趣的是,每个系列（两个版本）的平均速度几乎相同,约为2.0毫秒。这两个版本之间的根本变化是每个集合之间的工作量。应用范围从3.98 r / gc到7.13 r / gc。这是完成工作量增加79.1％。</p><p>在任何两个集合的开始之间完成更多的工作有助于将所需的集合数量从2,551减少到1,402,减少了45％。该应用程序的总GC时间从745毫秒减少到193毫秒,从收集的每个相应版本的总时间的14％变为7％。当你在没有垃圾收集的情况下运行应用程序的优化版本时,性能差异仅为13％,应用程序将2,753ms降至2,398ms。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>如果你花时间专注于减少分配,那么你就像Go开发人员一样,对垃圾收集器表示支持。你不打算编写零分配应用程序,因此重要的是要认识到有效的分配（帮助应用程序的分配）和那些没有生产力的分配（那些损害应用程序）之间的差异。然后将你的信任和信任放在垃圾收集器中,以保持堆健康并使你的应用程序始终如一地运行。</p><p>拥有垃圾收集器是一个很好的权衡。我将花费垃圾收集的成本,所以我没有内存管理的负担。Go是关于允许你作为开发人员提高工作效率,同时仍然编写足够快的应用程序。垃圾收集器是实现这一目标的重要组成部分。在下一篇文章中,我将分享另一个程序,该程序显示收集器如何分析你的Go应用程序并找到最佳的收集方法。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的垃圾收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的垃圾收集：第一部分 - 语义</title>
      <link href="/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E8%AF%AD%E4%B9%89/"/>
      <url>/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E8%AF%AD%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第一篇文章,它将提供对Go中垃圾收集器背后的机制和语义的理解。这篇文章重点介绍了收集器语义的基础材料。</p><a id="more"></a><p>三部分系列的索引：<br>1）Go中的垃圾收集：第一部分 - 语义<br>2）Go中的垃圾收集：第二部分 - GC跟踪<br>3）Go中的垃圾收集：第三部分 - GC步伐</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>垃圾收集器负责跟踪堆内存分配,释放不再需要的分配,并保留仍在使用中的分配。语言决定如何实现此行为很复杂,但应该不应该让应用程序开发人员了解细节以构建软件。此外,对于语言的VM或运行时的不同版本,这些系统的实现总是在变化和发展。对于应用程序开发人员来说,重要的是保持一个良好的工作模型,了解垃圾收集器对其语言的行为以及如何在不关心实现的情况下对这种行为表示支持。</p><p>从版本1.12开始,Go编程语言使用非代数并发三色标记和扫描收集器。如果你想直观地看到标记和扫描收集器是如何工作的,Ken Fox写了这篇伟大的文章并提供动画。Go的收集器的实现随着Go的每个版本的变化而发生变化。因此,一旦发布下一版本的语言,任何谈论实现细节的帖子将不再准确。</p><p>尽管如此,我将在本文中做的建模不会关注实际的实现细节。建模将关注你将经历的行为以及你应该在未来几年看到的行为。在这篇文章中,我将与你分享收集者的行为,并解释如何对该行为表示支持,无论当前的实施情况如何或未来如何变化。这将使你成为更好的Go开发人员。</p><p>注意：这里有更多关于<a href="https://github.com/ardanlabs/gotraining/tree/master/reading#garbage-collection" target="_blank" rel="noopener">垃圾收集器</a>和Go的实际收集器的解读。</p><h1 id="堆不是容器"><a href="#堆不是容器" class="headerlink" title="堆不是容器"></a>堆不是容器</h1><p>我永远不会将堆称为可以存储或释放值的容器。重要的是要理解没有线性遏制内存来定义“堆”。认为为进程空间中的应用程序使用保留的任何内存都可用于堆内存分配。虚拟或物理存储任何给定的堆内存分配与我们的模型无关。这种理解将帮助你更好地了解垃圾收集器的工作原理。</p><h1 id="收集器行为"><a href="#收集器行为" class="headerlink" title="收集器行为"></a>收集器行为</h1><p>收集开始时,收集器将运行三个阶段的工作。其中两个阶段会产生Stop The World（STW）延迟,另一个阶段会产生延迟,从而降低应用程序的吞吐量。这三个阶段是：</p><ul><li>标记设置 - STW</li><li>标记 - 并发</li><li>标记终止 - STW</li></ul><p>这是每个阶段的细分。</p><h2 id="标记设置-STW"><a href="#标记设置-STW" class="headerlink" title="标记设置 - STW"></a>标记设置 - STW</h2><p>收集器开始时,必须执行的第一个活动是打开写屏障。写屏障的目的是允许收集器在收集器期间维护堆上的数据完整性,因为收集器和应用程序Goroutine将同时运行。</p><p>为了打开写屏障,必须停止每个运行Goroutine的应用程序。此活动通常非常快,平均在10到30微秒之内。也就是说,只要应用程序Goroutines表现正常。</p><p>注意：为了更好地理解这些调度程序图,请务必阅读<a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html" target="_blank" rel="noopener">Go Scheduler</a>上的这一系列帖子</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure1.png" alt=""><br>图1</p><p>图1显示了在收集器开始之前运行的4个应用程序Goroutine。必须停止这4个Goroutine中的每一个。唯一的方法是让收集器观察并等待每个Goroutine进行函数调用。函数调用保证Goroutine处于安全点停止。如果其中一个Goroutine不进行函数调用而其他函数执行,会发生什么？</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure2.png" alt=""><br>图2</p><p>图2显示了一个真正的问题。在P4上运行的Goroutine停止之前,收集器无法启动,并且这种情况不会发生,因为它处于执行某些数学运算的<a href="https://github.com/golang/go/issues/10958" target="_blank" rel="noopener">紧密循环中</a>。</p><p>清单1</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(numbers []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">02</span>     <span class="hljs-keyword">var</span> v <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">03</span>     <span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> numbers &#123;</span><br><span class="line"><span class="hljs-number">04</span>         v += n</span><br><span class="line"><span class="hljs-number">05</span>     &#125;</span><br><span class="line"><span class="hljs-number">06</span>     <span class="hljs-keyword">return</span> v</span><br><span class="line"><span class="hljs-number">07</span> &#125;</span><br></pre></td></tr></table></figure><p>清单1显示了在P4上运行的Goroutine正在执行的代码。根据切片的大小,Goroutine可能会运行一段不合理的时间而无法停止。这种代码可以阻止收集器启动。更糟糕的是,当收集器等待时,其他P不能为任何其他Goroutine提供服务。Goroutines在合理的时间范围内进行函数调用至关重要。</p><p>注意：这是语言团队希望通过向调度程序添加<a href="https://github.com/golang/go/issues/24543" target="_blank" rel="noopener">抢先技术</a>来在1.14中进行更正的内容。</p><h2 id="标记-并发"><a href="#标记-并发" class="headerlink" title="标记 - 并发"></a>标记 - 并发</h2><p>一旦写屏障打开,收集器就开始标记阶段。收集器所做的第一件事就是占用自身可用CPU容量的25％。收集器使用Goroutines进行收集工作,并且需要与Goroutines使用的应用程序相同的P和M. 这意味着对于我们的4线程Go程序,一个完整的P将专门用于收集工作。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure3.png" alt=""><br>图3</p><p>图3显示了收集器在收集过程中如何为自己收集P1。现在收集器可以开始标记阶段。标记阶段包括在堆内存中标记仍在使用中的值。这项工作首先检查所有现有Goroutine的堆栈,以找到堆内存的根指针。然后收集器必须从那些根指针遍历堆内存图。当标记工作在P1上进行时,应用程序工作可以在P2,P3和P4上同时继续进行。这意味着收集器的影响已最小化到当前CPU容量的25％。</p><p>我希望这是故事的结局,但事实并非如此。如果在收集过程中确定在P1上专用于GC的Goroutine在使用中的堆内存达到极限之前无法完成标记工作,该怎么办？如果3个Goroutines中只有一个进行应用工作使收集器无法及时完成的​​原因怎么办？在这种情况下,新的分配必须放慢速度,特别是从那个Goroutine。</p><p>如果收集器确定它需要减慢分配,它将招募应用程序Goroutines以协助标记工作。这称为协助标记。任何应用程序Goroutine放置在协助标记中的时间长度与它添加到堆内存中的数据量成正比。协助标记的一个积极的副作用是它有助于更​​快地完成收集。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure4.png" alt=""><br>图4</p><p>图4显示了在P3上运行的应用程序Goroutine现在如何执行协助标记并帮助进行收集工作。希望其他应用程序Goroutines也不需要参与其中。分配重的应用程序可以看到大多数正在运行的Goroutines在收集期间执行少量协助标记。</p><p>收集器的一个目标是消除对协助标记的需求。如果任何给定的收集器最终需要大量的协助标记,则收集器可以更早地开始下一个垃圾收集。这样做是为了减少下一次收集所需的协助标记量。</p><h2 id="标记终止-STW"><a href="#标记终止-STW" class="headerlink" title="标记终止 - STW"></a>标记终止 - STW</h2><p>标记工作完成后,下一阶段是标记终止。这是当写屏障关闭时,执行各种清理任务,并计算下一个收集目标。在标记阶段发现自己处于紧密循环中的Goroutines也可能导致标记终止, STW 延迟延长。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure5.png" alt=""><br>图5</p><p>图5显示了标记终止阶段完成后所有Goroutines是如何停止的。此活动通常平均在60到90微秒之内。这个阶段可以在没有STW的情况下完成,但是通过使用STW,代码更简单,并且增加的复杂性不值得小的增益。</p><p>收集完成后,应用程序Goroutines可以再次使用每个P,应用程序将恢复全油门。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure6.png" alt=""><br>图6</p><p>图6显示了收集完成后,所有可用的P现在如何处理应用程序的工作。应用程序恢复到收集开始之前的全油门。</p><h2 id="清扫-并发"><a href="#清扫-并发" class="headerlink" title="清扫 - 并发"></a>清扫 - 并发</h2><p>完成一个名为清扫的收集器后会发生另一个活动。清除是指回收与堆内存中未标记为使用中的值相关联的内存。当应用程序Goroutines尝试在堆内存中分配新值时,会发生此活动。清扫的延迟被添加到在堆内存中执行分配的成本中,并且不依赖于与垃圾收集相关的任何延迟。</p><p>以下是我的机器上的跟踪示例,其中有12个硬件线程可用于执行Goroutines。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure7.png" alt=""><br>图7</p><p>图7显示了跟踪的部分快照。你可以在此收集器中看到如何（将你的视图保持在顶部的蓝色GC行中）,十二个P中的三个专用于GC。你可以看到Goroutine 2450,1978和2696在这段时间里正在执行协助标记的工作,而不是它的应用工作。在收集器的最后,只有一个P专用于GC并最终执行STW（标记终止）工作。</p><p>收集完成后,应用程序将恢复全油门运行。除了你看到Goroutines下面有很多玫瑰色的线条。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure8.png" alt=""><br>图8</p><p>图8显示了那些玫瑰色线条代表Goroutine执行清扫工作而非其应用工作的时刻。这些是Goroutine试图在堆内存中分配新值的时刻。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure9.png" alt=""><br>图9</p><p>图9显示了Sweep活动中其中一个Goroutines的堆栈跟踪结束。调用runtime.mallocgc是调用在堆内存中分配新值。调用runtime.(*mcache).nextFree导致Sweep活动。一旦堆内存中没有更多的分配要回收,nextFree就不会再看到调用了。</p><p>刚刚描述的收集器行为仅在收集器已启动并正在运行时发生。GC百分比配置选项在确定收集器何时开始时起着重要作用。</p><h1 id="GC百分比"><a href="#GC百分比" class="headerlink" title="GC百分比"></a>GC百分比</h1><p>运行时中有一个名为GC Percentage的配置选项,默认情况下设置为100。此值表示在下一个收集器必须启动之前可以分配多少新堆内存的比率。将GC百分比设置为100意味着,基于在收集完成后标记为活动的堆内存量,下一个收集器必须在100％以上的新分配添加到堆内存时启动。</p><p>举个例子,假设一个收集器在使用中有2MB的堆内存。</p><p>注意：使用Go时,本文中堆内存的图表不代表真实的配置文件。Go中的堆内存通常会碎片化并且混乱,并且你没有图像所代表的干净分离。这些图提供了一种以更容易理解的方式可视化堆内存的方法,该方式对于你将体验的行为是准确的。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure10.png" alt=""><br>图10</p><p>图10显示了最后一次收集完成后正在使用的2MB堆内存。由于GC百分比设置为100％,因此下一个收集器需要在添加 2MB 堆内存时或之前启动。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure11.png" alt=""><br>图11</p><p>图11显示现在正在使用2个MB的堆内存。这将触发一个收集器。查看所有这些操作的方法是为每个发生的收集器生成GC跟踪。</p><h1 id="GC跟踪"><a href="#GC跟踪" class="headerlink" title="GC跟踪"></a>GC跟踪</h1><p>运行任何Go应用程序时,可以通过在环境变量中<code>GODEBUG</code>包含<code>gctrace=1</code>选项来生成GC跟踪。每次发生收集器时,运行时都会将GC跟踪信息写入<code>stderr</code>。</p><p>清单2</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GODEBUG=gctrace=1 ./app</span><br><span class="line"></span><br><span class="line">gc 1405 @6.068s 11%: 0.058+1.2+0.083 ms clock, 0.70+2.5/1.5/0+0.99 ms cpu, 7-&gt;11-&gt;6 MB, 10 MB goal, 12 P</span><br><span class="line"></span><br><span class="line">gc 1406 @6.070s 11%: 0.051+1.8+0.076 ms clock, 0.61+2.0/2.5/0+0.91 ms cpu, 8-&gt;11-&gt;6 MB, 13 MB goal, 12 P</span><br><span class="line"></span><br><span class="line">gc 1407 @6.073s 11%: 0.052+1.8+0.20 ms clock, 0.62+1.5/2.2/0+2.4 ms cpu, 8-&gt;14-&gt;8 MB, 13 MB goal, 12 P</span><br></pre></td></tr></table></figure><p>清单2显示了如何使用该GODEBUG变量生成GC跟踪。该列表还显示了正在运行的Go应用程序生成的3条跟踪。</p><p>以下是通过查看清单中的第一个GC跟踪线来细分GC跟踪中每个值的含义。</p><p>清单3</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">gc 1405 @6.068s 11%: 0.058+1.2+0.083 ms clock, 0.70+2.5/1.5/0+0.99 ms cpu, 7-&gt;11-&gt;6 MB, 10 MB goal, 12 P</span><br><span class="line"></span><br><span class="line">// General</span><br><span class="line">gc 1404     : The 1404 GC run since the program started</span><br><span class="line">@6.068s     : Six seconds since the program started</span><br><span class="line">11%         : Eleven percent of the available CPU so far has been spent <span class="hljs-keyword">in</span> GC</span><br><span class="line"></span><br><span class="line">// Wall-Clock</span><br><span class="line">0.058ms     : STW        : Mark Start       - Write Barrier on</span><br><span class="line">1.2ms       : Concurrent : Marking</span><br><span class="line">0.083ms     : STW        : Mark Termination - Write Barrier off and clean up</span><br><span class="line"></span><br><span class="line">// CPU Time</span><br><span class="line">0.70ms      : STW        : Mark Start</span><br><span class="line">2.5ms       : Concurrent : Mark - Assist Time (GC performed <span class="hljs-keyword">in</span> line with allocation)</span><br><span class="line">1.5ms       : Concurrent : Mark - Background GC time</span><br><span class="line">0ms         : Concurrent : Mark - Idle GC time</span><br><span class="line">0.99ms      : STW        : Mark Term</span><br><span class="line"></span><br><span class="line">// Memory</span><br><span class="line">7MB         : Heap memory <span class="hljs-keyword">in</span>-use before the Marking started</span><br><span class="line">11MB        : Heap memory <span class="hljs-keyword">in</span>-use after the Marking finished</span><br><span class="line">6MB         : Heap memory marked as live after the Marking finished</span><br><span class="line">10MB        : Collection goal <span class="hljs-keyword">for</span> heap memory <span class="hljs-keyword">in</span>-use after Marking finished</span><br><span class="line"></span><br><span class="line">// Threads</span><br><span class="line">12P         : Number of logical processors or threads used to run Goroutines</span><br></pre></td></tr></table></figure><p>清单3显示了第一个GC跟踪线的实际数字,按行值分解。我最终将讨论大多数这些值,但现在只关注跟踪1405的GC跟踪的内存部分。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure12.png" alt=""><br>图12</p><p>清单4</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Memory</span><br><span class="line">7MB         : Heap memory <span class="hljs-keyword">in</span>-use before the Marking started</span><br><span class="line">11MB        : Heap memory <span class="hljs-keyword">in</span>-use after the Marking finished</span><br><span class="line">6MB         : Heap memory marked as live after the Marking finished</span><br><span class="line">10MB        : Collection goal <span class="hljs-keyword">for</span> heap memory <span class="hljs-keyword">in</span>-use after Marking finished</span><br></pre></td></tr></table></figure><p>此GC跟踪行在清单4中告诉你的是,在标记工作开始之前,正在使用的堆内存量为7MB。标记工作完成后,正在使用的堆内存量达到11MB。这意味着在收集过程中还有4MB的分配。标记工作完成后标记为活动的堆内存量为6MB。这意味着在下一个收集器需要启动之前,应用程序可以将正在使用的堆内存量增加到12MB（实时堆大小为6MB的100％）。</p><p>你可以看到收集器错过了1MB的目标。标记工作完成后正在使用的堆内存量为11MB而不是10MB。没关系,因为目标是根据当前正在使用的堆内存量,标记为实时的堆内存量以及有关在收集器运行时将发生的其他分配的计时计算来计算的。在这种情况下,应用程序做了一些事情,需要在Marking之后使用更多堆内存而不是预期。</p><p>如果查看下一个GC跟踪线（1406）,你将看到事情在2ms内发生了变化</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure13.png" alt=""><br>图13</p><p>清单5<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gc 1406 @6.070s 11%: 0.051+1.8+0.076 ms clock, 0.61+2.0/2.5/0+0.91 ms cpu, 8-&gt;11-&gt;6 MB, 13 MB goal, 12 P</span><br><span class="line"></span><br><span class="line">// Memory</span><br><span class="line">8MB         : Heap memory <span class="hljs-keyword">in</span>-use before the Marking started</span><br><span class="line">11MB        : Heap memory <span class="hljs-keyword">in</span>-use after the Marking finished</span><br><span class="line">6MB         : Heap memory marked as live after the Marking finished</span><br><span class="line">13MB        : Collection goal <span class="hljs-keyword">for</span> heap memory <span class="hljs-keyword">in</span>-use after Marking finished</span><br></pre></td></tr></table></figure></p><p>清单5显示了这个收集器在上一个收集器开始后2ms（6.068s对6.070s）的启动情况,即使使用中的堆内存仅达到允许的12MB的8MB。重要的是要注意,如果收集者决定更早开始收集它会更好。在这种情况下,它可能更早开始,因为应用程序分配很多,收集器希望减少此收集器期间的协助标记延迟量。</p><p>还有两点需要注意。这次收集器保持在其目标之内。标记完成后正在使用的堆内存量为11MB而不是13MB,少了2 MB。标记完成后标记为活动的堆内存量在6MB时相同。</p><p>作为旁注。你可以通过添加<code>gcpacertrace=1</code>标志从GC跟踪中获取更多详细信息。这会导致收集器打印有关并发步伐器内部状态的信息。</p><p>清单6<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="hljs-built_in">export</span> GODEBUG=gctrace=1,gcpacertrace=1 ./app</span><br><span class="line"></span><br><span class="line">Sample output:</span><br><span class="line">gc 5 @0.071s 0%: 0.018+0.46+0.071 ms clock, 0.14+0/0.38/0.14+0.56 ms cpu, 29-&gt;29-&gt;29 MB, 30 MB goal, 8 P</span><br><span class="line"></span><br><span class="line">pacer: sweep <span class="hljs-keyword">done</span> at heap size 29MB; allocated 0MB of spans; swept 3752 pages at +6.183550e-004 pages/byte</span><br><span class="line"></span><br><span class="line">pacer: assist ratio=+1.232155e+000 (scan 1 MB <span class="hljs-keyword">in</span> 70-&gt;71 MB) workers=2+0</span><br><span class="line"></span><br><span class="line">pacer: H_m_prev=30488736 h_t=+2.334071e-001 H_T=37605024 h_a=+1.409842e+000 H_a=73473040 h_g=+1.000000e+000 H_g=60977472 u_a=+2.500000e-001 u_g=+2.500000e-001 W_a=308200 goalΔ=+7.665929e-001 actualΔ=+1.176435e+000 u_a/u_g=+1.000000e+000</span><br></pre></td></tr></table></figure><br>运行GC跟踪可以告诉你很多关于应用程序的运行状况和收集器的速度。收集器运行的速度在收集过程中起着重要作用。</p><h1 id="步伐"><a href="#步伐" class="headerlink" title="步伐"></a>步伐</h1><p>收集器具有调步算法,该算法用于确定何时开始收集。该算法依赖于收集器用于收集有关正在运行的应用程序的信息以及应用程序放在堆上的压力的反馈循环。压力可以定义为应用程序在给定时间内分配堆内存的速度。正是压力决定了收集器需要的速度。</p><p>在收集器开始收集之前,它会计算它认为完成收集所需的时间。然后,一旦收集器运行,将在正在运行的应用程序上造成延迟,这将减慢应用程序的工作。每个收集器都会增加应用程序的整体延迟。</p><p>一种误解是认为减慢收集器的速度是提高性能的一种方法。这个想法是,如果你可以推迟下一个收集器的开始,那么你将延迟它将造成的延迟。支持收集器并不是要放慢步伐。</p><p>你可以决定将GC百分比值更改为大于100的值。这将增加在下一个收集器必须启动之前可以分配的堆内存量。这可能导致收集速度减慢。不要考虑这样做。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure14.png" alt=""><br>图14</p><p>图14显示了更改GC百分比如何更改在下一个收集器必须启动之前允许分配的堆内存量。你可以直观地了解收集器在等待更多堆内存使用时如何减慢速度。</p><p>试图直接影响收集的速度与收集者的支持无关。这真的是在每个收集器之间或收集器期间完成更多的工作。你可以通过减少任何工作添加到堆内存的分配数量或数量来影响它。</p><p>注意：这个想法也是为了用尽可能小的堆来实现所需的吞吐量。请记住,在云环境中运行时,最小化堆内存等资源的使用非常重要。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure15.png" alt=""><br>图15</p><p>清单15显示了将在本系列的下一部分中使用的正在运行的Go应用程序的一些统计信息。蓝色版本显示应用程序的统计信息,而不通过应用程序处理10k请求时进行任何优化。在发现4.48GB的非生产性内存分配后,绿色版本显示统计数据,并从应用程序中删除相同的10k请求。</p><p>查看两个版本的平均收集速度（2.08ms vs 1.96ms）。它们几乎相同,约为2.0毫秒。这两个版本之间的根本变化是每个收集器之间的工作量。该应用程序从每个收集器处理3.98到7.13个请求。这是以同样的速度完成工作量增加79.1％。正如你所看到的,该收集器并没有随着这些分配的减少而减慢,但保持不变。获胜来自于在每个系列之间完成更多工作。</p><p>调整收集器的速度以延迟延迟成本并不是你提高应用程序性能的方式。它是关于减少收集器运行所需的时间,这反过来将减少造成的延迟成本。已经解释了收集器造成的延迟成本,但为了清楚起见,让我再次总结一下。</p><h1 id="收集器延迟成本"><a href="#收集器延迟成本" class="headerlink" title="收集器延迟成本"></a>收集器延迟成本</h1><p>每个收集器在运行的应用程序上有两种类型的延迟。</p><p>首先是窃取CPU容量。这种被盗CPU容量的影响意味着你的应用程序在收集过程中没有全速运行。应用程序Goroutines现在与收集器的Goroutines共享P或帮助收集（Mark Assist）。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure16.png" alt=""><br>图16</p><p>图16显示了应用程序如何仅将75％的CPU容量用于应用程序工作。这是因为收集器本身就有专用的P1。这将是大部分收集器。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure17.png" alt=""><br>图17</p><p>图17显示了应用程序在这个时刻（通常只有几微秒）现在只能将其CPU容量的一半用于应用程序工作。这是因为P3上的Goroutine正在执行协助标记,并且收集器为自己设置了专用P1。</p><p>注意：标记通常需要每MB实时堆4个CPU毫秒（例如,估计标记阶段将运行多少毫秒,以MB为单位取实时堆大小除以CPU *的数量）。标记实际上以大约1 MB / ms的速度运行,但只有四分之一的CPU。</p><p>造成的第二个延迟是收集期间发生的STW延迟量。STW时间是没有应用程序Goroutines执行任何应用程序工作的时间。该应用程序基本上已停止。</p><p><img src="https://www.ardanlabs.com/images/goinggo/100_figure18.png" alt=""><br>图18</p><p>图18显示了所有Goroutines停止的STW延迟。每次收集都会发生两次。如果你的应用程序运行正常,则收集器应该能够将大部分收集器的总STW时间保持在100微秒或以下。</p><p>你现在知道收集器的不同阶段,内存的大小,调整的工作方式以及收集器对正在运行的应用程序造成的不同延迟。有了这些知识,最终可以回答你如何与收集器支持的问题。</p><h1 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h1><p>对收集器表示支持是为了减少堆内存的压力。请记住,压力可以定义为应用程序在给定时间内分配堆内存的速度。当压力减小时,收集器造成的延迟将会减少。这是GC延迟会降低你的应用程序速度。</p><p>减少GC延迟的方法是从应用程序中识别并删除不必要的分配。这样做有助于收集器的几种方式。</p><p>帮助收集器：</p><ul><li>尽可能保持最小的堆。</li><li>找到最佳的一致步伐。</li><li>保持每个收集器的目标。</li><li>最小化每个收集器,STW和Mark Assist的持续时间。</li></ul><p>所有这些都有助于减少收集器对正在运行的应用程序造成的延迟。这将提高应用程序的性能和吞吐量。收集的速度与它无关。这些是你可以做的其他事情,以帮助做出更好的工程决策,减少堆上的压力。</p><h2 id="了解应用程序执行工作负载的性质"><a href="#了解应用程序执行工作负载的性质" class="headerlink" title="了解应用程序执行工作负载的性质"></a>了解应用程序执行工作负载的性质</h2><p>了解工作负载意味着确保使用合理数量的Goroutine来完成你已完成的工作。CPU与IO绑定的工作负载不同,需要不同的工程决策。</p><p><a href="https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html" target="_blank" rel="noopener">https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html</a></p><h2 id="了解已定义的数据及其在应用程序中的传递方式"><a href="#了解已定义的数据及其在应用程序中的传递方式" class="headerlink" title="了解已定义的数据及其在应用程序中的传递方式"></a>了解已定义的数据及其在应用程序中的传递方式</h2><p>了解数据意味着了解你要解决的问题。数据语义一致性是维护数据完整性的关键部分,并允许你在堆栈上选择堆分配时知道（通过读取代码）。</p><p><a href="https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html" target="_blank" rel="noopener">https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html</a></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>如果你花时间专注于减少分配,那么你就像Go开发人员一样,对垃圾收集器表示支持。你不打算编写零分配应用程序,因此重要的是要认识到有效的分配（帮助应用程序的分配）和那些没有生产力的分配（那些损害应用程序）之间的差异。然后将你的信任和信任放在垃圾收集器中,以保持堆健康并使你的应用程序始终如一地运行。</p><p>拥有垃圾收集器是一个很好的权衡。我将花费垃圾收集的成本,所以我没有内存管理的负担。Go是关于允许你作为开发人员提高工作效率,同时仍然编写足够快的应用程序。垃圾收集器是实现这一目标的重要组成部分。在下一篇文章中,我将向你展示一个示例Web应用程序以及如何使用该工具查看所有这些操作。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的垃圾收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的调度：第III部分 - 并发</title>
      <link href="/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACIII%E9%83%A8%E5%88%86-%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACIII%E9%83%A8%E5%88%86-%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第三篇文章,它将提供对Go中调度程序背后的机制和语义的理解。这篇文章重点关注并发性。</p><a id="more"></a><ol><li><a href="https://www.ulovecode.com/2019/08/06/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACI%E9%83%A8%E5%88%86%20-%20OS%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F/">Go中的调度：第I部分 - OS调度程序</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACII%E9%83%A8%E5%88%86%20-%20Go%20Scheduler/#more">Go中的调度：第II部分 - Go Scheduler</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACIII%E9%83%A8%E5%88%86%20-%20%E5%B9%B6%E5%8F%91/#more">Go中的调度：第III部分 - 并发</a></li></ol><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>当我解决问题时,特别是如果这是一个新问题,我最初并不会考虑并发是否适合。我首先寻找顺序解决方案并确保它正常工作。然后在可读性和技术评论之后,我将开始提出并发性是否合理和实用的问题。有时很明显,并发性是一个很好的选择,有时则不太清楚。</p><p>在本系列的第一部分中,我解释了操作系统调度程序的机制和语义,如果你计划编写多线程代码,我认为这很重要。在第二部分中,我解释了Go调度程序的语义,我认为这对于理解如何在Go中编写并发代码非常重要。在这篇文章中,我将开始将操作系统和Go调度程序的机制和语义结合在一起,以便更深入地了解并发性和不兼容性。</p><p>这篇文章的目标是：</p><ul><li><p>提供有关必须考虑的语义的指导,以确定工作负载是否适合使用并发。</p></li><li><p>向你展示不同类型的工作负载如何改变语义,从而改变你想要做出的工程决策。</p></li></ul><h1 id="什么是并发"><a href="#什么是并发" class="headerlink" title="什么是并发"></a>什么是并发</h1><p>并发意味着“乱序”执行。获取一组指令,否则这些指令将按顺序执行,并找到一种无序执行它们的方法,并仍然产生相同的结果。对于你面前的问题,必须明显的是,乱序执行会增加价值。当我说价值时,我的意思是为复杂性成本增加足够的性能增益。根据你的问题,可能无法执行乱序执行甚至有意义。</p><p><img src="https://www.ardanlabs.com/images/goinggo/96_figure1.png" alt=""><br>图1：并发与并行</p><p>在图1中,你可以看到两个逻辑处理器（P）的图表,每个处理器的独立OS线程（M）连接到计算机上的独立硬件线程（Core）。你可以看到两个Goroutines（G1和G2）并行执行,同时在各自的操作系统上执行它们的指令。在每个逻辑处理器中,三个Goroutines轮流共享各自的OS线程。所有这些Goroutines同时运行,没有特定顺序执行他们的指令并在OS线程上共享时间。</p><p>这就是摩擦,有时利用没有并行性的并发性实际上可以减慢吞吐量。有趣的是,有时利用并发性和并行性并不会给你带来比你认为可以实现的更大的性能提升。</p><h1 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h1><p>你怎么知道什么时候可能无序执行或有意义？了解问题所处理的工作负载类型是一个很好的起点。在考虑并发时,有两种类型的工作负载是很重要的。</p><ul><li><p>CPU绑定：这是一个永远不会产生Goroutines自然进出等待状态的工作负载。这是不断进行计算的工作。计算Pi到第N位的线程将是CPU绑定的。</p></li><li><p>IO绑定：这是一个导致Goroutines自然进入等待状态的工作负载。这项工作包括请求通过网络访问资源,或将系统调用进入操作系统,或等待事件发生。需要读取文件的Goroutine将是IO绑定。我会包含同步事件（互斥,原子）,导致Goroutine等待此类别的一部分。</p></li></ul><p>使用CPU绑定工作负载,你需要并行来利用并发性。处理多个Goroutines的单个操作系统效率不高,因为Goroutines作为其工作负载的一部分不会进入和退出等待状态。拥有更多的Goroutines而不是操作系统/硬件线程可以减慢工作负载执行速度,因为在操作系统线程上移动和关闭Goroutines的延迟成本（花费的时间）。上下文切换正在为你的工作负载创建“Stop The World”事件,因为在切换期间你的工作负载都没有被执行。</p><p>使用IO绑定工作负载,你不需要并行来使用并发。单个操作系统线程可以高效地处理多个Goroutines,因为Goroutines作为其工作负载的一部分自然地进出等待状态。拥有比操作系统/硬件线程更多的Goroutines可以加快工作负载执行速度,因为在操作系统线程上移动和移除Goroutines的延迟成本并不会产生“停止世界”事件。你的工作负载自然停止,这允许不同的Goroutine有效地利用相同的操作系统线程,而不是让操作系统线程闲置。</p><p>你如何知道每个线程有多少Goroutines提供最佳吞吐量？很少有Goroutines,你有更多的空闲时间。Goroutines太多,你有更多的上下文切换延迟时间。这是你要考虑的事情,但超出了这个特定职位的范围。</p><p>现在,重要的是要检查一些代码以巩固你识别工作负载何时可以利用并发性的能力,何时不能并且是否需要并行性。</p><h1 id="添加数字"><a href="#添加数字" class="headerlink" title="添加数字"></a>添加数字</h1><p>我们不需要复杂的代码来可视化和理解这些语义。查看以下命名的函数,该函数add汇总整数集合。</p><p>清单1<br><a href="https://play.golang.org/p/r9LdqUsEzEz" target="_blank" rel="noopener">https://play.golang.org/p/r9LdqUsEzEz</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">36</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(numbers []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">37</span>     <span class="hljs-keyword">var</span> v <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">38</span>     <span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> numbers &#123;</span><br><span class="line"><span class="hljs-number">39</span>         v += n</span><br><span class="line"><span class="hljs-number">40</span>     &#125;</span><br><span class="line"><span class="hljs-number">41</span>     <span class="hljs-keyword">return</span> v</span><br><span class="line"><span class="hljs-number">42</span> &#125;</span><br></pre></td></tr></table></figure><p>在第36行的清单1中,add声明了一个名为的函数,它接受一个整数集合并返回集合的总和。它从第37行开始,v变量声明包含总和。然后在第38行,函数线性地遍历集合,并且每个数字被添加到第39行的当前总和。最后在第41行,函数将最终的总和返回给调用者。</p><p>问题：该add功能是一个适合乱序执行的工作负载吗？我相信答案是肯定的。整数集合可以分解为较小的列表,并且可以同时处理这些列表。一旦将所有较小的列表相加,就可以将这组和被加在一起以产生与顺序版本相同的答案。</p><p>但是,还有另一个问题浮现在脑海中。应该独立创建和处理多少个较小的列表以获得最佳吞吐量？要回答此问题,你必须知道add正在执行的工作负载类型。该add函数正在执行CPU绑定工作负载,因为该算法正在执行纯数学,并且它不会导致goroutine进入自然等待状态。这意味着每个操作系统线程使用一个Goroutine就可以获得良好的吞吐量。</p><p>下面的清单2是我的并发版本add。</p><p>注意：编写并发版本的add时,可以采用多种方法和选项。暂时不要挂断我的特定实现。如果你有一个更易读的版本,表现相同或更好,我希望你能分享它。</p><p>清单2<br><a href="https://play.golang.org/p/r9LdqUsEzEz" target="_blank" rel="noopener">https://play.golang.org/p/r9LdqUsEzEz</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">44</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addConcurrent</span><span class="hljs-params">(goroutines <span class="hljs-keyword">int</span>, numbers []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">45</span>     <span class="hljs-keyword">var</span> v <span class="hljs-keyword">int64</span></span><br><span class="line"><span class="hljs-number">46</span>     totalNumbers := <span class="hljs-built_in">len</span>(numbers)</span><br><span class="line"><span class="hljs-number">47</span>     lastGoroutine := goroutines - <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">48</span>     stride := totalNumbers / goroutines</span><br><span class="line"><span class="hljs-number">49</span></span><br><span class="line"><span class="hljs-number">50</span>     <span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-number">51</span>     wg.Add(goroutines)</span><br><span class="line"><span class="hljs-number">52</span></span><br><span class="line"><span class="hljs-number">53</span>     <span class="hljs-keyword">for</span> g := <span class="hljs-number">0</span>; g &lt; goroutines; g++ &#123;</span><br><span class="line"><span class="hljs-number">54</span>         <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(g <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">55</span>             start := g * stride</span><br><span class="line"><span class="hljs-number">56</span>             end := start + stride</span><br><span class="line"><span class="hljs-number">57</span>             <span class="hljs-keyword">if</span> g == lastGoroutine &#123;</span><br><span class="line"><span class="hljs-number">58</span>                 end = totalNumbers</span><br><span class="line"><span class="hljs-number">59</span>             &#125;</span><br><span class="line"><span class="hljs-number">60</span></span><br><span class="line"><span class="hljs-number">61</span>             <span class="hljs-keyword">var</span> lv <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">62</span>             <span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> numbers[start:end] &#123;</span><br><span class="line"><span class="hljs-number">63</span>                 lv += n</span><br><span class="line"><span class="hljs-number">64</span>             &#125;</span><br><span class="line"><span class="hljs-number">65</span></span><br><span class="line"><span class="hljs-number">66</span>             atomic.AddInt64(&amp;v, <span class="hljs-keyword">int64</span>(lv))</span><br><span class="line"><span class="hljs-number">67</span>             wg.Done()</span><br><span class="line"><span class="hljs-number">68</span>         &#125;(g)</span><br><span class="line"><span class="hljs-number">69</span>     &#125;</span><br><span class="line"><span class="hljs-number">70</span></span><br><span class="line"><span class="hljs-number">71</span>     wg.Wait()</span><br><span class="line"><span class="hljs-number">72</span></span><br><span class="line"><span class="hljs-number">73</span>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">int</span>(v)</span><br><span class="line"><span class="hljs-number">74</span> &#125;</span><br></pre></td></tr></table></figure><p>在清单2中,显示了addConcurrent函数,它是函数的并发版本add。并发版本使用26行代码而不是非并发版本的5行代码。有很多代码,所以我只强调要理解的重要内容。</p><p>第48行：每个Goroutine都会得到他们自己独特但更小的数字列表。列表的大小是通过获取集合的大小并将其除以Goroutines的数量来计算的。</p><p>第53行：创建Goroutines池以执行添加工作。</p><p>第57-59行：最后一个Goroutine将添加剩余的数字列表,这些数字可能比其他Goroutines更大。</p><p>第66行：将较小的列表的总和加在一起作为最终总和。</p><p>并发版本肯定比顺序版本更复杂但复杂性值得吗？回答这个问题的最好方法是创建一个基准。对于这些基准测试,我使用了1000万个数字的集合,关闭了垃圾收集器。有一个使用该add函数的顺序版本和使用该函数的并发版本addConcurrent。</p><p>清单3</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkSequential</span><span class="hljs-params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        add(numbers)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkConcurrent</span><span class="hljs-params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        addConcurrent(runtime.NumCPU(), numbers)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清单3显示了基准函数。以下是所有Goroutines只有一个操作系统线程可用的结果。顺序版本使用1个Goroutine,并发版本runtime.NumCPU在我的机器上使用或8个Goroutines。在这种情况下,并发版本正在利用没有并行性的并发性。</p><p>清单4</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">10</span> Million Numbers using <span class="hljs-number">8</span> goroutines with <span class="hljs-number">1</span> core</span><br><span class="line"><span class="hljs-number">2.9</span> GHz Intel <span class="hljs-number">4</span> Core i7</span><br><span class="line">Concurrency WITHOUT Parallelism</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">$ GOGC=off <span class="hljs-keyword">go</span> test -cpu <span class="hljs-number">1</span> -run none -bench . -benchtime <span class="hljs-number">3</span>s</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/ardanlabs/gotraining/topics/<span class="hljs-keyword">go</span>/testing/benchmarks/cpu-bound</span><br><span class="line">BenchmarkSequential          <span class="hljs-number">1000</span>   <span class="hljs-number">5720764</span> ns/op : ~<span class="hljs-number">10</span>% Faster</span><br><span class="line">BenchmarkConcurrent          <span class="hljs-number">1000</span>   <span class="hljs-number">6387344</span> ns/op</span><br><span class="line">BenchmarkSequentialAgain     <span class="hljs-number">1000</span>   <span class="hljs-number">5614666</span> ns/op : ~<span class="hljs-number">13</span>% Faster</span><br><span class="line">BenchmarkConcurrentAgain     <span class="hljs-number">1000</span>   <span class="hljs-number">6482612</span> ns/op</span><br></pre></td></tr></table></figure><p>注意：在本地计算机上运行基准测试很复杂。有许多因素可能导致你的基准测试不准确。确保你的机器尽可能空闲并运行基准测试几次。你希望确保在结果中看到一致性。通过测试工具运行两次基准测试,可以为此基准测试提供最一致的结果。</p><p>清单4中的基准测试表明,当只有一个操作系统线程可供所有Goroutines使用时,Sequential版本比Concurrent快约10％到13％。这是我所期望的,因为并发版本具有单个操作系统线程上的上下文切换和Goroutines管理的开销。</p><p>以下是每个Goroutine可用的单独操作系统线程的结果。顺序版本使用1个Goroutine,并发版本runtime.NumCPU在我的机器上使用或8个Goroutines。在这种情况下,并发版本正在利用并行性和并发性。</p><p>清单5</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">10</span> Million Numbers using <span class="hljs-number">8</span> goroutines with <span class="hljs-number">8</span> cores</span><br><span class="line"><span class="hljs-number">2.9</span> GHz Intel <span class="hljs-number">4</span> Core i7</span><br><span class="line">Concurrency WITH Parallelism</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">$ GOGC=off <span class="hljs-keyword">go</span> test -cpu <span class="hljs-number">8</span> -run none -bench . -benchtime <span class="hljs-number">3</span>s</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/ardanlabs/gotraining/topics/<span class="hljs-keyword">go</span>/testing/benchmarks/cpu-bound</span><br><span class="line">BenchmarkSequential<span class="hljs-number">-8</span>            <span class="hljs-number">1000</span>   <span class="hljs-number">5910799</span> ns/op</span><br><span class="line">BenchmarkConcurrent<span class="hljs-number">-8</span>            <span class="hljs-number">2000</span>   <span class="hljs-number">3362643</span> ns/op : ~<span class="hljs-number">43</span>% Faster</span><br><span class="line">BenchmarkSequentialAgain<span class="hljs-number">-8</span>       <span class="hljs-number">1000</span>   <span class="hljs-number">5933444</span> ns/op</span><br><span class="line">BenchmarkConcurrentAgain<span class="hljs-number">-8</span>       <span class="hljs-number">2000</span>   <span class="hljs-number">3477253</span> ns/op : ~<span class="hljs-number">41</span>% Faster</span><br></pre></td></tr></table></figure><p>清单5中的基准测试表明,当每个Goroutine可以使用单独的操作系统线程时,并发版本比顺序版本快大约41％到43％。这是我所期望的,因为所有Goroutines现在并行运行,八个Goroutines同时执行他们的同时工作。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>重要的是要了解并非所有CPU绑定工作负载都适合并发。当破坏工作和/或组合所有结果非常昂贵时,这是主要的。使用名为冒号排序的排序算法可以看到这方面的一个例子。查看以下在Go中实现冒泡排序的代码。</p><p>清单6<br><a href="https://play.golang.org/p/S0Us1wYBqG6" target="_blank" rel="noopener">https://play.golang.org/p/S0Us1wYBqG6</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-keyword">package</span> main</span><br><span class="line"><span class="hljs-number">02</span></span><br><span class="line"><span class="hljs-number">03</span> <span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-number">04</span></span><br><span class="line"><span class="hljs-number">05</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(numbers []<span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">06</span>     n := <span class="hljs-built_in">len</span>(numbers)</span><br><span class="line"><span class="hljs-number">07</span>     <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="hljs-number">08</span>         <span class="hljs-keyword">if</span> !sweep(numbers, i) &#123;</span><br><span class="line"><span class="hljs-number">09</span>             <span class="hljs-keyword">return</span></span><br><span class="line"><span class="hljs-number">10</span>         &#125;</span><br><span class="line"><span class="hljs-number">11</span>     &#125;</span><br><span class="line"><span class="hljs-number">12</span> &#125;</span><br><span class="line"><span class="hljs-number">13</span></span><br><span class="line"><span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sweep</span><span class="hljs-params">(numbers []<span class="hljs-keyword">int</span>, currentPass <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-number">15</span>     <span class="hljs-keyword">var</span> idx <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">16</span>     idxNext := idx + <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">17</span>     n := <span class="hljs-built_in">len</span>(numbers)</span><br><span class="line"><span class="hljs-number">18</span>     <span class="hljs-keyword">var</span> swap <span class="hljs-keyword">bool</span></span><br><span class="line"><span class="hljs-number">19</span></span><br><span class="line"><span class="hljs-number">20</span>     <span class="hljs-keyword">for</span> idxNext &lt; (n - currentPass) &#123;</span><br><span class="line"><span class="hljs-number">21</span>         a := numbers[idx]</span><br><span class="line"><span class="hljs-number">22</span>         b := numbers[idxNext]</span><br><span class="line"><span class="hljs-number">23</span>         <span class="hljs-keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="hljs-number">24</span>             numbers[idx] = b</span><br><span class="line"><span class="hljs-number">25</span>             numbers[idxNext] = a</span><br><span class="line"><span class="hljs-number">26</span>             swap = <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-number">27</span>         &#125;</span><br><span class="line"><span class="hljs-number">28</span>         idx++</span><br><span class="line"><span class="hljs-number">29</span>         idxNext = idx + <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">30</span>     &#125;</span><br><span class="line"><span class="hljs-number">31</span>     <span class="hljs-keyword">return</span> swap</span><br><span class="line"><span class="hljs-number">32</span> &#125;</span><br><span class="line"><span class="hljs-number">33</span></span><br><span class="line"><span class="hljs-number">34</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">35</span>     org := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>&#125;</span><br><span class="line"><span class="hljs-number">36</span>     fmt.Println(org)</span><br><span class="line"><span class="hljs-number">37</span></span><br><span class="line"><span class="hljs-number">38</span>     bubbleSort(org)</span><br><span class="line"><span class="hljs-number">39</span>     fmt.Println(org)</span><br><span class="line"><span class="hljs-number">40</span> &#125;</span><br></pre></td></tr></table></figure><p>在清单6中,有一个用Go编写的冒泡排序的例子。这种排序算法会扫描每次传递时交换值的整数集合。根据列表的顺序,在对所有内容进行排序之前,可能需要多次遍历集合。</p><p>问题：该bubbleSort功能是一个适合乱序执行的工作负载吗？我相信答案是否定的。整数集合可以分解为较小的列表,并且可以同时对这些列表进行排序。但是,在完成所有并发工作之后,没有有效的方法将较小的列表排序在一起。以下是冒泡排序的并发版本的示例。</p><p>清单8</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">01</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bubbleSortConcurrent</span><span class="hljs-params">(goroutines <span class="hljs-keyword">int</span>, numbers []<span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">02</span>     totalNumbers := <span class="hljs-built_in">len</span>(numbers)</span><br><span class="line"><span class="hljs-number">03</span>     lastGoroutine := goroutines - <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">04</span>     stride := totalNumbers / goroutines</span><br><span class="line"><span class="hljs-number">05</span></span><br><span class="line"><span class="hljs-number">06</span>     <span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-number">07</span>     wg.Add(goroutines)</span><br><span class="line"><span class="hljs-number">08</span></span><br><span class="line"><span class="hljs-number">09</span>     <span class="hljs-keyword">for</span> g := <span class="hljs-number">0</span>; g &lt; goroutines; g++ &#123;</span><br><span class="line"><span class="hljs-number">10</span>         <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(g <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">11</span>             start := g * stride</span><br><span class="line"><span class="hljs-number">12</span>             end := start + stride</span><br><span class="line"><span class="hljs-number">13</span>             <span class="hljs-keyword">if</span> g == lastGoroutine &#123;</span><br><span class="line"><span class="hljs-number">14</span>                 end = totalNumbers</span><br><span class="line"><span class="hljs-number">15</span>             &#125;</span><br><span class="line"><span class="hljs-number">16</span></span><br><span class="line"><span class="hljs-number">17</span>             bubbleSort(numbers[start:end])</span><br><span class="line"><span class="hljs-number">18</span>             wg.Done()</span><br><span class="line"><span class="hljs-number">19</span>         &#125;(g)</span><br><span class="line"><span class="hljs-number">20</span>     &#125;</span><br><span class="line"><span class="hljs-number">21</span></span><br><span class="line"><span class="hljs-number">22</span>     wg.Wait()</span><br><span class="line"><span class="hljs-number">23</span></span><br><span class="line"><span class="hljs-number">24</span>     <span class="hljs-comment">// Ugh, we have to sort the entire list again.</span></span><br><span class="line"><span class="hljs-number">25</span>     bubbleSort(numbers)</span><br><span class="line"><span class="hljs-number">26</span> &#125;</span><br></pre></td></tr></table></figure><p>在清单8中,显示了bubbleSortConcurrent函数,它是函数的并发版本冒泡排序。它使用多个Goroutines同时对列表的某些部分进行排序。但是,你剩下的是以块为单位的已排序值列表。给定一个包含12个数字的36个数字的列表,如果整个列表在第25行没有再次排序,这将是结果列表。</p><p>清单9</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Before:</span><br><span class="line">  <span class="hljs-number">25</span> <span class="hljs-number">51</span> <span class="hljs-number">15</span> <span class="hljs-number">57</span> <span class="hljs-number">87</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">85</span> <span class="hljs-number">90</span> <span class="hljs-number">32</span> <span class="hljs-number">98</span> <span class="hljs-number">53</span></span><br><span class="line">  <span class="hljs-number">91</span> <span class="hljs-number">82</span> <span class="hljs-number">84</span> <span class="hljs-number">97</span> <span class="hljs-number">67</span> <span class="hljs-number">37</span> <span class="hljs-number">71</span> <span class="hljs-number">94</span> <span class="hljs-number">26</span>  <span class="hljs-number">2</span> <span class="hljs-number">81</span> <span class="hljs-number">79</span></span><br><span class="line">  <span class="hljs-number">66</span> <span class="hljs-number">70</span> <span class="hljs-number">93</span> <span class="hljs-number">86</span> <span class="hljs-number">19</span> <span class="hljs-number">81</span> <span class="hljs-number">52</span> <span class="hljs-number">75</span> <span class="hljs-number">85</span> <span class="hljs-number">10</span> <span class="hljs-number">87</span> <span class="hljs-number">49</span></span><br><span class="line"></span><br><span class="line">After:</span><br><span class="line">  <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">25</span> <span class="hljs-number">32</span> <span class="hljs-number">51</span> <span class="hljs-number">53</span> <span class="hljs-number">57</span> <span class="hljs-number">85</span> <span class="hljs-number">87</span> <span class="hljs-number">90</span> <span class="hljs-number">98</span></span><br><span class="line">   <span class="hljs-number">2</span> <span class="hljs-number">26</span> <span class="hljs-number">37</span> <span class="hljs-number">67</span> <span class="hljs-number">71</span> <span class="hljs-number">79</span> <span class="hljs-number">81</span> <span class="hljs-number">82</span> <span class="hljs-number">84</span> <span class="hljs-number">91</span> <span class="hljs-number">94</span> <span class="hljs-number">97</span></span><br><span class="line">  <span class="hljs-number">10</span> <span class="hljs-number">19</span> <span class="hljs-number">49</span> <span class="hljs-number">52</span> <span class="hljs-number">66</span> <span class="hljs-number">70</span> <span class="hljs-number">75</span> <span class="hljs-number">81</span> <span class="hljs-number">85</span> <span class="hljs-number">86</span> <span class="hljs-number">87</span> <span class="hljs-number">93</span></span><br></pre></td></tr></table></figure><p>由于冒泡排序的本质是扫描列表,因此bubbleSort对第25行的调用将抵消使用并发性带来的任何潜在收益。使用冒泡排序,使用并发性没有性能提升。</p><h1 id="阅读文件"><a href="#阅读文件" class="headerlink" title="阅读文件"></a>阅读文件</h1><p>已经介绍了两个CPU绑定工作负载,但是IO绑定工作负载呢？当Goroutines自然地进出等待状态时,语义是否不同？查看读取文件并执行文本搜索的IO绑定工作负载。</p><p>第一个版本是一个名为的函数的顺序版本find。</p><p>清单10<br><a href="https://play.golang.org/p/8gFe5F8zweN" target="_blank" rel="noopener">https://play.golang.org/p/8gFe5F8zweN</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">42</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">find</span><span class="hljs-params">(topic <span class="hljs-keyword">string</span>, docs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">43</span>     <span class="hljs-keyword">var</span> found <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-number">44</span>     <span class="hljs-keyword">for</span> _, doc := <span class="hljs-keyword">range</span> docs &#123;</span><br><span class="line"><span class="hljs-number">45</span>         items, err := read(doc)</span><br><span class="line"><span class="hljs-number">46</span>         <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">47</span>             <span class="hljs-keyword">continue</span></span><br><span class="line"><span class="hljs-number">48</span>         &#125;</span><br><span class="line"><span class="hljs-number">49</span>         <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;</span><br><span class="line"><span class="hljs-number">50</span>             <span class="hljs-keyword">if</span> strings.Contains(item.Description, topic) &#123;</span><br><span class="line"><span class="hljs-number">51</span>                 found++</span><br><span class="line"><span class="hljs-number">52</span>             &#125;</span><br><span class="line"><span class="hljs-number">53</span>         &#125;</span><br><span class="line"><span class="hljs-number">54</span>     &#125;</span><br><span class="line"><span class="hljs-number">55</span>     <span class="hljs-keyword">return</span> found</span><br><span class="line"><span class="hljs-number">56</span> &#125;</span><br></pre></td></tr></table></figure><p>在清单10中,你可以看到该find函数的顺序版本。在第43行,found声明一个名为变量的变量,以维持topic在给定文档中找到指定的次数。然后在第44行,迭代文档并使用该read函数在第45行读取每个文档。最后在第49-53行,包中的Contains函数strings用于检查是否可以在从文档中读取的项集合中找到主题。如果找到主题,则found变量加1。</p><p>这是read被调用的函数的实现find。</p><p>清单11<br><a href="https://play.golang.org/p/8gFe5F8zweN" target="_blank" rel="noopener">https://play.golang.org/p/8gFe5F8zweN</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">33</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">read</span><span class="hljs-params">(doc <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">([]item, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">34</span>     time.Sleep(time.Millisecond) <span class="hljs-comment">// Simulate blocking disk read.</span></span><br><span class="line"><span class="hljs-number">35</span>     <span class="hljs-keyword">var</span> d document</span><br><span class="line"><span class="hljs-number">36</span>     <span class="hljs-keyword">if</span> err := xml.Unmarshal([]<span class="hljs-keyword">byte</span>(file), &amp;d); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">37</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line"><span class="hljs-number">38</span>     &#125;</span><br><span class="line"><span class="hljs-number">39</span>     <span class="hljs-keyword">return</span> d.Channel.Items, <span class="hljs-literal">nil</span></span><br><span class="line"><span class="hljs-number">40</span> &#125;</span><br></pre></td></tr></table></figure><p>read清单11中的函数time.Sleep以一毫秒的调用开始。此调用用于模拟在我们执行实际系统调用以从磁盘读取文档时可能产生的延迟。此延迟的一致性对于准确测量find针对并发版本的顺序版本的性能非常重要。然后在第35-39行,将存储在全局变量中的模拟xml文档file解组为struct值以进行处理。最后,在第39行将一组项目返回给调用者。</p><p>有了顺序版本,这里是并发版本。</p><p>注意：编写并发版本的find时,可以采用多种方法和选项。暂时不要挂断我的特定实现。如果你有一个更易读的版本,表现相同或更好,我希望你能分享它。</p><p>清单12<br><a href="https://play.golang.org/p/8gFe5F8zweN" target="_blank" rel="noopener">https://play.golang.org/p/8gFe5F8zweN</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">58</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findConcurrent</span><span class="hljs-params">(goroutines <span class="hljs-keyword">int</span>, topic <span class="hljs-keyword">string</span>, docs []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-number">59</span>     <span class="hljs-keyword">var</span> found <span class="hljs-keyword">int64</span></span><br><span class="line"><span class="hljs-number">60</span></span><br><span class="line"><span class="hljs-number">61</span>     ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, <span class="hljs-built_in">len</span>(docs))</span><br><span class="line"><span class="hljs-number">62</span>     <span class="hljs-keyword">for</span> _, doc := <span class="hljs-keyword">range</span> docs &#123;</span><br><span class="line"><span class="hljs-number">63</span>         ch &lt;- doc</span><br><span class="line"><span class="hljs-number">64</span>     &#125;</span><br><span class="line"><span class="hljs-number">65</span>     <span class="hljs-built_in">close</span>(ch)</span><br><span class="line"><span class="hljs-number">66</span></span><br><span class="line"><span class="hljs-number">67</span>     <span class="hljs-keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="hljs-number">68</span>     wg.Add(goroutines)</span><br><span class="line"><span class="hljs-number">69</span></span><br><span class="line"><span class="hljs-number">70</span>     <span class="hljs-keyword">for</span> g := <span class="hljs-number">0</span>; g &lt; goroutines; g++ &#123;</span><br><span class="line"><span class="hljs-number">71</span>         <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">72</span>             <span class="hljs-keyword">var</span> lFound <span class="hljs-keyword">int64</span></span><br><span class="line"><span class="hljs-number">73</span>             <span class="hljs-keyword">for</span> doc := <span class="hljs-keyword">range</span> ch &#123;</span><br><span class="line"><span class="hljs-number">74</span>                 items, err := read(doc)</span><br><span class="line"><span class="hljs-number">75</span>                 <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-number">76</span>                     <span class="hljs-keyword">continue</span></span><br><span class="line"><span class="hljs-number">77</span>                 &#125;</span><br><span class="line"><span class="hljs-number">78</span>                 <span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items &#123;</span><br><span class="line"><span class="hljs-number">79</span>                     <span class="hljs-keyword">if</span> strings.Contains(item.Description, topic) &#123;</span><br><span class="line"><span class="hljs-number">80</span>                         lFound++</span><br><span class="line"><span class="hljs-number">81</span>                     &#125;</span><br><span class="line"><span class="hljs-number">82</span>                 &#125;</span><br><span class="line"><span class="hljs-number">83</span>             &#125;</span><br><span class="line"><span class="hljs-number">84</span>             atomic.AddInt64(&amp;found, lFound)</span><br><span class="line"><span class="hljs-number">85</span>             wg.Done()</span><br><span class="line"><span class="hljs-number">86</span>         &#125;()</span><br><span class="line"><span class="hljs-number">87</span>     &#125;</span><br><span class="line"><span class="hljs-number">88</span></span><br><span class="line"><span class="hljs-number">89</span>     wg.Wait()</span><br><span class="line"><span class="hljs-number">90</span></span><br><span class="line"><span class="hljs-number">91</span>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">int</span>(found)</span><br><span class="line"><span class="hljs-number">92</span> &#125;</span><br></pre></td></tr></table></figure><p>在清单12中,显示了findConcurrent函数,它是函数的并发版本find。并发版本使用30行代码而不是非并发版本的13行代码。我实现并发版本的目标是控制用于处理未知数量文档的Goroutine的数量。我选择使用通道用于给予Goroutines池的池模式。</p><p>有很多代码,所以我只强调要理解的重要内容。</p><p>第61-64行：创建一个通道并填充要处理的所有文档。</p><p>第65行：通道关闭,因此当处理完所有文件后,Goroutines池自然终止。</p><p>第70行：创建了Goroutines游泳池。</p><p>第73-83行：池中的每个Goroutine从通道接收文档,将文档读入内存并检查主题的内容。当匹配时,本地找到的变量递增。</p><p>第84行：将各个Goroutine计数的总和加在一起作为最终计数。</p><p>并发版本肯定比顺序版本更复杂但复杂性值得吗？再次回答这个问题的最好方法是创建一个基准。对于这些基准测试,我使用了一千个文件的集合,关闭了垃圾收集器。有一个使用该find函数的顺序版本和使用该函数的并发版本findConcurrent。</p><p>清单13</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkSequential</span><span class="hljs-params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        find(<span class="hljs-string">"test"</span>, docs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkConcurrent</span><span class="hljs-params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        findConcurrent(runtime.NumCPU(), <span class="hljs-string">"test"</span>, docs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清单13显示了基准函数。以下是所有Goroutines只有一个操作系统线程可用的结果。顺序使用1个Goroutine,并发版本runtime.NumCPU在我的机器上使用或8个Goroutines。在这种情况下,并发版本正在利用没有并行性的并发性。</p><p>清单14</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10 Thousand Documents using 8 goroutines with 1 core</span><br><span class="line">2.9 GHz Intel 4 Core i7</span><br><span class="line">Concurrency WITHOUT Parallelism</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">$ GOGC=off go <span class="hljs-built_in">test</span> -cpu 1 -run none -bench . -benchtime 3s</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/ardanlabs/gotraining/topics/go/testing/benchmarks/io-bound</span><br><span class="line">BenchmarkSequential             31483458120 ns/op</span><br><span class="line">BenchmarkConcurrent            20 188941855 ns/op : ~87% Faster</span><br><span class="line">BenchmarkSequentialAgain        21502682536 ns/op</span><br><span class="line">BenchmarkConcurrentAgain       20 184037843 ns/op : ~88% Faster</span><br></pre></td></tr></table></figure><p>清单14中的基准测试显示,当只有一个操作系统线程可用于所有Goroutines时,并发版本比顺序版本快大约87％到88％。这是我所期望的,因为所有Goroutines都有效地共享单个操作系统线程。read调用时每个Goroutine发生的自然上下文切换允许在单个操作系统线程上进行更多工作。</p><p>以下是并行使用并发时的基准。</p><p>清单15</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10 Thousand Documents using 8 goroutines with 1 core</span><br><span class="line">2.9 GHz Intel 4 Core i7</span><br><span class="line">Concurrency WITH Parallelism</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">$ GOGC=off go <span class="hljs-built_in">test</span> -run none -bench . -benchtime 3s</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: github.com/ardanlabs/gotraining/topics/go/testing/benchmarks/io-bound</span><br><span class="line">BenchmarkSequential-8               31490947198 ns/op</span><br><span class="line">BenchmarkConcurrent-8              20 187382200 ns/op : ~88% Faster</span><br><span class="line">BenchmarkSequentialAgain-8          31416126029 ns/op</span><br><span class="line">BenchmarkConcurrentAgain-8         20 185965460 ns/op : ~87% Faster</span><br></pre></td></tr></table></figure><p>清单15中的基准测试表明,引入额外的操作系统线程不能提供更好的性能。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这篇文章的目的是提供有关必须考虑的语义的指导,以确定工作负载是否适合使用并发。我尝试提供不同类型的算法和工作负载的示例,以便你可以看到语义上的差异以及需要考虑的不同工程决策。</p><p>你可以清楚地看到,使用IO绑定工作负载并不需要并行性来获得性能上的大幅提升。这与你在CPU绑定工作中看到的相反。当涉及像冒泡排序这样的算法时,并发性的使用会增加复杂性,而不会带来任何实际的性能优势。确定你的工作负载是否适合并发,然后确定必须使用正确语义的工作负载类型非常重要。</p><p>原文:</p><p><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html" target="_blank" rel="noopener">1) Scheduling In Go : Part I - OS Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html" target="_blank" rel="noopener">2) Scheduling In Go : Part II - Go Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html" target="_blank" rel="noopener">3) Scheduling In Go : Part III - Concurrency</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的垃圾收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的调度：第II部分 - Go Scheduler</title>
      <link href="/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACII%E9%83%A8%E5%88%86-Go%20Scheduler/"/>
      <url>/2019/08/07/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACII%E9%83%A8%E5%88%86-Go%20Scheduler/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第二篇文章,它将提供对Go中调度程序背后的机制和语义的理解。本文重点介绍Go调度程序。</p><a id="more"></a><p>三部分系列的索引：</p><ol><li><a href="https://www.ulovecode.com/2019/08/06/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACI%E9%83%A8%E5%88%86%20-%20操作系统%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F/">Go中的调度：第I部分 - 操作系统调度程序</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACII%E9%83%A8%E5%88%86%20-%20Go%20Scheduler/#more">Go中的调度：第II部分 - Go Scheduler</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACIII%E9%83%A8%E5%88%86%20-%20%E5%B9%B6%E5%8F%91/#more">Go中的调度：第III部分 - 并发</a></li></ol><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在本调度系列的第一部分中,我解释了操作系统调度程序的各个方面,我认为这些方面对于理解和理解Go调度程序的语义非常重要。在这篇文章中,我将在语义层面解释Go调度程序的工作原理并关注高级行为。Go调度程序是一个复杂的系统,小的机器上的细节并不重要。重要的是拥有良好的工作和行为方式。这将使你能够做出更好的工程决策。</p><h1 id="你的计划开始"><a href="#你的计划开始" class="headerlink" title="你的计划开始"></a>你的计划开始</h1><p>当你的Go程序启动时,它会为主机上标识的每个虚拟核心提供一个逻辑处理器（P）。如果你的处理器每个物理核心具有多个硬件线程（超线程）,则每个硬件线程将作为虚拟核心呈现给你的Go程序。为了更好地理解这一点,请查看我的MacBook Pro的系统报告。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure1.png" alt=""><br>图1</p><p>你可以看到我有一个带有4个物理内核的处理器。本报告未公开的是每个物理核心的硬件线程数。英特尔酷睿i7处理器具有超线程功能,这意味着每个物理内核有2个硬件线程。这将向Go程序报告,8个虚拟核可用于并行执行操作系统线程。</p><p>要测试这一点,请考虑以下程序：</p><p>清单1</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// NumCPU returns the number of logical</span></span><br><span class="line">    <span class="hljs-comment">// CPUs usable by the current process.</span></span><br><span class="line">    fmt.Println(runtime.NumCPU())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我在本地机器上运行该程序时,NumCPU（）函数调用的结果将是值8.我在我的机器上运行的任何Go程序将被赋予8P。</p><p>每个P被分配一个操作系统线程（“M”）。’M’代表机器。该线程仍由操作系统管理,操作系统仍负责将线程放在核心上执行,如上一篇文章所述。这意味着当我在我的机器上运行Go程序时,我有8个线程可用于执行我的工作,每个线程都单独连接到P.</p><p>每个Go程序也都有一个初始的Goroutine（“G”）,这是Go程序的执行路径。Goroutine本质上是一个Coroutine,但这是Go,所以我们用“G”代替字母“C”,我们得到了Goroutine这个词。你可以将Goroutines视为应用程序级线程,它们在很多方面类似于操作系统线程。正如操作系统线程在核心上下载上下文一样,Goroutines在上下文中打开和关闭。</p><p>最后一个难题是运行队列。Go调度程序中有两个不同的运行队列：全局运行队列（GRQ）和本地运行队列（LRQ）。每个P都有一个LRQ,用于管理指定在P的上下文中执行的Goroutines。这些Goroutines轮流在上下文中切换到分配给P的M。GRQ用于尚未分配给的Goroutines。还没有。有一个过程将Goroutines从GRQ转移到LRQ,我们将在后面讨论。</p><p>图2提供了所有这些组件的图像。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure2.png" alt=""><br>图2</p><h1 id="协作调度程序"><a href="#协作调度程序" class="headerlink" title="协作调度程序"></a>协作调度程序</h1><p>正如我们在第一篇文章中讨论的那样,操作系统调度程序是一个抢占式调度程序。从本质上讲,这意味着你无法预测调度程序在任何给定时间将要执行的操作。内核正在做出决策,一切都是非确定性的。运行在操作系统之上的应用程序无法控制内核中发生的事情,除非它们利用原子指令和互斥调用等同步原语。</p><p>Go调度程序是Go运行时的一部分,Go运行时内置在应用程序中。这意味着Go调度程序在内核之上的用户空间中运行。Go调度程序的当前实现不是抢占式调度程序,而是协作调度程序。作为协作调度程序意味着调度程序需要在代码中的安全点处发生的明确定义的用户空间事件以做出调度决策。</p><p>Go合作调度程序的优点在于它的表现和感觉先发制人。你无法预测Go调度程序将要执行的操作。这是因为这个合作调度程序的决策不是由开发人员掌握,而是在Go运行时。将Go调度程序视为抢占式调度程序非常重要,并且由于调度程序是非确定性的,因此这并不是一件容易的事。</p><h1 id="Goroutine并发"><a href="#Goroutine并发" class="headerlink" title="Goroutine并发"></a>Goroutine并发</h1><p>就像线程一样,Goroutines拥有相同的三个高级状态。这些决定了Go调度程序在任何给定的Goroutine中所起的作用。Goroutine可以处于以下三种状态之一：Waiting,Runnable或Executing。</p><ul><li><p>等待：这意味着Goroutine已停止并等待某些事情继续进行。这可能是出于等待操作系统（系统调用）或同步调用（原子操作和互斥操作）等原因。这些类型的延迟是性能不佳的根本原因。</p></li><li><p>可运行：这意味着Goroutine需要时间在M上,因此它可以执行其指定的指令。如果你有很多想要时间的Goroutines,那么Goroutines必须等待更长时间才能得到时间。此外,随着更多Goroutines争夺时间,任何给定的Goroutine获得的个人时间缩短了。这种类型的调度延迟也可能是性能不佳的原因。</p></li><li><p>执行：这意味着Goroutine已被置于M并正在执行其指令。与应用程序相关的工作即将完成。这是每个人都想要的。</p></li></ul><h1 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h1><p>Go调度程序需要明确定义的用户空间事件,这些事件发生在代码中的安全点以进行上下文切换。这些事件和安全点在函数调用中表现出来。函数调用对Go调度程序的运行状况至关重要。今天（使用Go 1.11或更低版本）,如果运行任何未进行函数调用的紧密循环,则会导致调度程序和垃圾回收中的延迟。函数调用在合理的时间范围内发生是至关重要的。</p><p>注意：有一个1.12 的提议被接受在Go调度程序中应用非协作抢占技术,以允许抢占紧密循环。</p><p>Go程序中发生了四类事件,允许调度程序做出调度决策。这并不意味着它总是会发生在其中一个事件上。这意味着调度程序获得了机会。</p><ul><li>使用关键字 go</li><li>垃圾收集</li><li>系统调用</li><li>同步和编排</li></ul><h2 id="使用关键字-go"><a href="#使用关键字-go" class="headerlink" title="使用关键字 go"></a>使用关键字 go</h2><p>关键字go是你创建Goroutines的方式。一旦创建了新的Goroutine,它就为调度程序提供了做出调度决策的机会。</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>由于GC使用自己的Goroutines运行,因此那些Goroutines需要时间在M上运行。这会导致GC产生大量的调度混乱。但是,调度程序非常聪明地了解Goroutine正在做什么,它将利用这些智能做出明智的决策。一个聪明的决定是上下文切换一个Goroutine,它想要在GC期间接触那些没有接触堆的堆。当GC运行时,正在做出许多调度决策。</p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>如果Goroutine进行系统调用会导致Goroutine阻塞M,有时调度程序能够将Goroutine从M上下文切换并将新的Goroutine上下文切换到相同的M.但是,有时新的M是需要继续执行在P中排队的Goroutines。如何工作将在下一节中更详细地解释。</p><h2 id="同步和编排"><a href="#同步和编排" class="headerlink" title="同步和编排"></a>同步和编排</h2><p>当你运行的操作系统具有异步处理系统调用的能力时,可以使用称为网络轮询器的内容来更有效地处理系统调用。这是通过在这些相应的操作系统中使用kqueue（Mac操作系统）,epoll（Linux）或iocp（Windows）来实现的。</p><p>基于网络的系统调用可以由我们今天使用的许多操作系统异步处理。这是网络轮询器获得其名称的地方,因为它的主要用途是处理网络操作。通过使用网络轮询器进行网络系统调用,调度程序可以防止Goroutines在进行系统调用时阻止M. 这有助于保持M可用于在P的LRQ中执行其他Goroutines而无需创建新的Ms.这有助于减少操作系统上的调度负载。</p><p>查看其工作原理的最佳方法是运行示例。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure3.png" alt=""><br>图3</p><p>图3显示了我们的基本调度图。Goroutine-1正在M上执行,并且还有3个Goroutines等待LRQ在M上等待。网络轮询器无所事事。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure4.png" alt=""><br>图4</p><p>在图4中,Goroutine-1想要进行网络系统调用,因此Goroutine-1被移动到网络轮询器并处理异步网络系统调用。一旦Goroutine-1移动到网络轮询器,M现在可以从LRQ执行不同的Goroutine。在这种情况下,Goroutine-2在M.上下文切换。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure5.png" alt=""><br>图5</p><p>在图5中,异步网络系统调用由网络轮询器完成,Goroutine-1被移回到L的LRQ中。一旦Goroutine-1可以在M上进行上下文切换,Go负责的Go相关代码可以再次执行。这里的最大优势是,要执行网络系统调用,不需要额外的Ms。网络轮询器具有操作系统线程,它正在处理有效的事件循环。</p><h1 id="同步系统调用"><a href="#同步系统调用" class="headerlink" title="同步系统调用"></a>同步系统调用</h1><p>当Goroutine想要进行无法异步完成的系统调用时会发生什么？在这种情况下,网络轮询器不能被使用,并且进行系统调用的Goroutine将阻止M.这是不幸的,但是没有办法防止这种情况发生。不能异步进行的系统调用的一个示例是基于文件的系统调用。如果你正在使用CGO,则可能还有其他情况,调用C函数也会阻止M.</p><p>注意：Windows操作系统确实能够异步进行基于文件的系统调用。从技术上讲,在Windows上运行时,可以使用网络轮询器。</p><p>让我们来看看同步系统调用（如文件I / O）会导致M阻塞的情况。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure6.png" alt=""><br>图6</p><p>图6再次显示了我们的基本调度图,但这次Goroutine-1将进行同步系统调用以阻止M1。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure7.png" alt=""><br>图7</p><p>在图7中,调度程序能够识别Goroutine-1已导致M阻塞。此时,调度程序将M1与P分离,同时仍然附加阻塞Goroutine-1。然后调度器引入新的M2来为P服务。此时,可以从LRQ中选择Goroutine-2并且在M2上进行上下文切换。如果由于之前的交换而已经存在M,则此切换比必须创建新M更快。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure8.png" alt=""><br>图8</p><p>在图8中,由Goroutine-1完成的阻塞系统调用完成。此时,Goroutine-1可以移回LRQ并再次由P服务。如果需要再次发生这种情况,则将M1放在侧面以备将来使用。</p><h1 id="工作窃取"><a href="#工作窃取" class="headerlink" title="工作窃取"></a>工作窃取</h1><p>调度程序的另一个方面是它是一个工作窃取调度程序。这有助于在一些领域保持有效的调度。首先,你想要的最后一件事就是M进入等待状态,因为一旦发生这种情况,操作系统就会将M从核心上下文切换。这意味着即使有一个Goroutine处于可运行状态,P也无法完成任何工作,直到M在核心上进行上下文切换。窃取工作也有助于平衡所有P的Goroutines,从而更好地分配工作并更有效地完成工作。</p><p>让我们来看一个例子。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure9.png" alt=""><br>图9</p><p>在图9中,我们有一个多线程Go程序,其中两个P服务四个Goroutines,每个服务GRQ中有一个Goroutine。如果P的所有Goroutines中的一个服务很快就会发生什么？</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure10.png" alt=""><br>图10</p><p>在图10中,P1没有更多的Goroutines来执行。但是Goroutines处于可运行状态,无论是在LRQ中还是在GRQ中。这是P1需要偷工作的时刻。窃取工作的规则如下。</p><p>清单2</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">runtime.schedule() &#123;</span><br><span class="line">    <span class="hljs-comment">//只有1/61的时间,检查G的全局可运行队列</span></span><br><span class="line">    <span class="hljs-comment">//如果找不到,请检查本地队列。</span></span><br><span class="line">    <span class="hljs-comment">//如果没找到,</span></span><br><span class="line">    <span class="hljs-comment">//试图从其他Ps窃取</span></span><br><span class="line">    <span class="hljs-comment">//如果没有,请检查全局可运行队列。</span></span><br><span class="line">    <span class="hljs-comment">//如果找不到,轮询网络。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此,基于清单2中的这些规则,P1需要在其LRQ中检查P2 for Goroutines并获取其发现的一半。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure11.png" alt=""><br>图11</p><p>在图11中,Goroutines的一半来自P2,现在P1可以执行那些Goroutines。</p><p>如果P2完成为其所有Goroutines提供服务并且P1的LRQ中没有任何东西会发生什么？</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure12.png" alt=""><br>图12</p><p>在图12中,P2完成了所有工作,现在需要窃取一些。首先,它将查看P1的LRQ,但它不会找到任何Goroutines。接下来,它将查看GRQ。那里会发现Goroutine-9。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure13.png" alt=""><br>图13</p><p>在图13中,P2从GRQ窃取了Goroutine-9并开始执行工作。所有这些偷窃工作的好处在于它允许女士保持忙碌而不会闲着。这项工作窃取在内部被视为旋转M.这种旋转具有JBD在她的<a href="https://rakyll.org/scheduler/" target="_blank" rel="noopener">工作窃取</a>博客文章中解释得很好的其他好处。</p><h1 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h1><p>有了相应的机制和语义,我想向你展示如何将所有这些结合在一起,以便Go调度程序随着时间的推移执行更多工作。想象一下用C编写的多线程应用程序,其中程序管理两个操作系统线程,它们相互传递消息。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure14.png" alt=""><br>图14</p><p>在图14中,有2个线程来回传递消息。线程1在Core 1上进行上下文切换,现在正在执行,这允许线程1将其消息发送到线程2。</p><p>注意：消息的传递方式并不重要。当业务流程继续进行时,重要的是线程的状态。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure15.png" alt=""><br>图15</p><p>在图15中,一旦线程1完成发送消息,它现在需要等待响应。这将导致线程1从Core 1上下文关闭并进入等待状态。一旦线程2收到有关该消息的通知,它就会进入可运行状态。现在操作系统可以执行上下文切换并在Core上执行线程2,它恰好是Core 2.接下来,线程2处理消息并将新消息发送回线程1。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure16.png" alt=""><br>图16</p><p>在图16中,线程上下文切换再次由线程2接收线程2的消息。现在线程2上下文 - 从执行状态切换到等待状态和线程1上下文 - 从等待状态切换到可运行状态最后回到执行状态,允许它处理并发回新消息。</p><p>所有这些上下文切换和状态更改都需要时间来执行,这限制了工作的完成速度。由于每个上下文切换可能会产生约1000纳秒的延迟,并且希望硬件每纳秒执行12条指令,因此你可以查看12k指令,或多或少,在这些上下文切换期间不执行。由于这些线程也在不同的核心之间弹跳,因高速缓存行未命中而导致额外延迟的可能性也很高。</p><p>让我们采用相同的例子,但使用Goroutines和Go调度程序。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure17.png" alt=""><br>图17 </p><p>在图17中,有两个Goroutine正在编排,彼此之间来回传递消息。G1在M1上进行上下文切换,这恰好在Core 1上运行,这允许G1执行其工作。G1的工作是将其消息发送给G2。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure18.png" alt=""><br>图18</p><p>在图18中,一旦G1完成发送消息,它现在需要等待响应。这将导致G1上下文关闭M1并进入等待状态。一旦G2收到有关该消息的通知,它就会进入可运行状态。现在,Go调度程序可以执行上下文切换并在M1上执行G2,M1仍然在Core 1上运行。接下来,G2处理消息并将新消息发送回G1。</p><p><img src="https://www.ardanlabs.com/images/goinggo/94_figure19.png" alt=""><br>图19</p><p>在图19中,当G2接收到由G2发送的消息时,事物再次上下文切换。现在G2上下文 - 从执行状态切换到等待状态,G1上下文 - 从等待状态切换到可运行状态,最后返回到执行状态,这允许它处理并发回新消息。</p><p>表面上的事情似乎没有任何不同。无论你使用线程还是Goroutines,都会发生所有相同的上下文切换和状态更改。但是,使用线程和Goroutines之间存在一个主要区别,乍一看可能并不明显。</p><p>在使用Goroutines的情况下,相同的操作系统线程和核心用于所有处理。这意味着,从操作系统的角度来看,操作系统线程永远不会进入等待状态; 不止一次。因此,在使用Goroutines时,使用Threads时我们丢失到上下文切换的所有指令都不会丢失。</p><p>从本质上讲,Go已将IO / Blocking工作转变为操作系统级别的CPU限制工作。由于所有上下文切换都是在应用程序级别进行的,因此在使用Threads时,每个上下文切换都不会丢失相同的~12k指令（平均）。在Go中,那些相同的上下文切换花费大约200纳秒或~2.4k指令。调度程序还有助于提高缓存线效率和<a href="http://frankdenneman.nl/2016/07/07/numa-deep-dive-part-1-uma-numa" target="_blank" rel="noopener">NUMA</a>。这就是为什么我们不需要比虚拟核心更多的线程。在Go中,随着时间的推移,可以完成更多的工作,因为Go调度程序尝试使用更少的线程并在每个线程上执行更多操作,这有助于减少操作系统和硬件的负载。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Go调度程序在设计如何考虑操作系统和硬件如何工作的复杂性方面确实令人惊讶。在操作系统级别将IO /阻塞工作转换为CPU限制工作的能力是我们在利用更多CPU容量的过程中获得巨大成功的地方。这就是为什么你不需要比虚拟核心更多的操作系统线程。你可以合理地期望每个虚拟核心只需一个操作系统线程即可完成所有工作（CPU和阻塞IO绑定）。对于不需要阻止操作系统线程的系统调用的网络应用程序和其他应用程序,可以这样做。</p><p>作为开发人员,你仍然需要了解你的应用在你正在处理的工作类型方面正在做什么。你无法创建无限数量的Goroutines并期望惊人的性能。少总是更多,但是通过理解这些Go-scheduler语义,你可以做出更好的工程决策。在下一篇文章中,我将探讨以保守方式利用并发性以获得更好性能的想法,同时仍然平衡可能需要添加到代码中的复杂性。</p><p>原文:</p><p><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html" target="_blank" rel="noopener">1) Scheduling In Go : Part I - 操作系统 Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html" target="_blank" rel="noopener">2) Scheduling In Go : Part II - Go Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html" target="_blank" rel="noopener">3) Scheduling In Go : Part III - Concurrency</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go中的调度：第I部分 - OS调度程序</title>
      <link href="/2019/08/06/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACI%E9%83%A8%E5%88%86-OS%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/08/06/Go/Golang%E8%AF%91%E6%96%87/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACI%E9%83%A8%E5%88%86-OS%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这是三部分系列中的第一篇文章,它将提供对Go中调度程序背后的机制和语义的理解。本文重点介绍操作系统调度程序。</p><a id="more"></a><p>三部分系列的索引：</p><ol><li><a href="https://www.ulovecode.com/2019/08/06/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACI%E9%83%A8%E5%88%86%20-%20OS%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F/">Go中的调度：第I部分 - OS调度程序</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACII%E9%83%A8%E5%88%86%20-%20Go%20Scheduler/#more">Go中的调度：第II部分 - Go Scheduler</a></li><li><a href="https://www.ulovecode.com/2019/08/07/Go/Go%E4%B8%AD%E7%9A%84%E8%B0%83%E5%BA%A6%EF%BC%9A%E7%AC%ACIII%E9%83%A8%E5%88%86%20-%20%E5%B9%B6%E5%8F%91/#more">Go中的调度：第III部分 - 并发</a></li></ol><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Go调度程序的设计和行为使你的多线程Go程序更高效,更高效。这要归功于Go调度程序对操作系统（OS）调度程序的机械支持。但是,如果多线程Go软件的设计和行为与调度程序的工作方式没有机械上的支持,那么这一切都不重要。了解OS和Go调度程序如何正确设计多线程软件非常重要。</p><p>这篇由多部分组成的文章将重点介绍调度程序的更高级别的机制和语义。我将提供足够的详细信息,以便你可以看到工作原理,以便你做出更好的工程决策。尽管你需要为多线程应用程序做出很多工程决策,但是机制和语义构成了你所需的基础知识的关键部分。</p><h1 id="OS-Scheduler"><a href="#OS-Scheduler" class="headerlink" title="OS Scheduler"></a>OS Scheduler</h1><p>操作系统调度程序是复杂的软件。他们必须考虑他们运行的硬件的布局和设置。这包括但不限于存在多个处理器和内核,CPU缓存和NUMA。没有这些知识,调度程序就不能尽可能高效。最棒的是,你仍然可以开发一个关于操作系统调度程序如何工作的良好心理模型,而无需深入研究这些主题。</p><p>你的程序只是一系列需要依次执行的机器指令。为了实现这一点,操作系统使用处理的概念。线程的工作是考虑并顺序执行它分配的指令集。执行继续,直到没有更多的线程执行指令。这就是我称之为“执行之路”的线程的原因。</p><p>你运行的每个程序都会创建一个处理器,并为每个处理器提供一个初始线程。线程可以创建更多的线程。所有这些不同的线程彼此独立地运行,并且调度决策在线程级别进行,而不是在进程级别。线程可以同时运行（每个线程在单个核心上转向）,也可以并行运行（每个线程在不同的核心上同时运行）。线程还保持自己的状态,以允许安全,本地和独立执行其指令。</p><p>如果存在可以执行的线程,则OS调度程序负责确保核心不空闲。它还必须创建一个错觉,即可以执行的所有线程同时执行。在创建这种错觉的过程中,调度程序需要运行优先级高于低优先级线程的线程。但是,具有较低优先级的线程不能缺乏执行时间。调度程序还需要通过快速而明智的决策尽可能地最小化调度延迟。</p><p>为实现这一目标,很多算法都要考虑到这一点,但幸运的是,该行业能够利用数十年的工作和经验。为了更好地理解所有这些,最好描述和定义一些重要的概念。</p><h1 id="执行指令"><a href="#执行指令" class="headerlink" title="执行指令"></a>执行指令</h1><p>该程序计数器（PC）,有时被称为指令指针（IP）,就是允许的线程来跟踪下一个执行指令的。在大多数处理器中,PC指向下一条指令而不是当前指令。</p><p><img src="https://www.ardanlabs.com/images/goinggo/92_figure1.jpeg" alt=""></p><p>如果你曾经看过Go程序的堆栈跟踪,你可能已经注意到每行末尾的这些小十六进制数字。寻找+0x39和+0x72清单1所示。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goroutine 1 [running]:</span><br><span class="line">   main.example(0xc000042748, 0x2, 0x4, 0x106abae, 0x5, 0xa)</span><br><span class="line">       stack_trace/example1/example1.go:13 +0x39                 &lt;- LOOK HERE</span><br><span class="line">   main.main()</span><br><span class="line">       stack_trace/example1/example1.go:8 +0x72                  &lt;- LOOK HERE</span><br></pre></td></tr></table></figure><p>这些数字表示从相应功能的顶部偏移的PC值。该+0x39PC的偏移量代表的下一个指令线程将内部已经执行example的功能,如果该方法没有panic。在0+x72PC偏移值是内部的下一个指令main功能,如果控制正巧回到那个功能。更重要的是,该指针之前的指令会告诉你正在执行的指令。</p><p>查看清单2中的程序,该程序导致清单1中的堆栈跟踪。</p><p>清单2</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="hljs-comment">//github.com/ardanlabs/gotraining/blob/master/topics/go/profiling/stack_trace/example1/example1.go</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">07</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-number">08</span>     example(<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>), <span class="hljs-string">"hello"</span>, <span class="hljs-number">10</span>)</span><br><span class="line"><span class="hljs-number">09</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">12</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">example</span><span class="hljs-params">(slice []<span class="hljs-keyword">string</span>, str <span class="hljs-keyword">string</span>, i <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-number">13</span>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">"Want stack trace"</span>)</span><br><span class="line"><span class="hljs-number">14</span> &#125;</span><br></pre></td></tr></table></figure><p>十六进制数+0x39表示example函数内部指令的PC偏移量,该指令比函数的起始指令低57（基数10）字节。在下面的清单3中,你可以看到一个objdump对的example从二元函数。找到第12条指令,它在底部列出。注意该指令上面的代码行是对它的调用panic。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ go tool objdump -S -s <span class="hljs-string">"main.example"</span> ./example1</span><br><span class="line">TEXT main.example(SB) stack_trace/example1/example1.go</span><br><span class="line">func example(slice []string, str string, i int) &#123;</span><br><span class="line">  0x104dfa065488b0c2530000000MOVQ GS:0x30, CX</span><br><span class="line">  0x104dfa9483b6110CMPQ 0x10(CX), SP</span><br><span class="line">  0x104dfad762cJBE 0x104dfdb</span><br><span class="line">  0x104dfaf4883ec18SUBQ <span class="hljs-variable">$0x18</span>, SP</span><br><span class="line">  0x104dfb348896c2410MOVQ BP, 0x10(SP)</span><br><span class="line">  0x104dfb8488d6c2410LEAQ 0x10(SP), BP</span><br><span class="line">panic(<span class="hljs-string">"Want stack trace"</span>)</span><br><span class="line">  0x104dfbd488d059ca20000LEAQ runtime.types+41504(SB), AX</span><br><span class="line">  0x104dfc448890424MOVQ AX, 0(SP)</span><br><span class="line">  0x104dfc8488d05a1870200LEAQ main.statictmp_0(SB), AX</span><br><span class="line">  0x104dfcf4889442408MOVQ AX, 0x8(SP)</span><br><span class="line">  0x104dfd4e8c735fdffCALL runtime.gopanic(SB)</span><br><span class="line">  0x104dfd90f0bUD2              &lt;--- LOOK HERE PC(+0x39)</span><br></pre></td></tr></table></figure><p>请记住：PC是下一条指令,而不是当前指令。清单3是基于amd64的指令的一个很好的例子,该Go程序的Thread负责顺序执行。</p><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>另一个重要的概念是线程状态,它规定了调度程序对线程所采用的角色。线程可以处于以下三种状态之一：等待,可运行,执行。</p><ul><li><p>等待：这意味着线程停止并等待某些东西才能继续。这可能是因为等待硬件（磁盘,网络）,操作系统（系统调用）或同步调用（原子,互斥）等原因。这些类型的延迟是性能不佳的根本原因。</p></li><li><p>可运行：这意味着线程需要时间在核心上,以便它可以执行其分配的机器指令。如果你有很多需要时间的线程,那么线程必须等待更长时间才能获得时间。此外,随着更多线程争用时间,缩短了任何给定线程获得的单独时间量。这种类型的调度延迟也可能是性能不佳的原因。</p></li><li><p>执行：这意味着线程已被放置在核心上并正在执行其机器指令。与应用程序相关的工作即将完成。这是每个人都想要的。</p></li></ul><h1 id="工作类型"><a href="#工作类型" class="headerlink" title="工作类型"></a>工作类型</h1><p>线程可以执行两种类型的工作。第一个称为CPU绑定,第二个称为IO绑定。</p><ul><li><p>CPU绑定：这是永远不会创建线程可能处于等待状态的情况的工作。这是不断进行计算的工作。计算Pi到第N位的线程将是CPU绑定的。</p></li><li><p>IO绑定：这是导致线程进入等待状态的工作。这项工作包括请求通过网络访问资源或将系统调用进入操作系统。需要访问数据库的线程将是IO绑定。我将包括同步事件（互斥,原子）,导致线程等待此类别的一部分。</p></li></ul><h1 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h1><p>如果你在Linux,Mac或Windows上运行,则运行在具有抢占式调度程序的操作系统上。这意味着一些重要的事情。首先,它意味着调度程序在任何给定时间选择运行什么线程时都是不可预测的。线程优先级与事件一起（如在网络上接收数据）使得无法确定调度程序将选择执行什么操作以及何时执行操作。</p><p>其次,这意味着你必须永远不要根据你有幸经历的一些感知行为编写代码,但不能保证每次都能发生。很容易让自己思考,因为我已经看到过这种情况发生了1000次,这是有保障的行为。如果在应用程序中需要确定性,则必须控制线程的同步和编排。</p><p>在核心上交换线程的物理行为称为上下文切换。当调度程序从核心拉出执行中的线程并用可运行的线程替换它时,就会发生上下文切换。从运行队列中选择的线程进入执行状态。被拉出的线程可以移回可运行状态（如果它仍然具有运行能力）,或者进入等待状态（如果由于IO绑定类型的请求而被替换）。</p><p>上下文切换被认为是昂贵的,因为在核心上交换线程需要花费很多时间。在上下文切换期间存在的等待时间量取决于不同的因素,但是它在~1000和~1500纳秒之间花费是不合理的。考虑到硬件应该能够合理地执行（平均）每个核心每纳秒12条指令,上下文切换可能需要大约12k到18k的延迟指令。实质上,你的程序在上下文切换期间失去了执行大量指令的能力。</p><p>如果你有一个专注于IO绑定工作的程序,那么上下文切换将是一个优势。一旦线程进入等待中状态,另一个处于可运行状态的线程就可以取代它。这使得核心始终可以正常工作。这是调度的最重要方面之一。如果有工作（处于可运行状态的线程）,则不允许内核空闲。</p><p>如果你的程序专注于CPU绑定工作,那么上下文切换将成为性能的噩梦。由于Thead总是有工作要做,因此上下文切换正在停止这项工作的进展。这种情况与IO绑定工作负载的情况形成鲜明对比</p><h1 id="少即是多"><a href="#少即是多" class="headerlink" title="少即是多"></a>少即是多</h1><p>在处理器只有一个核心的早期阶段,调度并不过分复杂。因为你有一个单核处理器,所以在任何给定时间只能执行一个线程。我们的想法是定义一个调度程序周期并尝试在该段时间内执行所有Runnable线程。没问题：采用调度周期并除以需要执行的线程数。</p><p>例如,如果你将调度程序周期定义为10毫秒（毫秒）并且你有2个线程,则每个线程各获得5毫秒。如果你有5个线程,每个线程各获得2ms。但是,当你有100个线程时会发生什么？为每个线程提供10μs（微秒）的时间片不起作用,因为你将在上下文切换中花费大量时间。</p><p>你需要的是限制切片的短时间。在最后一种情况下,如果最小时间片是2ms并且你有100个线程,则调度程序周期需要增加到2000ms或2s（秒）。如果有1000个线程,现在你正在查看20秒的调度期间。如果每个线程使用其全时间片,则在此简单示例中所有线程运行一次需要20秒。</p><p>请注意,这是一个非常简单的世界观。在制定调度决策时,调度程序需要考虑和处理更多事情。您可以控制在应用程序中使用的线程数。当需要考虑更多的线程,并且发生IO-Bound工作时,会出现更多混乱和不确定行为。事情需要更长的时间来安排和执行。</p><p>这就是为什么游戏规则是“少即是多”。可运行状态中较少的线程意味着较少的调度开销和每个线程随时间推移的更多时间。处于可运行状态的更多线程意味着每个线程随时间变化的时间更短。这意味着你的工作也会随着时间的推移完成。</p><h1 id="找到平衡点"><a href="#找到平衡点" class="headerlink" title="找到平衡点"></a>找到平衡点</h1><p>你需要在你拥有的核心数量和获得应用程序最佳吞吐量所需的线程数之间找到平衡点。在管理这种平衡时,线程池是一个很好的答案。我将在第二部分告诉你,Go不再需要这个。我认为这是Go为使多线程应用程序开发更容易做的好事之一。</p><p>在Go编码之前,我用C ++编写代码,用NT编写C＃。在该操作系统上,使用IOCP（IO完成端口）线程池对于编写多线程软件至关重要。作为工程师,你需要确定所需的线程池数量和任何给定池的最大线程数,以最大化你给定的核心数量的吞吐量。</p><p>在编写与数据库通信的Web服务时,每个核心3个线程的神奇数量似乎始终在NT上提供最佳吞吐量。换句话说,每个内核3个线程最小化了上下文切换的延迟成本,同时最大化了内核上的执行时间。在创建IOCP线程池时,我知道在主机上识别出的每个核心都至少有1个线程和最多3个线程。</p><p>如果我每个核心使用2个线程,则需要更长时间才能完成所有工作,因为我有空闲时间可以完成工作。如果我每个核心使用4个线程,它也需要更长的时间,因为我在上下文切换中有更多的延迟。无论出于何种原因,每个核心3个线程的平衡似乎总是在NT上的神奇数字。</p><p>如果你的服务正在进行许多不同类型的工作,该怎么办？这可能会产生不同且不一致的延迟。也许它还会创建许多需要处理的不同系统级事件。可能无法找到一直适用于所有不同工作负载的幻数。当使用线程池来调整服务的性能时,找到正确的一致配置会变得非常复杂。</p><h1 id="缓存行"><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h1><p>从主存储器访问数据具有如此高的延迟成本（约100至约300个时钟周期）,处理器和内核具有本地高速缓存以使数据保持接近需要它的硬件线程。从高速缓存访​​问数据的成本要低得多（约3到约40个时钟周期）,具体取决于所访问的高速缓存。今天,性能的一个方面是关于如何有效地将数据导入处理器以减少这些数据访问延迟。编写改变状态的多线程应用程序需要考虑缓存系统的机制。</p><p><img src="https://www.ardanlabs.com/images/goinggo/92_figure2.png" alt=""></p><p>使用高速缓存行在处理器和主存储器之间交换数据。高速缓存行是在主存储器和高速缓存系统之间交换的64字节内存块。每个核心都有自己需要的任何缓存行的副本,这意味着硬件使用值语义。这就是为什么多线程应用程序中的内存突变会造成性能噩梦的原因。</p><p>当并行运行的多个线程访问相同的数据值或甚至是彼此接近的数据值时,它们将访问同一缓存线上的数据。在任何核心上运行的任何线程都将获得其自己的同一缓存行的副本。</p><p><img src="https://www.ardanlabs.com/images/goinggo/92_figure3.png" alt=""></p><p>如果给定核心上的一个线程对其高速缓存行的副本进行了更改,那么通过硬件的能力,同一高速缓存行的所有其他副本都必须标记为脏状态。当线程尝试对脏缓存行进行读或写访问时,需要主存储器访问（约100到约300个时钟周期）来获取缓存行的新副本。</p><p>也许在2核处理器上这不是什么大问题,但是并行运行32个线程的32核处理器在同一个缓存线上访问和改变数据呢？具有两个物理处理器的系统如何,每个处理器有16个核心？由于处理器到处理器通信的延迟增加,情况会更糟。该应用程序将通过内存进行颠簸,性能将变得非常糟糕,而且很可能,你将无法理解为什么。</p><p>这称为缓存一致性问题,并且还引入了诸如错误共享之类的问题。在编写将改变共享状态的多线程应用程序时,必须考虑缓存系统。</p><h1 id="调度决策场景"><a href="#调度决策场景" class="headerlink" title="调度决策场景"></a>调度决策场景</h1><p>想象一下,我已经要求你根据我给你的高级信息编写OS调度程序。想想你必须考虑的这种情况。请记住,这是调度程序在做出调度决策时必须考虑的许多有趣的事情之一。</p><p>启动应用程序并创建主线程并在核心1上执行。当线程开始执行其指令时,正在检索缓存行,因为需要数据。Thread现在决定为某些并发处理创建一个新的Thread。这是个问题。</p><p>一旦创建了Thread并准备好了,调度程序应该是：</p><ol><li><p>上下文切换核心1的主线程？这样做有助于提高性能,因为这个新线程需要相同的数据已经被缓存的可能性非常大。但主线程没有得到它的全部时间片。</p></li><li><p>是否等待核心1在主线程的时间片完成之前可用？线程未运行,但一旦启动,将取消获取数据的延迟。</p></li><li><p>让线程等待下一个可用的核心？这将意味着将刷新,检索和复制所选核心的高速缓存行,从而导致延迟。但是线程会更快地启动,主线程可以完成其时间片。</p></li></ol><p>玩得开心吗？这些是OS调度程序在做出调度决策时需要考虑的有趣问题。对每个人来说幸运的是,我不是那个制作它们的人。我可以告诉你的是,如果有空闲核心,它将会被使用。你希望线程在运行时运行。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这篇文章的第一部分提供了在编写多线程应用程序时对线程和OS调度程序必须考虑的内容的见解。这些是Go调度程序也考虑到的事情。在下一篇文章中,我将描述Go调度程序的语义以及它们如何与此信息相关。最后,你将通过运行几个程序来看到所有这些。</p><p>原文:</p><p><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html" target="_blank" rel="noopener">1) Scheduling In Go : Part I - OS Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html" target="_blank" rel="noopener">2) Scheduling In Go : Part II - Go Scheduler</a><br><a href="https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html" target="_blank" rel="noopener">3) Scheduling In Go : Part III - Concurrency</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go中的调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Go实时GC——三色算法理论与实践</title>
      <link href="/2019/08/06/Go/Golang%E8%AF%91%E6%96%87/Go%E5%AE%9E%E6%97%B6GC%E2%80%94%E2%80%94%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%20/"/>
      <url>/2019/08/06/Go/Golang%E8%AF%91%E6%96%87/Go%E5%AE%9E%E6%97%B6GC%E2%80%94%E2%80%94%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%20/</url>
      
        <content type="html"><![CDATA[<p>Go语言能够支持实时的,高并发的消息系统,在高达百万级别的消息系统中能够将延迟降低到100ms以下,着一切很大一部分需要归功于Go的高效的垃圾回收系统。</p><a id="more"></a><p>对于实时系统而言,垃圾回收系统可能是一个极大的隐患,因为在垃圾回收的时候需要将整个程序暂停。所以在我们设计消息总线系统的时候,需要小心地选择我们的语言。Go一直在强调它的低延迟,但是它真的做到了吗？如果是的,它是怎么做到的呢？</p><p>在这篇文章当中,我们将会看到Go语言的GC是如何实现的（tricolor algorithm,三色算法）,以及为什么这种方法能够达到如此之低的GC暂停,以及最重要的是,它是否真的有效（对这些GC暂停进行benchmar测试,以及同其它类型的语言进行比较）。</p><h1 id="From-Haskell-To-Go"><a href="#From-Haskell-To-Go" class="headerlink" title="From Haskell To Go"></a>From Haskell To Go</h1><p>我们用pub/sub消息总线系统为例说明问题,这些系统在发布消息的时候都是在内存存储的。在早期,我们用Haskell实现了第一版的消息系统,但是后面发现GHC的垃圾回收期存在一些基础延迟的问题,我们放弃了这个系统转而用Go进行了实现。</p><p>这是我们有关Haskell消息系统的一些实现细节,在GHC中最重要的一点是它GC暂停时间同当前的工作集的大小成比例关系（也就是说,GC时间和内存中存储对象的数目有关）。在我们的例子中,内存中存储对象的数目往往都非常巨大,这就导致gc时间常常高达数百毫秒。这就会导致在GC的时候整个系统是阻塞的。</p><p>而在Go语言中,不同于GHC的全局暂停(stop-the-world)收集器,Go的垃圾收集器是和主程序并行的。这就可以避免程序的长时间暂停。我们则更加关注于Go所承诺的低延迟以及其在每个新版本中所提及的延迟提升是否真的向他们所说的那样。</p><h1 id="并行垃圾回收是如何工作的"><a href="#并行垃圾回收是如何工作的" class="headerlink" title="并行垃圾回收是如何工作的?"></a>并行垃圾回收是如何工作的?</h1><p>Go的GC是如何实现并行的呢？其中的关键在于三色标记清除算法。该算法能够让系统的gc暂停时间成为能够预测的问题。调度器能够在很短的时间内实现GC调度,并且对源程序的影响极小。下面我们看看三色标记清除算法是如何工作的：</p><p>假设我们有这样的一段链表操作的代码：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> A LinkedListNode;</span><br><span class="line"><span class="hljs-keyword">var</span> B LinkedListNode;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">B.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">A.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line">*(B.next).next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line">B.next = *(B.next).next;</span><br><span class="line">B.next = <span class="hljs-literal">nil</span>;</span><br></pre></td></tr></table></figure><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> A LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> B LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">B.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br></pre></td></tr></table></figure><p>刚开始我们假设有三个节点A、B和C,作为根节点,红色的节点A和B始终都能够被访问到,然后进行一次赋值B.next = &amp;C。初始的时候垃圾收集器有三个集合,分别为黑色,灰色和白色。现在,因为垃圾收集器还没有运行起来,所以三个节点都在白色集合中。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc.001.jpeg" alt=""></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>我们新建一个节点D,并将其赋值给A.next。即：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> A LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> B LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">B.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">A.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br></pre></td></tr></table></figure><p>需要注意的是,作为一个新的内存对象,需要将其放置在灰色区域中。为什么要将其放在灰色区域中呢？这里有一个规则,如果一个指针域发生了变化,则被指向的对象需要变色。因为所有的新建内存对象都需要将其地址赋值给一个引用,所以他们将会立即变为灰色。（这就需要问了,为什么C不是灰色？）</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc2.001.jpeg" alt=""></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在开始GC的时候,根节点将会被移入灰色区域。此时A、B、D三个节点都在灰色区域中。由于所有的程序子过程(process,因为不能说是进程,应该算是线程,但是在go中又不完全是线程)要么事程序正常逻辑,要么是GC的过程,而且GC和程序逻辑是并行的,所以程序逻辑和GC过程应该是交替占用CPU资源的。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc3.001.jpeg" alt=""></p><h2 id="第四步-扫描内存对象"><a href="#第四步-扫描内存对象" class="headerlink" title="第四步 扫描内存对象"></a>第四步 扫描内存对象</h2><p>在扫描内存对象的时候,GC收集器将会把该内存对象标记为黑色,然后将其子内存对象标记为灰色。在任一阶段,我们都能够计算当前GC收集器需要进行的移动步数：2*|white| + |grey|,在每一次扫描GC收集器都至少进行一次移动,直到达到当前灰色区域内存对象数目为0。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc4.001.jpeg" alt=""></p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>程序此时的逻辑为,新赋值一个内存对象E给C.next,代码如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> A LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> B LinkedListNode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">B.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">A.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">//新赋值 C.next = &amp;E</span></span><br><span class="line">*(B.next).next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br></pre></td></tr></table></figure><p>按照我们之前的规则,新建的内存对象需要放置在灰色区域,如图所示：</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc5.001.jpeg" alt=""></p><p>这样做,收集器需要做更多的事情,但是这样做当在新建很多内存对象的时候,可以将最终的清除操作延迟。值得一提的是,这样处理白色区域的体积将会减小,直到收集器真正清理堆空间时再重新填入移入新的内存对象。</p><h2 id="第六步-指针重新赋值"><a href="#第六步-指针重新赋值" class="headerlink" title="第六步 指针重新赋值"></a>第六步 指针重新赋值</h2><p>程序逻辑此时将 B.next.next赋值给了B.next,也就是将E赋值给了B.next。代码如下：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> A LinkedListNode;</span><br><span class="line"><span class="hljs-keyword">var</span> B LinkedListNode;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">B.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">A.next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line">*(B.next).next = &amp;LinkedListNode&#123;next: <span class="hljs-literal">nil</span>&#125;;</span><br><span class="line"><span class="hljs-comment">// 指针重新赋值:</span></span><br><span class="line">B.next = *(B.next).next;</span><br></pre></td></tr></table></figure><p>这样做之后,如图所示,C将不可达。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc6.001.jpeg" alt=""></p><p>这就意味着,收集器需要将C从白色区域移除,然后在GC循环中将其占用的内存空间回收。</p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>将灰色区域中没有引用依赖的内存对象移动到黑色区域中,此时D在灰色区域中没有其它依赖,并依赖于它的内存对象A已经在黑色区域了,将其移动到黑色区域中。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc7.001.jpeg" alt=""></p><h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><p>在程序逻辑中,将B.next赋值为了nil,此时E将变为不可达。但此时E在灰色区域,将不会被回收,那么这样会导致内存泄漏吗？其实不会,E将在下一个GC循环中被回收,三色算法能够保证这点：如果一个内存对象在一次GC循环开始的时候无法被访问,则将会被冻结,并在GC的最后将其回收。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc8.001.jpeg" alt=""></p><h2 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h2><p>在进行第二次GC循环的时候,将E移入到黑色区域,但是C并不会移动,因为是C引用了E,而不是E引用C。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc9.001.jpeg" alt=""></p><h2 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h2><p>收集器再扫描最后一个灰色区域中的内存对象B,并将其移动到黑色区域中。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc10.001.jpeg" alt=""></p><h2 id="第十一步-回收白色区域"><a href="#第十一步-回收白色区域" class="headerlink" title="第十一步 回收白色区域"></a>第十一步 回收白色区域</h2><p>现在灰色区域已经没有内存对象了,这个时候就将白色区域中的内存对象回收。在这个阶段,收集器已经知道白色区域的内存对象已经没有任何引用且不可访问了,就将其当做垃圾进行回收。而在这个阶段,E不会被回收,因为这个循环中,E才刚刚变为不可达,它将在下个循环中被回收。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc11.001.jpeg" alt=""></p><h2 id="第十二步-区域变色"><a href="#第十二步-区域变色" class="headerlink" title="第十二步 区域变色"></a>第十二步 区域变色</h2><p>这一步是最有趣的,在进行下次GC循环的时候,完全不需要将所有的内存对象移动回白色区域,只需要将黑色区域和白色区域的颜色换一下就好了,简单而且高效。</p><p><img src="https://www.chenquan.me/files/2017/08/golang-gc12.001.jpeg" alt=""></p><h1 id="GC三色算法小结"><a href="#GC三色算法小结" class="headerlink" title="GC三色算法小结"></a>GC三色算法小结</h1><p>上面就是三色标记清除算法的一些细节,在当前算法下仍旧有两个阶段需要 stop-the-world：一是进行root内存对象的栈扫描；二是标记阶段的终止暂停。令人激动的是,标记阶段的终止暂停将被去除。在实践中我们发现,用这种算法实现的GC暂停时间能够在超大堆空间回收的情况下达到&lt;1ms的表现。</p><h1 id="延迟-VS-吞吐"><a href="#延迟-VS-吞吐" class="headerlink" title="延迟 VS 吞吐"></a>延迟 VS 吞吐</h1><p>如果一个并行GC收集器在处理超大内存堆时能够达到极低的延迟,那么为什么还有人在用stop-the-world的GC收集器呢？难道Go的GC收集器还不够优秀吗？</p><p>这不是绝对的,因为低延迟是有开销的。最主要的开销就是,低延迟削减了吞吐量。并发需要额外的同步和赋值操作,而这些操作将会占用程序的处理逻辑的时间。而Haskell的GHC则针对吞吐量进行了优化,Go则专注于延迟,我们在考虑采用哪种语言的时候需要针对我们自己的需求进行选择,对于推送系统这种实时性要求比较高的系统,选择Go语言则是权衡之下得到的选择。</p><h1 id="实际表现"><a href="#实际表现" class="headerlink" title="实际表现"></a>实际表现</h1><p>目前而言,Go好像已经能够满足低延迟系统的要求了,但是在实际中的表现又怎么样呢？利用相同的benchmark测试逻辑实现进行比较：该基准测试将不断地向一个限定缓冲区大小的buffer中推送消息,旧的消息将会不断地过期并成为垃圾需要进行回收,这要求内存堆需要一直保持较大的状态,这很重要,因为在回收的阶段整个内存堆都需要进行扫描以确定是否有内存引用。这也是为什么GC的运行时间和存活的内存对象和指针数目成正比例关系的原因。</p><p>这是Go语言版本的基准测试代码,这里的buffer用数组实现:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    windowSize = <span class="hljs-number">200000</span></span><br><span class="line">    msgCount   = <span class="hljs-number">1000000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> (</span><br><span class="line">    message []<span class="hljs-keyword">byte</span></span><br><span class="line">    buffer  [windowSize]message</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> worst time.Duration</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mkMessage</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">message</span></span> &#123;</span><br><span class="line">    m := <span class="hljs-built_in">make</span>(message, <span class="hljs-number">1024</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> m &#123;</span><br><span class="line">        m[i] = <span class="hljs-keyword">byte</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pushMsg</span><span class="hljs-params">(b *buffer, highID <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    m := mkMessage(highID)</span><br><span class="line">    (*b)[highID%windowSize] = m</span><br><span class="line">    elapsed := time.Since(start)</span><br><span class="line">    <span class="hljs-keyword">if</span> elapsed &gt; worst &#123;</span><br><span class="line">        worst = elapsed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> b buffer</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; msgCount; i++ &#123;</span><br><span class="line">        pushMsg(&amp;b, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Worst push time: "</span>, worst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相同的逻辑,不同语言实现(Haskell/Ocaml/Racke、Java),在同等测试条件下进行的测试结果如下：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkLongest pause (ms)</span><br><span class="line">OCaml 4.03.0 (map based) (manual timing)2.21</span><br><span class="line">Haskell/GHC 8.0.1 (map based) (rts timing)67.00</span><br><span class="line">Haskell/GHC 8.0.1 (array based) (rts timing)58.60</span><br><span class="line">Racket 6.6 experimental incremental GC (map based) (tuned) (rts timing)144.21</span><br><span class="line">Racket 6.6 experimental incremental GC (map based) (untuned) (rts timing)124.14</span><br><span class="line">Racket 6.6 (map based) (tuned) (rts timing)113.52</span><br><span class="line">Racket 6.6 (map based) (untuned) (rts timing)136.76</span><br><span class="line">Go 1.7.3 (array based) (manual timing)7.01</span><br><span class="line">Go 1.7.3 (map based) (manual timing)37.67</span><br><span class="line">Go HEAD (map based) (manual timing)7.81</span><br><span class="line">Java 1.8.0_102 (map based) (rts timing)161.55</span><br><span class="line">Java 1.8.0_102 G1 GC (map based) (rts timing)153.89</span><br></pre></td></tr></table></figure><p>令人惊讶的是Java,表现得非常一般,而OCaml则非常之好,OCaml语言能够达到约3ms的GC暂停时间,这是因为OCaml采用的GC算法是<a href="https://realworldocaml.org/v1/en/html/understanding-the-garbage-collector.html" target="_blank" rel="noopener">incremental GC algorithm</a>(而在实时系统中不采用OCaml的原因是该语言对多核的支持不好)。</p><p>正如表中显示的,Go的GC暂停时间大约在7ms左右,表现也好,已经完全能够满足我们的要求。</p><h1 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h1><ol><li>进行基准测试往往需要多加小心,因为不同的运行时针对不同的测试用例都有不同程度的优化,所以表现往往也有差异。而我们需要针对自己的需求来编写测试用例,对于基准测试应该能够满足我们自己的产品需求。在上面的例子中可以看到,Go已经完全能够满足我们的产品需求。</li><li>Map Vs. Array： 最初我们的基准测试是在map中进行插入和删除操作的,但是Go在对大型的map进行GC的时候存在Bug。因此在设计Go的基准测试的时候用可修改的Array作为Map的替代。Go map的Bug已经在1.8版本中得到了修复,但是并不是所有的基准测试都得到了修正,这也是我们需要正视的一些问题。但是不管怎么说,没有理由说GC时间将会因为使用map导致大幅度增长（除去bug和糟糕的实现之外）。</li><li>manual timing Vs. rst timing :作为另一个注意事项,有些基准测试则在不同的计时系统下将会有所差异,因为有些语言不支持运行时时间统计,例如Go,而有些语言则支持。因此,我们应该在测试时候都把计时方式设置为manual timing。</li><li>最后一个需要注意的事项是测试用例的实现将会极大地影响基准测试的结果,如果map的插入删除实现方式比较糟糕,则将会对测试结果造成不利影响,这也是用array的另一个原因。</li></ol><h1 id="为什么Go的结果不能再好点？"><a href="#为什么Go的结果不能再好点？" class="headerlink" title="为什么Go的结果不能再好点？"></a>为什么Go的结果不能再好点？</h1><p>尽管我们采用的map bugfixed版本或者是array版本的go实现能够达到~7ms的GC暂停表现,这已经很好了,但是根据Go官方发布的“1.5 Garbage Benchmark Latency”](<a href="https://talks.golang.org/2015/go-gc.pdf" target="_blank" rel="noopener">https://talks.golang.org/2015/go-gc.pdf</a>) , 在200MB的堆内存前提下,能够达到~1ms的GC暂停延时(经管GC暂停时间应该和指针引用数目有关而和堆所占用的容量无关但我们无法得到确切数据)。而Twitch团队也发布文章称在Go1.7中能够达到约1ms的GC延迟。</p><p>在联系go-nuts mail list之后得到的答案是,这些暂停实验可能是因为一些未修复的bug导致的。空闲的标记worker可能会对程序逻辑造成阻塞,为了确定这个问题,我采用了go tool trace,一个可视化工具对go的运行时行为进行了跟踪。</p><p><img src="https://www.chenquan.me/files/2017/08/go-tool-trace-gc-pause-1024x330.png" alt=""></p><p>正如图所示,这里有近12ms的后台mark worker运行在所有的processor（CPU核?）中。这让我更加确信是上述的bug导致的该问题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次调查的重点在于GC要么关注于低延迟,要么关注于高吞吐。当然这些也都取决于我们的程序是如何使用堆空间的(我们是否有很多内存对象？每个对象的生命周期是长还是短？)</p><p>理解底层的GC算法对该系统是否适用于你的测试用例是非常重要的。当然GC系统的实际实现也至关重要。你的基准测试程序的内存占用应该同你将要实现的真正程序类似,这样才能够在实践中检验GC系统对于你的程序而言是否高效。正如前文所说的,Go的GC系统并不完美,但是对于我们的系统而言是可以接受的。</p><p>尽管存在一些问题,但是Go的GC表现已经优于大部分同样拥有GC系统的语言了,Go的开发团队针对GC延迟进行了优化,并且还在继续。Go的GC确实是有可圈可点之处,无论是理论上还是实践中。</p><p>原文 <a href="https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/" target="_blank" rel="noopener">Golang’s Real-time GC in Theory and Practice</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Epoll,Select,Poll系统架构之间的实际差异</title>
      <link href="/2019/08/06/Network/Epoll,Select,Poll%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AE%9E%E9%99%85%E5%B7%AE%E5%BC%82(%E8%AF%91%E6%96%87)/"/>
      <url>/2019/08/06/Network/Epoll,Select,Poll%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AE%9E%E9%99%85%E5%B7%AE%E5%BC%82(%E8%AF%91%E6%96%87)/</url>
      
        <content type="html"><![CDATA[<p>在设计具有非阻塞套接字I / O的高性能网络应用程序时,架构师需要决定使用哪种轮询方法来监视这些套接字生成的事件。有几种这样的方法,每种方法的用例都不同。选择正确的方法对于满足应用需求可能至关重要。</p><a id="more"></a><p>本文重点介绍了轮询方法之间的差异,并提供了使用的建议。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#使用select轮询">使用select进行轮询</a></li><li><a href="#使用poll进行轮询">使用poll进行轮询</a></li><li><a href="#使用epoll进行轮询">使用epoll进行轮询</a></li><li><a href="#使用libevent进行轮询">使用libevent进行轮询</a></li></ol><h2 id="使用select轮询"><a href="#使用select轮询" class="headerlink" title="使用select轮询"></a>使用select轮询</h2><p>从套接字仍被称为伯克利套接字的时代起,老的,值得信赖的劳动力。它并没有成为第一个规范,因为当时没有非阻塞I / O的概念,但它确实使它大约八十年代,并且在它的界面中没有任何改变。</p><p>要使用select,开发人员需要使用描述符和要监视的事件初始化并填充几个fd_set结构,然后调用select （）。典型的工作流程如下：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">fd_set fd_in, fd_out;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Reset the sets</span></span><br><span class="line">FD_ZERO( &amp;fd_in );</span><br><span class="line">FD_ZERO( &amp;fd_out );</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Monitor sock1 for input events</span></span><br><span class="line">FD_SET( sock1, &amp;fd_in );</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Monitor sock2 for output events</span></span><br><span class="line">FD_SET( sock2, &amp;fd_out );</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Find out which socket has the largest numeric value as select requires it</span></span><br><span class="line"><span class="hljs-keyword">int</span> largest_sock = sock1 &gt; sock2 ? sock1 : sock2;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Wait up to 10 seconds</span></span><br><span class="line">tv.tv_sec = <span class="hljs-number">10</span>;</span><br><span class="line">tv.tv_usec = <span class="hljs-number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Call the select</span></span><br><span class="line"><span class="hljs-keyword">int</span> ret = select( largest_sock + <span class="hljs-number">1</span>, &amp;fd_in, &amp;fd_out, <span class="hljs-literal">NULL</span>, &amp;tv );</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Check if select actually succeed</span></span><br><span class="line"><span class="hljs-keyword">if</span> ( ret == <span class="hljs-number">-1</span> )</span><br><span class="line">    <span class="hljs-comment">// report error and abort</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( ret == <span class="hljs-number">0</span> )</span><br><span class="line">    <span class="hljs-comment">// timeout; no event detected</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> ( FD_ISSET( sock1, &amp;fd_in ) )</span><br><span class="line">        <span class="hljs-comment">// input event on sock1</span></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">if</span> ( FD_ISSET( sock2, &amp;fd_out ) )</span><br><span class="line">        <span class="hljs-comment">// output event on sock2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设计和开发选择界面时,没有人可能期望会有多线程应用程序服务于数千个连接。因此,select带来了相当多的设计缺陷,这使得它不适合作为现代网络应用中的轮询机制。主要缺点包括：</p><ul><li>select修改传递的fd_sets,这样就不能重用它们。即使您不需要更改任何内容 - 例如,如果其中一个描述符接收到数据并需要接收更多数据 - 整个集合必须重新创建（argh！）或通过FD_COPY从备份副本恢复。每次调用select时都必须这样做。</li><li>要找出引发事件的描述符,您必须手动迭代集合中的所有描述符,并在每个描述符上调用FD_ISSET。如果你有2,000个这样的描述符,并且只有其中一个是活动的 - 而且可能是最后一个 - 你每次等待都会浪费CPU周期。</li><li>我刚刚提到了2000个描述符吗？好吧,选择不能支持那么多。至少在Linux上。支持的描述符的最大数量由FD_SETSIZE常量定义,Linux很高兴地将其定义为1024.虽然某些操作系统允许您通过在包含sys / select.h之前重新定义FD_SETSIZE来破解此限制,但这不是可移植的。实际上,Linux会忽略这种黑客攻击并且限制将保持不变。</li><li>在等待时,您无法从其他线程修改描述符集。假设一个线程正在执行上面的代码。现在假设你有一个管家线程,它决定了sock1等待输入数据的时间太长了,现在是时候切断电源线了。由于此套接字可以重用于另一个付费工作客户端,因此管家线程想要关闭套接字。但是套接字位于fd_set中,select正在等待。</li><li>现在当这个套接字关闭时会发生什么？男人选择有答案,你不会喜欢它。答案是,“如果select（）监视的文件描述符在另一个线程中关闭,则结果未指定”。</li><li>如果另一个线程突然决定通过sock1发送内容,则会出现同样的问题。在select返回之前,无法开始监视输出事件的套接字。</li><li>等待的事件的选择是有限的; 例如,要检测远程套接字是否已关闭,您必须a）监视它以进行输入; b）实际尝试从套接字读取数据以检测闭包（读取将返回0）。如果你想从这个套接字读取,这很好,但是如果你现在发送一个文件并且不关心任何输入怎么办？</li><li>当填充描述符列表以计算最大描述符编号并将其作为函数参数提供时,select会给您带来额外负担。</li></ul><p>当然,操作系统开发人员在设计poll方法时会认识到这些缺点并解决了大部分问题。因此您可能会问,是否有任何理由使用select？为什么不把它存放在计算机科学博物馆的架子上？然后你可能会高兴地知道是的,有两个原因,对你来说可能非常重要或根本不重要。</p><p>第一个原因是便携性。select已经存在很长时间了,你可以确定每个具有网络支持和非阻塞套接字的平台都有一个工作选择实现,而它可能根本没有轮询。不幸的是,我不是在谈论管和ENIAC; poll仅适用于Windows Vista及更高版本,其中包括Windows XP - 尽管有微软的压力,截至2013年9月仍有34％的用户使用此版本。另一个选择是仍然在这些平台上使用poll并使用select模拟它 那些没有它的人; 您是否认为合理的投资取决于您自己。</p><p>第二个原因是更具异国情调,并且与选择可以 - 理论上 - 以1纳秒的精度处理超时的事实有关,而poll和epoll都只能处理1毫秒的精度。这可能不是桌面或服务器系统的问题,时钟甚至不能以如此精确的速度运行,但在与某些硬件组件交互时可能需要在实时嵌入式平台上运行。如降低控制棒关闭核反应堆 - 在这种情况下,请使用选择,以确保我们都安全！</p><p>上面的情况可能是你必须使用select而不能使用其他任何东西的唯一情况。但是,如果您正在编写一个永远不必处理多个套接字（例如200）的应用程序,则使用poll和select之间的区别不是基于性能,而是基于个人偏好或其他因素。</p><h2 id="使用poll进行轮询"><a href="#使用poll进行轮询" class="headerlink" title="使用poll进行轮询"></a>使用poll进行轮询</h2><p>poll是一种较新的轮询方法,可能是在有人真正尝试编写高性能网络服务器之后立即创建的。它的设计要好得多,并且不会遇到大多数选择的问题。在绝大多数情况下,您将在poll和epoll / libevent之间进行选择。</p><p>要使用poll,开发人员需要初始化struct pollfd的成员具有要监视的描述符和事件的结构,并调用轮询（）。典型的工作流程如下：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// The structure for two events</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span>[2];</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Monitor sock1 for input</span></span><br><span class="line">fds[<span class="hljs-number">0</span>].fd = sock1;</span><br><span class="line">fds[<span class="hljs-number">0</span>].events = POLLIN;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Monitor sock2 for output</span></span><br><span class="line">fds[<span class="hljs-number">1</span>].fd = sock2;</span><br><span class="line">fds[<span class="hljs-number">1</span>].events = POLLOUT;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// Wait 10 seconds</span></span><br><span class="line"><span class="hljs-keyword">int</span> ret = poll( &amp;fds, <span class="hljs-number">2</span>, <span class="hljs-number">10000</span> );</span><br><span class="line"><span class="hljs-comment">//检查轮询是否实际成功</span></span><br><span class="line"><span class="hljs-keyword">if</span>（ret == <span class="hljs-number">-1</span>）</span><br><span class="line">    <span class="hljs-comment">//报告错误并中止</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>（ret == <span class="hljs-number">0</span>）</span><br><span class="line">    <span class="hljs-comment">// timeout; 任何情况下,检测到的</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="hljs-comment">//如果我们检测的情况下,零出来,所以我们可以重用该结构</span></span><br><span class="line">    <span class="hljs-keyword">if</span>（PFD [<span class="hljs-number">0</span>] .revents＆POLLIN）</span><br><span class="line">        PFD [<span class="hljs-number">0</span>] .revents = <span class="hljs-number">0</span>; </span><br><span class="line">        <span class="hljs-comment">//在sock1上输入事件</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>（pfd [<span class="hljs-number">1</span>] .revents＆POLLOUT）</span><br><span class="line">        pfd [<span class="hljs-number">1</span>] .revents = <span class="hljs-number">0</span>; </span><br><span class="line">        <span class="hljs-comment">//上sock2输出事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poll主要用于修复select has has的挂起问题,因此它具有以下优点：</p><ul><li>poll可以监视的描述符数量没有硬性限制,因此1024的限制不适用于此处。</li><li>它不会修改struct pollfd数据中传递的数据。因此,只要将生成事件的描述符的revents成员设置为零,就可以在poll（）调用之间重用它。 IEEE规范声明“在每个pollfd结构中,poll（）应清除revents成员,除了应用程序通过设置上面列出的事件之一请求报告条件,poll（）应设置相应的位如果请求的条件为真,则在revents中“。但是根据我的经验,至少有一个平台没有遵循这个建议,并且Linux上的man 2 poll也没有做出这样的保证（尽管 man 3 ppoll）。</li><li>与select相比,它允许更精细的事件控制。例如,它可以检测远程对等关闭,而无需监视读取事件。</li></ul><p>还存在一些缺点,这些缺点在选择部分的末尾已经提到过。值得注意的是,早于Vista的Microsoft Windows上不存在poll;在Vista及以上它被称为WSAPoll虽然原型是相同的,它可以简单地定义为：<br><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined (WIN32)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">poll</span><span class="hljs-params">( struct pollfd *pfd, <span class="hljs-keyword">int</span> nfds, <span class="hljs-keyword">int</span> timeout)</span> </span>&#123; <span class="hljs-keyword">return</span> WSAPoll ( pfd, nfds, timeout ); &#125;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>并且,如上所述,轮询超时具有1ms的精度,这在大多数情况下也不太可能成为问题。然而,poll仍有一些问题需要牢记：</p><ul><li>与select一样,仍然无法找出哪些描述符触发了事件而没有遍历整个列表并检查revents。更糟糕的是,内核空间也是如此,因为内核必须遍历文件描述符列表以找出受监视的套接字,并再次遍历整个列表以设置事件。</li><li>与select类似,无法动态修改集合或关闭正在轮询的套接字（参见上文）。</li></ul><p>但请记住,对于大多数客户端网络应用程序而言,这些问题可能被认为是不重要的 - 唯一的例外是P2P等客户端软件,可能需要处理数千个打开的连接。即使对于某些服务器应用程序,这些问题也许并不重要因此,除非您有上述具体原因,否则poll应该是您的默认选择。更多,如果以下情况属实,poll应该是您首选的方法,即使是epoll：</p><ul><li>您需要支持的不仅仅是Linux,并且不想使用像libevent这样的epoll包装器（epoll仅适用于Linux）;</li><li>您的应用程序需要一次监控少于1000个套接字（您不太可能看到使用epoll的任何好处）;</li><li>您的应用程序需要一次监视超过1000个套接字,但连接非常短暂（这是一个接近的情况,但很可能在这种情况下,您不太可能看到使用epoll的任何好处,因为加速将这些新描述符添加到集合中会浪费事件等待 - 见下文</li><li>您的应用程序的设计方式不是在另一个线程等待它们时更改事件（即您没有使用kqueue或IO完成端口移植应用程序）。</li></ul><h2 id="使用epoll进行轮询"><a href="#使用epoll进行轮询" class="headerlink" title="使用epoll进行轮询"></a>使用epoll进行轮询</h2><p>epoll是Linux（也是Linux）中最新,最好,最新的轮询方法。好吧,它实际上是在2002年添加到内核中的,所以它并不是那么新。它与poll和select不同,它保留了内核中当前监视的描述符和相关事件的信息,并导出API以添加/删除/修改它们。</p><p>要使用epoll,需要做更多的准备工作。开发人员需要：</p><ul><li>通过调用epoll_create创建epoll描述符;<br>使用所需事件和上下文数据指针初始化struct epoll结构。上下文可以是任何东西,epoll将此值直接传递给返回的事件结构。我们在那里存储了一个指向Connection类的指针。</li><li>调用epoll_ctl（… EPOLL_CTL_ADD）将描述符添加到监视集中</li><li>调用epoll_wait（）等待我们保留存储空间的20个事件。与以前的方法不同,此调用接收空结构,并仅使用触发事件填充它。例如,如果有200个描述符,其中5个具有待处理的事件,则epoll_wait将返回5,并且仅初始化pevents结构的前五个成员。如果50个描述符有待处理的事件,则前20个将被复制,30个将被留在队列中,它们不会丢失。</li><li>迭代返回的项目。这将是一个短暂的迭代,因为返回的唯一事件是被触发的事件。</li></ul><p>典型的工作流程如下：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//创建epoll描述符。每个应用程序只需要一个,并用于监视所有套接字。</span></span><br><span class="line"><span class="hljs-comment">//函数参数被忽略（它不是之前,但现在它是）,所以把你最喜欢的数字放在</span></span><br><span class="line"><span class="hljs-keyword">int</span> pollingfd = epoll_create（<span class="hljs-number">0xCAFE</span>）; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>（pollingfd &lt;<span class="hljs-number">0</span>）</span><br><span class="line"> <span class="hljs-comment">//报告错误</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//初始化epoll结构以防将来添加更多成员</span></span><br><span class="line">epoll_event ev = &#123;<span class="hljs-number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//将连接类实例与事件相关联。你可以关联任何</span></span><br><span class="line">你想要的东西,epoll不会使用这些信息。我们存储一个连接类指针,pConnection1 </span><br><span class="line">ev.data.ptr = pConnection1; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//监视输入,并且在事件发生后不自动重新设置描述符</span></span><br><span class="line">ev.events = EPOLLIN | EPOLLONESHOT;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//将描述符添加到监视列表中。我们可以做到这一点,即使另一个线程</span></span><br><span class="line"><span class="hljs-comment">//在epoll_wait中等待 - 将正确添加描述符</span></span><br><span class="line"><span class="hljs-keyword">if</span> ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1-&gt;<span class="hljs-built_in">getSocket</span>(), &amp;ev ) != <span class="hljs-number">0</span> )</span><br><span class="line">    <span class="hljs-comment">//报告错误</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//等等,将正确添加描述符最多20个事件（假设我们之前可能已经添加了200个套接字）</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">pevents</span> [20];</span> </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//等待10秒</span></span><br><span class="line"><span class="hljs-keyword">int</span> <span class="hljs-built_in">ready</span> = epoll_wait（pollingfd,pevents,<span class="hljs-number">20</span>,<span class="hljs-number">10000</span>）;</span><br><span class="line"><span class="hljs-comment">//检查epoll是否实际成功</span></span><br><span class="line"><span class="hljs-keyword">if</span>（ret == <span class="hljs-number">-1</span>）</span><br><span class="line">    <span class="hljs-comment">//报告错误并中止</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>（ret == <span class="hljs-number">0</span>）</span><br><span class="line">    <span class="hljs-comment">// timeout; 没有检测到事件</span></span><br><span class="line"><span class="hljs-keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="hljs-comment">//检查是否检测到任何事件</span></span><br><span class="line">    <span class="hljs-keyword">for</span> （<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;ret; i ++）</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="hljs-keyword">if</span>（pevents [i] .events＆EPOLLIN）</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="hljs-comment">//取回我们的连接指针</span></span><br><span class="line">            Connection * c =（连接*）pevents [i] .data.ptr; </span><br><span class="line">            C-&gt; handleReadEvent（）; </span><br><span class="line">         &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅仅看一下实施就应该给你一个epoll的缺点,我们将提到第一个。使用起来比较复杂,并且需要编写更多代码,与其他轮询方法相比,它需要更多的库调用。</p><p>然而,epoll在性能和功能方面比select / poll有一些明显的优势：</p><ul><li>epoll仅返回触发事件的描述符列表。无需再遍历10,000个描述符来找到触发事件的描述符！<br>您可以将有意义的上下文附加到受监视的事件而不是套接字文件描述符。在我们的示例中,我们附加了可以直接调用的类指针,从而节省了另一个查找。</li><li>即使epoll_wait函数中有另一个线程,您也可以随时添加套接字或将其从监视中删除。您甚至可以修改描述符事件。一切都会正常工作,这种行为得到支持和记录。这为您提供了更大的实施灵活性。</li><li>由于内核知道所有监视描述符,因此即使没有人调用epoll_wait,它也可以注册发生在它们上的事件。这允许实现诸如边缘触发之类的有趣特征,这将在单独的文章中描述。</li><li>使用epoll_wait（）可以让多个线程在同一个epoll队列上等待,这是select / poll无法做到的。实际上,不仅可以使用epoll,而且可以使用边缘触发模式中的推荐方法。</li></ul><p>但是你需要记住epoll不是一个“更好的poll”,与poll相比它也有缺点：</p><ul><li>更改事件标志（即从READ到WRITE）需要epoll_ctl系统调用,而在使用poll时,这是一个完全在用户空间完成的简单位掩码操作。使用epoll将5,000个套接字从读取切换到写入将需要5,000个系统调用,因此需要上下文切换（截至2014年调用epoll_ctl仍然无法进行批处理,并且每个描述符必须单独更改）,而在轮询中则需要单个循环pollfd结构。</li><li>每个accept（）ed套接字都需要添加到集合中,与上面相同,epoll必须通过调用epoll_ctl来完成- 这意味着每个新连接套接字有两个必需的系统调用,而不是一个用于轮询。如果您的服务器有许多短期连接可以发送或接收很少的流量,则epoll可能需要比轮询更长的时间才能为其提供服务。</li><li>epoll完全是Linux域,虽然其他平台有类似的机制,但它们并不完全相同 - 例如,边缘触发非常独特（FreeBSD的kqueue也支持它）。</li><li>高性能处理逻辑更复杂,因此更难以调试,特别是对于边缘触发,如果错过额外的读/写,则容易出现死锁。</li></ul><p>因此,如果满足以下条件,则只应使用epoll：</p><ul><li>您的应用程序运行线程轮询,通过少数线程处理许多网络连接。您将在单线程应用程序中失去大部分epoll权益,并且很可能不会超过poll。</li><li>你希望有相当数量的插座来监控（至少1000个）; 使用较少数量的epoll不太可能比poll具有任何性能优势,实际上可能会使性能更差;</li><li>你的关系相对长寿; 如上所述,在新连接发送几个字节的数据并且由于将描述符添加到epoll集所需的额外系统调用而立即断开连接的情况下,epoll将比轮询慢。</li><li>您的应用程序依赖于其他特定于Linux的功能（因此,如果突然弹出可移植性问题,epoll将不是唯一的障碍）,或者您可以为其他受支持的系统提供包装器。在最后一种情况下,你应该强烈考虑解放。</li></ul><p>如果上述所有项目均不正确,则应使用poll来更好地为您服务。</p><h2 id="使用libevent进行轮询"><a href="#使用libevent进行轮询" class="headerlink" title="使用libevent进行轮询"></a>使用libevent进行轮询</h2><p>libebent是一个库,它将本文（以及其他一些）中列出的轮询方法包装在统一的API中。它的主要优点是它允许您编写一次代码并在许多操作系统上编译和运行它而无需更改代码。重要的是要理解libevent它只是一个构建在现有轮询方法之上的包装器,因此它继承了轮询方法所具有的问题。它不会使Linux上的选择支持超过1024个套接字,或者允许epoll在没有系统调用/上下文切换的情况下修改轮询事件。因此,了解每种方法的优缺点仍然很重要。</p><p>必须提供对截然不同的方法的功能的访问,libevent有一个相当复杂的API,比poll或甚至epoll更难使用。然而,如果你需要支持FreeBSD（epoll和kqueue）,那么使用libevent比编写两个单独的后端更容易。因此,如果符合以下条件,则应考虑使用它</p><ul><li>您的申请要求表明您必须使用epoll,仅使用  poll是不够的（如果poll能够满足您的需求,那么libevent极不可能为您提供任何好处）</li><li>您需要支持除Linux之外的其他操作系统,或者可能期望将来出现这种需求。同样,这取决于您的应用程序的其他功能 - 如果它与许多其他特定于Linux的东西捆绑在一起,那么使用libevent而不是epoll将无法实现任何功能。</li></ul><p>原文 <a href="https://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/#Polling_with_select" target="_blank" rel="noopener">Select / poll / epoll: practical difference for system architects</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳跃表实现</title>
      <link href="/2019/06/02/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%B7%83%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/06/02/Algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%B7%83%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>跳跃列表是一种数据结构。它允许快速查询一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是O(log n),优于普通队列的O(n)。</p><a id="more"></a><h2 id="白话跳跃表"><a href="#白话跳跃表" class="headerlink" title="白话跳跃表"></a>白话跳跃表</h2><p>我们知道如果是普通的链表,查找为O(n),插入也会O(n),如果是数据量过大的情况下,肯定是无法忍受的,怎么办？给链表加索引,比如说给100个数里面随机给10个数加索引,如果索引分布均匀的话,那么时间复杂是不是最多查找11次？,如果11次还嫌长了怎么办？继续提升索引,提升索引这个比例我们设置为50%,这样可以保证索引在每一层都能分布均匀,且上一层的索引数,差不多是下一层的两倍。听我这样讲是不是感觉很像平衡树的样子,是不是过程看起来很像。</p><h2 id="跳跃表和平衡树的区别"><a href="#跳跃表和平衡树的区别" class="headerlink" title="跳跃表和平衡树的区别"></a>跳跃表和平衡树的区别</h2><p>跳跃列表不像平衡树等数据结构那样提供对最坏情况的性能保证：由于用来建造跳跃列表采用随机选取元素进入更高层的方法,在小概率情况下会生成一个不平衡的跳跃列表（最坏情况例如最底层仅有一个元素进入了更高层,此时跳跃列表的查找与普通列表一致）。但是在实际中它通常工作良好,随机化平衡方案也比平衡二叉查找树等数据结构中使用的确定性平衡方案容易实现。跳跃列表在并行计算中也很有用：插入可以在跳跃列表不同的部分并行地进行,而不用对数据结构进行全局的重新平衡。</p><h2 id="跳跃表实现原理"><a href="#跳跃表实现原理" class="headerlink" title="跳跃表实现原理"></a>跳跃表实现原理</h2><p><img src="https://redisbook.readthedocs.io/en/latest/_images/skiplist.png" alt="跳跃表"></p><p>从上面skiplist的创建和插入过程可以看出,每一个节点的层数（level）是随机出来的,而且新插入一个节点不会影响其它节点的层数。因此,插入操作只需要修改插入节点前后的指针,而不需要对很多节点都进行调整。这就降低了插入操作的复杂度。实际上,这是skiplist的一个很重要的特性,这让它在插入性能上明显优于平衡树</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面我粘贴的是维基百科的伪代码实现,具体实现过程和伪代码差不多,提升节点采用是50%概率提升,来保证跳表索引高度为 log n。</p><h3 id="伪代码如下"><a href="#伪代码如下" class="headerlink" title="伪代码如下"></a>伪代码如下</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">make all nodes level <span class="hljs-number">1</span></span><br><span class="line">j ← <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">while</span> the number of nodes at level j &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">do</span></span><br><span class="line">  <span class="hljs-keyword">for</span> each i<span class="hljs-string">'th node at level j do</span></span><br><span class="line"><span class="hljs-string">    if i is odd </span></span><br><span class="line"><span class="hljs-string">      if i is not the last node at level j</span></span><br><span class="line"><span class="hljs-string">        randomly choose whether to promote it to level j+1</span></span><br><span class="line"><span class="hljs-string">      else</span></span><br><span class="line"><span class="hljs-string">        do not promote</span></span><br><span class="line"><span class="hljs-string">      end if</span></span><br><span class="line"><span class="hljs-string">    else if i is even and node i-1 was not promoted</span></span><br><span class="line"><span class="hljs-string">      promote it to level j+1</span></span><br><span class="line"><span class="hljs-string">    end if</span></span><br><span class="line"><span class="hljs-string">  repeat</span></span><br><span class="line"><span class="hljs-string">  j ← j + 1</span></span><br><span class="line"><span class="hljs-string">repeat</span></span><br></pre></td></tr></table></figure><h3 id="使用-golang-实现跳跃表"><a href="#使用-golang-实现跳跃表" class="headerlink" title="使用 golang 实现跳跃表"></a>使用 golang 实现跳跃表</h3><p>node 节点</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> jumptable</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">key                   <span class="hljs-keyword">int</span></span><br><span class="line">value                 <span class="hljs-keyword">interface</span>&#123;&#125;</span><br><span class="line">up, down, left, right *Node</span><br><span class="line">level                 <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newNode</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>, v <span class="hljs-keyword">interface</span>&#123;&#125;)</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;Node&#123;</span><br><span class="line">key:   k,</span><br><span class="line">value: v,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *Node)</span> <span class="hljs-title">equals</span><span class="hljs-params">(node *Node)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n.key != node.key &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n.value != node.value &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> n.level != node.level &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳跃表</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> jumptable</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"math/rand"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> jumpTable <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">header *Node</span><br><span class="line"></span><br><span class="line">r *rand.Rand</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> *<span class="hljs-title">jumpTable</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> &amp;jumpTable&#123;</span><br><span class="line">r:      rand.New(rand.NewSource(time.Now().UnixNano())),</span><br><span class="line">header: newNode(-<span class="hljs-keyword">int</span>(^<span class="hljs-keyword">uint</span>(<span class="hljs-number">0</span>) &gt;&gt; <span class="hljs-number">1</span>), <span class="hljs-literal">nil</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(jt *jumpTable)</span> <span class="hljs-title">Search</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"walkPreviousNode"</span>)</span><br><span class="line">node, count := walkPreviousNode(jt.header, k)</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"共需要"</span>, count, <span class="hljs-string">"步"</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(jt *jumpTable)</span> <span class="hljs-title">Insert</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>, v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">sn := jt.header</span><br><span class="line">newN := newNode(k, v)</span><br><span class="line">node, _ := walkPreviousNode(sn, k)</span><br><span class="line"><span class="hljs-keyword">if</span> node.key == k &#123;</span><br><span class="line">node.value = v</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">currentLevel := <span class="hljs-number">0</span></span><br><span class="line">newN.level = currentLevel</span><br><span class="line">jt.setNode(newN, node)</span><br><span class="line">lowNode := newN</span><br><span class="line"><span class="hljs-keyword">for</span> jt.isPromotion() &#123;</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"isPromotion"</span>)</span><br><span class="line">currentLevel++</span><br><span class="line">upNewN := setUpNewDownNode(currentLevel, k, v, newN)</span><br><span class="line"><span class="hljs-keyword">if</span> jt.header.level &lt; currentLevel &#123;</span><br><span class="line">updateHeader(jt, upNewN)</span><br><span class="line">&#125;</span><br><span class="line">leftUpNode := findLeftUpNode(lowNode, upNewN)</span><br><span class="line"><span class="hljs-keyword">if</span> leftUpNode != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">jt.setNode(upNewN, leftUpNode)</span><br><span class="line">&#125;</span><br><span class="line">newN = upNewN</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateHeader</span><span class="hljs-params">(jt *jumpTable, upNew *Node)</span></span> &#123;</span><br><span class="line">jt.header = upNew</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setUpNewDownNode</span><span class="hljs-params">(level <span class="hljs-keyword">int</span>, k <span class="hljs-keyword">int</span>, v <span class="hljs-keyword">interface</span>&#123;&#125;, newN *Node)</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line">upNew := newNode(k, v)</span><br><span class="line">upNew.level = level</span><br><span class="line">newN.up = upNew</span><br><span class="line">upNew.down = newN</span><br><span class="line"><span class="hljs-keyword">return</span> upNew</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findLeftUpNode</span><span class="hljs-params">(newN *Node, upNew *Node)</span> *<span class="hljs-title">Node</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> leftUpNode *Node</span><br><span class="line">leftNewNode := newN.left</span><br><span class="line">leftBreak:</span><br><span class="line"><span class="hljs-keyword">for</span> leftNewNode != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">leftNewUpNode := leftNewNode.up</span><br><span class="line"><span class="hljs-keyword">for</span> leftNewUpNode != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> leftNewUpNode.level == upNew.level &#123;</span><br><span class="line">leftUpNode = leftNewUpNode</span><br><span class="line"><span class="hljs-keyword">break</span> leftBreak</span><br><span class="line">&#125;</span><br><span class="line">leftNewUpNode = leftNewUpNode.up</span><br><span class="line">&#125;</span><br><span class="line">leftNewNode = leftNewNode.left</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> leftUpNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// new 后面插入cur</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(jt *jumpTable)</span> <span class="hljs-title">setNode</span><span class="hljs-params">(q *Node, p *Node)</span></span> &#123;</span><br><span class="line">q.left = p</span><br><span class="line"><span class="hljs-keyword">if</span> p.right != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">q.right = p.right</span><br><span class="line">p.right.left = q</span><br><span class="line">&#125;</span><br><span class="line">p.right = q</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkPreviousNode</span><span class="hljs-params">(curNode *Node, k <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(*Node, <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"k:"</span>, k, <span class="hljs-string">" level"</span>, curNode.level)</span><br><span class="line">count := <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> curNode.key &lt; k &#123;</span><br><span class="line">count++</span><br><span class="line"><span class="hljs-keyword">if</span> curNode.right == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"curNode.key &lt; k "</span>, curNode.key, <span class="hljs-string">"--&gt;"</span>, curNode.right.key)</span><br><span class="line">curNode = curNode.right</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> curNode.key &gt; k &#123;</span><br><span class="line">count++</span><br><span class="line"><span class="hljs-keyword">if</span> curNode.left == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"curNode.key &gt; k "</span>, curNode.key, <span class="hljs-string">"--&gt;"</span>, curNode.left.key)</span><br><span class="line">curNode = curNode.left</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> curNode.down != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> newCount <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-built_in">println</span>(<span class="hljs-string">"curNode.down "</span>, curNode.key, <span class="hljs-string">"--&gt;"</span>, curNode.down.key)</span><br><span class="line">curNode, newCount = walkPreviousNode(curNode.down, k)</span><br><span class="line">count += newCount</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> curNode, count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(jt *jumpTable)</span> <span class="hljs-title">isPromotion</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line">n := jt.r.Intn(<span class="hljs-number">2</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试</p><figure class="highlight golang hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> jumptable</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"math/rand"</span></span><br><span class="line"><span class="hljs-string">"testing"</span></span><br><span class="line"><span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestJumpTable_Insert</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span> ;i &lt;<span class="hljs-number">1</span>;i++ &#123;</span><br><span class="line">table := New()</span><br><span class="line">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">table.Insert(<span class="hljs-number">13</span>, <span class="hljs-literal">nil</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;</span><br><span class="line">table.Insert(r.Intn(<span class="hljs-number">100000</span>), <span class="hljs-literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node := table.Search(<span class="hljs-number">13</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> node.key != <span class="hljs-number">13</span>&#123;</span><br><span class="line"><span class="hljs-built_in">panic</span>(<span class="hljs-string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">println</span>(node.key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>walkPreviousNodek: 13  level 12curNode.down  18542 --&gt; 18542k: 13  level 11curNode.down  18542 --&gt; 18542k: 13  level 10curNode.down  18542 --&gt; 18542k: 13  level 9curNode.down  18542 --&gt; 18542k: 13  level 8curNode.key &gt; k  18542 --&gt; 2659curNode.down  2659 --&gt; 2659k: 13  level 7curNode.down  2659 --&gt; 2659k: 13  level 6curNode.down  2659 --&gt; 2659k: 13  level 5curNode.down  2659 --&gt; 2659k: 13  level 4curNode.down  2659 --&gt; 2659k: 13  level 3curNode.key &gt; k  2659 --&gt; 1626curNode.down  1626 --&gt; 1626k: 13  level 2curNode.down  1626 --&gt; 1626k: 13  level 1curNode.key &gt; k  1626 --&gt; 1436curNode.down  1436 --&gt; 1436k: 13  level 0curNode.key &gt; k  1436 --&gt; 1270curNode.key &gt; k  1270 --&gt; 996curNode.key &gt; k  996 --&gt; 964curNode.key &gt; k  964 --&gt; 957curNode.key &gt; k  957 --&gt; 848curNode.key &gt; k  848 --&gt; 792curNode.key &gt; k  792 --&gt; 759curNode.key &gt; k  759 --&gt; 671curNode.key &gt; k  671 --&gt; 513curNode.key &gt; k  513 --&gt; 413curNode.key &gt; k  413 --&gt; 99curNode.key &gt; k  99 --&gt; 28curNode.key &gt; k  28 --&gt; 13共需要 28 步13</code></pre><p> 可以看见差不多时间复杂度是O(log n)</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 作为一种简单的数据结构,在大多数应用中Skip lists能够代替平衡树。Skiplists算法非常容易实现、扩展和修改。Skip lists和进行过优化的平衡树有着同样高的性能,Skip lists的性能远远超过未经优化的平衡二叉树。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) 编写可维护 Go 语言代码建议</title>
      <link href="/2019/05/31/Go/Golang%E8%AF%91%E6%96%87/%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4Go%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E5%BB%BA%E8%AE%AE/"/>
      <url>/2019/05/31/Go/Golang%E8%AF%91%E6%96%87/%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4Go%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-指导原则"><a href="#1-指导原则" class="headerlink" title="1. 指导原则"></a>1. 指导原则</h2><p>如果我要谈论任何编程语言的最佳实践,我需要一些方法来定义“什么是最佳”。如果你昨天来到我的主题演讲,你会看到 Go 团队负责人 Russ Cox 的这句话：</p><blockquote><p>Software engineering is what happens to programming when you add time and other programmers. (软件工程就是你和其他程序员花费时间在编程上所发生的事情。)<br>   — Russ Cox</p></blockquote><a id="more"></a><p>Russ 作出了软件编程与软件工程的区分。 前者是你自己写的一个程序。 后者是很多人会随着时间的推移而开发的产品。 工程师们来来去去,团队会随着时间增长与缩小,需求会发生变化,功能会被添加,错误也会得到修复。 这是软件工程的本质。</p><p>我可能是这个房间里 Go 最早的用户之一,~但要争辩说我的资历给我的看法更多是假的~。相反,今天我要提的建议是基于我认为的 Go 语言本身的指导原则：</p><ol><li>简单性</li><li>可读性</li><li>生产力</li></ol><blockquote><p>注意:<br>你会注意到我没有说性能或并发。 有些语言比 Go 语言快一点,但它们肯定不像 Go 语言那么简单。 有些语言使并发成为他们的最高目标,但它们并不具有可读性及生产力。<br>性能和并发是重要的属性,但不如简单性,可读性和生产力那么重要。</p></blockquote><h3 id="1-1-简单性"><a href="#1-1-简单性" class="headerlink" title="1.1. 简单性"></a>1.1. 简单性</h3><p>我们为什么要追求简单？ 为什么 Go 语言程序的简单性很重要？</p><p>我们都曾遇到过这样的情况: “我不懂这段代码”,不是吗？ 我们都做过这样的项目:你害怕做出改变,因为你担心它会破坏程序的另一部分; 你不理解的部分,不知道如何修复。</p><p>这就是复杂性。 复杂性把可靠的软件中变成不可靠。 复杂性是杀死软件项目的罪魁祸首。</p><p>简单性是 Go 语言的最高目标。 无论我们编写什么程序,我们都应该同意这一点:它们很简单。</p><h3 id="1-2-可读性"><a href="#1-2-可读性" class="headerlink" title="1.2. 可读性"></a>1.2. 可读性</h3><blockquote><p>Readability is essential for maintainability.<br> (可读性对于可维护性是至关重要的。)<br>    — Mark Reinhold (2018 JVM 语言高层会议)</p></blockquote><p>为什么 Go 语言的代码可读性是很重要的？我们为什么要争取可读性？</p><blockquote><p>Programs must be written for people to read, and only incidentally for machines to execute. (程序应该被写来让人们阅读,只是顺便为了机器执行。)<br> — Hal Abelson 与 Gerald Sussman (计算机程序的结构与解释)</p></blockquote><p>可读性很重要,因为所有软件不仅仅是 Go 语言程序,都是由人类编写的,供他人阅读。执行软件的计算机则是次要的。</p><p>代码的读取次数比写入次数多。一段代码在其生命周期内会被读取数百次,甚至数千次。</p><blockquote><p>The most important skill for a programmer is the ability to effectively communicate ideas. (程序员最重要的技能是有效沟通想法的能力。)<br>  — Gastón Jorquera <a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">[1]</a></p></blockquote><p>可读性是能够理解程序正在做什么的关键。如果你无法理解程序正在做什么,那你希望如何维护它？如果软件无法维护,那么它将被重写;最后这可能是你的公司最后一次投资 Go 语言。</p><p>~如果你正在为自己编写一个程序,也许它只需要运行一次,或者你是唯一一个曾经看过它的人,然后做任何对你有用的事。~但是,如果是一个不止一个人会贡献编写的软件,或者在很长一段时间内需求、功能或者环境会改变,那么你的目标必须是你的程序可被维护。</p><p>编写可维护代码的第一步是确保代码可读。</p><h3 id="1-3-生产力"><a href="#1-3-生产力" class="headerlink" title="1.3. 生产力"></a>1.3. 生产力</h3><blockquote><p>Design is the art of arranging code to work today, and be changeable forever. (设计是安排代码到工作的艺术,并且永远可变。)<br>— Sandi Metz</p></blockquote><p>我要强调的最后一个基本原则是生产力。开发人员的工作效率是一个庞大的主题,但归结为此; 你花多少时间做有用的工作,而不是等待你的工具或迷失在一个外国的代码库里。 Go 程序员应该觉得他们可以通过 Go 语言完成很多工作。</p><p>有人开玩笑说, Go 语言是在等待 C++ 语言程序编译时设计的。快速编译是 Go 语言的一个关键特性,也是吸引新开发人员的关键工具。虽然编译速度仍然是一个持久的战场,但可以说,在其他语言中需要几分钟的编译,在 Go 语言中只需几秒钟。这有助于 Go 语言开发人员感受到与使用动态语言的同行一样的高效,而且没有那些语言固有的可靠性问题。</p><p>对于开发人员生产力问题更为基础的是,Go 程序员意识到编写代码是为了阅读,因此将读代码的行为置于编写代码的行为之上。Go 语言甚至通过工具和自定义强制执行所有代码以特定样式格式化。这就消除了项目中学习特定格式的摩擦,并帮助发现错误,因为它们看起来不正确。</p><p>Go 程序员不会花费整天的时间来调试不可思议的编译错误。他们也不会将浪费时间在复杂的构建脚本或在生产中部署代码。最重要的是,他们不用花费时间来试图了解他们的同事所写的内容。</p><p>当他们说语言必须扩展时,Go 团队会谈论生产力。</p><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><p>我们要讨论的第一个主题是标识符。 标识符是一个用来表示名称的花哨单词; 变量的名称,函数的名称,方法的名称,类型的名称,包的名称等。</p><blockquote><p>Poor naming is symptomatic of poor design. — Dave Cheney 拙劣的名称是拙劣的设计的表征。</p></blockquote><p>鉴于 Go 的语法限制,我们为程序中的事物选择的名称对我们程序的可读性产生了过大的影响。良好的可读性是评判代码质量的关键,因此选择好名称对于 Go 代码的可读性至关重要。</p><h3 id="2-1-选择标识符是为了清晰-而不是简洁"><a href="#2-1-选择标识符是为了清晰-而不是简洁" class="headerlink" title="2.1. 选择标识符是为了清晰,而不是简洁"></a>2.1. 选择标识符是为了清晰,而不是简洁</h3><blockquote><p>Obvious code is important. What you can do in one line you should do in three. — Ukiah Smith 代码要明确这很重要,您在一行中能做的事,应该拆到三行里做。</p></blockquote><p>Go 不是专注于将代码精巧优化为一行的那种语言,Go 也不是致力于将代码精炼到最小行数的语言。我们并不追求源码在磁盘上占用的空间更少,也不关心录入代码需要多长时间。</p><blockquote><p>Good naming is like a good joke. If you have to explain it, it’s not funny.<br> (好的命名就像一个好笑话。如果你必须解释它,那就不好笑了。)<br>— Dave Cheney</p></blockquote><p>清晰的关键是在 Go 语言程序中我们选择的标识名称。让我们谈一谈所谓好的名字：</p><ul><li><p><strong>好的名字很简洁。</strong> 好的名字不一定是最短的名字,但好的名字不会浪费在无关的东西上。好名字具有高的信噪比。</p></li><li><p><strong>好的名字是描述性的。</strong> 好的名字会描述变量或常量的应用,而不是它们的内容。好的名字应该描述函数的结果或方法的行为,而不是它们的操作。好的名字应该描述包的目的而非它的内容。描述东西越准确的名字就越好。</p></li><li><p><strong>好的名字应该是可预测的。</strong> 你能够从名字中推断出使用方式。~这是选择描述性名称的功能,但它也遵循传统。~这是 Go 程序员在谈到习惯用语时所谈论的内容。</p></li></ul><p>让我们深入讨论以下这些属性。</p><h3 id="2-2-标识符长度"><a href="#2-2-标识符长度" class="headerlink" title="2.2. 标识符长度"></a>2.2. 标识符长度</h3><p>有时候人们批评 Go 语言推荐短变量名的风格。正如 Rob Pike 所说,“ Go 程序员想要正确的长度的标识符”。 <a href="https://www.lysator.liu.se/c/pikestyle.html" target="_blank" rel="noopener">1</a></p><p>Andrew Gerrand 建议通过对某些事物使用更长的标识,向读者表明它们具有更高的重要性。</p><blockquote><p>The greater the distance between a name’s declaration and its uses, the longer the name should be. (名字的声明与其使用之间的距离越大,名字应该越长。)<br> — Andrew Gerrand <a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">[2]</a></p></blockquote><p>由此我们可以得出一些指导方针：</p><ul><li>短变量名称在声明和上次使用之间的距离很短时效果很好。</li><li>长变量名需要证明其不同的合理性：越长的变量名,越需要更多的理由来证明其合理。冗长、繁琐的名称与他们在页面上的权重相比,携带的信息很低。</li><li>请勿在变量名称中包含类型名称。</li><li>常量应该描述它们持有的值,而不是该如何使用。</li><li>对于循环和分支使用单字母变量,参数和返回值使用单个字,函数和包级别声明使用多个单词。</li><li>单词可用于方法、接口和包。</li><li>请记住,包的名称是调用者用来引用名称的一部分,因此要好好利用这一点。</li></ul><p>我们来举个栗子:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Name <span class="hljs-keyword">string</span></span><br><span class="line">Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// AverageAge returns the average age of people.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AverageAge</span><span class="hljs-params">(people []Person)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(people) == <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> count, sum <span class="hljs-keyword">int</span></span><br><span class="line"><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> people &#123;</span><br><span class="line">sum += p.Age</span><br><span class="line">count += <span class="hljs-number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> sum / count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在此示例中,变量<code>p</code>的在第<code>10</code>行被声明并且也只在接下来的一行中被引用。<code>p</code>在执行函数期间存在时间很短。如果要了解<code>p</code>的作用只需阅读两行代码。</p><p>相比之下,<code>people</code>在函数第<code>7</code>行参数中被声明。<code>sum</code>和<code>count</code>也是如此,他们用了更长的名字。读者必须查看更多的行数来定位它们,因此他们名字更为独特。</p><p>我可以选择<code>s</code>替代<code>sum</code>以及<code>c</code>（或可能是<code>n</code>）替代<code>count</code>,但是这样做会将程序中的所有变量份量降低到同样的级别。我可以选择<code>p</code>来代替<code>people</code>,但是用什么来调用<code>for ... range</code>迭代变量。如果用<code>person</code>的话看起来很奇怪,生存时间极短命名却比导出它的那个值更长。</p><blockquote><p>Austin Luo：这里说的是,若数组<code>people</code>用变量名<code>p</code>,那么从数组中获取的每一个元素取名就成了问题,比如用<code>person</code>,即使使用<code>person</code>看起来也很奇怪,一方面是单数,一方面<code>person</code>的生存周期只有两行（很短）,命名比生存周期更长的<code>p</code>（<code>people</code>）还长了。</p><p>小窍门：跟使用空行在文档中分段一样,使用空行将函数执行过程分段。在函数<code>AverageAge</code>中有按顺序的三个操作。第一个是先决条件,检查当<code>people</code>为空时我们不会除零,第二个是累加总和和计数,最后一个是计算平均数。</p></blockquote><h3 id="2-2-1-上下文是关键"><a href="#2-2-1-上下文是关键" class="headerlink" title="2.2.1. 上下文是关键"></a>2.2.1. 上下文是关键</h3><p>重要的是要意识到关于命名的大多数建议都是需要考虑上下文的。 我想说这是一个原则,而不是一个规则。</p><p>两个标识符<code>i</code>和<code>index</code>之间有什么区别。 我们不能断定一个就比另一个好,例如</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> index := <span class="hljs-number">0</span>; index &lt; <span class="hljs-built_in">len</span>(s); index++ &#123;</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的可读性,基本上都会认为比下面这段要强：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我认为它不是,因为就此事而论,<code>i</code>和<code>index</code>的范围很大可能上仅限于 for 循环的主体,后者的额外冗长性(指<code>index</code>)几乎没有增加对于程序的理解。</p><p>但是,哪些功能更具可读性？</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SNMP)</span> <span class="hljs-title">Fetch</span><span class="hljs-params">(oid []<span class="hljs-keyword">int</span>, index <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SNMP)</span> <span class="hljs-title">Fetch</span><span class="hljs-params">(o []<span class="hljs-keyword">int</span>, i <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>在此示例中,<code>oid</code>是<code>SNMP</code>对象<code>ID</code>的缩写,因此将其缩短为<code>o</code>意味着程序员必须要将文档中常用符号转换为代码中较短的符号。 类似地将<code>index</code>替换成<code>i</code>,模糊了<code>i</code>所代表的含义,因为在<code>SNMP</code>消息中,每个<code>OID</code>的子值称为索引。</p><blockquote><p>小窍门：在参数声明中不要混用长、短不同的命名风格。</p></blockquote><h3 id="2-3-命名中不要包含所属类型的名称"><a href="#2-3-命名中不要包含所属类型的名称" class="headerlink" title="2.3. 命名中不要包含所属类型的名称"></a>2.3. 命名中不要包含所属类型的名称</h3><p>正如您给宠物取名一样,您会给狗取名“汪汪”,给猫取名为“咪咪”,但不会取名为“汪汪狗”、“咪咪猫”。出于同样的原因,您也不应在变量名称中包含其类型的名称。</p><p>变量命名应该体现它的内容,而不是类型。我们来看下面这个例子：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> usersMap <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*User</span><br></pre></td></tr></table></figure><p>这个声明有什么好处？ 我们可以看到它是一个<code>map</code>,它与<code>*User</code>类型有关。 但是<code>usersMap</code>是一个<code>map</code>,而 Go 语言是一种静态类型的语言,如果没有定义变量,它并不会允许我们在需要标量变量的地方意外地使用到这个变量,因此<code>Map</code>后缀是多余的。</p><p>接下来, 如果我们像这样来声明其他变量：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">companiesMap <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*Company</span><br><span class="line">productsMap <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*Products</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>usersMap</code>,<code>companiesMap</code>和<code>productsMap</code>三个<code>map</code>类型变量,所有映射字符串都是不同的类型。 我们知道它们是<code>map</code>,我们也知道我们不能使用其中一个来代替另一个 - 如果我们在需要<code>map[string]*User</code>的地方尝试使用<code>companiesMap</code>, 编译器将抛出错误异常。 在这种情况下,很明显变量中<code>Map</code>后缀并没有提高代码的清晰度,它只是增加了要输入的额外样板代码。</p><p>我的建议是避免使用任何类似变量类型的后缀。</p><blockquote><p>小窍门:如果<code>users</code>的描述性都不够用,那么<code>usersMap</code>也不会。</p></blockquote><p>此建议也适用于函数参数。 例如：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteConfig</span><span class="hljs-params">(w io.Writer, config *Config)</span></span></span><br></pre></td></tr></table></figure><br>命名<code>*Config</code>参数<code>config</code>是多余的。 我们知道它是<code>*Config</code>类型,就是这样。</p><p>在这种情况下,如果变量的生命周期足够短,请考虑使用<code>conf</code>或<code>c</code>。</p><p>如果有更多的<code>*Config</code>,那么将它们称为<code>original</code>和<code>updated</code>比<code>conf1</code>和<code>conf2</code>会更具描述性,因为前者不太可能被互相误解。</p><blockquote><p>NOTE：<br>不要让包名占用了更适合变量的名称。</p></blockquote><p>导入标识符的名称包括其包名称。 例如,<code>context</code>包中的<code>Context</code>类型将被称为<code>context.Context</code>。 这使得无法将<code>context</code>用作包中的变量或类型。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteLog</span><span class="hljs-params">(context context.Context, message <span class="hljs-keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>上面的栗子将会编译出错。 这就是为什么<code>context.Context</code>类型的通常的本地声明是<code>ctx</code>,例如：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteLog</span><span class="hljs-params">(ctx context.Context, message <span class="hljs-keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-4-使用一致的命名方式"><a href="#2-4-使用一致的命名方式" class="headerlink" title="2.4. 使用一致的命名方式"></a>2.4. 使用一致的命名方式</h3><p>一个好名字的另一个属性是它应该是可预测的。 在第一次遇到该名字时读者就能够理解名字的使用。 当他们遇到常见的名字时,他们应该能够认为自从他们上次看到它以来它没有改变意义。</p><p>例如,如果您的代码在处理数据库请确保每次出现参数时,它都具有相同的名称。 与其使用<code>d * sql.DB</code>,<code>dbase * sql.DB</code>,<code>DB * sql.DB</code>和<code>database * sql.DB</code>的组合,倒不如统一使用:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db *sql.DB</span><br></pre></td></tr></table></figure><p>这样做使读者更为熟悉; 如果你看到<code>db</code>,你知道它就是<code>*sql.DB</code>并且它已经在本地声明或者由调用者为你提供。</p><p>类似地,对于方法接收器: 在该类型的每个方法上使用相同的接收者名称。 在这种类型的方法内部可以使读者更容易使用。</p><blockquote><p>注意:<br>Go 中对接收者的短命名规则惯例与目前提供的建议不一致。这只是早期做出的选择之一,并且已经成为首选的风格,就像使用<code>CamelCase</code>而不是<code>snake_case</code>一样。</p></blockquote><blockquote><p>小窍门：Go 的命名风格规定接收器具有单个字母名称或其派生类型的首字母缩略词。有时您可能会发现接收器的名称有时会与方法中参数的名称冲突,在这种情况下,请考虑使参数名称稍长,并且仍然不要忘记一致地使用这个新名称。</p></blockquote><p>最后,某些单字母变量传统上与循环和计数相关联。 例如,<code>i</code>,<code>j</code>和<code>k</code>通常是简单<code>for</code>循环的循环归纳变量。<code>n</code>通常与计数器或累加器相关联。<code>v</code>是通用编码函数中值的常用简写,<code>k</code>通常用于<code>map</code>的键,<code>s</code>通常用作字符串类型参数的简写。</p><p>与上面的<code>db</code>示例一样,程序员认为<code>i</code>是一个循环归纳变量。 如果确保<code>i</code>始终是循环变量,而且不在<code>for</code>循环之外的其他地方中使用。 当读者遇到一个名为<code>i</code>或<code>j</code>的变量时,他们知道循环就在附近。</p><blockquote><p>小窍门:如果你发现自己有如此多的嵌套循环,<code>i</code>,<code>j</code>和<code>k</code>变量都无法满足时,这个时候可能就是需要将函数分解成更小的函数。</p></blockquote><h3 id="2-5-使用一致的声明样式"><a href="#2-5-使用一致的声明样式" class="headerlink" title="2.5. 使用一致的声明样式"></a>2.5. 使用一致的声明样式</h3><p>Go 至少有六种不同的方式来声明变量</p><p><em><code>var x int = 1</code></em><code>var x = 1</code><br><em><code>var x int; x = 1</code></em><code>var x = int(1)</code><br>*<code>x := 1</code></p><p>我确信还有更多我没有想到的。 这可能是 Go 语言的设计师意识到的一个错误,但现在改变它为时已晚。 通过所有这些不同的方式来声明变量,我们如何避免每个 Go 程序员选择自己的风格？</p><p>我想就如何在程序中声明变量提出建议。 这是我尽可能使用的风格。</p><ul><li><p><strong>声明变量但没有初始化时,请使用<code>var</code>。</strong> 当声明变量稍后将在函数中初始化时,请使用<code>var</code>关键字。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> players <span class="hljs-keyword">int</span>    <span class="hljs-comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> things []Thing <span class="hljs-comment">// an empty slice of Things</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> thing Thing    <span class="hljs-comment">// empty Thing struct</span></span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure><p><code>var</code>表示此变量已被声明为指定类型的零值。 这也与使用<code>var</code>而不是短声明语法在包级别声明变量的要求一致 - 尽管我稍后会说你根本不应该使用包级变量。</p></li><li><p><strong>在声明和初始化时,使用<code>:=</code>。</strong> 在同时声明和初始化变量时,也就是说我们不会将变量初始化为零值,我建议使用短变量声明。 这使得读者清楚地知道<code>:=</code>左侧的变量是初始化过的。</p></li></ul><p>为了解释原因,让我们看看前面的例子,但这次是初始化每个变量：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> players <span class="hljs-keyword">int</span> = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> things []Thing = <span class="hljs-literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> thing *Thing = <span class="hljs-built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><br>在第一个和第三个例子中,因为在 Go 语言中没有从一种类型到另一种类型的自动转换; 赋值运算符左侧的类型必须与右侧的类型相同。 编译器可以从右侧的类型推断出声明的变量的类型,上面的例子可以更简洁地写为：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> players = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> things []Thing = <span class="hljs-literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> thing = <span class="hljs-built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p>我们将<code>players</code>初始化为<code>0</code>,但这是多余的,因为<code>0</code>是<code>players</code>的零值。 因此,要明确地表示使用零值, 我们将上面例子改写为:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> players <span class="hljs-keyword">int</span></span><br></pre></td></tr></table></figure><br>第二个声明如何？ 我们不能省略类型而写作:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> things = <span class="hljs-literal">nil</span></span><br></pre></td></tr></table></figure><br>因为<code>nil</code>没有类型。 <a href="https://speakerdeck.com/campoy/understanding-nil" target="_blank" rel="noopener">[2]</a>相反,我们有一个选择,如果我们要使用切片的零值则写作:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> things []Thing</span><br></pre></td></tr></table></figure><br>或者我们要创建一个有零元素的切片则写作:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> things = <span class="hljs-built_in">make</span>([]Thing, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><br>如果我们想要后者那么这不是切片的零值,所以我们应该向读者说明我们通过使用简短的声明形式做出这个选择：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">things := <span class="hljs-built_in">make</span>([]Thing, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><br>这告诉读者我们已选择明确初始化事物。</p><p>下面是第三个声明,<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> thing = <span class="hljs-built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><br>既是初始化了变量又引入了一些 Go 程序员不喜欢的<code>new</code>关键字的罕见用法。 如果我们用推荐地简短声明语法,那么就变成了:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := <span class="hljs-built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><p>这清楚地表明<code>thing</code>被初始化为<code>new(Thing)</code>的结果 - 一个指向<code>Thing</code>的指针 - 但依旧我们使用了<code>new</code>地罕见用法。 我们可以通过使用紧凑的文字结构初始化形式来解决这个问题,<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := &amp;Thing&#123;&#125;</span><br></pre></td></tr></table></figure><br>与<code>new(Thing)</code>相同,这就是为什么一些 Go 程序员对重复感到不满。 然而,这意味着我们使用指向<code>Thing{}</code>的指针初始化了<code>thing</code>,也就是<code>Thing</code>的零值。</p><p>相反,我们应该认识到<code>thing</code>被声明为零值,并使用地址运算符将<code>thing</code>的地址传递给<code>json.Unmarshall</code><br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> thing Thing</span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure></p><blockquote><p>小窍门:当然,任何经验法则,都有例外。 例如,有时两个变量密切相关,这样写会很奇怪:</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> min <span class="hljs-keyword">int</span></span><br><span class="line">max := <span class="hljs-number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>如果这样声明可能更具可读性</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min, max := <span class="hljs-number">0</span>, <span class="hljs-number">1000</span></span><br></pre></td></tr></table></figure><p>综上所述：</p><p>在没有初始化的情况下声明变量时,请使用<code>var</code>语法。</p><p>声明并初始化变量时,请使用<code>:=</code>。</p><blockquote><p>小窍门:<br>使复杂的声明显而易见。<br>当事情变得复杂时,它看起来就会很复杂。例如</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> length <span class="hljs-keyword">uint32</span> = <span class="hljs-number">0x80</span></span><br></pre></td></tr></table></figure><blockquote><p>这里<code>length</code>可能要与特定数字类型的库一起使用,并且<code>length</code>明确选择为<code>uint32</code>类型而不是短声明形式：</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length := <span class="hljs-keyword">uint32</span>(<span class="hljs-number">0x80</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在第一个例子中,我故意违反了规则, 使用<code>var</code>声明带有初始化变量的。 这个决定与我的常用的形式不同,这给读者一个线索,告诉他们一些不寻常的事情将会发生。</p></blockquote><h3 id="2-6-成为团队合作者"><a href="#2-6-成为团队合作者" class="headerlink" title="2.6. 成为团队合作者"></a>2.6. 成为团队合作者</h3><p>我谈到了软件工程的目标,即编写可读及可维护的代码。 因此,您可能会将大部分职业生涯用于你不是唯一作者的项目。 我在这种情况下的建议是遵循项目自身风格。</p><p>在文件中间更改样式是不和谐的。 即使不是你喜欢的方式,对于维护而言一致性比你的个人偏好更有价值。 我的经验法则是: 如果它通过了<code>gofmt</code>,那么通常不值得再做代码审查。</p><blockquote><p>小窍门:如果要在代码库中进行重命名,请不要将其混合到另一个更改中。 如果有人使用<code>git bisect</code>,他们不想通过数千行重命名来查找您更改的代码。</p></blockquote><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3. 注释"></a>3. 注释</h2><p>在我们继续讨论更大的项目之前,我想花几分钟时间谈论一下注释。</p><blockquote><p>Good code has lots of comments, bad code requires lots of comments.<br>(好的代码有很多注释,坏代码需要很多注释。)<br> — Dave Thomas and Andrew Hunt (The Pragmatic Programmer)</p></blockquote><p>代码注释对 Go 程序的可读性极为重要。一个注释应该做到如下三个方面的至少一个：</p><ol><li>注释应该解释“做什么”。</li><li>注释应该解释“怎么做的”。</li><li>注释应该解释“为什么这么做”。</li></ol><p>第一种形式是公共符号注释的理想选择：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Open opens the named file for reading.</span></span><br><span class="line"><span class="hljs-comment">// If successful, methods on the returned file can be used for reading.</span></span><br></pre></td></tr></table></figure><br>第二种形式非常适合在方法中注释：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// queue all dependant actions</span></span><br><span class="line"><span class="hljs-keyword">var</span> results []<span class="hljs-keyword">chan</span> error</span><br><span class="line"><span class="hljs-keyword">for</span> _, dep := <span class="hljs-keyword">range</span> a.Deps &#123;</span><br><span class="line">        results = <span class="hljs-built_in">append</span>(results, execute(seen, dep))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三种形式是独一无二的,因为它不会取代前两种形式,但与此同时它并不能代替前两种形式。 此形式的注解用以解释代码的外部因素。 这些因素脱离上下文后通常很难理解,此注释的为了提供这种上下文。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> &amp;v2.Cluster_CommonLbConfig&#123;</span><br><span class="line"><span class="hljs-comment">// Disable HealthyPanicThreshold</span></span><br><span class="line">        HealthyPanicThreshold: &amp;envoy_type.Percent&#123;</span><br><span class="line">        Value: <span class="hljs-number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中,无法清楚地明白<code>HealthyPanicThreshold</code>设置为零百分比的效果。 需要注释<code>0</code>值将禁用<code>panic</code>阀值。</p><h3 id="3-1-关于变量和常量的注释应描述其内容而非其目的"><a href="#3-1-关于变量和常量的注释应描述其内容而非其目的" class="headerlink" title="3.1. 关于变量和常量的注释应描述其内容而非其目的"></a>3.1. 关于变量和常量的注释应描述其内容而非其目的</h3><p>我之前谈过,变量或常量的名称应描述其目的。 向变量或常量添加注释时,该注释应描述变量内容,而不是变量目的。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> randomNumber = <span class="hljs-number">6</span> <span class="hljs-comment">// determined from an unbiased die</span></span><br></pre></td></tr></table></figure><p>在此示例中,注释描述了为什么<code>randomNumber</code>被赋值为6,以及6来自哪里。 注释没有描述<code>randomNumber</code>的使用位置。 还有更多的栗子：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> (</span><br><span class="line">    StatusContinue           = <span class="hljs-number">100</span> <span class="hljs-comment">// RFC 7231, 6.2.1</span></span><br><span class="line">    StatusSwitchingProtocols = <span class="hljs-number">101</span> <span class="hljs-comment">// RFC 7231, 6.2.2</span></span><br><span class="line">    StatusProcessing         = <span class="hljs-number">102</span> <span class="hljs-comment">// RFC 2518, 10.1</span></span><br><span class="line"></span><br><span class="line">    StatusOK                 = <span class="hljs-number">200</span> <span class="hljs-comment">// RFC 7231, 6.3.1</span></span><br></pre></td></tr></table></figure><br>在HTTP的上下文中,数字<code>100</code>被称为<code>StatusContinue</code>,如 RFC 7231 第 6.2.1 节中所定义。</p><blockquote><p>小窍门:对于没有初始值的变量,注释应描述谁负责初始化此变量。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// sizeCalculationDisabled indicates whether it is safe</span></span><br><span class="line"><span class="hljs-comment">// to calculate Types' widths and alignments. See dowidth.</span></span><br><span class="line"><span class="hljs-keyword">var</span> sizeCalculationDisabled <span class="hljs-keyword">bool</span></span><br></pre></td></tr></table></figure><p> 这里的注释让读者知道<code>dowidth</code>函数负责维护<code>sizeCalculationDisabled</code>的状态。</p><p><strong>隐藏一目了然的东西 </strong></p><p>这个提示来自Kate Gregory<a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">[3]</a>。有时你会发现一个更好的变量名称隐藏在注释中。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// registry of SQL drivers</span></span><br><span class="line"><span class="hljs-keyword">var</span> registry = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*sql.Driver)</span><br></pre></td></tr></table></figure></p><p>注释是由作者添加的,因为<code>registry</code>没有充分解释其目的 - 它是一个注册表,但注册的是什么？</p><p>通过将变量重命名为<code>sqlDrivers</code>,现在可以清楚地知道此变量的目的是保存SQL驱动程序。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> sqlDrivers = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*sql.Driver)</span><br></pre></td></tr></table></figure><p>现在注释已经多余了,可以移除。</p><h3 id="3-2-总是为公开符号写文档说明"><a href="#3-2-总是为公开符号写文档说明" class="headerlink" title="3.2. 总是为公开符号写文档说明"></a>3.2. 总是为公开符号写文档说明</h3><p><code>godoc</code>是包的文档,所以应该始终为包中声明的每个公共符号 —​ 变量、常量、函数以及方法添加注释。</p><p>以下是<code>Google Style</code>指南中的两条规则:</p><ul><li>任何既不明显也不简短的公共功能必须予以注释。</li><li>无论长度或复杂程度如何,对库中的任何函数都必须进行注释</li></ul><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> ioutil</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="hljs-comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="hljs-comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="hljs-comment">// as an error to be reported.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadAll</span><span class="hljs-params">(r io.Reader)</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>这条规则有一个例外; 您不需要注释实现接口的方法。 具体不要像下面这样做：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Read implements the io.Reader interface</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *FileReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>这个注释什么也没说。 它没有告诉你这个方法做了什么,更糟糕是它告诉你去看其他地方的文档。 在这种情况下,我建议完全删除该注释。</p><p>这是<code>io</code>包中的一个例子</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// LimitReader returns a Reader that reads from r</span></span><br><span class="line"><span class="hljs-comment">// but stops with EOF after n bytes.</span></span><br><span class="line"><span class="hljs-comment">// The underlying implementation is a *LimitedReader.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LimitReader</span><span class="hljs-params">(r Reader, n <span class="hljs-keyword">int64</span>)</span> <span class="hljs-title">Reader</span></span> &#123; <span class="hljs-keyword">return</span> &amp;LimitedReader&#123;r, n&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A LimitedReader reads from R but limits the amount of</span></span><br><span class="line"><span class="hljs-comment">// data returned to just N bytes. Each call to Read</span></span><br><span class="line"><span class="hljs-comment">// updates N to reflect the new amount remaining.</span></span><br><span class="line"><span class="hljs-comment">// Read returns EOF when N &lt;= 0 or when the underlying R returns EOF.</span></span><br><span class="line"><span class="hljs-keyword">type</span> LimitedReader <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">R Reader <span class="hljs-comment">// underlying reader</span></span><br><span class="line">N <span class="hljs-keyword">int64</span>  <span class="hljs-comment">// max bytes remaining</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *LimitedReader)</span> <span class="hljs-title">Read</span><span class="hljs-params">(p []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> l.N &lt;= <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(p)) &gt; l.N &#123;</span><br><span class="line">p = p[<span class="hljs-number">0</span>:l.N]</span><br><span class="line">&#125;</span><br><span class="line">n, err = l.R.Read(p)</span><br><span class="line">l.N -= <span class="hljs-keyword">int64</span>(n)</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意,<code>LimitedReader</code>的声明就在使用它的函数之前,而<code>LimitedReader.Read</code>的声明遵循<code>LimitedReader</code>本身的声明。 尽管<code>LimitedReader.Read</code>本身没有文档,但它清楚地表明它是<code>io.Reader</code>的一个实现。</p><blockquote><p>小窍门:在编写函数之前,请编写描述函数的注释。 如果你发现很难写出注释,那么这就表明你将要编写的代码很难理解。</p></blockquote><h3 id="3-2-1-不要为坏的代码写注释-重写它"><a href="#3-2-1-不要为坏的代码写注释-重写它" class="headerlink" title="3.2.1. 不要为坏的代码写注释,重写它"></a>3.2.1. 不要为坏的代码写注释,重写它</h3><blockquote><p>Don’t comment bad code — rewrite it<br>   — Brian Kernighan</p><p>不要为坏的代码写注释——重写它</p></blockquote><p>为粗制滥造的代码片段着重写注释是不够的,如果您遭遇到一段这样的注释,您应该发起一个问题（issue）从而记得后续重构它。技术债务只要不是过多就没有关系。</p><p>标准库中的惯例是注意到它的人用<code>TODO(username)</code>的样式来注释。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// TODO(dfc) this is O(N^2), find a faster way to do this.</span></span><br></pre></td></tr></table></figure><p>注释中的姓名并不意味着承诺去修复问题,但在解决问题时,他可能是最合适的人选。其他批注内容一般还有日期或者问题编号。</p><h3 id="3-2-2-与其为一大段代码写注释-不如重构它"><a href="#3-2-2-与其为一大段代码写注释-不如重构它" class="headerlink" title="3.2.2. 与其为一大段代码写注释,不如重构它"></a>3.2.2. 与其为一大段代码写注释,不如重构它</h3><blockquote><p>Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’ Improve the code and then document it to make it even clearer.<br>好的代码是最好的文档。 在即将添加注释时,请问下自己,“如何改进代码以便不需要此注释？’ 改进代码使其更清晰。<br> — Steve McConnell</p></blockquote><p>函数应该只做一件事。如果您发现一段代码因为与函数的其他部分不相关因而需要注释时,考虑将这段代码拆分为独立的函数。</p><p>除了更容易理解之外,较小的函数更容易单独测试,现在您将不相关的代码隔离拆分到不同的函数中,估计只有函数名才是唯一需要的文档注释了。</p><h2 id="4-包的设计"><a href="#4-包的设计" class="headerlink" title="4. 包的设计"></a>4. 包的设计</h2><blockquote><p>Write shy code - modules that don’t reveal anything unnecessary to other modules and that don’t rely on other modules’ implementations.<br>编写谨慎的代码 - 不向其他模块透露任何不必要的模块,并且不依赖于其他模块的实现。<br> — Dave Thomas</p></blockquote><p>每个 Go 语言的包实际上都是它一个小小的 Go 语言程序。 正如函数或方法的实现对调用者而言并不重要一样,包的公共API-其函数、方法以及类型的实现对于调用者来说也并不重要。</p><p>一个好的 Go 语言包应该具有低程度的源码级耦合,这样,随着项目的增长,对一个包的更改不会跨代码库级联。 这些世界末日的重构严格限制了代码库的变化率以及在该代码库中工作的成员的生产率。</p><p>在本节中,我们将讨论如何设计包,包括包的名称,命名类型以及编写方法和函数的技巧。</p><h3 id="4-1-一个好的包从它的名字开始"><a href="#4-1-一个好的包从它的名字开始" class="headerlink" title="4.1. 一个好的包从它的名字开始"></a>4.1. 一个好的包从它的名字开始</h3><p>编写一个好的 Go 语言包从包的名称开始。将你的包名用一个词来描述它。</p><p>正如我在上一节中谈到变量的名称一样,包的名称也非常重要。我遵循的经验法则不是“我应该在这个包中放入什么类型的？”。相反,我要问是“该包提供的服务是什么？”通常这个问题的答案不是“这个包提供<code>X</code>类型”,而是“这个包提供<code>HTTP</code>”。</p><blockquote><p>小窍门:以包所提供的内容来命名,而不是它包含的内容。</p></blockquote><h3 id="4-1-1-好的包名应该是唯一的。"><a href="#4-1-1-好的包名应该是唯一的。" class="headerlink" title="4.1.1. 好的包名应该是唯一的。"></a>4.1.1. 好的包名应该是唯一的。</h3><p>在项目中,每个包名称应该是唯一的。包的名称应该描述其目的的建议很容易理解 - 如果你发现有两个包需要用相同名称,它可能是:</p><ol><li>包的名称太通用了。</li><li>该包与另一个类似名称的包重叠了。在这种情况下,您应该检查你的设计,或考虑合并包。</li></ol><h3 id="4-2-避免使用类似base-common或util的包名称"><a href="#4-2-避免使用类似base-common或util的包名称" class="headerlink" title="4.2. 避免使用类似base,common或util的包名称"></a>4.2. 避免使用类似<code>base</code>,<code>common</code>或<code>util</code>的包名称</h3><p>不好的包名的常见情况是<code>utility</code>包。这些包通常是随着时间的推移一些帮助程序和工具类的包。由于这些包包含各种不相关的功能,因此很难根据包提供的内容来描述它们。这通常会导致包的名称来自包含的内容 - <code>utilities</code>。</p><p>像<code>utils</code>或<code>helper</code>这样的包名称通常出现在较大的项目中,这些项目已经开发了深层次包的结构,并且希望在不遇到导入循环的情况下共享<code>helper</code>函数。通过将<code>utility</code>程序函数提取到新的包中,导入循环会被破坏,但由于该包源于项目中的设计问题,因此其包名称不反映其目的,仅反映其为了打破导入循环。</p><p>我建议改进<code>utils</code>或<code>helpers</code>包的名称是分析它们的调用位置,如果可能的话,将相关的函数移动到调用者的包中。即使这涉及复制一些<code>helper</code>程序代码,这也比在两个程序包之间引入导入依赖项更好。</p><blockquote><p>[A little] duplication is far cheaper than the wrong abstraction.<br>([一点点]重复比错误的抽象的性价比高很多。)<br> — Sandy Metz</p></blockquote><p>在使用<code>utility</code>程序的情况下,最好选多个包,每个包专注于单个方面,而不是选单一的整体包。</p><blockquote><p>小窍门:使用复数形式命名工具包。比如strings是字符串的处理工具。</p></blockquote><p>当两个或多个实现共有的功能或客户端和服务器的常见类型被重构为单独的包时,通常会找到名称类似于<code>base</code>或<code>common</code>的包。我相信解决方案是减少包的数量,将客户端,服务器和公共代码组合到一个以包的功能命名的包中。</p><p>例如,<code>net/http</code>包没有<code>client</code>和<code>server</code>的分包,而是有一个<code>client.go</code>和<code>server.go</code>文件,每个文件都有各自的类型,还有一个<code>transport.go</code>文件,用于公共消息传输代码。</p><blockquote><p>小窍门:<strong>标识符的名称包括其包名称。</strong><br>重要的是标识符的名称包括其包的名称。</p><ul><li>当由另一个包引用时,<code>net/http</code>包中的 Get 函数变为<code>http.Get</code>。</li><li>当导入到其他包中时,<code>strings</code>包中的<code>Reader</code>类型变为<code>strings.Reader</code>。<br>*<code>net</code>包中的<code>Error</code>接口显然与网络错误有关。</li></ul></blockquote><h3 id="4-3-尽早return而不是深度嵌套"><a href="#4-3-尽早return而不是深度嵌套" class="headerlink" title="4.3. 尽早return而不是深度嵌套"></a>4.3. 尽早<code>return</code>而不是深度嵌套</h3><p>由于 Go 语言的控制流不使用<code>exception</code>,因此不需要为<code>try</code>和<code>catch</code>块提供顶级结构而深度缩进代码。Go 语言代码不是成功的路径越来越深地嵌套到右边,而是以一种风格编写,其中随着函数的进行,成功路径继续沿着屏幕向下移动。 我的朋友 Mat Ryer 将这种做法称为“视线”编码。<a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88" target="_blank" rel="noopener">[4]</a></p><p>这是通过使用<code>guard clauses</code>来实现的; 在进入函数时是具有断言前提条件的条件块。 这是一个来自<code>bytes</code>包的例子:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Buffer)</span> <span class="hljs-title">UnreadRune</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.lastRead &lt;= opInvalid &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> b.off &gt;= <span class="hljs-keyword">int</span>(b.lastRead) &#123;</span><br><span class="line">b.off -= <span class="hljs-keyword">int</span>(b.lastRead)</span><br><span class="line">&#125;</span><br><span class="line">b.lastRead = opInvalid</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>进入<code>UnreadRune</code>后,将检查<code>b.lastRead</code>的状态,如果之前的操作不是<code>ReadRune</code>,则会立即返回错误。 之后,函数的其余部分继续进行<code>b.lastRead</code>大于<code>opInvalid</code>的断言。</p><p>与没有<code>guard clause</code>的相同函数进行比较,<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Buffer)</span> <span class="hljs-title">UnreadRune</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.lastRead &gt; opInvalid &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> b.off &gt;= <span class="hljs-keyword">int</span>(b.lastRead) &#123;</span><br><span class="line">b.off -= <span class="hljs-keyword">int</span>(b.lastRead)</span><br><span class="line">&#125;</span><br><span class="line">b.lastRead = opInvalid</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">"bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最常见的执行成功的情况是嵌套在第一个if条件内,成功的退出条件是<code>return nil</code>,而且必须通过仔细匹配大括号来发现。 函数的最后一行是返回一个错误,并且被调用者必须追溯到匹配的左括号,以了解何时执行到此点。</p><p>对于读者和维护程序员来说,这更容易出错,因此 Go 语言更喜欢使用<code>guard clauses</code>并尽早返回错误。</p><h3 id="4-4-让零值更有用"><a href="#4-4-让零值更有用" class="headerlink" title="4.4. 让零值更有用"></a>4.4. 让零值更有用</h3><p>假设变量没有初始化,每个变量声明都会自动初始化为与零内存的内容相匹配的值。 这就是零值。 值的类型决定了其零值; 对于数字类型,它为<code>0</code>,对于指针类型为<code>nil</code>,<code>slices</code>、<code>map</code>和<code>channel</code>同样是<code>nil</code>。</p><p>始终设置变量为已知默认值的属性对于程序的安全性和正确性非常重要,并且可以使 Go 语言程序更简单、更紧凑。 这就是 Go 程序员所说的“给你的结构一个有用的零值”。</p><p>对于<code>sync.Mutex</code>类型。<code>sync.Mutex</code>包含两个未公开的整数字段,它们用来表示互斥锁的内部状态。 每当声明<code>sync.Mutex</code>时,其字段会被设置为<code>0</code>初始值。<code>sync.Mutex</code>利用此属性来编写,使该类型可直接使用而无需初始化。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">mu  sync.Mutex</span><br><span class="line">val <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> i MyInt</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// i.mu is usable without explicit initialisation.</span></span><br><span class="line">i.mu.Lock()</span><br><span class="line">i.val++</span><br><span class="line">i.mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Austin Luo：原文为“useful”,我在此译为“有意义”而不是“有用”,意在强调其零值是符合业务的、符合逻辑的,并且也是初始的、默认的,而不是“不用管它,让它为零好了”。</p><p>这与变量的命名也息息相关,比如：</p><p>isCacheEnabled bool // 缓存是否被启用</p><p>isCacheDisabled bool // 缓存是否被禁用</p><p>对于上述两个变量,看起来都差不多,随意定义其中一个即可,唯一的差别只是一个表示启用一个表示禁用而已。但是结合考虑“业务要求默认启用缓存”和“bool 的零值为 false”,那么显然我们应该定义isCacheDisabled bool而不是前者。一方面,调用者不显式赋值时默认零值为false,另一方面值为false时表达的含义与业务要求默认启用缓存一致。</p><p>这才使得零值真正地有意义,正如示例中注释的那行i.mu一样,不显示初始化其代表的是默认锁是可用的。</p></blockquote><p>另一个利用零值的类型是<code>bytes.Buffer</code>。您可以声明<code>bytes.Buffer</code>然后就直接写入而无需初始化。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> b bytes.Buffer</span><br><span class="line">b.WriteString(<span class="hljs-string">"Hello, world!\n"</span>)</span><br><span class="line">io.Copy(os.Stdout, &amp;b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切片的一个有用属性是它们的零值<code>nil</code>。如果我们看一下切片运行时<code>header</code>的定义就不难理解:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">        array *[...]T <span class="hljs-comment">// pointer to the underlying array</span></span><br><span class="line">        <span class="hljs-built_in">len</span>   <span class="hljs-keyword">int</span></span><br><span class="line">        <span class="hljs-built_in">cap</span>   <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此结构的零值意味着<code>len</code>和<code>cap</code>的值为<code>0</code>,而<code>array</code>（指向保存切片的内容数组的指针）将为<code>nil</code>。这意味着你不需要<code>make</code>切片,你只需声明它即可。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// s := make([]string, 0)</span></span><br><span class="line"><span class="hljs-comment">// s := []string&#123;&#125;</span></span><br><span class="line"><span class="hljs-keyword">var</span> s []<span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line">s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">"Hello"</span>)</span><br><span class="line">s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">"world"</span>)</span><br><span class="line">fmt.Println(strings.Join(s, <span class="hljs-string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:<code>var s []string</code>类似于它上面的两条注释行,但并不完全相同。值为<code>nil</code>的切片与具有零长度的切片就可以来相互比较。以下代码将输出<code>false</code>。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> s1 = []<span class="hljs-keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> s2 []<span class="hljs-keyword">string</span></span><br><span class="line">fmt.Println(reflect.DeepEqual(s1, s2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个意外但是有用的惊喜是未初始化的指针——<code>nil</code>指针,您可以在<code>nil</code>值的类型上调用方法,这可以简单地用于提供默认值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">path <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Config)</span> <span class="hljs-title">Path</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> c == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"/usr/home"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> c.path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> c1 *Config</span><br><span class="line"><span class="hljs-keyword">var</span> c2 = &amp;Config&#123;</span><br><span class="line">path: <span class="hljs-string">"/export"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(c1.Path(), c2.Path())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-避免包级别状态"><a href="#4-5-避免包级别状态" class="headerlink" title="4.5. 避免包级别状态"></a>4.5. 避免包级别状态</h3><p>编写可维护程序的关键是它们应该是松散耦合的 - 对一个程序包的更改应该很少影响另一个不直接依赖于第一个程序包的程序包。</p><p>在 Go 语言中有两种很好的方法可以实现松散耦合</p><ol><li>使用接口来描述函数或方法所需的行为。</li><li>避免使用全局状态。</li></ol><p>在 Go 语言中,我们可以在函数或方法范围以及包范围内声明变量。当变量是公共的时,给定一个以大写字母开头的标识符,那么它的范围对于整个程序来说实际上是全局的 - 任何包都可以随时观察该变量的类型和内容。</p><p>可变全局状态引入程序的独立部分之间的紧密耦合,因为全局变量成为程序中每个函数的不可见参数！如果该变量的类型发生更改,则可以破坏依赖于全局变量的任何函数。如果程序的另一部分更改了该变量,则可以破坏依赖于全局变量状态的任何函数。</p><p>如果要减少全局变量所带来的耦合,</p><ol><li>将相关变量作为字段移动到需要它们的结构上。</li><li>使用接口来减少行为与实现之间的耦合。</li></ol><h2 id="5-项目结构"><a href="#5-项目结构" class="headerlink" title="5. 项目结构"></a>5. 项目结构</h2><p>我们来谈谈如何将包组合到项目中。 通常一个项目是一个<code>git</code>仓库,但在未来 Go 语言开发人员会交替地使用<code>module</code>和<code>project</code>。</p><p>就像一个包,每个项目都应该有一个明确的目的。 如果你的项目是一个库,它应该提供一件事,比如<code>XML</code>解析或记录。 您应该避免在一个包实现多个目的,这将有助于避免成为<code>common</code>库。</p><blockquote><p>小窍门:据我的经验,<code>common</code>库最终会与其最大的调用者紧密相连,在没有升级该库与最大调用者的情况下是很难修复的,还会带来了许多无关的更改以及API破坏。</p></blockquote><p>如果你的项目是应用程序,如<code>Web</code>应用程序,<code>Kubernetes</code>控制器等,那么项目中可能有一个或多个<code>main</code>程序包。 例如,我编写的<code>Kubernetes</code>控制器有一个<code>cmd/contour</code>包,既可以作为部署到<code>Kubernetes</code>集群的服务器,也可以作为调试目的的客户端。</p><h3 id="5-1-考虑更少-更大的包"><a href="#5-1-考虑更少-更大的包" class="headerlink" title="5.1. 考虑更少,更大的包"></a>5.1. 考虑更少,更大的包</h3><p>对于从其他语言过渡到 Go 语言的程序员来说,我倾向于在代码审查中提到的一件事是他们会过度使用包。</p><p>Go 语言没有提供有关可见性的详细方法; Java有<code>public</code>、<code>protected</code>、<code>private</code>以及隐式<code>default</code>的访问修饰符。 没有<code>C++</code>的<code>friend</code>类概念。</p><p>在 Go 语言中,我们只有两个访问修饰符,<code>public</code>和<code>private</code>,由标识符的第一个字母的大小写表示。 如果标识符是公共的,则其名称以大写字母开头,该标识符可用于任何其他 Go 语言包的引用。</p><blockquote><p>注意:<br>你可能会听到人们说<code>exported</code>与<code>not exported</code>, 跟<code>public</code>和<code>private</code>是同义词。</p></blockquote><p>鉴于包的符号的访问有限控件,Go 程序员应遵循哪些实践来避免创建过于复杂的包层次结构？</p><blockquote><p>小窍门:除<code>cmd/</code>和<code>internal/</code>之外的每个包都应包含一些源代码。</p></blockquote><p>我的建议是选择更少,更大的包。 你应该做的是不创建新的程序包。 这将导致太多类型被公开,为你的包创建一个宽而浅的API。</p><p>以下部分将更为详细地探讨这一建议。</p><blockquote><p>小窍门:来自<code>Java</code>？<br>如果您来自<code>Java</code>或<code>C#</code>,请考虑这一经验法则 –<code>Java</code>包相当于单个<code>.go</code>源文件。 - Go 语言包相当于整个<code>Maven</code>模块或<code>.NET</code>程序集。</p></blockquote><h3 id="5-1-1-通过import语句将代码排列到文件中"><a href="#5-1-1-通过import语句将代码排列到文件中" class="headerlink" title="5.1.1. 通过import语句将代码排列到文件中"></a>5.1.1. 通过<code>import</code>语句将代码排列到文件中</h3><p>如果你按照包提供的内容来安排你的程序包,是否需要对 Go 包中的文件也执行相同的操作？什么时候应该将<code>.go</code>文件拆分成多个文件？什么时候应该考虑整合<code>.go</code>文件？</p><p>以下是我的经验法则：</p><ul><li>开始时使用一个<code>.go</code>文件。为该文件指定与文件夹名称相同的名称。例如:<code>package http</code>应放在名为<code>http</code>的目录中名为<code>http.go</code>的文件中。</li><li>随着包的增长,您可能决定将各种职责任务拆分为不同的文件。例如：<code>messages.go</code>包含<code>Request</code>和<code>Response</code>类型,<code>client.go</code>包含<code>Client</code>类型,<code>server.go</code>包含<code>Server</code>类型。</li><li>如果你的文件中<code>import</code>的声明类似,请考虑将它们组合起来。或者确定<code>import</code>集之间的差异并移动它们。</li><li>不同的文件应该负责包的不同区域。<code>messages.go</code>可能负责网络的<code>HTTP</code>请求和响应,<code>http.go</code>可能包含底层网络处理逻辑,<code>client.go</code>和<code>server.go</code>实现<code>HTTP</code>业务逻辑请求的实现或路由等等。</li></ul><blockquote><p>小窍门:首选名词为源文件命名。</p></blockquote><blockquote><p>注意:<br>Go编译器并行编译每个包。 在一个包中,编译器并行编译每个函数（方法只是 Go 语言中函数的另一种写法）。 更改包中代码的布局不会影响编译时间。</p></blockquote><h3 id="5-1-2-优先内部测试再到外部测试"><a href="#5-1-2-优先内部测试再到外部测试" class="headerlink" title="5.1.2. 优先内部测试再到外部测试"></a>5.1.2. 优先内部测试再到外部测试</h3><p><code>go tool</code>支持在两个地方编写<code>testing</code>包测试。假设你的包名为<code>http2</code>,您可以编写<code>http2_test.go</code>文件并使用包<code>http2</code>声明。这样做会编译<code>http2_test.go</code>中的代码,就像它是<code>http2</code>包的一部分一样。这就是内部测试。</p><p><code>go tool</code>还支持一个特殊的包声明,以<code>test</code>为结尾,即<code>package http_test</code>。这允许你的测试文件与代码一起存放在同一个包中,但是当编译时这些测试不是包的代码的一部分,它们存在于自己的包中。就像调用另一个包的代码一样来编写测试。这被称为外部测试。</p><p>我建议在编写单元测试时使用内部测试。这样你就可以直接测试每个函数或方法,避免外部测试干扰。</p><p>但是,你应该将<code>Example</code>测试函数放在外部测试文件中。这确保了在<code>godoc</code>中查看时,示例具有适当的包名前缀并且可以轻松地进行复制粘贴。</p><blockquote><p>小窍门:<code>避免复杂的包层次结构,抵制应用分类法</code><br>Go 语言包的层次结构对于<code>go tool</code>没有任何意义除了下一节要说的。 例如,<code>net/http</code>包不是一个子包或者<code>net</code>包的子包。</p><p>如果在项目中创建了不包含<code>.go</code>文件的中间目录,则可能无法遵循此建议。</p></blockquote><h3 id="5-1-3-使用internal包来减少公共API"><a href="#5-1-3-使用internal包来减少公共API" class="headerlink" title="5.1.3. 使用internal包来减少公共API"></a>5.1.3. 使用<code>internal</code>包来减少公共API</h3><p>如果项目包含多个包,可能有一些公共的函数,这些函数旨在供项目中的其他包使用,但不打算成为项目的公共API的一部分。 如果你发现是这种情况,那么<code>go tool</code>会识别一个特殊的文件夹名称 - 而非包名称 - <code>internal/</code>可用于放置对项目公开的代码,但对其他项目是私有的。</p><p>要创建此类包,请将其放在名为<code>internal/</code>的目录中,或者放在名为<code>internal/</code>的目录的子目录中。 当<code>go</code>命令在其路径中看到导入包含<code>internal</code>的包时,它会验证执行导入的包是否位于<code>internal</code>目录。</p><p>例如,<code>.../a/b/c/internal/d/e/f</code>的包只能通过以<code>.../a/b/c/</code>为根目录的代码被导入。 它无法通过<code>.../a/b/g</code>或任何其他仓库中的代码导入。<a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="noopener">[5]</a></p><h3 id="5-2-确保main包内容尽可能的少"><a href="#5-2-确保main包内容尽可能的少" class="headerlink" title="5.2. 确保main包内容尽可能的少"></a>5.2. 确保<code>main</code>包内容尽可能的少</h3><p><code>main</code>函数和<code>main</code>包的内容应尽可能少。 这是因为<code>main.main</code>充当单例; 程序中只能有一个<code>main</code>函数,包括<code>tests</code>。</p><p>因为<code>main.main</code>是一个单例,假设<code>main</code>函数中需要执行很多事情,<code>main.main</code>只会在<code>main.main</code>或<code>main.init</code>中调用它们并且只调用一次。 这使得为<code>main.main</code>编写代码测试变得很困难,因此你应该将所有业务逻辑从<code>main</code>函数中移出,最好是从<code>main</code>包中移出。</p><blockquote><p>小窍门:Austin Luo：这里主要是讲,由于整个程序（包括单元测试在内）只允许存在一个 main.main,因此在 main.main 中编写过多的代码将导致这些代码很难被测试覆盖,因此应当将这些代码从 main.main 中——甚至从 main 包中——独立出来,以便能够写单元测试进行测试。（文中的“假定”是针对测试而言,“假定” main 中的代码可以正常运行。）<br><code>main</code>应该做解析<code>flags</code>,开启数据库连接、开启日志等,然后将执行交给更高一级的对象。</p></blockquote><h2 id="6-API-设计"><a href="#6-API-设计" class="headerlink" title="6. API 设计"></a>6. API 设计</h2><p>我今天要给出的最后一条建议是设计, 我认为也是最重要的。</p><p>到目前为止我提出的所有建议都是建议。 这些是我尝试编写 Go 语言的方式,但我不打算在代码审查中拼命推广。</p><p>但是,在审查 API 时, 我就不会那么宽容了。 这是因为到目前为止我所谈论的所有内容都是可以修复而且不会破坏向后兼容性; 它们在很大程度上是实现的细节。</p><p>当涉及到软件包的公共 API 时,在初始设计中投入大量精力是值得的,因为稍后更改该设计对于已经使用 API 的人来说会是破坏性的。</p><h3 id="6-1-设计难以被误用的-API"><a href="#6-1-设计难以被误用的-API" class="headerlink" title="6.1. 设计难以被误用的 API"></a>6.1. 设计难以被误用的 API</h3><blockquote><p>APIs should be easy to use and hard to misuse.<br>(API 应该易于使用且难以被误用)<br> — Josh Bloch <a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">[3]</a></p></blockquote><p>如果你从这个演讲中带走任何东西,那应该是 Josh Bloch 的建议。 如果一个 API 很难用于简单的事情,那么 API 的每次调用都会很复杂。 当 API 的实际调用很复杂时,它就会便得不那么明显,而且会更容易被忽视。</p><h3 id="6-1-1-警惕采用几个相同类型参数的函数"><a href="#6-1-1-警惕采用几个相同类型参数的函数" class="headerlink" title="6.1.1. 警惕采用几个相同类型参数的函数"></a>6.1.1. 警惕采用几个相同类型参数的函数</h3><p>简单, 但难以正确使用的 API 是采用两个或更多相同类型参数的 API。 让我们比较两个函数签名：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Max</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CopyFile</span><span class="hljs-params">(to, from <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>这两个函数有什么区别？ 显然,一个返回两个数字最大的那个,另一个是复制文件,但这不重要。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Max(<span class="hljs-number">8</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">// 10</span></span><br><span class="line">Max(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// 10</span></span><br></pre></td></tr></table></figure></p><p><code>Max</code>是可交换的; 参数的顺序无关紧要。 无论是 8 比 10 还是 10 比 8,最大的都是 10。</p><p>但是,却不适用于<code>CopyFile</code>。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CopyFile(<span class="hljs-string">"/tmp/backup"</span>, <span class="hljs-string">"presentation.md"</span>)</span><br><span class="line">CopyFile(<span class="hljs-string">"presentation.md"</span>, <span class="hljs-string">"/tmp/backup"</span>)</span><br></pre></td></tr></table></figure></p><p>这些声明中哪一个备份了<code>presentation.md</code>,哪一个用上周的版本覆盖了<code>presentation.md</code>？ 没有文档,你无法分辨。 如果没有查阅文档,代码审查员也无法知道你写对了顺序。</p><p>一种可能的解决方案是引入一个<code>helper</code>类型,它会负责如何正确地调用<code>CopyFile</code>。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Source <span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(src Source)</span> <span class="hljs-title">CopyTo</span><span class="hljs-params">(dest <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> CopyFile(dest, <span class="hljs-keyword">string</span>(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> from Source = <span class="hljs-string">"presentation.md"</span></span><br><span class="line">from.CopyTo(<span class="hljs-string">"/tmp/backup"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>通过这种方式,<code>CopyFile</code>总是能被正确调用 - 还可以通过单元测试 - 并且可以被设置为私有,进一步降低了误用的可能性。</p><blockquote><p>小窍门:具有多个相同类型参数的API难以正确使用。</p></blockquote><h3 id="6-2-为其默认用例设计-API"><a href="#6-2-为其默认用例设计-API" class="headerlink" title="6.2. 为其默认用例设计 API"></a>6.2. 为其默认用例设计 API</h3><p>几年前,我就对<code>functional options</code><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">[7]</a> 进行过讨论<a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">[6]</a>,使 API 更易用于默认用例。</p><p>本演讲的主旨是你应该为常见用例设计 API。 另一方面, API 不应要求调用者提供他们不在乎参数。</p><h3 id="6-2-1-不鼓励使用nil作为参数"><a href="#6-2-1-不鼓励使用nil作为参数" class="headerlink" title="6.2.1. 不鼓励使用nil作为参数"></a>6.2.1. 不鼓励使用<code>nil</code>作为参数</h3><p>本章开始时我建议是不要强迫提供给 API 的调用者他们不在乎的参数。 这就是我要说的为默认用例设计 API。</p><p>这是<code>net/http</code>包中的一个例子<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> http</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ListenAndServe listens on the TCP network address addr and then calls</span></span><br><span class="line"><span class="hljs-comment">// Serve with handler to handle requests on incoming connections.</span></span><br><span class="line"><span class="hljs-comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>, handler Handler)</span> <span class="hljs-title">error</span></span> &#123;</span><br></pre></td></tr></table></figure><br><code>ListenAndServe</code>有两个参数,一个用于监听传入连接的<code>TCP</code>地址,另一个用于处理<code>HTTP</code>请求的<code>http.Handler</code>。<code>Serve</code>允许第二个参数为<code>nil</code>,需要注意的是调用者通常会传递<code>nil</code>,表示他们想要使用<code>http.DefaultServeMux</code>作为隐含参数。</p><p>现在,<code>Serve</code>的调用者有两种方式可以做同样的事情。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, <span class="hljs-literal">nil</span>)</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><br>两者完全相同。</p><p>这种<code>nil</code>行为是病毒式的。<code>http</code>包也有一个<code>http.Serve</code>帮助类,你可以合理地想象一下<code>ListenAndServe</code>是这样构建的<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>, handler Handler)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">l, err := net.Listen(<span class="hljs-string">"tcp"</span>, addr)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> l.Close()</span><br><span class="line"><span class="hljs-keyword">return</span> Serve(l, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为<code>ListenAndServe</code>允许调用者为第二个参数传递<code>nil</code>,所以<code>http.Serve</code>也支持这种行为。 事实上,<code>http.Serve</code>实现了如果<code>handler</code>是<code>nil</code>,使用<code>DefaultServeMux</code>的逻辑。 参数可为<code>nil</code>可能会导致调用者认为他们可以为两个参数都使用<code>nil</code>。 像下面这样:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.Serve(<span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)</span><br></pre></td></tr></table></figure><br>会导致<code>panic</code>。</p><blockquote><p>小窍门:不要在同一个函数签名中混合使用可为<code>nil</code>和不能为<code>nil</code>的参数。</p></blockquote><p><code>http.ListenAndServe</code>的作者试图在常见情况下让使用 API 的用户更轻松些,但很可能会让该程序包更难以被安全地使用。</p><p>使用<code>DefaultServeMux</code>或使用<code>nil</code>没有什么区别。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> root = http.Dir(<span class="hljs-string">"/htdocs"</span>)</span><br><span class="line">http.Handle(<span class="hljs-string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, <span class="hljs-literal">nil</span>)</span><br></pre></td></tr></table></figure><br>对比<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> root = http.Dir(<span class="hljs-string">"/htdocs"</span>)</span><br><span class="line">http.Handle(<span class="hljs-string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><br>这种混乱值得拯救吗？<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> root = http.Dir(<span class="hljs-string">"/htdocs"</span>)</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">http.Handle(<span class="hljs-string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, mux)</span><br></pre></td></tr></table></figure></p><blockquote><p>小窍门:认真考虑<code>helper</code>函数会节省不少时间。 清晰要比简洁好。</p></blockquote><blockquote><p>小窍门:<code>避免公共 API 使用测试参数</code><br>避免在公开的 API 上使用仅在测试范围上不同的值。 相反,使用<code>Public wrappers</code>隐藏这些参数,使用辅助方式来设置测试范围中的属性。</p></blockquote><h3 id="6-2-2-首选可变参数（var-args）而非切片参数（-T）"><a href="#6-2-2-首选可变参数（var-args）而非切片参数（-T）" class="headerlink" title="6.2.2. 首选可变参数（var args）而非切片参数（[]T）"></a>6.2.2. 首选可变参数（var args）而非切片参数（[]T）</h3><p>编写一个带有切片参数的函数或方法是很常见的。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ShutdownVMs</span><span class="hljs-params">(ids []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>这仅仅是我举的一个例子,但在我工作中更加常见。像这样的签名的问题是,他们假设被调用时会有多个实体。但是,我发现很多时候这些类型的函数却只有一个参数,为了满足函数签名的要求,它必须在一个切片内“装箱”。（Austin Luo：如示例,函数定义时预期会有多个 id,但实际调用时往往只有一个 id,为了满足前面,必须构造一个切片,并把 id 装进去。）</p><p>另外,因为<code>ids</code>参数是切片,所以你可以将一个空切片或<code>nil</code>传递给该函数,编译也没什么错误。 但是这会增加额外的测试负载,因为你应该涵盖这些情况在测试中。</p><p>举一个这类 API 的例子,最近我重构了一条逻辑,要求我设置一些额外的字段,如果一组参数中至少有一个非零。 逻辑看起来像这样：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> svc.MaxConnections &gt; <span class="hljs-number">0</span> || svc.MaxPendingRequests &gt; <span class="hljs-number">0</span> || svc.MaxRequests &gt; <span class="hljs-number">0</span> || svc.MaxRetries &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-comment">// apply the non zero parameters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>由于<code>if</code>语句变得很长,我想将签出的逻辑拉入其自己的函数中。 这就是我提出的：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// anyPostive indicates if any value is greater than zero.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">anyPositive</span><span class="hljs-params">(values ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这就能够向读者明确内部块的执行条件：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> anyPositive(svc.MaxConnections, svc.MaxPendingRequests, svc.MaxRequests, svc.MaxRetries) &#123;</span><br><span class="line">        <span class="hljs-comment">// apply the non zero parameters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是<code>anyPositive</code>还存在一个问题,有人可能会这样调用它:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> anyPositive() &#123; ... &#125;</span><br></pre></td></tr></table></figure><br>在这种情况下,<code>anyPositive</code>将返回<code>false</code>,因为它不会执行迭代而是立即返回<code>false</code>。对比起如果<code>anyPositive</code>在没有传递参数时返回<code>true</code>, 这还不算世界上最糟糕的事情。</p><p>然而,如果我们可以更改<code>anyPositive</code>的签名以强制调用者应该传递至少一个参数,那会更好。我们可以通过组合正常和可变参数来做到这一点,如下所示：<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// anyPostive indicates if any value is greater than zero.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">anyPositive</span><span class="hljs-params">(first <span class="hljs-keyword">int</span>, rest ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> first &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> rest &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">0</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在不能使用少于一个参数来调用<code>anyPositive</code>。</p><h3 id="6-3-让函数定义它们所需的行为"><a href="#6-3-让函数定义它们所需的行为" class="headerlink" title="6.3. 让函数定义它们所需的行为"></a>6.3. 让函数定义它们所需的行为</h3><p>假设我需要编写一个将<code>Document</code>结构保存到磁盘的函数的任务。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Save writes the contents of doc to the file f.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Save</span><span class="hljs-params">(f *os.File, doc *Document)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>我可以指定这个函数<code>Save</code>,它将<code>*os.File</code>作为写入<code>Document</code>的目标。但这样做会有一些问题</p><p><code>Save</code>的签名排除了将数据写入网络位置的选项。假设网络存储可能在以后成为需求,则此功能的签名必须改变,从而影响其所有调用者。</p><p><code>Save</code>测试起来也很麻烦,因为它直接操作磁盘上的文件。因此,为了验证其操作,测试时必须在写入文件后再读取该文件的内容。</p><p>而且我必须确保<code>f</code>被写入临时位置并且随后要将其删除。</p><p><code>*os.File</code>还定义了许多与<code>Save</code>无关的方法,比如读取目录并检查路径是否是符号链接。 如果<code>Save</code>函数的签名只用<code>*os.File</code>的相关内容,那将会很有用。</p><p>我们能做什么 ？<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="hljs-comment">// ReadWriterCloser.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Save</span><span class="hljs-params">(rwc io.ReadWriteCloser, doc *Document)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>使用<code>io.ReadWriteCloser</code>,我们可以应用<a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">接口隔离原则</a>来重新定义<code>Save</code>以获取更通用文件形式。</p><p>通过此更改,任何实现<code>io.ReadWriteCloser</code>接口的类型都可以替换以前的<code>*os.File</code>。</p><p>这使<code>Save</code>在其应用程序中更广泛,并向<code>Save</code>的调用者阐明<code>*os.File</code>类型的哪些方法与其操作有关。</p><p>而且,<code>Save</code>的作者也不可以在<code>*os.File</code>上调用那些不相关的方法,因为它隐藏在<code>io.ReadWriteCloser</code>接口后面。</p><p>但我们可以进一步采用<a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">接口隔离原则</a>。</p><p>首先,如果<code>Save</code>遵循<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">单一功能原则</a>,它不可能读取它刚刚写入的文件来验证其内容 - 这应该是另一段代码的功能。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="hljs-comment">// WriteCloser.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Save</span><span class="hljs-params">(wc io.WriteCloser, doc *Document)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>因此,我们可以将我们传递给<code>Save</code>的接口的规范缩小到只写和关闭。</p><p>其次,通过向<code>Save</code>提供一个关闭其流的机制,使其看起来仍然像一个文件,这就提出了在什么情况下关闭<code>wc</code>的问题。</p><p>可能<code>Save</code>会无条件地调用<code>Close</code>,或者在成功的情况下调用<code>Close</code>。</p><p>这给<code>Save</code>的调用者带来了问题,因为它可能希望在写入文档后将其他数据写入流。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="hljs-comment">// Writer.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Save</span><span class="hljs-params">(w io.Writer, doc *Document)</span> <span class="hljs-title">error</span></span></span><br></pre></td></tr></table></figure><br>一个更好的解决方案是重新定义<code>Save</code>仅使用<code>io.Writer</code>,它只负责将数据写入流。</p><p>将<a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">接口隔离原则</a>应用于我们的<code>Save</code>功能,同时, 就需求而言, 得出了最具体的一个函数 - 它只需要一个可写的东西 - 并且它的功能最通用,现在我们可以使用<code>Save</code>将我们的数据保存到实现<code>io.Writer</code>的任何事物中。</p><p><a href="https://www.jianshu.com/p/0aebd9618300" target="_blank" rel="noopener">[译注: 不理解设计原则部分的同学可以阅读 Dave 大神的另一篇《Go 语言 SOLID 设计》]</a></p><h2 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7. 错误处理"></a>7. 错误处理</h2><p>我已经给出了几个关于错误处理的演示文稿<a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully" target="_blank" rel="noopener">[8]</a>,并在我的博客上写了很多关于错误处理的文章。我在昨天的会议上也讲了很多关于错误处理的内容,所以在这里不再赘述。</p><ul><li><a href="https://dave.cheney.net/2014/12/24/inspecting-errors" target="_blank" rel="noopener">https://dave.cheney.net/2014/12/24/inspecting-errors</a></li><li><a href="https://dave.cheney.net/2016/04/07/constant-errors" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/07/constant-errors</a></li></ul><p>相反,我想介绍与错误处理相关的两个其他方面。</p><h3 id="7-1-通过消除错误来消除错误处理"><a href="#7-1-通过消除错误来消除错误处理" class="headerlink" title="7.1. 通过消除错误来消除错误处理"></a>7.1. 通过消除错误来消除错误处理</h3><p>如果你昨天在我的演讲中,我谈到了改进错误处理的提案。但是你知道有什么比改进错误处理的语法更好吗？那就是根本不需要处理错误。</p><blockquote><p>注意:<br>我不是说“删除你的错误处理”。我的建议是,修改你的代码,这样就不用处理错误了。</p></blockquote><p>本节从 John Ousterhout 最近的著作“软件设计哲学”<a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201" target="_blank" rel="noopener">[9]</a>中汲取灵感。该书的其中一章是“定义不存在的错误”。我们将尝试将此建议应用于 Go 语言。</p><h3 id="7-1-1-计算行数"><a href="#7-1-1-计算行数" class="headerlink" title="7.1.1. 计算行数"></a>7.1.1. 计算行数</h3><p>让我们编写一个函数来计算文件中的行数。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CountLines</span><span class="hljs-params">(r io.Reader)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> (</span><br><span class="line">br    = bufio.NewReader(r)</span><br><span class="line">lines <span class="hljs-keyword">int</span></span><br><span class="line">err   error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">_, err = br.ReadString(<span class="hljs-string">'\n'</span>)</span><br><span class="line">lines++</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> err != io.EOF &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> lines, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>由于我们遵循前面部分的建议,<code>CountLines</code>需要一个<code>io.Reader</code>,而不是一个<code>*File</code>；它的任务是调用者为我们想要计算的内容提供<code>io.Reader</code>。</p><p>我们构造一个<code>bufio.Reader</code>,然后在一个循环中调用<code>ReadString</code>方法,递增计数器直到我们到达文件的末尾,然后我们返回读取的行数。</p><p>至少这是我们想要编写的代码,但是这个函数由于需要错误处理而变得更加复杂。 例如,有这样一个奇怪的结构:<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_, err = br.ReadString(<span class="hljs-string">'\n'</span>)</span><br><span class="line">lines++</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们在检查错误之前增加了行数,这样做看起来很奇怪。</p><p>我们必须以这种方式编写它的原因是,如果在遇到换行符之前就读到文件结束,则<code>ReadString</code>将返回错误。如果文件中没有换行符,同样会出现这种情况。</p><p>为了解决这个问题,我们重新排列逻辑增来加行数,然后查看是否需要退出循环。</p><blockquote><p>注意:<br>这个逻辑仍然不完美,你能发现错误吗？</p></blockquote><p>但是我们还没有完成检查错误。当<code>ReadString</code>到达文件末尾时,预期它会返回<code>io.EOF</code>。<code>ReadString</code>需要某种方式在没有什么可读时来停止。因此,在我们将错误返回给<code>CountLine</code>的调用者之前,我们需要检查错误是否是<code>io.EOF</code>,如果不是将其错误返回,否则我们返回<code>nil</code>说一切正常。</p><p>我认为这是 Russ Cox 观察到错误处理可能会模​​糊函数操作的一个很好的例子。我们来看一个改进的版本。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CountLines</span><span class="hljs-params">(r io.Reader)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">sc := bufio.NewScanner(r)</span><br><span class="line">lines := <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> sc.Scan() &#123;</span><br><span class="line">lines++</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> lines, sc.Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个改进的版本从<code>bufio.Reader</code>切换到<code>bufio.Scanner</code>。</p><p>在<code>bufio.Scanner</code>内部使用<code>bufio.Reader</code>,但它添加了一个很好的抽象层,它有助于通过隐藏<code>CountLines</code>的操作来消除错误处理。</p><blockquote><p>注意:<br><code>bufio.Scanner</code>可以扫描任何模式,但默认情况下它会查找换行符。</p></blockquote><p>如果扫描程序匹配了一行文本并且没有遇到错误,则<code>sc.Scan()</code>方法返回<code>true</code>。因此,只有当扫描仪的缓冲区中有一行文本时,才会调用<code>for</code>循环的主体。这意味着我们修改后的<code>CountLines</code>正确处理没有换行符的情况,并且还处理文件为空的情况。</p><p>其次,当<code>sc.Scan</code>在遇到错误时返回<code>false</code>,我们的<code>for</code>循环将在到达文件结尾或遇到错误时退出。<code>bufio.Scanner</code>类型会记住遇到的第一个错误,一旦我们使用<code>sc.Err()</code>方法退出循环,我们就可以获取该错误。</p><p>最后,<code>sc.Err()</code>负责处理<code>io.EOF</code>并在达到文件末尾时将其转换为<code>nil</code>,而不会遇到其他错误。</p><blockquote><p>小窍门:当遇到难以忍受的错误处理时,请尝试将某些操作提取到辅助程序类型中。</p></blockquote><h3 id="7-1-2-WriteResponse"><a href="#7-1-2-WriteResponse" class="headerlink" title="7.1.2. WriteResponse"></a>7.1.2. WriteResponse</h3><p>我的第二个例子受到了<code>Errors are values</code>博客文章<a href="https://blog.golang.org/errors-are-values" target="_blank" rel="noopener">[10]</a>的启发。</p><p>在本章前面我们已经看过处理打开、写入和关闭文件的示例。错误处理是存在的,但是接收范围内的,因为操作可以封装在诸如<code>ioutil.ReadFile</code>和<code>ioutil.WriteFile</code>之类的辅助程序中。但是,在处理底层网络协议时,有必要使用<code>I/O</code>原始的错误处理来直接构建响应,这样就可能会变得重复。看一下构建<code>HTTP</code>响应的<code>HTTP</code>服务器的这个片段。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Header <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Key, Value <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Status <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Code   <span class="hljs-keyword">int</span></span><br><span class="line">Reason <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteResponse</span><span class="hljs-params">(w io.Writer, st Status, headers []Header, body io.Reader)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">_, err := fmt.Fprintf(w, <span class="hljs-string">"HTTP/1.1 %d %s\r\n"</span>, st.Code, st.Reason)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> headers &#123;</span><br><span class="line">_, err := fmt.Fprintf(w, <span class="hljs-string">"%s: %s\r\n"</span>, h.Key, h.Value)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> _, err := fmt.Fprint(w, <span class="hljs-string">"\r\n"</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = io.Copy(w, body)</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先,我们使用<code>fmt.Fprintf</code>构造状态码并检查错误。 然后对于每个标题,我们写入键值对,每次都检查错误。 最后,我们使用额外的<code>\r\n</code>终止标题部分,检查错误之后将响应主体复制到客户端。 最后,虽然我们不需要检查<code>io.Copy</code>中的错误,但我们需要将<code>io.Copy</code>返回的两个返回值形式转换为<code>WriteResponse</code>的单个返回值。</p><p>这里很多重复性的工作。 我们可以通过引入一个包装器类型<code>errWriter</code>来使其更容易。</p><p><code>errWriter</code>实现<code>io.Writer</code>接口,因此可用于包装现有的<code>io.Writer</code>。<code>errWriter</code>写入传递给其底层<code>writer</code>,直到检测到错误。 从此时起,它会丢弃任何写入并返回先前的错误。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> errWriter <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">io.Writer</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *errWriter)</span> <span class="hljs-title">Write</span><span class="hljs-params">(buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> e.err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, e.err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span></span><br><span class="line">n, e.err = e.Writer.Write(buf)</span><br><span class="line"><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteResponse</span><span class="hljs-params">(w io.Writer, st Status, headers []Header, body io.Reader)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">ew := &amp;errWriter&#123;Writer: w&#125;</span><br><span class="line">fmt.Fprintf(ew, <span class="hljs-string">"HTTP/1.1 %d %s\r\n"</span>, st.Code, st.Reason)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> headers &#123;</span><br><span class="line">fmt.Fprintf(ew, <span class="hljs-string">"%s: %s\r\n"</span>, h.Key, h.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Fprint(ew, <span class="hljs-string">"\r\n"</span>)</span><br><span class="line">io.Copy(ew, body)</span><br><span class="line"><span class="hljs-keyword">return</span> ew.err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>将<code>errWriter</code>应用于<code>WriteResponse</code>可以显着提高代码的清晰度。 每个操作不再需要自己做错误检查。 通过检查<code>ew.err</code>字段,将错误报告移动到函数末尾,从而避免转换从<code>io.Copy</code>的两个返回值。</p><h3 id="7-2-错误只处理一次"><a href="#7-2-错误只处理一次" class="headerlink" title="7.2. 错误只处理一次"></a>7.2. 错误只处理一次</h3><p>最后,我想提一下你应该只处理错误一次。 处理错误意味着检查错误值并做出单一决定。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// WriteAll writes the contents of buf to the supplied writer.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteAll</span><span class="hljs-params">(w io.Writer, buf []<span class="hljs-keyword">byte</span>)</span></span> &#123;</span><br><span class="line">        w.Write(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你做出的决定少于一个,则忽略该错误。 正如我们在这里看到的那样,<code>w.WriteAll</code>的错误被丢弃。</p><p>但是,针对单个错误做出多个决策也是有问题的。 以下是我经常遇到的代码。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteAll</span><span class="hljs-params">(w io.Writer, buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">_, err := w.Write(buf)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"unable to write:"</span>, err) <span class="hljs-comment">// annotated error goes to log file</span></span><br><span class="line"><span class="hljs-keyword">return</span> err                           <span class="hljs-comment">// unannotated error returned to caller</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在此示例中,如果在<code>w.Write</code>期间发生错误,则会写入日志文件,注明错误发生的文件与行数,并且错误也会返回给调用者,调用者可能会记录该错误并将其返回到上一级,一直回到程序的顶部。</p><p>调用者可能正在做同样的事情<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteConfig</span><span class="hljs-params">(w io.Writer, conf *Config)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">buf, err := json.Marshal(conf)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"could not marshal config: %v"</span>, err)</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := WriteAll(w, buf); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"could not write config: %v"</span>, err)</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因此你在日志文件中得到一堆重复的内容,<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unable to write: io.EOF</span><br><span class="line">could not write config: io.EOF</span><br></pre></td></tr></table></figure><br>但在程序的顶部,虽然得到了原始错误,但没有相关内容。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err := WriteConfig(f, &amp;conf)</span><br><span class="line">fmt.Println(err) <span class="hljs-comment">// io.EOF</span></span><br></pre></td></tr></table></figure><br>我想深入研究这一点,因为作为个人偏好, 我并没有看到<code>logging</code>和返回的问题。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteConfig</span><span class="hljs-params">(w io.Writer, conf *Config)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">buf, err := json.Marshal(conf)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="hljs-string">"could not marshal config: %v"</span>, err)</span><br><span class="line"><span class="hljs-comment">// oops, forgot to return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := WriteAll(w, buf); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="hljs-string">"could not write config: %v"</span>, err)</span><br><span class="line"><span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>很多问题是程序员忘记从错误中返回。正如我们之前谈到的那样,Go 语言风格是使用<code>guard clauses</code>  以及检查前提条件作为函数进展并提前返回。</p><p>在这个例子中,作者检查了错误,记录了它,但忘了返回。这就引起了一个微妙的错误。</p><p>Go 语言中的错误处理规定,如果出现错误,你不能对其他返回值的内容做出任何假设。由于<code>JSON</code>解析失败,<code>buf</code>的内容未知,可能它什么都没有,但更糟的是它可能包含解析的<code>JSON</code>片段部分。</p><p>由于程序员在检查并记录错误后忘记返回,因此损坏的缓冲区将传递给<code>WriteAll</code>,这可能会成功,因此配置文件将被错误地写入。但是,该函数会正常返回,并且发生问题的唯一日志行是有关<code>JSON</code>解析错误,而与写入配置失败有关。</p><h3 id="7-2-1-为错误添加相关内容"><a href="#7-2-1-为错误添加相关内容" class="headerlink" title="7.2.1. 为错误添加相关内容"></a>7.2.1. 为错误添加相关内容</h3><p>发生错误的原因是作者试图在错误消息中添加<code>context</code>。 他们试图给自己留下一些线索,指出错误的根源。</p><p>让我们看看使用<code>fmt.Errorf</code>的另一种方式。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteConfig</span><span class="hljs-params">(w io.Writer, conf *Config)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">buf, err := json.Marshal(conf)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"could not marshal config: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := WriteAll(w, buf); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"could not write config: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteAll</span><span class="hljs-params">(w io.Writer, buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">_, err := w.Write(buf)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"write failed: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>通过将注释与返回的错误组合起来,就更难以忘记错误的返回来避免意外继续。</p><p>如果写入文件时发生<code>I/O</code>错误,则<code>error</code>的<code>Error()</code>方法会报告以下类似的内容;<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not write config: write failed: input/output error</span><br></pre></td></tr></table></figure></p><h3 id="7-2-2-使用github-com-pkg-errors包装errors"><a href="#7-2-2-使用github-com-pkg-errors包装errors" class="headerlink" title="7.2.2. 使用github.com/pkg/errors包装errors"></a>7.2.2. 使用<code>github.com/pkg/errors</code>包装<code>errors</code></h3><p><code>fmt.Errorf</code>模式适用于注释错误<code>message</code>,但这样做的代价是模糊了原始错误的类型。 我认为将错误视为不透明值对于松散耦合的软件非常重要,因此如果你使用错误值做的唯一事情是原始错误的类型应该无关紧要的面孔</p><ol><li>检查它是否为<code>nil</code>。</li><li>输出或记录它。</li></ol><p>但是在某些情况下,我认为它们并不常见,您需要恢复原始错误。 在这种情况下,使用类似我的<code>errors</code>包来注释这样的错误, 如下<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadFile</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">f, err := os.Open(path)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"open failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"read failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> buf, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadConfig</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">home := os.Getenv(<span class="hljs-string">"HOME"</span>)</span><br><span class="line">config, err := ReadFile(filepath.Join(home, <span class="hljs-string">".settings.xml"</span>))</span><br><span class="line"><span class="hljs-keyword">return</span> config, errors.WithMessage(err, <span class="hljs-string">"could not read config"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">_, err := ReadConfig()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在报告的错误就是<code>K＆D</code><a href="http://www.gopl.io/" target="_blank" rel="noopener">[11]</a>样式错误,<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not read config: open failed: open /Users/dfc/.settings.xml: no such file or directory</span><br></pre></td></tr></table></figure><br>并且错误值保留对原始原因的引用。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">_, err := ReadConfig()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="hljs-string">"original error: %T %v\n"</span>, errors.Cause(err), errors.Cause(err))</span><br><span class="line">fmt.Printf(<span class="hljs-string">"stack trace:\n%+v\n"</span>, err)</span><br><span class="line">os.Exit(<span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因此,你可以恢复原始错误并打印堆栈跟踪;<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">original error: *os.PathError open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">stack trace:</span><br><span class="line">open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">open failed</span><br><span class="line">main.ReadFile</span><br><span class="line">        /Users/dfc/devel/practical-<span class="hljs-keyword">go</span>/src/errors/readfile2.<span class="hljs-keyword">go</span>:<span class="hljs-number">16</span></span><br><span class="line">main.ReadConfig</span><br><span class="line">        /Users/dfc/devel/practical-<span class="hljs-keyword">go</span>/src/errors/readfile2.<span class="hljs-keyword">go</span>:<span class="hljs-number">29</span></span><br><span class="line">main.main</span><br><span class="line">        /Users/dfc/devel/practical-<span class="hljs-keyword">go</span>/src/errors/readfile2.<span class="hljs-keyword">go</span>:<span class="hljs-number">35</span></span><br><span class="line">runtime.main</span><br><span class="line">        /Users/dfc/<span class="hljs-keyword">go</span>/src/runtime/proc.<span class="hljs-keyword">go</span>:<span class="hljs-number">201</span></span><br><span class="line">runtime.goexit</span><br><span class="line">        /Users/dfc/<span class="hljs-keyword">go</span>/src/runtime/asm_amd64.s:<span class="hljs-number">1333</span></span><br><span class="line">could not read config</span><br></pre></td></tr></table></figure><br>使用<code>errors</code>包,你可以以人和机器都可检查的方式向错误值添加上下文。 如果昨天你来听我的演讲,你会知道这个库在被移植到即将发布的 Go 语言版本的标准库中。</p><h2 id="8-并发"><a href="#8-并发" class="headerlink" title="8. 并发"></a>8. 并发</h2><p>由于 Go 语言的并发功能,经常被选作项目编程语言。 Go 语言团队已经竭尽全力以廉价（在硬件资源方面）和高性能来实现并发,但是 Go 语言的并发功能也可以被用来编写性能不高同时也不太可靠的代码。在结尾,我想留下一些建议,以避免 Go 语言的并发功能带来的一些陷阱。</p><p>Go 语言以<code>channels</code>以及<code>select</code>和<code>go</code>语句来支持并发。如果你已经从书籍或培训课程中正式学习了 Go 语言,你可能已经注意到并发部分始终是这些课程的最后一部分。这个研讨会也没有什么不同,我选择最后覆盖并发,好像它是 Go 程序员应该掌握的常规技能的额外补充。</p><p>这里有一个二分法; Go 语言的最大特点是简单、轻量级的并发模型。作为一种产品,我们的语言几乎只推广这个功能。另一方面,有一种说法认为并发使用起来实际上并不容易,否则作者不会把它作为他们书中的最后一章,我们也不会遗憾地来回顾其形成过程。</p><p>本节讨论了 Go 语言的并发功能的“坑”。</p><h3 id="8-1-保持自己忙碌或做自己的工作"><a href="#8-1-保持自己忙碌或做自己的工作" class="headerlink" title="8.1. 保持自己忙碌或做自己的工作"></a>8.1. 保持自己忙碌或做自己的工作</h3><p>这个程序有什么问题？<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="hljs-string">"Hello, GopherCon SG"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>该程序实现了我们的预期,它提供简单的 Web 服务。 然而,它同时也做了其他事情,它在无限循环中浪费 CPU 资源。 这是因为<code>main</code>的最后一行上的<code>for {}</code>将阻塞<code>main goroutine</code>,因为它不执行任何 IO、等待锁定、发送或接收通道数据或以其他方式与调度器通信。</p><p>由于 Go 语言运行时主要是协同调度,该程序将在单个 CPU 上做无效地旋转,并可能最终实时锁定。</p><p>我们如何解决这个问题？ 这是一个建议。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line"><span class="hljs-string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="hljs-string">"Hello, GopherCon SG"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">runtime.Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这看起来很愚蠢,但这是我看过的一种常见解决方案。 这是不了解潜在问题的症状。</p><p>现在,如果你有更多的经验,你可能会写这样的东西。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="hljs-string">"Hello, GopherCon SG"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>空的<code>select</code>语句将永远阻塞。 这是一个有用的属性,因为现在我们不再调用<code>runtime.GoSched()</code>而耗费整个 CPU。 但是这也只是治疗了症状,而不是病根。</p><p>我想向你提出另一种你可能在用的解决方案。 与其在<code>goroutine</code>中运行<code>http.ListenAndServe</code>,会给我们留下处理<code>main goroutine</code>的问题,不如在<code>main goroutine</code>本身上运行<code>http.ListenAndServe</code>。</p><blockquote><p>小窍门:如果 Go 语言程序的<code>main.main</code>函数返回,无论程序在一段时间内启动的其他<code>goroutine</code>在做什么, Go 语言程序会无条件地退出。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="hljs-string">"Hello, GopherCon SG"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">":8080"</span>, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这是我的第一条建议：如果你的<code>goroutine</code>在得到另一个结果之前无法取得进展,那么让自己完成此工作而不是委托给其他<code>goroutine</code>会更简单。</p><p>这通常会消除将结果从<code>goroutine</code>返回到其启动程序所需的大量状态跟踪和通道操作。</p><blockquote><p>小窍门:许多 Go 程序员过度使用<code>goroutine</code>,特别是刚开始时。与生活中的所有事情一样,适度是成功的关键。</p></blockquote><h3 id="8-2-将并发性留给调用者"><a href="#8-2-将并发性留给调用者" class="headerlink" title="8.2. 将并发性留给调用者"></a>8.2. 将并发性留给调用者</h3><p>以下两个 API 有什么区别？<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ListDirectory returns the contents of dir.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListDirectory</span><span class="hljs-params">(dir <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">([]<span class="hljs-keyword">string</span>, error)</span></span></span><br></pre></td></tr></table></figure><br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ListDirectory returns a channel over which</span></span><br><span class="line"><span class="hljs-comment">// directory entries will be published. When the list</span></span><br><span class="line"><span class="hljs-comment">// of entries is exhausted, the channel will be closed.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListDirectory</span><span class="hljs-params">(dir <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">chan</span> <span class="hljs-title">string</span></span></span><br></pre></td></tr></table></figure><br>首先,最明显的不同: 第一个示例将目录读入切片然后返回整个切片,如果出错则返回错误。这是同步发生的,<code>ListDirectory</code>的调用者会阻塞,直到读取了所有目录条目。根据目录的大小,这可能需要很长时间,并且可能会分配大量内存来构建目录条目。</p><p>让我们看看第二个例子。 这个示例更像是 Go 语言风格,<code>ListDirectory</code>返回一个通道,通过该通道传递目录条目。当通道关闭时,表明没有更多目录条目。由于在<code>ListDirectory</code>返回后发生了通道的填充,<code>ListDirectory</code>可能会启动一个<code>goroutine</code>来填充通道。</p><blockquote><p>注意:<br>第二个版本实际上不必使用 Go 协程; 它可以分配一个足以保存所有目录条目而不阻塞的通道,填充通道,关闭它,然后将通道返回给调用者。但这样做不太现实,因为会消耗大量内存来缓冲通道中的所有结果。</p></blockquote><p>通道版本的<code>ListDirectory</code>还有两个问题：</p><ul><li>通过使用关闭通道作为没有其他项目要处理的信号,在中途遇到了错误时,<code>ListDirectory</code>无法告诉调用者通过通道返回的项目集是否完整。调用者无法区分空目录和读取目录的错误。两者都导致从<code>ListDirectory</code>返回的通道立即关闭。</li><li>调用者必须持续从通道中读取,直到它被关闭,因为这是调用者知道此通道的是否停止的唯一方式。这是对<code>ListDirectory</code>使用的严重限制,即使可能已经收到了它想要的答案,调用者也必须花时间从通道中读取。就中型到大型目录的内存使用而言,它可能更有效,但这种方法并不比原始的基于切片的方法快。</li></ul><p>以上两种实现所带来的问题的解决方案是使用回调,该回调是在执行时在每个目录条目的上下文中调用函数。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListDirectory</span><span class="hljs-params">(dir <span class="hljs-keyword">string</span>, fn <span class="hljs-keyword">func</span>(<span class="hljs-keyword">string</span>)</span>)</span></span><br></pre></td></tr></table></figure><br>毫不奇怪,这就是<code>filepath.WalkDir</code>函数的工作方式。</p><blockquote><p>小窍门:如果你的函数启动了<code>goroutine</code>,你必须为调用者提供一种明确停止<code>goroutine</code>的方法。 把异步执行函数的决定留给该函数的调用者通常会更容易些。</p></blockquote><h3 id="8-3-永远不要启动一个停止不了的-goroutine。"><a href="#8-3-永远不要启动一个停止不了的-goroutine。" class="headerlink" title="8.3. 永远不要启动一个停止不了的 goroutine。"></a>8.3. 永远不要启动一个停止不了的 goroutine。</h3><p>前面的例子显示当一个任务时没有必要时使用<code>goroutine</code>。但使用 Go 语言的原因之一是该语言提供的并发功能。实际上,很多情况下你希望利用硬件中可用的并行性。为此,你必须使用<code>goroutines</code>。</p><p>这个简单的应用程序在两个不同的端口上提供<code>http</code>服务,端口<code>8080</code>用于应用程序服务,端口<code>8001</code>用于访问<code>/debug/pprof</code>终端。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"fmt"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">_ <span class="hljs-string">"net/http/pprof"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(resp, <span class="hljs-string">"Hello, QCon!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">go</span> http.ListenAndServe(<span class="hljs-string">"127.0.0.1:8001"</span>, http.DefaultServeMux) <span class="hljs-comment">// debug</span></span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, mux)                       <span class="hljs-comment">// app traffic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>虽然这个程序不是很复杂,但它代表了真实应用程序的基础。</p><p>该应用程序存在一些问题,因为它随着应用程序的增长而显露出来,所以我们现在来解决其中的一些问题。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveApp</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(resp, <span class="hljs-string">"Hello, QCon!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveDebug</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">http.ListenAndServe(<span class="hljs-string">"127.0.0.1:8001"</span>, http.DefaultServeMux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> serveDebug()</span><br><span class="line">serveApp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>通过将<code>serveApp</code>和<code>serveDebug</code>处理程序分解成为它们自己的函数,我们将它们与<code>main.main</code>分离。 也遵循了上面的建议,并确保<code>serveApp</code>和<code>serveDebug</code>将它们的并发性留给调用者。</p><p>但是这个程序存在一些可操作性问题。 如果<code>serveApp</code>返回,那么<code>main.main</code>将返回,导致程序关闭并由你使用的进程管理器来重新启动。</p><blockquote><p>小窍门:正如 Go 语言中的函数将并发性留给调用者一样,应用程序应该将监视其状态和检测是否重启的工作留给另外的程序来做。 不要让你的应用程序负责重新启动自己,最好从应用程序外部处理该过程。</p></blockquote><p>然而,<code>serveDebug</code>是在一个单独的<code>goroutine</code>中运行的,返回后该<code>goroutine</code>将退出,而程序的其余部分继续。 由于<code>/debug</code>处理程序已停止工作很久,因此操作人员不会很高兴发现他们无法在你的应用程序中获取统计信息。</p><p>我们想要确保的是,如果任何负责提供此应用程序的<code>goroutine</code>停止,我们将关闭该应用程序。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveApp</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(resp, <span class="hljs-string">"Hello, QCon!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, mux); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveDebug</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := http.ListenAndServe(<span class="hljs-string">"127.0.0.1:8001"</span>, http.DefaultServeMux); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">go</span> serveDebug()</span><br><span class="line"><span class="hljs-keyword">go</span> serveApp()</span><br><span class="line"><span class="hljs-keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在<code>serverApp</code>和<code>serveDebug</code>检查从<code>ListenAndServe</code>返回的错误,并在需要时调用<code>log.Fatal</code>。因为两个处理程序都在<code>goroutine</code>中运行,所以我们将<code>main goroutine</code>停在<code>select{}</code>中。</p><p>这种方法存在许多问题：</p><ol><li>如果<code>ListenAndServer</code>返回<code>nil</code>错误,则不会调用<code>log.Fatal</code>,并且该端口上的 HTTP 服务将在不停止应用程序的情况下关闭。</li><li><code>log.Fatal</code>调用<code>os.Exit</code>,它将无条件地退出程序;<code>defer</code>不会被调用,其他<code>goroutines</code>也不会被通知关闭,程序就停止了。 这使得编写这些函数的测试变得困难。</li></ol><blockquote><p>小窍门:只在<code>main.main</code>或<code>init</code>函数中的使用<code>log.Fatal</code>。</p></blockquote><p>我们真正想要的是任何错误发送回<code>goroutine</code>的调用者,以便它可以知道<code>goroutine</code>停止的原因,可以干净地关闭程序进程。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveApp</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(resp, <span class="hljs-string">"Hello, QCon!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> http.ListenAndServe(<span class="hljs-string">"0.0.0.0:8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveDebug</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> http.ListenAndServe(<span class="hljs-string">"127.0.0.1:8001"</span>, http.DefaultServeMux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, <span class="hljs-number">2</span>)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done &lt;- serveDebug()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done &lt;- serveApp()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">cap</span>(done); i++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := &lt;-done; err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以使用通道来收集<code>goroutine</code>的返回状态。通道的大小等于我们想要管理的<code>goroutine</code>的数量,这样发送到<code>done</code>通道就不会阻塞,因为这会阻止<code>goroutine</code>的关闭,导致它泄漏。</p><p>由于没有办法安全地关闭<code>done</code>通道,我们不能使用<code>for range</code>来循环通道直到获取所有<code>goroutine</code>发来的报告,而是循环我们开启的多个<code>goroutine</code>,即通道的容量。</p><p>现在我们有办法等待每个<code>goroutine</code>干净地退出并记录他们遇到的错误。所需要的只是一种从第一个<code>goroutine</code>转发关闭信号到其他<code>goroutine</code>的方法。</p><p>事实证明,要求<code>http.Server</code>关闭是有点牵扯的,所以我将这个逻辑转给辅助函数。<code>serve</code>助手使用一个地址和<code>http.Handler</code>,类似于<code>http.ListenAndServe</code>,还有一个<code>stop</code>通道,我们用它来触发<code>Shutdown</code>方法。<br><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serve</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>, handler http.Handler, stop &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">s := http.Server&#123;</span><br><span class="line">Addr:    addr,</span><br><span class="line">Handler: handler,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">&lt;-stop <span class="hljs-comment">// wait for stop signal</span></span><br><span class="line">s.Shutdown(context.Background())</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> s.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveApp</span><span class="hljs-params">(stop &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.HandleFunc(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(resp, <span class="hljs-string">"Hello, QCon!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">return</span> serve(<span class="hljs-string">"0.0.0.0:8080"</span>, mux, stop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serveDebug</span><span class="hljs-params">(stop &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> serve(<span class="hljs-string">"127.0.0.1:8001"</span>, http.DefaultServeMux, stop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, <span class="hljs-number">2</span>)</span><br><span class="line">stop := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done &lt;- serveDebug(stop)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">done &lt;- serveApp(stop)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> stopped <span class="hljs-keyword">bool</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">cap</span>(done); i++ &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> err := &lt;-done; err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="hljs-string">"error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !stopped &#123;</span><br><span class="line">stopped = <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-built_in">close</span>(stop)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在,每次我们在<code>done</code>通道上收到一个值时,我们关闭<code>stop</code>通道,这会导致在该通道上等待的所有<code>goroutine</code>关闭其<code>http.Server</code>。 这反过来将导致其余所有的<code>ListenAndServe`</code>goroutines<code>返回。 一旦我们开启的所有</code>goroutine<code>都停止了,</code>main.main`就会返回并且进程会干净地停止。</p><blockquote><p>小窍门:自己编写这种逻辑是重复而微妙的。 参考下这个包: <a href="https://github.com/heptio/workgroup" target="_blank" rel="noopener">https://github.com/heptio/workgroup</a>,它会为你完成大部分工作。</p></blockquote><hr><blockquote><p><strong>引用: </strong></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_1" target="_blank" rel="noopener">1</a>. <a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">https://gaston.life/books/effective-programming/</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_2" target="_blank" rel="noopener">2</a>. <a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">https://talks.golang.org/2014/names.slide#4</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_3" target="_blank" rel="noopener">3</a>. <a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">https://www.infoq.com/articles/API-Design-Joshua-Bloch</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_1" target="_blank" rel="noopener">1</a>. <a href="https://www.lysator.liu.se/c/pikestyle.html" target="_blank" rel="noopener">https://www.lysator.liu.se/c/pikestyle.html</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_2" target="_blank" rel="noopener">2</a>. <a href="https://speakerdeck.com/campoy/understanding-nil" target="_blank" rel="noopener">https://speakerdeck.com/campoy/understanding-nil</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_3" target="_blank" rel="noopener">3</a>. <a href="https://www.youtube.com/watch?v=Ic2y6w8lMPA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Ic2y6w8lMPA</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_4" target="_blank" rel="noopener">4</a>. <a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88" target="_blank" rel="noopener">https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_5" target="_blank" rel="noopener">5</a>. <a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="noopener">https://golang.org/doc/go1.4#internalpackages</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_6" target="_blank" rel="noopener">6</a>. <a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_7" target="_blank" rel="noopener">7</a>. <a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_8" target="_blank" rel="noopener">8</a>. <a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_9" target="_blank" rel="noopener">9</a>. <a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201" target="_blank" rel="noopener">https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_10" target="_blank" rel="noopener">10</a>. <a href="https://blog.golang.org/errors-are-values" target="_blank" rel="noopener">https://blog.golang.org/errors-are-values</a></p><p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_footnoteref_11" target="_blank" rel="noopener">11</a>. <a href="http://www.gopl.io/" target="_blank" rel="noopener">http://www.gopl.io/</a></p></blockquote><hr><p><strong>原文链接：</strong><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">Practical Go: Real world advice for writing maintainable Go programs</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Kubespray在国内自动化部署Kubernetes集群（1.14.1）</title>
      <link href="/2019/05/23/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/%E4%BD%BF%E7%94%A8Kubespray%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Kubernetes%E9%9B%86%E7%BE%A4%EF%BC%881.14.1%EF%BC%89/"/>
      <url>/2019/05/23/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/%E4%BD%BF%E7%94%A8Kubespray%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Kubernetes%E9%9B%86%E7%BE%A4%EF%BC%881.14.1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近刚刚学习k8s,部署k8s的操作过于麻烦,因此想要寻找到一种自动化部署方式,Kubespray是现在最好的自动化部署方式,拥有支持多平台 、相对简单 、适用于生产环境的特点。</p><a id="more"></a><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>每一台linux机器都需要特殊单独配置一下,才能使用于搭建k8s的环境,我使用的是centos7系统,现在开始搭建k8s准备环境的第一步</p><h2 id="1-更新内核驱动"><a href="#1-更新内核驱动" class="headerlink" title="(1)更新内核驱动"></a>(1)更新内核驱动</h2><p>为了更好的使用 docker 和 k8s ,更新一下内核驱动, centos7 默认是3.3的版本<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment"># 导入 Key</span></span><br><span class="line"></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 安装 Yum 源</span></span><br><span class="line"></span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 更新 kernel</span></span><br><span class="line"></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel<span class="hljs-_">-lt</span> kernel<span class="hljs-_">-lt</span>-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 配置 内核优先</span></span><br><span class="line"></span><br><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure></p><h2 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="(2)关闭防火墙"></a>(2)关闭防火墙</h2><p>关闭防火墙为了防止部署时,防止各个节点因为防火墙的原因,不能通信</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#关闭防火墙。</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="hljs-built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="3-关闭linux安全控制"><a href="#3-关闭linux安全控制" class="headerlink" title="(3)关闭linux安全控制"></a>(3)关闭linux安全控制</h2><p>Security Context的目的是限制不可信容器的行为,保护系统和其他容器不受其影响。我们先关闭。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#关闭SELinux</span></span><br><span class="line">sed -i <span class="hljs-string">'s#SELINUX=enforcing#SELINUX=disabled#g'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h2 id="4-关闭交换分区"><a href="#4-关闭交换分区" class="headerlink" title="(4)关闭交换分区"></a>(4)关闭交换分区</h2><p>从 k8s 1.8版本就要求不能开启交换分区</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="hljs-string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br></pre></td></tr></table></figure><p>做完上面这些操作就可以<strong>重启</strong>一下机器,准备环境的工作就已经完成了</p><h1 id="二、准备安装k8s"><a href="#二、准备安装k8s" class="headerlink" title="二、准备安装k8s"></a>二、准备安装k8s</h1><p>Kubespray 是基于 ansible 上构建的一套自动化部署工具,所以我们需要先安装 ansible</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment"># 安装 centos 额外的yum源</span></span><br><span class="line">rpm -ivh https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># make 缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># ansible 必须 &gt;= 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 安装 软件</span></span><br><span class="line">yum install -y python-pip python34 python-netaddr python34-pip ansible</span><br></pre></td></tr></table></figure><p>安装好之后我们就可以先把 Kubespray 的源码从git上拉取下来</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;kubespray</span><br></pre></td></tr></table></figure><p>拉去下来后还不能直接使用,为什么呢？因为谷歌嘛,大家懂的。不能直接下载,需要走代理,或者使用其他镜像,我选择将源码中所有镜像都替换一遍才可以。<br>我使用的是七牛云,亚马逊的镜像源具体的替换过程为：</p><p><code>quay.io</code>替换为<code>quay-mirror.qiniu.com</code><br><code>gcr.io/google-containers</code>替换为<code>gcr.azk8s.cn/google-containers</code></p><p>试过中科大的镜像,但是体验不太好,老是失败。阿里云镜像则是有部分镜像没有,只有亚马逊的镜像是最全的。这个花了很长时间,因为网络原因试了很多次。</p><h1 id="三、安装k8s"><a href="#三、安装k8s" class="headerlink" title="三、安装k8s"></a>三、安装k8s</h1><p>首先进入 kubespray 的 git 目录下初始化 kubespray 脚本</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">cp -rfp inventory/sample inventory/mycluster</span><br></pre></td></tr></table></figure><p>编写 hosts.ini , 配置那些机器需要作为k8s的一部分<br><figure class="highlight ini hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-section">[all]</span></span><br><span class="line"></span><br><span class="line">k8s ansible_host=106.14.162.10</span><br><span class="line">node1  ansible_host=106.14.163.10</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[kube-master]</span></span><br><span class="line"></span><br><span class="line">k8s</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[etcd]</span></span><br><span class="line"></span><br><span class="line">k8s</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[kube-node]</span></span><br><span class="line"></span><br><span class="line">k8s</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[k8s-cluster:children]</span></span><br><span class="line"></span><br><span class="line">kube-master</span><br><span class="line"></span><br><span class="line">kube-node</span><br><span class="line"></span><br><span class="line"><span class="hljs-section">[calico-rr]</span></span><br></pre></td></tr></table></figure></p><p>看上面编写的 host.ini 应该很容易理解：</p><p>1.[all] 下面所有的机器节点,第一个为 机器hostname,第二个为机器的ip地址。</p><p>2.[etcd] 分布式存储运行在那些机器上</p><p>3.[kube-node] k8s 的 node节点有那些,用hostname 标示</p><p>4.[k8s-cluster:children] 表示集群有哪些把 kube-master 和 kube-node 填上就可以了,代表所有的机器</p><p>你可以根据自己的配置来进行修改</p><p>然后可以启动脚本了,脚本如下：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.ini cluster.yml -b -v -k</span><br></pre></td></tr></table></figure><p>启动脚本之后会让你输入ssh密码,只要输入密码就可以,中间可能出现一些问题,在访问到<code>storage.googleapis.com</code><br>这个域名的时候可能会出现下载失败,因为有的ip不能访问,多试几次就好了。</p><p>静静等待大概10分钟左右的样子应该就可以安装好了～</p><p>上面镜像和脚本的配置我已经编写好了,大家可以参考我写的,只需要修改<code>inventory/mycluster/hosts.ini</code>文件就可以了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b prod  https:&#x2F;&#x2F;github.com&#x2F;ulovecode&#x2F;kubespray</span><br></pre></td></tr></table></figure><p>运行脚本分别为<code>build-step1.sh</code>,<code>build-step2.sh</code>,<code>build.sh</code>,按照顺序运行就可以了</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>这次学 kubespray 搭建集群还是遇到许多问题,首先是网络问题,如果没有网络问题的原因可能只需一个小时的事情,但是因为网络原因,弄了一两天,因为每个镜像源总有或多或少的一些问题,不能够直接使用。另外搭建过程除了更换镜像原因,文章的内容还是很浅显的,但是考虑到只是搭建的步骤,应该还是能接受,后续会继续更新使用Kubespray在阿里云上自动化部署Kubernetes集群（1.14.1) 这篇文章的后续操作,有任何问题都可以在下面和我交流～</p>]]></content>
      
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReentrantLock 与 Synchronized 原理分析</title>
      <link href="/2019/03/09/Jvm/Java/ReentrantLock%E4%B8%8ESynchronized%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/03/09/Jvm/Java/ReentrantLock%E4%B8%8ESynchronized%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>ReentrantLock,可重入锁,是一种递归无阻塞的同步机制。它可以等同于 synchronized 的使用,但是 ReentrantLock 提供了比 synchronized 更强大、灵活的锁机制,可以减少死锁发生的概率。</p><p>synchronized 是 Java 中的关键字,是利用锁的机制来实现同步的。</p><a id="more"></a><hr><h1 id="一、synchronized"><a href="#一、synchronized" class="headerlink" title="一、synchronized"></a>一、synchronized</h1><p>synchronized 是 Java 中的关键字,是利用锁的机制来实现同步的。<br>锁机制有如下两种特性：</p><p>互斥性：即在同一时间只允许一个线程持有某个对象锁,通过这种特性来实现多线程中的协调机制,这样在同一时间只有一个线程对需同步的代码块(复合操作)进行访问。互斥性我们也往往称为操作的原子性。</p><p>可见性：必须确保在锁被释放之前,对共享变量所做的修改,对于随后获得该锁的另一个线程是可见的（即在获得锁时应获得最新共享变量的值）,否则另一个线程可能是在本地缓存的某个副本上继续操作从而引起不一致。</p><h2 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1. 实现原理"></a>1. 实现原理</h2><blockquote><p><code>synchronized</code>可以保证方法或者代码块在运行时,同一时刻只有一个方法可以进入到临界区,同时它还可以保证共享变量的内存可见性。</p></blockquote><p>Java 中每一个对象都可以作为锁,这是 synchronized 实现同步的基础：</p><ol><li>普通同步方法,锁是当前实例对象</li><li>静态同步方法,锁是当前类的 class 对象</li><li>同步方法块,锁是括号里面的对象</li></ol><blockquote><p>通过javap工具生成对class文件信息来分析synchronized</p></blockquote><figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">monitorenter</span> </span><br><span class="line"><span class="hljs-attribute">aload_i</span></span><br><span class="line"><span class="hljs-attribute">monitorexit</span></span><br></pre></td></tr></table></figure><ol><li>同步代码块是使用 monitorenter 和 monitorexit 指令实现的；</li><li>同步方法（在这看不出来需要看JVM底层实现）依靠的是方法修饰符上的ACC_SYNCHRONIZED 实现。</li></ol><p>同步代码块：monitorenter 指令插入到同步代码块的开始位置,monitorexit 指令插入到同步代码块的结束位置,JVM 需要保证每一个 monitorenter 都有一个 monitorexit 与之相对应。任何对象都有一个 Monitor 与之相关联,当且一个 Monitor 被持有之后,他将处于锁定状态。线程执行到 monitorenter 指令时,将会尝试获取对象所对应的 Monitor 所有权,即尝试获取对象的锁。</p><p>同步方法：synchronized 方法则会被翻译成普通的方法调用和返回指令如：invokevirtual、areturn 指令,在 VM 字节码层面并没有任何特别的指令来实现被synchronized 修饰的方法,而是在 Class 文件的方法表中将该方法的 access_flags 字段中的 synchronized 标志位置设置为 1,表示该方法是同步方法,并使用调用该方法的对象或该方法所属的 Class 在 JVM 的内部对象表示 Klass 作为锁对象</p><blockquote><p>ReentrantLock的底层是借助AbstractQueuedSynchronizer实现,所以其数据结构依附于AbstractQueuedSynchronizer的数据结构</p></blockquote><h2 id="2-Java-对象头、Monitor"><a href="#2-Java-对象头、Monitor" class="headerlink" title="2.Java 对象头、Monitor"></a>2.Java 对象头、Monitor</h2><p>Java 对象头和 Monitor 是实现 synchronized 的基础！下面就这两个概念来做详细介绍。</p><h3 id="2-1-Java对象头"><a href="#2-1-Java对象头" class="headerlink" title="2.1 Java对象头"></a>2.1 Java对象头</h3><p><code>synchronized</code>用的锁是存在Java对象头里的。那么什么是 Java 对象头呢？Hotspot 虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。其中：</p><ul><li>Klass Point 是是对象指向它的类元数据的指针,虚拟机通过这个指针来确定这个对象是哪个类的实例。</li><li>Mark Word 用于存储对象自身的运行时数据,它是实现轻量级锁和偏向锁的关键</li></ul><blockquote><p>Mark Word 用于存储对象自身的运行时数据,如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。Java 对象头一般占有两个机器码（在 32 位虚拟机中,1 个机器码等于 4 字节,也就是 32 bits）。但是如果对象是数组类型,则需要三个机器码,因为 JVM 虚拟机可以通过 Java 对象的元数据信息确定 Java 对象的大小,无法从数组的元数据来确认数组的大小,所以用一块来记录数组长度。</p></blockquote><h3 id="2-2-Monitor"><a href="#2-2-Monitor" class="headerlink" title="2.2 Monitor"></a>2.2 Monitor</h3><p>我们可以把它理解为一个同步工具,也可以描述为一种同步机制,它通常被描述为一个对象。每一个 Java 对象本身就带了一把看不见的锁,它叫做内部锁或者 Monitor 锁。</p><blockquote><ul><li>互斥： 一个 Monitor 锁在同一时刻只能被一个线程占用,其他线程无法占用。</li><li>信号机制( signal )： 占用 Monitor 锁失败的线程会暂时放弃竞争并等待某个谓词成真（条件变量）,但该条件成立后,当前线程会通过释放锁通知正在等待这个条件变量的其他线程,让其可以重新竞争锁。</li></ul></blockquote><p>Monitor Record 是线程私有的数据结构,每一个线程都有一个可用 Monitor Record 列表,同时还有一个全局的可用列表。<br>每一个被锁住的对象都会和一个 Monitor Record 关联（对象头的 MarkWord 中的 LockWord 指向 Monitor 的起始地址）,Monitor Record 中有一个 Owner 字段,存放拥有该锁的线程的唯一标识,表示该锁被这个线程占用。其结构如下：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Owner</span><br><span class="line">EntryQ</span><br><span class="line">RcThis</span><br><span class="line">Nest</span><br><span class="line">HashCode</span><br><span class="line">Candidate</span><br></pre></td></tr></table></figure><ol><li><p>Owner：</p><ol><li>初始时为 NULL 表示当前没有任何线程拥有该 Monitor Record。</li><li>当线程成功拥有该锁后保存线程唯一标识。</li><li>当锁被释放时又设置为 NULL 。</li></ol></li><li><p>EntryQ：关联一个系统互斥锁（ semaphore ）,阻塞所有试图锁住 Monitor Record失败的线程 。</p></li><li>RcThis：表示 blocked 或 waiting 在该 Monitor Record 上的所有线程的个数。</li><li>Nest：用来实现重入锁的计数。</li><li>HashCode：保存从对象头拷贝过来的 HashCode 值（可能还包含 GC age ）。</li><li>Candidate：用来避免不必要的阻塞或等待线程唤醒。因为每一次只有一个线程能够成功拥有锁,如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程,会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate 只有两种可能的值 ：1）0 表示没有需要唤醒的线程；2）1 表示要唤醒一个继任线程来竞争锁。</li></ol><h2 id="3-锁优化"><a href="#3-锁优化" class="headerlink" title="3. 锁优化"></a>3. 锁优化</h2><h3 id="3-1-自旋锁"><a href="#3-1-自旋锁" class="headerlink" title="3.1 自旋锁"></a>3.1 自旋锁</h3><p><strong>由来</strong></p><blockquote><p>线程的阻塞和唤醒,需要 CPU 从用户态转为核心态。频繁的阻塞和唤醒对 CPU 来说是一件负担很重的工作,势必会给系统的并发性能带来很大的压力。同时,我们发现在许多应用上面,对象锁的锁状态只会持续很短一段时间。为了这一段很短的时间,频繁地阻塞和唤醒线程是非常不值得的。所以引入自旋锁。</p></blockquote><p><strong>定义</strong></p><blockquote><p>所谓自旋锁,就是让该线程等待一段时间,不会被立即挂起,看持有锁的线程是否会很快释放锁。</p></blockquote><p>怎么等待呢？执行一段无意义的循环即可（自旋）。</p><h4 id="3-1-1-适应自旋锁"><a href="#3-1-1-适应自旋锁" class="headerlink" title="3.1.1 适应自旋锁"></a>3.1.1 适应自旋锁</h4><p>JDK 1.6 引入了更加聪明的自旋锁,即自适应自旋锁。</p><p>所谓自适应就意味着自旋的次数不再是固定的,它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？</p><blockquote><p>线程如果自旋成功了,那么下次自旋的次数会更加多,因为虚拟机认为既然上次成功了,那么此次自旋也很有可能会再次成功,那么它就会允许自旋等待持续的次数更多。<br>反之,如果对于某个锁,很少有自旋能够成功的,那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程,以免浪费处理器资源。<br>有了自适应自旋锁,随着程序运行和性能监控信息的不断完善,虚拟机对程序锁的状况预测会越来越准确,虚拟机会变得越来越聪明。</p></blockquote><h3 id="3-2-锁消除"><a href="#3-2-锁消除" class="headerlink" title="3.2 锁消除"></a>3.2 锁消除</h3><p><strong>由来</strong></p><blockquote><p>为了保证数据的完整性,我们在进行操作时需要对这部分操作进行同步控制。但是,在有些情况下,JVM检测到不可能存在共享数据竞争,这是JVM会对这些同步锁进行锁消除。如果不存在竞争,为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。</p></blockquote><p><strong>定义</strong></p><blockquote><p>锁消除的依据是<strong>逃逸分析的数据支持</strong>。变量是否逃逸,对于虚拟机来说需要使用数据流分析来确定,但是对于我们程序员来说这还不清楚么？我们会在明明知道不存在数据竞争的代码块前加上同步吗？但是有时候程序并不是我们所想的那样？我们虽然没有显示使用锁,但是我们在使用一些 JDK 的内置 API 时,如 StringBuffer、Vector、HashTable 等,这个时候会存在<strong>隐性的加锁操作</strong>。比如 StringBuffer 的<code>append(..)</code>方法,Vector 的<code>add(...)</code></p></blockquote><h3 id="3-3-锁粗化"><a href="#3-3-锁粗化" class="headerlink" title="3.3 锁粗化"></a>3.3 锁粗化</h3><p><strong>由来</strong></p><blockquote><p>我们知道在使用同步锁的时候,需要让同步块的作用范围尽可能小：仅在共享数据的实际作用域中才进行同步。这样做的目的,是为了使需要同步的操作数量尽可能缩小,如果存在锁竞争,那么等待锁的线程也能尽快拿到锁。</p></blockquote><p>在大多数的情况下,上述观点是正确的,但是如果一系列的连续加锁解锁操作,可能会导致不必要的性能损耗,所以引入锁粗话的概念。</p><p><strong>定义</strong></p><blockquote><p>锁粗话概念比较好理解,就是将多个连续的加锁、解锁操作连接在一起,扩展成一个范围更大的锁。</p></blockquote><p>如下面实例：vector 每次 add 的时候都需要加锁操作,JVM 检测到对同一个对象（vector）连续加锁、解锁操作,会合并一个更大范围的加锁、解锁操作,即加锁解锁操作会移到 for 循环之外。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vectorTest</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    Vector&lt;String&gt; vector = <span class="hljs-keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++)&#123;</span><br><span class="line">    vector.add(i + <span class="hljs-string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(vector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-锁的升级"><a href="#3-4-锁的升级" class="headerlink" title="3.4 锁的升级"></a>3.4 锁的升级</h3><blockquote><p>锁主要存在四种状态,依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。它们会随着竞争的激烈而逐渐升级。注意,锁可以升级不可降级,这种策略是为了提高获得锁和释放锁的效率。</p></blockquote><h4 id="3-4-1-重量级锁"><a href="#3-4-1-重量级锁" class="headerlink" title="3.4.1 重量级锁"></a>3.4.1 重量级锁</h4><p>重量级锁通过对象内部的监视器（Monitor）实现。</p><blockquote><p>其中,Monitor 的本质是,依赖于底层操作系统的 Mutex Lock 实现。操作系统实现线程之间的切换,需要从用户态到内核态的切换,切换成本非常高。</p></blockquote><h4 id="3-4-2-轻量级锁"><a href="#3-4-2-轻量级锁" class="headerlink" title="3.4.2 轻量级锁"></a>3.4.2 轻量级锁</h4><blockquote><p>引入轻量级锁的主要目的,是在没有多线程竞争的前提下,减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p></blockquote><p>当关闭偏向锁功能或者多个线程竞争偏向锁,导致偏向锁升级为轻量级锁,则会尝试获取轻量级锁,其步骤如下：</p><p><strong>获取锁</strong></p><ol><li>判断当前对象是否处于无锁状态？<ul><li>若是,则 JVM 首先将在当前线程的栈帧中,建立一个名为锁记录（Lock Record）的空间,用于存储锁对象目前的 Mark Word的 拷贝（官方把这份拷贝加了一个 Displaced 前缀,即 Displaced Mark Word）</li><li>否则,执行步骤（3）；</li></ul></li><li>JVM 利用 CAS 操作尝试将对象的 Mark Word 更新为指向 Lock Record 的指正<ul><li>如果成功,表示竞争到锁,则将锁标志位变成 00（表示此对象处于轻量级锁状态）,执行同步操作</li><li>如果失败,则执行步骤（3）；</li></ul></li><li>判断当前对象的 Mark Word 是否指向当前线程的栈帧？<ul><li>如果是,则表示当前线程已经持有当前对象的锁,则直接执行同步代码块；</li><li>否则,只能说明该锁对象已经被其他线程抢占了,当前线程便尝试使用自旋来获取锁。若自旋后没有获得锁,此时轻量级锁会升级为重量级锁,锁标志位变成 10,当前线程会被阻塞。</li></ul></li></ol><p><strong>释放锁</strong></p><blockquote><p>轻量级锁的释放也是通过 CAS 操作来进行的,主要步骤如下：</p></blockquote><ol><li>取出在获取轻量级锁保存在 Displaced Mark Word 中 数据。</li><li>使用 CAS 操作将取出的数据替换当前对象的 Mark Word 中。如果成功,则说明释放锁成功；否则,执行（3）。</li><li>如果 CAS 操作替换失败,说明有其他线程尝试获取该锁,则需要在释放锁的同时需要唤醒被挂起的线程。</li></ol><blockquote><p>对于轻量级锁,其性能提升的依据是：“对于绝大部分的锁,在整个生命周期内都是不会存在竞争的”。如果打破这个依据则除了互斥的开销外,还有额外的 CAS 操作,因此在有多线程竞争的情况下,轻量级锁比重量级锁更慢。</p></blockquote><h4 id="3-4-3-偏向锁"><a href="#3-4-3-偏向锁" class="headerlink" title="3.4.3 偏向锁"></a>3.4.3 偏向锁</h4><blockquote><p>引入偏向锁主要目的是：为了在无多线程竞争的情况下,尽量减少不必要的轻量级锁执行路径。</p></blockquote><p>上面提到了轻量级锁的加锁解锁操作,是需要依赖多次 CAS 原子指令的。那么偏向锁是如何来减少不必要的 CAS 操作呢？我们可以查看 Mark Word 的数据结构就明白了。</p><blockquote><p>偏向锁时 Mark Word 的数据结构为：线程 ID、Epoch( 偏向锁的时间戳 )、对象分带年龄、是否是偏向锁( 1 )、锁标识位( 01 )</p></blockquote><p>只需要检查是否为偏向锁、锁标识为以及 ThreadID 即可,处理流程如下：</p><p><strong>获取偏向锁</strong></p><ol><li>检测 Mark Word是 否为可偏向状态,即是否为偏向锁的标识位为 1 ,锁标识位为 01 。</li><li>若为可偏向状态,则测试线程 ID 是否为当前线程 ID ?<ul><li>如果是,则执行步骤（5）</li><li>否则,执行步骤（3）。</li></ul></li><li>如果线程 ID 不为当前线程 ID ,则通过 CAS 操作竞争锁。<ul><li>竞争成功,则将 Mark Word 的线程 ID 替换为当前线程 ID ,则执行步骤（5）</li><li>否则,执行线程（4）。</li></ul></li><li>通过 CAS 竞争锁失败,证明当前存在多线程竞争情况,当到达全局安全点,获得偏向锁的线程被挂起,偏向锁升级为轻量级锁,然后被阻塞在安全点的线程继续往下执行同步代码块。</li><li>执行同步代码块</li></ol><p><strong>撤销偏向锁</strong></p><p><strong>偏向锁的释放采用了一种只有竞争才会释放锁的机制</strong>,线程是不会主动去释放偏向锁,需要等待其他线程来竞争。</p><p>偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。其步骤如下：</p><ol><li>暂停拥有偏向锁的线程,判断锁对象是否还处于被锁定状态。</li><li>撤销偏向锁,恢复到无锁状态（ 01 ）或者轻量级锁的状态。</li><li>最后唤醒暂停的线程。</li></ol><p><strong>关闭偏向锁</strong></p><p>偏向锁在 JDK 1.6 以上,默认开启。开启后程序启动几秒后才会被激活,可使用 JVM 参数<code>-XX：BiasedLockingStartupDelay = 0</code>来关闭延迟。</p><p>如果确定锁通常处于竞争状态,则可通过JVM参数<code>-XX:-UseBiasedLocking=false</code>关闭偏向锁,那么默认会进入轻量级锁。</p><hr><h1 id="二、ReentrantLock"><a href="#二、ReentrantLock" class="headerlink" title="二、ReentrantLock"></a>二、ReentrantLock</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote><p>一个可重入的互斥锁定 Lock,它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义,但功能更强大。ReentrantLock 将由最近成功获得锁定,并且还没有释放该锁定的线程所拥有。当锁定没有被另一个线程所拥有时,调用 lock 的线程将成功获取该锁定并返回。如果当前线程已经拥有该锁定,此方法将立即返回。可以使用<code>isHeldByCurrentThread()</code>和<code>getHoldCount()</code>方法来检查此情况是否发生。</p></blockquote><p>ReentrantLock 还提供了公平锁和非公平锁的选择,通过构造方法接受一个可选的 fair 参数（默认非公平锁）：当设置为 true 时,表示公平锁；否则为非公平锁。</p><blockquote><p>公平锁与非公平锁的区别在于,公平锁的锁获取是有顺序的。但是公平锁的效率往往没有非公平锁的效率高,在许多线程访问的情况下,公平锁表现出较低的吞吐量。</p></blockquote><p>ReentrantLock 整体结构:</p><ul><li>ReentrantLock 实现 Lock 接口,基于内部的 Sync 实现。</li><li>Sync 实现 AQS ,提供了 FairSync 和 NonFairSync 两种实现。</li></ul><h2 id="2-Sync-抽象类"><a href="#2-Sync-抽象类" class="headerlink" title="2. Sync 抽象类"></a>2. Sync 抽象类</h2><blockquote><p>Sync 是 ReentrantLock 的内部静态类,实现 AbstractQueuedSynchronizer 抽象类,同步器抽象类。它使用 AQS 的 state 字段,来表示当前锁的持有数量,从而实现可重入的特性。</p></blockquote><h3 id="2-1-lock"><a href="#2-1-lock" class="headerlink" title="2.1 lock"></a>2.1 lock</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Performs &#123;<span class="hljs-doctag">@link</span> Lock#lock&#125;. The main reason for subclassing</span></span><br><span class="line"><span class="hljs-comment"> * is to allow fast path for nonfair version.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span>;</span><br></pre></td></tr></table></figure><p>执行锁。抽象了该方法的原因是,允许子类实现快速获得非公平锁的逻辑。</p><h3 id="2-2-nonfairTryAcquire"><a href="#2-2-nonfairTryAcquire" class="headerlink" title="2.2 nonfairTryAcquire"></a>2.2 nonfairTryAcquire</h3><p><code>nonfairTryAcquire(int acquires)</code>方法,非公平锁的方式获得锁。代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//当前线程</span></span><br><span class="line">    <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="hljs-comment">//获取同步状态</span></span><br><span class="line">    <span class="hljs-keyword">int</span> c = getState();</span><br><span class="line">    <span class="hljs-comment">//state == 0,表示没有该锁处于空闲状态</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取锁成功,设置为当前线程所有</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//线程重入</span></span><br><span class="line">    <span class="hljs-comment">//判断锁持有的线程是否为当前线程</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span></span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要逻辑：首先判断同步状态 state == 0 ?</p><ul><li>如果是,表示该锁还没有被线程持有,直接通过CAS获取同步状态。<ul><li>如果成功,返回 true 。</li><li>否则,返回 false 。</li></ul></li><li>如果不是,则判断当前线程是否为获取锁的线程？<ul><li>如果是,则获取锁,成功返回 true 。成功获取锁的线程,再次获取锁,这是增加了同步状态 state 。通过这里的实现,我们可以看到上面提到的 “它使用 AQS 的 state 字段,来表示当前锁的持有数量,从而实现可重入的特性”。</li><li>否则,返回 false 。</li></ul></li></ul><blockquote><p>理论来说,这个方法应该在子类 FairSync 中实现,但是为什么会在这里呢？在下文的 ReentrantLock.tryLock() 中,详细解析。</p></blockquote><h3 id="2-3-tryRelease"><a href="#2-3-tryRelease" class="headerlink" title="2.3 tryRelease"></a>2.3 tryRelease</h3><p><code>tryRelease(int releases)</code>实现方法,释放锁。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 减掉releases</span></span><br><span class="line">    <span class="hljs-keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="hljs-comment">// 如果释放的不是持有锁的线程,抛出异常</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="hljs-keyword">boolean</span> free = <span class="hljs-keyword">false</span>;</span><br><span class="line">    <span class="hljs-comment">// state == 0 表示已经释放完全了,其他线程可以获取同步状态了</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        free = <span class="hljs-keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="hljs-keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>通过判断判断是否为获得到锁的线程,保证该方法线程安全。</li><li>只有当同步状态彻底释放后,该方法才会返回 true 。当<code>state == 0</code>时,则将锁持有线程设置为 null ,<code>free = true</code>,表示释放成功。</li></ul><blockquote><p>从这些方法中,我们可以看到,ReentrantLock 是独占获取同步状态的模式。</p></blockquote><h2 id="3-Sync-实现类"><a href="#3-Sync-实现类" class="headerlink" title="3. Sync 实现类"></a>3. Sync 实现类</h2><h3 id="3-1-NonfairSync"><a href="#3-1-NonfairSync" class="headerlink" title="3.1 NonfairSync"></a>3.1 NonfairSync</h3><blockquote><p>NonfairSync 是 ReentrantLock 的内部静态类,实现 Sync 抽象类,非公平锁实现类。</p></blockquote><p><strong>3.1.1 lock</strong></p><p><code>lock()</code>实现方法,首先基于 AQS state 进行 CAS 操作,将 0 =&gt; 1 。</p><ul><li>若成功,则获取锁成功。</li><li>若失败,执行 AQS 的正常的同步状态获取逻辑。</li></ul><p>代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        acquire(<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.1.2 tryAcquire</strong></p><p><code>tryAcquire(int acquires)</code>实现方法,非公平的方式,获得同步状态。代码如下：</p><p>protected final boolean tryAcquire(int acquires) {<br>    return nonfairTryAcquire(acquires);<br>}</p><blockquote><p>直接调用<code>nonfairTryAcquire(int acquires)</code>方法,非公平锁的方式获得锁。</p></blockquote><h3 id="3-2-FairSync"><a href="#3-2-FairSync" class="headerlink" title="3.2 FairSync"></a>3.2 FairSync</h3><blockquote><p>FairSync 是 ReentrantLock 的内部静态类,实现 Sync 抽象类,公平锁实现类。</p></blockquote><p><strong>3.2.1 lock</strong></p><p><code>lock()</code>实现方法,代码如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>直接执行 AQS 的正常的同步状态获取逻辑。</p></blockquote><p><strong>3.2.2 tryAcquire</strong></p><p><code>tryAcquire(int acquires)</code>实现方法,公平的方式,获得同步状态。代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="hljs-keyword">int</span> c = getState();</span><br><span class="line">    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; <span class="hljs-comment">// &lt;1&gt;</span></span><br><span class="line">                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>比较非公平锁和公平锁获取同步状态的过程,会发现两者唯一的区别就在于:公平锁在获取同步状态时多了一个限制条件 <1> 处的<code>hasQueuedPredecessors()</code>方法,是否有前序节点,即<strong>自己不是首个等待获取同步状态的节点</strong>。</1></p></blockquote><p>代码如下:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// AbstractQueuedSynchronizer.java</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasQueuedPredecessors</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Node t = tail;  <span class="hljs-comment">//尾节点</span></span><br><span class="line">    Node h = head;  <span class="hljs-comment">//头节点</span></span><br><span class="line">    Node s;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//头节点 != 尾节点</span></span><br><span class="line">    <span class="hljs-comment">//同步队列第一个节点不为null</span></span><br><span class="line">    <span class="hljs-comment">//当前线程是同步队列第一个节点</span></span><br><span class="line">    <span class="hljs-keyword">return</span> h != t &amp;&amp;</span><br><span class="line">            ((s = h.next) == <span class="hljs-keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法主要做一件事情：主要是判断当前线程是否位于 CLH 同步队列中的第一个。如果是则返回 true ,否则返回 false 。</p></blockquote><h2 id="4-Lock-接口"><a href="#4-Lock-接口" class="headerlink" title="4. Lock 接口"></a>4. Lock 接口</h2><p><code>java.util.concurrent.locks.Lock</code>接口,定义方法如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//获取当前锁后返回</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>; <span class="hljs-comment">//获取锁对过程中可以中断</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//非阻塞对获取锁,如果能够获取就返回true,如果不能返回false</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>; <span class="hljs-comment">//超时的获取锁 1.在时间内成功获取锁2.超时返回3.被中断</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//释放锁</span></span><br><span class="line"><span class="hljs-function">Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//获取等待组件,该组件和当前的锁绑定,只有当前线程获取了锁,才能调用wait()方法,调用后当前线程的锁被释放</span></span><br></pre></td></tr></table></figure><h2 id="5-ReentrantLock"><a href="#5-ReentrantLock" class="headerlink" title="5. ReentrantLock"></a>5. ReentrantLock</h2><p><code>java.util.concurrent.locks.ReentrantLock</code>,实现 Lock 接口,重入锁。</p><blockquote><p>ReentrantLock 的实现方法,基本是对 Sync 的调用（通过委托的方式）。</p></blockquote><h3 id="5-1-构造方法"><a href="#5-1-构造方法" class="headerlink" title="5.1 构造方法"></a>5.1 构造方法</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="hljs-keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="hljs-keyword">new</span> FairSync() : <span class="hljs-keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基于<code>fair</code>参数,创建 FairSync 还是 NonfairSync 对象。</p></blockquote><h3 id="5-2-lock"><a href="#5-2-lock" class="headerlink" title="5.2 lock"></a>5.2 lock</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-lockInterruptibly"><a href="#5-3-lockInterruptibly" class="headerlink" title="5.3 lockInterruptibly"></a>5.3 lockInterruptibly</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    sync.acquireInterruptibly(<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-tryLock"><a href="#5-4-tryLock" class="headerlink" title="5.4 tryLock"></a>5.4 tryLock</h3><ul><li><code>tryLock()</code>实现方法,在实现时,<strong>希望能快速的获得是否能够获得到锁</strong>,因此即使在设置为 fair = true ( 使用公平锁 ),<strong>依然调用 Sync#nonfairTryAcquire(int acquires)</strong> 方法。</li><li>如果真的希望<code>tryLock()</code>还是按照是否公平锁的方式来,可以调用<code>tryLock(0, TimeUnit)</code>方法来实现。</li></ul><h3 id="5-5-tryLock-0-TimeUnit"><a href="#5-5-tryLock-0-TimeUnit" class="headerlink" title="5.5 tryLock(0, TimeUnit)"></a>5.5 tryLock(0, TimeUnit)</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="hljs-function">        <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-unlock"><a href="#5-6-unlock" class="headerlink" title="5.6 unlock"></a>5.6 unlock</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="hljs-number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-newCondition"><a href="#5-7-newCondition" class="headerlink" title="5.7 newCondition"></a>5.7 newCondition</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> sync.newCondition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><ol><li>与 synchronized 相比,ReentrantLock提供了更多,更加全面的功能,具备更强的扩展性。例如：时间锁等候,可中断锁等候,锁投票。</li><li>ReentrantLock 还提供了条件 Condition ,对线程的等待、唤醒操作更加详细和灵活,所以在多个条件变量和高度竞争锁的地方,ReentrantLock 更加适合（以后会阐述Condition）。</li><li>ReentrantLock 提供了可轮询的锁请求。它会尝试着去获取锁,如果成功则继续,否则可以等到下次运行时处理,而 synchronized 则一旦进入锁请求要么成功要么阻塞,所以相比 synchronized 而言,ReentrantLock会不容易产生死锁些。</li><li>ReentrantLock 支持更加灵活的同步代码块,但是使用 synchronized 时,只能在同一个 synchronized 块结构中获取和释放。注意,ReentrantLock 的锁释放一定要在 finally 中处理,否则可能会产生严重的后果。</li><li>ReentrantLock 支持中断处理,且性能较 synchronized 会好些。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java性能调优</title>
      <link href="/2019/01/01/Jvm/Java/Java%E8%B0%83%E4%BC%98/"/>
      <url>/2019/01/01/Jvm/Java/Java%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>公司做拼团活动时候,服务器挂掉了,需要对服务器的性能进行排查,压力测试使用阿里云的PTS和本地的Jmemter配合使用模拟<br>用户真实登录的情况,以下是我在工作中得到一些经验.</p><a id="more"></a><h5 id="保持调优的环境是良好的"><a href="#保持调优的环境是良好的" class="headerlink" title="保持调优的环境是良好的"></a><strong>保持调优的环境是良好的</strong></h5><ul><li>redis,mysql是否与服务器在同一网段</li></ul><h5 id="检查各个连接池的配置是否合理"><a href="#检查各个连接池的配置是否合理" class="headerlink" title="检查各个连接池的配置是否合理"></a><strong>检查各个连接池的配置是否合理</strong></h5><p>配置连接池让资源能够可以重复使用,避免多次创建对象而消耗过多的时间和不必要的操作</p><ul><li>服务器端redis连接池数量是否配置</li><li>服务器端mysql连接池数量是否配置</li><li>httpclient(restTemplate)连接池数量是否配置</li></ul><h5 id="检查数据库字段是否有索引"><a href="#检查数据库字段是否有索引" class="headerlink" title="检查数据库字段是否有索引"></a><strong>检查数据库字段是否有索引</strong></h5><p>不加索引可能导致全表扫描,进而发生read timeout</p><h5 id="减少远程调用的次数"><a href="#减少远程调用的次数" class="headerlink" title="减少远程调用的次数"></a><strong>减少远程调用的次数</strong></h5><p>减少远程调用,优先存本地JVM</p><blockquote><p>本地JVM -&gt; Redis -&gt; Mysql  </p></blockquote><h5 id="配置合理的超时时间"><a href="#配置合理的超时时间" class="headerlink" title="配置合理的超时时间"></a><strong>配置合理的超时时间</strong></h5><p>配置合理的超时时间可以快速的让系统响应恢复,避免慢动作而卡死系统</p><p>需要配置的超时时间如下:</p><ul><li>socketTimeout</li><li>connectTimeout</li></ul><h5 id="页面redis缓存"><a href="#页面redis缓存" class="headerlink" title="页面redis缓存"></a><strong>页面redis缓存</strong></h5><p>将静态页面,将首页的页面数据可以直接缓存到本地,然后定时刷新页面</p><h5 id="优化tomcat参数"><a href="#优化tomcat参数" class="headerlink" title="优化tomcat参数"></a><strong>优化tomcat参数</strong></h5><p>server.xml:</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8080"</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="hljs-tag"> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">"5000"</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">"8443"</span> </span></span><br><span class="line"><span class="hljs-tag"> <span class="hljs-attr">keepAliveTimeout</span>=<span class="hljs-string">"5000"</span> <span class="hljs-attr">maxKeepAliveRequests</span>=<span class="hljs-string">"300"</span> </span></span><br><span class="line"><span class="hljs-tag"> <span class="hljs-attr">minSpareThreads</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">enableLookups</span>=<span class="hljs-string">"false"</span> <span class="hljs-attr">maxThreads</span>=<span class="hljs-string">"1000"</span> </span></span><br><span class="line"><span class="hljs-tag"> <span class="hljs-attr">acceptCount</span>=<span class="hljs-string">"1000"</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>catalina.sh:</p> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="hljs-string">"<span class="hljs-variable">$&#123;CATALINA_OPTS&#125;</span> -d64 -Xms4096m -Xmx4096m -Xmn1536m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=1024m"</span></span><br><span class="line">JAVA_OPTS=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span> -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:SurvivorRatio=8 -XX:+DisableExplicitGC -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark"</span></span><br><span class="line">JAVA_OPTS=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span> -verbose:gc -Xloggc:/usr/local/tomcat7/logs/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps"</span></span><br><span class="line">JAVA_OPTS=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span> -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/tomcat/logs/heapdump.hprof"</span></span><br><span class="line">JAVA_OPTS=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span> -Dfile.encoding=UTF-8"</span></span><br></pre></td></tr></table></figure><h5 id="性能调优排查策略"><a href="#性能调优排查策略" class="headerlink" title="性能调优排查策略"></a><strong>性能调优排查策略</strong></h5><blockquote><p>保持环境在高负载的情况下,去后台查看线程情况和GC情况</p><ul><li>ping redis,mysql的环境是否保持在一个网段<ul><li>2毫秒以上可能就是在不同网段</li></ul></li><li>使用<code>jstat --gc 10 1000</code>查看gc情况以及各个区间的情况<ul><li>如果有过多的 full gc 可能需要调大 JVM 堆区的大小</li></ul></li><li>使用<code>jstack &lt;pid&gt;</code>命令查看线程情况<ul><li>看线程中是否有业务代码,如果有业务代码需要查看sql语句执行是否缓慢</li><li>远程调用是否花费过多时间</li></ul></li></ul></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="noopener">Java性能权威指南 奥克斯 (Scott Oaks) 人民邮电出版社</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) PECS 原理</title>
      <link href="/2018/12/29/Jvm/Java/PECS%E5%8E%9F%E7%90%86/"/>
      <url>/2018/12/29/Jvm/Java/PECS%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>PECS来自集合的观点。如果你只是从通用集合中得到对象,那么它是生产者,<br> 你应该使用extends; 如果你只是添加对象,它是一个消费者,你应该使用super。<br> 如果同时使用相同的集合,则不应使用extends或super。</p><a id="more"></a><p>假设你有一个方法,它将事物的集合作为参数,但你希望它比仅接受一个更灵活Collection<thing>。</thing></p><p><strong>案例1：你希望浏览集合并对每个项目执行操作。</strong></p><p>然后列表是生产者,所以你应该使用Collection&lt;? extends Thing&gt;。</p><p>原因是Collection&lt;? extends Thing&gt;可以保存任何子类型Thing,每个Thing类型的对象在执行操作时都这样。<br>（你实际上无法向a添加任何内容Collection&lt;? extends Thing&gt;,因为你无法在运行时知道该集合的哪个特定子类型Thing。）</p><p><strong>案例2：你想要向集合中添加内容。</strong></p><p>然后列表是消费者,所以你应该使用Collection&lt;? super Thing&gt;。</p><p>这里的推理是不同的Collection&lt;? extends Thing&gt;,无论实际的参数化类型是什么,Collection&lt;? super Thing&gt;都可以随时保持Thing。<br>在这里你不关心列表中已有的内容,只要它允许Thing添加; 这是什么? super Thing保证。</p><p>在一门程序设计语言的类型系统中,一个类型规则或者类型构造器是：</p><ul><li>协变（covariant）,如果它保持了子类型序关系≦。该序关系是：子类型≦基类型。</li><li>逆变（contravariant）,如果它逆转了子类型序关系。</li><li>不变（invariant）,如果上述两种均不适用。</li></ul><blockquote><p>Animal[]并不是总能当作Cat[],因为当一个客户读取数组并期望得到一个Cat,但Animal[]中包含的可能是个Dog。所以逆变规则是不安全,所以如果get一个被斜变修饰的类型返回的是object类型</p></blockquote><p><img src="https://i.stack.imgur.com/KjDLw.png" alt="stackOverFlow image"></p><h2 id="返回值的协变"><a href="#返回值的协变" class="headerlink" title="返回值的协变"></a><strong>返回值的协变</strong></h2><p>在允许协变返回值的语言中, 子类可以重写 getAnimalForAdoption 方法来返回一个更窄的类型：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatShelter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnimalShelter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function">Cat <span class="hljs-title">getAnimalForAdoption</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法参数的逆变"><a href="#方法参数的逆变" class="headerlink" title="方法参数的逆变"></a><strong>方法参数的逆变</strong></h2><p>类似地,子类重写的方法接受更宽的类型也是类型安全（type safe）的：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatShelter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnimalShelter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putAnimal</span><span class="hljs-params">(Object animal)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协变的方法参数类型"><a href="#协变的方法参数类型" class="headerlink" title="协变的方法参数类型"></a><strong>协变的方法参数类型</strong></h2><p>在主流的语言中,Eiffel 允许一个重写的方法参数比起父类中的那一个有更加具体的类型,即参数类型协变。因此,Eiffel 版本的 putAnimal 会如下所示：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatShelter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnimalShelter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putAnimal</span><span class="hljs-params">(Cat animal)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去除对参数类型协变的依赖"><a href="#去除对参数类型协变的依赖" class="headerlink" title="去除对参数类型协变的依赖"></a><strong>去除对参数类型协变的依赖</strong></h3><p>其它语言特性可能用来弥补缺乏参数类型协变的缺乏。</p><p>在有泛型（即参数化多态及受限量词）的语言中,前面的例子可用更类型安全的方式重写[5] ：不定义 AnimalShelter,改为定义一个参数化的类 Shelter<t>。（这种方法的缺点之一是基类实现者需要预料到哪些类型要在子类中特化）</t></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shelter</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-function">T <span class="hljs-title">getAnimalForAdoption</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putAnimal</span><span class="hljs-params">(T animal)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatShelter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shelter</span>&lt;<span class="hljs-title">Cat</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-function">Cat <span class="hljs-title">getAnimalForAdoption</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putAnimal</span><span class="hljs-params">(Cat animal)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://stackoverflow.com/questions/2723397/what-is-pecs-producer-extends-consumer-super?rq=1" target="_blank" rel="noopener">What is PECS (Producer Extends Consumer Super)?</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98" target="_blank" rel="noopener">维基百科-逆变与协变</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro 常用软件及设置</title>
      <link href="/2018/11/08/Linux/Manjaro-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/11/08/Linux/Manjaro-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Manjaro Linux是基于Arch Linux 的 Linux 发行版,使用 Xfce 和 KDE Plasma 作为默认桌面环境,和 Arch 一样,采用滚动更新。其目标是为PC 提供易于使用的自由的操作系统</p><a id="more"></a><h1 id="一、设置更新源"><a href="#一、设置更新源" class="headerlink" title="一、设置更新源"></a>一、设置更新源</h1><h2 id="在-终端-执行下面的命令从官方的源列表中对中国源进行测速和设置"><a href="#在-终端-执行下面的命令从官方的源列表中对中国源进行测速和设置" class="headerlink" title="在 终端 执行下面的命令从官方的源列表中对中国源进行测速和设置"></a>在 终端 执行下面的命令从官方的源列表中对中国源进行测速和设置</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -gb testing -c China</span><br></pre></td></tr></table></figure><h2 id="加Arch-Linux-CN源"><a href="#加Arch-Linux-CN源" class="headerlink" title="加Arch Linux CN源"></a>加Arch Linux CN源</h2><p>在 /etc/pacman.conf 文件末尾添加两行：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span></span><br></pre></td></tr></table></figure></p><h2 id="安装aria2并加速源下载"><a href="#安装aria2并加速源下载" class="headerlink" title="安装aria2并加速源下载"></a>安装aria2并加速源下载</h2><h3 id="1-首先在终端中执行下面的命令安装aria2"><a href="#1-首先在终端中执行下面的命令安装aria2" class="headerlink" title="1.首先在终端中执行下面的命令安装aria2"></a>1.首先在终端中执行下面的命令安装aria2</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S aria2</span><br></pre></td></tr></table></figure><h3 id="2-修改-etc-pacman-conf-在-option-增加或修改为下面的内容："><a href="#2-修改-etc-pacman-conf-在-option-增加或修改为下面的内容：" class="headerlink" title="2.修改/etc/pacman.conf,在 [option] 增加或修改为下面的内容："></a>2.修改/etc/pacman.conf,在 [option] 增加或修改为下面的内容：</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XferCommand = /usr/bin/aria2c --allow-overwrite=<span class="hljs-literal">true</span> -c --file-allocation=falloc --<span class="hljs-built_in">log</span>-level=error -m2 --max-connection-per-server=5 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=<span class="hljs-literal">true</span> --summary-interval=60 -t10 -d / -o %o %u</span><br></pre></td></tr></table></figure><h2 id="二、系统设置"><a href="#二、系统设置" class="headerlink" title="二、系统设置"></a>二、系统设置</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure><h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><h4 id="安装fcitx框架"><a href="#安装fcitx框架" class="headerlink" title="安装fcitx框架"></a>安装fcitx框架</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S --noconfirm fcitx-im kcm-fcitx fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><h4 id="配置-xprofile-文件使输入法可以在kde的窗口中输入"><a href="#配置-xprofile-文件使输入法可以在kde的窗口中输入" class="headerlink" title="配置 ~/.xprofile 文件使输入法可以在kde的窗口中输入"></a>配置 ~/.xprofile 文件使输入法可以在kde的窗口中输入</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx"</span>&gt;&gt;~/.xprofile</span><br></pre></td></tr></table></figure><h2 id="三、常用设置"><a href="#三、常用设置" class="headerlink" title="三、常用设置"></a>三、常用设置</h2><h3 id="登录后开启数字锁"><a href="#登录后开启数字锁" class="headerlink" title="登录后开启数字锁"></a>登录后开启数字锁</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S --noconfirm systemd-numlockontty&amp;&amp;sudo systemctl <span class="hljs-built_in">enable</span> numLockOnTty.service</span><br></pre></td></tr></table></figure><h2 id="四、常用软件"><a href="#四、常用软件" class="headerlink" title="四、常用软件"></a>四、常用软件</h2><h3 id="Yaourt"><a href="#Yaourt" class="headerlink" title="Yaourt"></a>Yaourt</h3><p>Yaourt可用于查找软件包(包括[core] [extra] [community] AUR的软件包,pacman只能查找非AUR的软件包)。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S --noconfirm yaourt</span><br></pre></td></tr></table></figure></p><h3 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h3><pre><code>netease-cloud-music 网易云音乐；smplayer 视频播放器；google-chrome 谷歌浏览器；notepadqq 像notepad++文本编辑；sublime-text-dev-zh-cn 强大的开发必备文本编辑器；(有能力采用付费许可证)masterpdfeditor 对linux用户免费的PDF浏览及编辑器,支持实时预览；remarkable 卓越且功能齐全的 Markdown 编辑器；uget 媲美迅雷的下载工具；filezilla 强大的FTP工具；shadowsocks-qt5 翻墙工具,配合浏览器插件SwitchyOmega使用；deepin-screenshot 深度截图工具；shutter 强大的截图工具,gnome-web-photo配合使用；variety 随即更换壁纸的应用；ccal 终端农历日历,终端启动ccal；</code></pre><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -Sy --noconfirm netease-cloud-music smplayer smplayer-skins smplayer-themes google-chrome sublime-text-dev-zh-cn masterpdfeditor remarkable uget filezilla shadowsocks-qt5 deepin-screenshot shutter</span><br></pre></td></tr></table></figure><h3 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -Sy --noconfirm xmind  <span class="hljs-comment">#需要网络</span></span><br></pre></td></tr></table></figure><h3 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a>Fish</h3><h4 id="安装Fish"><a href="#安装Fish" class="headerlink" title="安装Fish"></a>安装Fish</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fish</span><br></pre></td></tr></table></figure><h4 id="更换默认的shell"><a href="#更换默认的shell" class="headerlink" title="更换默认的shell"></a>更换默认的shell</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3> <figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happen-before原则</title>
      <link href="/2018/08/23/Jvm/Java/Happen-before%E5%8E%9F%E5%88%99/"/>
      <url>/2018/08/23/Jvm/Java/Happen-before%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JVM定义的Happens-Before原则是一组偏序关系：对于两个操作A和B,这两个操作可以在不同的线程中执行。如果A Happens-Before B,那么可以保证,当A操作执行完后,A操作的执行结果对B操作是可见的。</p></blockquote><a id="more"></a><h5 id="happen-before八大原则"><a href="#happen-before八大原则" class="headerlink" title="happen-before八大原则"></a><strong>happen-before八大原则</strong></h5><ul><li>单线程happen-before原则：在同一个线程中,书写在前面的操作happen-before后面的操作。</li><li>锁的happen-before原则：同一个锁的unlock操作happen-before此锁的lock操作。</li><li>volatile的happen-before原则：对一个volatile变量的写操作happen-before对此变量的读操作。</li><li>happen-before的传递性原则：如果A操作 happen-before B操作,B操作happen-before C操作,那么A操作happen-before C操作。</li><li>线程启动的happen-before原则：同一个线程的start方法happen-before此线程的其它方法。</li><li>线程中断的happen-before原则：对线程interrupt方法的调用happen-before被中断线程的检测到中断发送的代码。</li><li>线程终结的happen-before原则：线程中的所有操作都happen-before线程的终止检测。</li><li>对象创建的happen-before原则：一个对象的初始化完成先于他的finalize方法调用。</li></ul><h5 id="程序次序规则"><a href="#程序次序规则" class="headerlink" title="程序次序规则"></a><strong>程序次序规则</strong></h5><p>一段代码在单线程中执行的结果是有序的。注意是执行结果,因为虚拟机、处理器会对指令进行重排序（重排序后面会详细介绍）。虽然重排序了,但是并不会影响程序的执行结果,所以程序最终执行的结果与顺序执行的结果是一致的。故而这个规则只对单线程有效,在多线程环境下无法保证正确性。</p><h5 id="锁定规则"><a href="#锁定规则" class="headerlink" title="锁定规则"></a><strong>锁定规则</strong></h5><p>这个规则比较好理解,无论是在单线程环境还是多线程环境,一个锁处于被锁定状态,那么必须先执行unlock操作后面才能进行lock操作。</p><h5 id="volatile变量规则"><a href="#volatile变量规则" class="headerlink" title="volatile变量规则"></a><strong>volatile变量规则</strong></h5><p>这是一条比较重要的规则,它标志着volatile保证了线程可见性。通俗点讲就是如果一个线程先去写一个volatile变量,然后一个线程去读这个变量,那么这个写操作一定是happens-before读操作的。</p><h5 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a><strong>传递规则</strong></h5><p>提现了happens-before原则具有传递性,即A happens-before B , B happens-before C,那么A happens-before C</p><h5 id="线程启动规则"><a href="#线程启动规则" class="headerlink" title="线程启动规则"></a><strong>线程启动规则</strong></h5><p>假定线程A在执行过程中,通过执行ThreadB.start()来启动线程B,那么线程A对共享变量的修改在接下来线程B开始执行后确保对线程B可见。</p><h5 id="线程终结规则"><a href="#线程终结规则" class="headerlink" title="线程终结规则"></a><strong>线程终结规则</strong></h5><p>假定线程A在执行的过程中,通过制定ThreadB.join()等待线程B终止,那么线程B在终止之前对共享变量的修改在线程A等待返回后可见。</p><p>上面八条是原生Java满足Happens-before关系的规则,但是我们可以对他们进行推导出其他满足happens-before的规则：</p><ol><li>将一个元素放入一个线程安全的队列的操作Happens-Before从队列中取出这个元素的操作</li><li>将一个元素放入一个线程安全容器的操作Happens-Before从容器中取出这个元素的操作</li><li>在CountDownLatch上的倒数操作Happens-Before CountDownLatch#await()操作</li><li>释放Semaphore许可的操作Happens-Before获得许可操作</li><li>Future表示的任务的所有操作Happens-Before Future#get()操作</li><li>向Executor提交一个Runnable或Callable的操作Happens-Before任务开始执行操作</li></ol><p>两个操作不存在上述（前面8条 + 后面6条）任一一个happens-before规则</p><p><strong>那么这两个操作就没有顺序的保障,JVM可以对这两个操作进行重排序。如果操作A happens-before操作B,那么操作A在内存上所做的操作对操作B都是可见的。</strong></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>周志明：《深入理解Java虚拟机》</p><p>方腾飞：《Java并发编程的艺术》</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized和volatile的分析和区别</title>
      <link href="/2018/08/23/Jvm/Java/Synchroized%E5%92%8CVolatile%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/23/Jvm/Java/Synchroized%E5%92%8CVolatile%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>synchronized和volatile比较了一些其中的区别。</p><a id="more"></a><h2 id="一、-知识普及"><a href="#一、-知识普及" class="headerlink" title="一、 知识普及"></a>一、 知识普及</h2><h3 id="Java内存模型-JMM"><a href="#Java内存模型-JMM" class="headerlink" title="Java内存模型[JMM]"></a>Java内存模型[JMM]</h3><p>描述了Java程序中各种变量（这里的变量指的是线程共享变量）的访问规则,以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层的细节。</p><h3 id="工作内存、主内存"><a href="#工作内存、主内存" class="headerlink" title="工作内存、主内存"></a>工作内存、主内存</h3><p>每个程序都有一个主内存,每个线程都有自己独立的工作内存,里面保存了该线程使用到的变量的副本（主内存该变量的一份拷贝）。不能直接访问主内存。线程间变量值的传递需要通过主内存完成。</p><h3 id="共享变量"><a href="#共享变量" class="headerlink" title="共享变量"></a>共享变量</h3><p>如果一个变量在多个线程的工作内存中都存在副本,那么这个变量就是这几个现成的共享变量。</p><h3 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a>as-if-serial语义</h3><p>as-if-serial：无论如何重排序,程序执行结果应该与代码顺序执行的结果一致（Java编译器、运行时和处理器都会保证Java在单线程下遵循as-if-serial语义）。</p><h3 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h3><p>代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或处理器为了提高程序性能而做的优化。</p><ul><li>编译器优化的重排序（编译器优化）</li><li>指令级并行重排序（处理器优化）</li><li>内存系统的重排序（处理器优化）</li></ul><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>一个线程对共享变量值的修改,能够及时地被其他线程看到。</p><h2 id="二、-synchronized"><a href="#二、-synchronized" class="headerlink" title="二、 synchronized"></a>二、 synchronized</h2><h3 id="1-JMM关于synchronized的两条规定："><a href="#1-JMM关于synchronized的两条规定：" class="headerlink" title="1.JMM关于synchronized的两条规定："></a>1.JMM关于synchronized的两条规定：</h3><ol><li>线程解锁前,必须把共享变量的最新值刷新到主内存中。</li><li>线程加锁前,将清空工作内存中共享变量的值,从而使用共享变量时需要从主内存中重新读取.</li></ol><h3 id="2-线程执行互斥代码的过程："><a href="#2-线程执行互斥代码的过程：" class="headerlink" title="2.线程执行互斥代码的过程："></a>2.线程执行互斥代码的过程：</h3><ol><li>获取互斥锁</li><li>清空工作内存。</li><li>从主内存拷贝变量的最新副本到工作内存中。</li><li>执行代码</li><li>将更改后的共享变量的值刷新到主内存中。</li><li>释放互斥锁。</li></ol><h3 id="3-可见性分析"><a href="#3-可见性分析" class="headerlink" title="3.可见性分析"></a>3.可见性分析</h3><p>导致共享变量在线程间不可见的原因:</p><ol><li>线程交叉执行</li><li>重排序结合线程交叉执行</li><li>共享变量更新后的值没有在工作内存和主内存间及时更新。</li></ol><h3 id="synchronized的解决方案："><a href="#synchronized的解决方案：" class="headerlink" title="synchronized的解决方案："></a>synchronized的解决方案：</h3><ol><li>原子性—-锁内部的代码在一段时间内只能由一个线程执行,避免线程在锁内部交叉执行。</li><li>有序性—-避免线程在锁内部交叉执行；重排序都是在单独的线程内执行,再结合as-if-serial理解。</li><li>可见性—-这是synchronized的可见性规范。</li></ol><h2 id="三、volatile"><a href="#三、volatile" class="headerlink" title="三、volatile"></a>三、volatile</h2><h3 id="1-通过加入内存屏障和禁止重排序优化来实现。"><a href="#1-通过加入内存屏障和禁止重排序优化来实现。" class="headerlink" title="1.通过加入内存屏障和禁止重排序优化来实现。"></a>1.通过加入内存屏障和禁止重排序优化来实现。</h3><ol><li>对volatile变量执行写操作时,会在写操作后加入一条store屏障指令。强制更新主内存；防止处理器把volatile前面的变量重排序到volatile写变量操作之后；</li><li>对volatile变量指向读操作时,会在读操作前加入一条load屏蔽指令。同上。</li></ol><h3 id="2-volatile如何实现内存可见性"><a href="#2-volatile如何实现内存可见性" class="headerlink" title="2.volatile如何实现内存可见性"></a>2.volatile如何实现内存可见性</h3><p>volatile变量在每次被线程访问时,都强迫主内存中重读该变量的值,而该变量发生变化时,又会强迫线程将最新的值刷新到主内存。这样任何时刻,不同的线程总能看到该变量的最新值。</p><h4 id="深入来说-通过加入内存屏障和禁止重排序优化来实现的"><a href="#深入来说-通过加入内存屏障和禁止重排序优化来实现的" class="headerlink" title="深入来说,通过加入内存屏障和禁止重排序优化来实现的"></a><strong>深入来说,通过加入内存屏障和禁止重排序优化来实现的</strong></h4><ul><li>对volatile变量执行写操作时,会在写操作后加入一条store屏障指令（写后强制刷新到主内存中去）</li><li>对volatile变量执行读操作时,会在读操作前加入一条load屏障指令（强制使工作内存中的变量拷贝失效）</li></ul><p><img src="https://md.ulovecode.com/volatile写.png-400" alt="volatile写"></p><p><img src="https://md.ulovecode.com/volatile读.png-400" alt="volatile读"></p><h3 id="3-volatile不能保证volatile变量复合操作的原子性"><a href="#3-volatile不能保证volatile变量复合操作的原子性" class="headerlink" title="3.volatile不能保证volatile变量复合操作的原子性"></a>3.volatile不能保证volatile变量复合操作的原子性</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;</span><br><span class="line">num++;<span class="hljs-comment">//不是原子操作</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><code>num++</code>分解成三个步骤：</p><ol><li>读取num的值</li><li>将num的值 + 1</li><li>将最新num的值写入内存</li></ol><h4 id="3-1-加入synchronized代码块"><a href="#3-1-加入synchronized代码块" class="headerlink" title="3.1 加入synchronized代码块"></a>3.1 加入synchronized代码块</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入synchronized后变成原子操作,换句话说,<code>num++</code>分解出来的三个步骤只能被一个线程执行完之后才能被另外一个线程执行。</p><h4 id="3-2-改成volatile变量"><a href="#3-2-改成volatile变量" class="headerlink" title="3.2 改成volatile变量"></a>3.2 改成volatile变量</h4><p>无法保证原子性。</p><h4 id="3-3-保证num自增操作的原子性"><a href="#3-3-保证num自增操作的原子性" class="headerlink" title="3.3 保证num自增操作的原子性"></a>3.3 保证num自增操作的原子性</h4><ul><li>使用synchronized关键字</li><li>lock()和unlock()</li><li>AtomicIntege</li></ul><h3 id="4-使用volatile的注意事项："><a href="#4-使用volatile的注意事项：" class="headerlink" title="4.使用volatile的注意事项："></a>4.使用volatile的注意事项：</h3><p>要在多线程中安全地使用volatile变量,必须满足：</p><ol><li>对volatile变量的写入操作不依赖其当前值</li><li>该变量没有包含在具有其他变量的不变式中</li></ol><h3 id="5-synchronized和volatile的比较："><a href="#5-synchronized和volatile的比较：" class="headerlink" title="5.synchronized和volatile的比较："></a>5.synchronized和volatile的比较：</h3><ol><li>volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住</li><li>volatile仅能使用在变量级别,synchronized则可以使用在变量,方法</li><li>volatile仅能实现变量的修改可见性,但不具备原子特性,而synchronized则可以保证变量的修改可见性和原子性</li><li>volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞</li><li>volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化</li></ol><blockquote><p><strong>所以在可以保证线程安全性的前提,尽可能使用volatile。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数设置、分析</title>
      <link href="/2018/08/20/Jvm/Java/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E3%80%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/20/Jvm/Java/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E3%80%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>不管是YGC还是Full GC,GC过程中都会对导致程序运行中中断,正确的选择不同的GC策略,调整JVM、GC的参数,可以极大的减少由于GC工作,而导致的程序运行中断方面的问题,进而适当的提高Java程序的工作效率。但是调整GC是以个极为复杂的过程,由于各个程序具备不同的特点,如：web和GUI程序就有很大区别（Web可以适当的停顿,但GUI停顿是客户无法接受的）,而且由于跑在各个机器上的配置不同（主要cup个数,内存不同）,所以使用的GC种类也会不同(如何选择见GC种类及如何选择)。本文将注重介绍JVM、GC的一些重要参数的设置来提高系统的性能。</p><a id="more"></a><h5 id="设置堆大小"><a href="#设置堆大小" class="headerlink" title="设置堆大小"></a><strong>设置堆大小</strong></h5><ul><li>-Xms 初始堆大小  物理内存的1/64(&lt;1GB)  </li><li>-Xmx 最大堆大小  物理内存的1/4(&lt;1GB)</li></ul><h5 id="设置年轻代大小"><a href="#设置年轻代大小" class="headerlink" title="设置年轻代大小"></a><strong>设置年轻代大小</strong></h5><ul><li>-Xmn 年轻代大小(1.4or lator)</li><li>-XX:NewSize 设置年轻代大小(for 1.3/1.4)</li><li>-XX:MaxNewSize  年轻代最大值(for 1.3/1.4)</li></ul><h5 id="设置持久代大小"><a href="#设置持久代大小" class="headerlink" title="设置持久代大小"></a><strong>设置持久代大小</strong></h5><ul><li>-XX:PermSize 设置持久代(perm gen)初始值 物理内存的1/64</li><li>-XX:MaxPermSize 设置持久代最大值 物理内存的1/4</li></ul><h5 id="设置虚拟机栈大小"><a href="#设置虚拟机栈大小" class="headerlink" title="设置虚拟机栈大小"></a><strong>设置虚拟机栈大小</strong></h5><ul><li>-Xss:每个线程的堆栈大小</li><li>-XX:ThreadStack Size Thread Stack Size</li></ul><h5 id="设置空间比例"><a href="#设置空间比例" class="headerlink" title="设置空间比例"></a><strong>设置空间比例</strong></h5><ul><li>-XX:NewRatio 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</li><li>-XX:SurvivorRatio Eden区与Survivor区的大小比值</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h5><ul><li>-XX:LargePageSizeInBytes 内存页的大小不可设置过大, 会影响Perm的大小</li><li>-XX:+UseFastAccessorMethods 原始类型的快速优化</li><li>-XX:+DisableExplicitGC 关闭System.gc()</li><li>-XX:MaxTenuringThreshold 垃圾最大年龄</li><li>-XX:+AggressiveOpts 加快编译</li><li>-XX:+UseBiasedLocking 锁机制的性能改善</li><li>-Xnoclassgc 禁用class回收</li><li>-XX:SoftRefLRUPolicyMSPerMB 每兆堆空闲空间中SoftReference的存活时间</li><li>-XX:PretenureSizeThreshold 对象超过多大是直接在旧生代分配</li><li>-XX:TLABWasteTargetPercent TLAB占eden区的百分比</li><li>-XX:+CollectGen0First FullGC时是否先YGC</li></ul><h5 id="并行收集器相关参数"><a href="#并行收集器相关参数" class="headerlink" title="并行收集器相关参数"></a><strong>并行收集器相关参数</strong></h5><ul><li>-XX:+UseParallelGC Full GC采用parallel MSC(此项待验证)</li><li>-XX:+UseParNewGC 设置年轻代为并行收集</li><li>-XX:ParallelGCThreads 并行收集器的线程数</li><li>-XX:+UseParallelOldGC 年老代垃圾收集方式为并行收集(Parallel Compacting)</li><li>-XX:MaxGCPauseMillis 每次年轻代垃圾回收的最长时间(最大暂停时间)</li><li>-XX:+UseAdaptiveSizePolicy 自动选择年轻代区大小和相应的Survivor区比例</li><li>-XX:GCTimeRatio 设置垃圾回收时间占程序运行时间的百分比</li><li>-XX:+ScavengeBeforeFullGC Full GC前调用YGC</li></ul><h5 id="CMS-相关参数"><a href="#CMS-相关参数" class="headerlink" title=" CMS 相关参数"></a><strong> CMS 相关参数</strong></h5><ul><li>-XX:+UseConcMarkSweepGC 使用CMS内存收集</li><li>-XX:+AggressiveHeap 试图使用大量的物理内存</li><li>-XX:CMSFullGCsBeforeCompaction 多少次后进行内存压缩</li><li>-XX:+CMSParallelRemarkEnabled 降低标记停顿</li><li>-XX+UseCMSCompactAtFullCollection 在FULL GC的时候, 对年老代的压缩</li><li>-XX:+UseCMSInitiatingOccupancyOnly 使用手动定义初始化定义开始CMS收集</li><li>-XX:CMSInitiatingOccupancyFraction=70 使用cms作为垃圾回收使用70％后开始CMS收集</li><li>-XX:CMSInitiatingPermOccupancyFraction 设置Perm Gen使用到达多少比率时触发</li><li>-XX:+CMSIncrementalMode 设置为增量模式</li><li>-XX:+CMSClassUnloadingEnabled CMS收集器默认不会对永久代进行垃圾回收。如果希望对永久代进行垃圾回收</li></ul><h5 id="辅助信息"><a href="#辅助信息" class="headerlink" title="辅助信息"></a><strong>辅助信息</strong></h5><ul><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCTimeStamps</li><li>-XX:+PrintGC:PrintGCTimeStamps  可与-XX:+PrintGC -XX:+PrintGCDetails混用</li><li>-XX:+PrintGCApplicationStoppedTime 打印垃圾回收期间程序暂停的时间.可与上面混合使用 </li><li>-XX:+PrintGCApplicationConcurrentTime 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用</li><li>-XX:+PrintHeapAtGC打印GC前后的详细堆栈信息</li><li>-Xloggc:filename 把相关日志信息记录到文件以便分析.与上面几个配合使用</li><li>-XX:+PrintClassHistogram garbage collects before printing the histogram.</li><li>-XX:+PrintTLAB 查看TLAB空间的使用情况</li><li>-XX:+PrintTenuringDistribution 查看每次minor GC后新的存活周期的阈值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础梳理及关键原理</title>
      <link href="/2018/08/19/Jvm/Java/Java%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%E5%8F%8A%E5%85%B3%E9%94%AE%E5%8E%9F%E7%90%86/"/>
      <url>/2018/08/19/Jvm/Java/Java%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%E5%8F%8A%E5%85%B3%E9%94%AE%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#一数据类型">一、数据类型</a><ul><li><a href="#包装类型">包装类型</a></li><li><a href="#缓存池">缓存池</a></li></ul></li><li><a href="#二string">二、String</a><ul><li><a href="#概览">概览</a></li><li><a href="#不可变的好处">不可变的好处</a></li><li><a href="#string,-stringbuffer-and-stringbuilder">String, StringBuffer and StringBuilder</a></li><li><a href="#stringintern">String.intern()</a><a id="more"></a></li></ul></li><li><a href="#三运算">三、运算</a><ul><li><a href="#参数传递">参数传递</a></li><li><a href="#float-与-double">float 与 double</a></li><li><a href="#隐式类型转换">隐式类型转换</a></li><li><a href="#switch">switch</a></li></ul></li><li><a href="#四继承">四、继承</a><ul><li><a href="#访问权限">访问权限</a></li><li><a href="#抽象类与接口">抽象类与接口</a></li><li><a href="#super">super</a></li><li><a href="#重写与重载">重写与重载</a></li></ul></li><li><a href="#五object-通用方法">五、Object 通用方法</a><ul><li><a href="#概览">概览</a></li><li><a href="#equals">equals()</a></li><li><a href="#hashcode">hashCode()</a></li><li><a href="#tostring">toString()</a></li><li><a href="#clone">clone()</a></li></ul></li><li><a href="#六关键字">六、关键字</a><ul><li><a href="#final">final</a></li><li><a href="#static">static</a></li></ul></li><li><a href="#七反射">七、反射</a></li><li><a href="#八异常">八、异常</a></li><li><a href="#九泛型">九、泛型</a></li><li><a href="#十注解">十、注解</a></li><li><a href="#十一特性">十一、特性</a><ul><li><a href="#java-各版本的新特性">Java 各版本的新特性</a></li><li><a href="#java-与-c-的区别">Java 与 C++ 的区别</a></li><li><a href="#jre-or-jdk">JRE or JDK</a></li></ul></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h1><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>八个基本类型：</p><ul><li>boolean/1</li><li>byte/8</li><li>char/16</li><li>short/16</li><li>int/32</li><li>float/32</li><li>long/64</li><li>double/64</li></ul><p>基本类型都有对应的包装类型,基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="hljs-number">2</span>;     <span class="hljs-comment">// 装箱</span></span><br><span class="line"><span class="hljs-keyword">int</span> y = x;         <span class="hljs-comment">// 拆箱</span></span><br></pre></td></tr></table></figure><h2 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h2><p>new Integer(123) 与 Integer.valueOf(123) 的区别在于：</p><ul><li>new Integer(123) 每次都会新建一个对象</li><li>Integer.valueOf(123) 会使用缓存池中的对象,多次调用会取得同一个对象的引用。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">123</span>);</span><br><span class="line">Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">123</span>);</span><br><span class="line">System.out.println(x == y);    <span class="hljs-comment">// false</span></span><br><span class="line">Integer z = Integer.valueOf(<span class="hljs-number">123</span>);</span><br><span class="line">Integer k = Integer.valueOf(<span class="hljs-number">123</span>);</span><br><span class="line">System.out.println(z == k);   <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>valueOf() 方法的实现比较简单,就是先判断值是否在缓存池中,如果在的话就直接返回缓存池的内容。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 8 中,Integer 缓存池的大小默认为 -128~127。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;</span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;</span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// high value may be configured by property</span></span><br><span class="line">    <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;</span><br><span class="line">    String integerCacheHighPropValue =</span><br><span class="line">        sun.misc.VM.getSavedProperty(<span class="hljs-string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">            i = Math.max(i, <span class="hljs-number">127</span>);</span><br><span class="line">            <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">            <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    high = h;</span><br><span class="line"></span><br><span class="line">    cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> j = low;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">        cache[k] = <span class="hljs-keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">    <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会在自动装箱过程调用 valueOf() 方法,因此多个 Integer 实例使用自动装箱来创建并且值相同,那么就会引用相同的对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer m = <span class="hljs-number">123</span>;</span><br><span class="line">Integer n = <span class="hljs-number">123</span>;</span><br><span class="line">System.out.println(m == n); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>基本类型对应的缓冲池如下：</p><ul><li>boolean values true and false</li><li>all byte values</li><li>short values between -128 and 127</li><li>int values between -128 and 127</li><li>char in the range \u0000 to \u007F</li></ul><p>在使用这些基本类型对应的包装类型时,就可以直接使用缓冲池中的对象。</p><p><a href="https://stackoverflow.com/questions/9030817/differences-between-new-integer123-integer-valueof123-and-just-123" target="_blank" rel="noopener">StackOverflow : Differences between new Integer(123), Integer.valueOf(123) and just 123</a></p><h1 id="二、String"><a href="#二、String" class="headerlink" title="二、String"></a>二、String</h1><h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1.概览"></a>1.概览</h2><p>String 被声明为 final,因此它不可被继承。</p><p>内部使用 char 数组存储数据,该数组被声明为 final,这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法,因此可以保证 String 不可变。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span></span><br><span class="line"><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];</span><br></pre></td></tr></table></figure><h2 id="2-不可变的好处"><a href="#2-不可变的好处" class="headerlink" title="2.不可变的好处"></a>2.不可变的好处</h2><h3 id="可以缓存-hash-值"><a href="#可以缓存-hash-值" class="headerlink" title="可以缓存 hash 值"></a><strong>可以缓存 hash 值</strong></h3><p>因为 String 的 hash 值经常被使用,例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变,因此只需要进行一次计算。</p><h3 id="String-Pool-的需要"><a href="#String-Pool-的需要" class="headerlink" title="String Pool 的需要"></a><strong>String Pool 的需要</strong></h3><p>如果一个 String 对象已经被创建过了,那么就会从 String Pool 中取得引用。只有 String 是不可变的,才可能使用 String Pool。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a><strong>安全性</strong></h3><p>String 经常作为参数,String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的,那么在网络连接过程中,String 被改变,改变 String 对象的那一方以为现在连接的是其它主机,而实际情况却不一定是。</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a><strong>线程安全</strong></h3><p>String 不可变性天生具备线程安全,可以在多个线程中安全地使用。</p><p><a href="https://www.programcreek.com/2013/04/why-string-is-immutable-in-java/" target="_blank" rel="noopener">Program Creek : Why String is immutable in Java?</a></p><h2 id="3-String-StringBuffer-and-StringBuilder"><a href="#3-String-StringBuffer-and-StringBuilder" class="headerlink" title="3.String, StringBuffer and StringBuilder"></a>3.String, StringBuffer and StringBuilder</h2><h3 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a><strong>可变性</strong></h3><ul><li>String 不可变</li><li>StringBuffer 和 StringBuilder 可变</li></ul><h3 id="线程安全-1"><a href="#线程安全-1" class="headerlink" title=" 线程安全"></a><strong> 线程安全</strong></h3><ul><li>String 不可变,因此是线程安全的</li><li>StringBuilder 不是线程安全的</li><li>StringBuffer 是线程安全的,内部使用 synchronized 进行同步</li></ul><p><a href="https://stackoverflow.com/questions/2971315/string-stringbuffer-and-stringbuilder" target="_blank" rel="noopener">StackOverflow : String, StringBuffer, and StringBuilder</a></p><h2 id="4-String-intern"><a href="#4-String-intern" class="headerlink" title="4.String.intern()"></a>4.String.intern()</h2><p>使用 String.intern() 可以保证相同内容的字符串变量引用同一的内存对象。</p><p>下面示例中,s1 和 s2 采用 new String() 的方式新建了两个不同对象,而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool（字符串常量池）中,然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"aaa"</span>);</span><br><span class="line">String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"aaa"</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="hljs-comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>如果是采用 “bbb” 这种使用双引号的形式创建字符串实例,会自动地将新建的对象放入 String Pool 中。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s4 = <span class="hljs-string">"bbb"</span>;</span><br><span class="line">String s5 = <span class="hljs-string">"bbb"</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>在 Java 7 之前,字符串常量池被放在运行时常量池中,它属于永久代。而在 Java 7,字符串常量池被移到 Native Method 中。这是因为永久代的空间有限,在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p><ul><li><a href="https://stackoverflow.com/questions/10578984/what-is-string-interning" target="_blank" rel="noopener">StackOverflow : What is String interning?</a></li><li><a href="https://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener">深入解析 String#intern</a></li></ul><h1 id="三、运算"><a href="#三、运算" class="headerlink" title="三、运算"></a>三、运算</h1><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>Java 的参数是以值传递的形式传入方法中,而不是引用传递。</p><p>以下代码中 Dog dog 的 dog 是一个指针,存储的是对象的地址。在将一个参数传入一个方法时,本质上是将对象的地址以值的方式传递到形参中。因此在方法中改变指针引用的对象,那么这两个指针此时指向的是完全不同的对象,一方改变其所指向对象的内容对另一方没有影响。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Dog(String name) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">getObjectAddress</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PassByValueExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">"A"</span>);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="hljs-comment">// Dog@4554617c</span></span><br><span class="line">        func(dog);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="hljs-comment">// Dog@4554617c</span></span><br><span class="line">        System.out.println(dog.getName());          <span class="hljs-comment">// A</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="hljs-comment">// Dog@4554617c</span></span><br><span class="line">        dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">"B"</span>);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="hljs-comment">// Dog@74a14482</span></span><br><span class="line">        System.out.println(dog.getName());          <span class="hljs-comment">// B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果在方法中改变对象的字段值会改变原对象该字段值,因为改变的是同一个地址指向的内容。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PassByValueExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">"A"</span>);</span><br><span class="line">        func(dog);</span><br><span class="line">        System.out.println(dog.getName());          <span class="hljs-comment">// B</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        dog.setName(<span class="hljs-string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="noopener">StackOverflow: Is Java “pass-by-reference” or “pass-by-value”?</a></p><h2 id="float-与-double"><a href="#float-与-double" class="headerlink" title="float 与 double"></a>float 与 double</h2><p>1.1 字面量属于 double 类型,不能直接将 1.1 直接赋值给 float 变量,因为这是向下转型。Java 不能隐式执行向下转型,因为这会使得精度降低。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// float f = 1.1;</span></span><br></pre></td></tr></table></figure><p>1.1f 字面量才是 float 类型。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">float</span> f = <span class="hljs-number">1.1f</span>;</span><br></pre></td></tr></table></figure><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>因为字面量 1 是 int 类型,它比 short 类型精度要高,因此不能隐式地将 int 类型下转型为 short 类型。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-comment">// s1 = s1 + 1;</span></span><br></pre></td></tr></table></figure><p>但是使用 += 运算符可以执行隐式类型转换。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 += <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 = (<span class="hljs-keyword">short</span>) (s1 + <span class="hljs-number">1</span>);</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/8710619/why-dont-javas-compound-assignment-operators-require-casting" target="_blank" rel="noopener">StackOverflow : Why don’t Java’s +=, -=, *=, /= compound assignment operators require casting?</a></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>从 Java 7 开始,可以在 switch 条件判断语句中使用 String 对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="hljs-string">"a"</span>;</span><br><span class="line"><span class="hljs-keyword">switch</span> (s) &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">"a"</span>:</span><br><span class="line">        System.out.println(<span class="hljs-string">"aaa"</span>);</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">"b"</span>:</span><br><span class="line">        System.out.println(<span class="hljs-string">"bbb"</span>);</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 不支持 long,是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断,如果值过于复杂,那么还是用 if 比较合适。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// long x = 111;</span></span><br><span class="line"><span class="hljs-comment">// switch (x) &#123; // Incompatible types. Found: 'long', required: 'char, byte, short, int, Character, Byte, Short, Integer, String, or an enum'</span></span><br><span class="line"><span class="hljs-comment">//     case 111:</span></span><br><span class="line"><span class="hljs-comment">//         System.out.println(111);</span></span><br><span class="line"><span class="hljs-comment">//         break;</span></span><br><span class="line"><span class="hljs-comment">//     case 222:</span></span><br><span class="line"><span class="hljs-comment">//         System.out.println(222);</span></span><br><span class="line"><span class="hljs-comment">//         break;</span></span><br><span class="line"><span class="hljs-comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/2676210/why-cant-your-switch-statement-data-type-be-long-java" target="_blank" rel="noopener">StackOverflow : Why can’t your switch statement data type be long, Java?</a></p><h1 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h1><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>Java 中有三个访问权限修饰符：private、protected 以及 public,如果不加访问修饰符,表示包级可见。</p><p>可以对类或类中的成员（字段以及方法）加上访问修饰符。</p><ul><li>类可见表示其它类可以用这个类创建实例对象。</li><li>成员可见表示其它类可以用这个类的实例对象访问到该成员；</li></ul><p>protected 用于修饰成员,表示在继承体系中成员对于子类可见,但是这个访问修饰符对于类没有意义。</p><p>设计良好的模块会隐藏所有的实现细节,把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信,一个模块不需要知道其他模块的内部工作情况,这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。</p><p>如果子类的方法重写了父类的方法,那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例,也就是确保满足里氏替换原则。</p><p>字段决不能是公有的,因为这么做的话就失去了对这个字段修改行为的控制,客户端可以对其随意修改。例如下面的例子中,AccessExample 拥有 id 共有字段,如果在某个时刻,我们想要使用 int 去存储 id 字段,那么就需要去修改所有的客户端代码。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用公有的 getter 和 setter 方法来替换公有字段,这样的话就可以控制对字段的修改行为。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> id + <span class="hljs-string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.id = Integer.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也有例外,如果是包级私有的类或者私有的嵌套类,那么直接暴露成员不会有特别大的影响。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessWithInnerClassExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> InnerClass innerClass;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccessWithInnerClassExample</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        innerClass = <span class="hljs-keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> innerClass.x;  <span class="hljs-comment">// 直接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><h3 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1. 抽象类"></a><strong>1. 抽象类</strong></h3><p>抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法,抽象方法一定位于抽象类中。</p><p>抽象类和普通类最大的区别是,抽象类不能被实例化,需要继承抽象类才能实例化其子类。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractClassExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"func2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractExtendClassExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractClassExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"func1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// AbstractClassExample ac1 = new AbstractClassExample(); // 'AbstractClassExample' is abstract; cannot be instantiated</span></span><br><span class="line">AbstractClassExample ac2 = <span class="hljs-keyword">new</span> AbstractExtendClassExample();</span><br><span class="line">ac2.func1();</span><br></pre></td></tr></table></figure><h3 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a><strong>2. 接口</strong></h3><p>接口是抽象类的延伸,在 Java 8 之前,它可以看成是一个完全抽象的类,也就是说它不能有任何的方法实现。</p><p>从 Java 8 开始,接口也可以拥有默认的方法实现,这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前,如果一个接口想要添加新的方法,那么要修改所有实现了该接口的类。</p><p>接口的成员（字段 + 方法）默认都是 public 的,并且不允许定义为 private 或者 protected。</p><p>接口的字段默认都是 static 和 final 的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InterfaceExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"func2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> x = <span class="hljs-number">123</span>;</span><br><span class="line">    <span class="hljs-comment">// int y;               // Variable 'y' might not have been initialized</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>;       <span class="hljs-comment">// Modifier 'public' is redundant for interface fields</span></span><br><span class="line">    <span class="hljs-comment">// private int k = 0;   // Modifier 'private' not allowed here</span></span><br><span class="line">    <span class="hljs-comment">// protected int l = 0; // Modifier 'protected' not allowed here</span></span><br><span class="line">    <span class="hljs-comment">// private void fun3(); // Modifier 'private' not allowed here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterfaceImplementExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InterfaceExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"func1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// InterfaceExample ie1 = new InterfaceExample(); // 'InterfaceExample' is abstract; cannot be instantiated</span></span><br><span class="line">InterfaceExample ie2 = <span class="hljs-keyword">new</span> InterfaceImplementExample();</span><br><span class="line">ie2.func1();</span><br><span class="line">System.out.println(InterfaceExample.x);</span><br></pre></td></tr></table></figure><h3 id="3-比较"><a href="#3-比较" class="headerlink" title="3. 比较"></a><strong>3. 比较</strong></h3><ul><li>从设计层面上看,抽象类提供了一种 IS-A 关系,那么就必须满足里式替换原则,即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系,它只是提供一种方法实现契约,并不要求接口和实现接口的类具有 IS-A 关系。</li><li>从使用上来看,一个类可以实现多个接口,但是不能继承多个抽象类。</li><li>接口的字段只能是 static 和 final 类型的,而抽象类的字段没有这种限制。</li><li>接口的成员只能是 public 的,而抽象类的成员可以有多种访问权限。</li></ul><h3 id="4-使用选择"><a href="#4-使用选择" class="headerlink" title="4. 使用选择"></a><strong>4. 使用选择</strong></h3><p>使用接口：</p><ul><li>需要让不相关的类都实现一个方法,例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；</li><li>需要使用多重继承。</li></ul><p>使用抽象类：</p><ul><li>需要在几个相关的类中共享代码。</li><li>需要能控制继承来的成员的访问权限,而不是都为 public。</li><li>需要继承非静态和非常量字段。</li></ul><p>在很多情况下,接口优先于抽象类,因为接口没有抽象类严格的类层次结构要求,可以灵活地为一个类添加行为。并且从 Java 8 开始,接口也可以有默认的方法实现,使得修改接口的成本也变的很低。</p><ul><li><a href="https://www.ibm.com/developerworks/cn/java/l-javainterface-abstract/" target="_blank" rel="noopener">深入理解 abstract class 和 interface</a></li><li><a href="https://dzone.com/articles/when-to-use-abstract-class-and-intreface" target="_blank" rel="noopener">When to Use Abstract Class and Interface</a></li></ul><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li>访问父类的构造函数：可以使用 super() 函数访问父类的构造函数,从而委托父类完成一些初始化的工作。</li><li>访问父类的成员：如果子类重写了父类的中某个方法的实现,可以通过使用 super 关键字来引用父类的方法实现。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SuperExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">        <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"SuperExample.func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperExtendExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SuperExtendExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(x, y);</span><br><span class="line">        <span class="hljs-keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>.func();</span><br><span class="line">        System.out.println(<span class="hljs-string">"SuperExtendExample.func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SuperExample e = <span class="hljs-keyword">new</span> SuperExtendExample(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br><span class="line">e.func();</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SuperExample.func()</span><br><span class="line">SuperExtendExample.func()</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/super.html" target="_blank" rel="noopener">Using the Keyword super</a></p><h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><h3 id="1-重写（Override）"><a href="#1-重写（Override）" class="headerlink" title="1. 重写（Override）"></a><strong>1. 重写（Override）</strong></h3><p>存在于继承体系中,指子类实现了一个与父类在方法声明上完全相同的一个方法。</p><p>为了满足里式替换原则,重写有有以下两个限制：</p><ul><li>子类方法的访问权限必须大于等于父类方法；</li><li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li></ul><p>使用 @Override 注解,可以让编译器帮忙检查是否满足上面的两个限制条件。</p><h3 id="2-重载（Overload）"><a href="#2-重载（Overload）" class="headerlink" title="2. 重载（Overload）"></a><strong>2. 重载（Overload）</strong></h3><p>存在于同一个类中,指一个方法与已经存在的方法名称上相同,但是参数类型、个数、顺序至少有一个不同。</p><p>应该注意的是,返回值不同,其它都相同不算是重载。</p><h1 id="五、Object-通用方法"><a href="#五、Object-通用方法" class="headerlink" title="五、Object 通用方法"></a>五、Object 通用方法</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout, <span class="hljs-keyword">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><h3 id="1-等价关系"><a href="#1-等价关系" class="headerlink" title="1. 等价关系"></a><strong>1. 等价关系</strong></h3><p>（一）自反性</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(x); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>（二）对称性</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y) == y.equals(x); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>（三）传递性</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class="line">    x.equals(z); <span class="hljs-comment">// true;</span></span><br></pre></td></tr></table></figure><p>（四）一致性</p><p>多次调用 equals() 方法结果不变</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y) == x.equals(y); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>（五）与 null 的比较</p><p>对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// false;</span></span><br></pre></td></tr></table></figure><h3 id="2-equals-与"><a href="#2-equals-与" class="headerlink" title="2. equals() 与 =="></a><strong>2. equals() 与 ==</strong></h3><ul><li>对于基本类型,== 判断两个值是否相等,基本类型没有 equals() 方法。</li><li>对于引用类型,== 判断两个变量是否引用同一个对象,而 equals() 判断引用的对象是否等价。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);</span><br><span class="line">Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);</span><br><span class="line">System.out.println(x.equals(y)); <span class="hljs-comment">// true</span></span><br><span class="line">System.out.println(x == y);      <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a><strong>3. 实现</strong></h3><ul><li>检查是否为同一个对象的引用,如果是直接返回 true；</li><li>检查是否是同一个类型,如果不是,直接返回 false；</li><li>将 Object 对象进行转型；</li><li>判断每个关键域是否相等。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EqualExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EqualExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.x = x;</span><br><span class="line">        <span class="hljs-keyword">this</span>.y = y;</span><br><span class="line">        <span class="hljs-keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        EqualExample that = (EqualExample) o;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (x != that.x) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (y != that.y) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> z == that.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h2><p>hasCode() 返回散列值,而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同,但是散列值相同的两个对象不一定等价。</p><p>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法,保证等价的两个对象散列值也相等。</p><p>下面的代码中,新建了两个等价的对象,并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的,只在集合中添加一个对象,但是因为 EqualExample 没有实现 hasCode() 方法,因此这两个对象的散列值是不同的,最终导致集合添加了两个等价的对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EqualExample e1 = <span class="hljs-keyword">new</span> EqualExample(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">EqualExample e2 = <span class="hljs-keyword">new</span> EqualExample(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">System.out.println(e1.equals(e2)); <span class="hljs-comment">// true</span></span><br><span class="line">HashSet&lt;EqualExample&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(e1);</span><br><span class="line">set.add(e2);</span><br><span class="line">System.out.println(set.size());   <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><p>理想的散列函数应当具有均匀性,即不相等的对象应当均匀分布到所有可能的散列值上。这就要求了散列函数要把所有域的值都考虑进来,可以将每个域都当成 n 进制的某一位,然后组成一个 n 进制的整数。n 一般取 31,因为它是一个奇素数,如果是偶数的话,当出现乘法溢出,信息就会丢失,因为与 2 相乘相当于向左移一位。</p><p>一个数与 31 相乘可以转换成移位和减法：<code>31*x == (x&lt;&lt;5)-x</code>,编译器会自动进行这个优化。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> result = <span class="hljs-number">17</span>;</span><br><span class="line">    result = <span class="hljs-number">31</span> * result + x;</span><br><span class="line">    result = <span class="hljs-number">31</span> * result + y;</span><br><span class="line">    result = <span class="hljs-number">31</span> * result + z;</span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>默认返回 ToStringExample@4554617c 这种形式,其中 @ 后面的数值为散列码的无符号十六进制表示。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ToStringExample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ToStringExample example = <span class="hljs-keyword">new</span> ToStringExample(<span class="hljs-number">123</span>);</span><br><span class="line">System.out.println(example.toString());</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ToStringExample@4554617c</span><br></pre></td></tr></table></figure><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><h3 id="1-cloneable"><a href="#1-cloneable" class="headerlink" title="1. cloneable"></a><strong>1. cloneable</strong></h3><p>clone() 是 Object 的 protected 方法,它不是 public,一个类不显式去重写 clone(),其它类就不能直接去调用该类实例的 clone() 方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CloneExample e1 = <span class="hljs-keyword">new</span> CloneExample();</span><br><span class="line"><span class="hljs-comment">// CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'</span></span><br></pre></td></tr></table></figure><p>重写 clone() 得到以下实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> CloneExample <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (CloneExample)<span class="hljs-keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CloneExample e1 = <span class="hljs-keyword">new</span> CloneExample();</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    CloneExample e2 = e1.clone();</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.CloneNotSupportedException: CloneExample</span><br></pre></td></tr></table></figure><p>以上抛出了 CloneNotSupportedException,这是因为 CloneExample 没有实现 Cloneable 接口。</p><p>应该注意的是,clone() 方法并不是 Cloneable 接口的方法,而是 Object 的一个 protected 方法。Cloneable 接口只是规定,如果一个类没有实现 Cloneable 接口又调用了 clone() 方法,就会抛出 CloneNotSupportedException。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> a;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2. 浅拷贝"></a><strong>2. 浅拷贝</strong></h3><p>拷贝对象和原始对象的引用类型引用同一个对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShallowCloneExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShallowCloneExample</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> ShallowCloneExample <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (ShallowCloneExample) <span class="hljs-keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ShallowCloneExample e1 = <span class="hljs-keyword">new</span> ShallowCloneExample();</span><br><span class="line">ShallowCloneExample e2 = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="hljs-number">2</span>, <span class="hljs-number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 222</span></span><br></pre></td></tr></table></figure><h3 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3. 深拷贝"></a><strong>3. 深拷贝</strong></h3><p>拷贝对象和原始对象的引用类型引用不同对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneExample</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneExample</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> DeepCloneExample <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepCloneExample result = (DeepCloneExample) <span class="hljs-keyword">super</span>.clone();</span><br><span class="line">        result.arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            result.arr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DeepCloneExample e1 = <span class="hljs-keyword">new</span> DeepCloneExample();</span><br><span class="line">DeepCloneExample e2 = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="hljs-number">2</span>, <span class="hljs-number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="4-clone-的替代方案"><a href="#4-clone-的替代方案" class="headerlink" title="4. clone() 的替代方案"></a><strong>4. clone() 的替代方案</strong></h3><p>使用 clone() 方法来拷贝一个对象即复杂又有风险,它会抛出异常,并且还需要类型转换。Effective Java 书上讲到,最好不要去使用 clone(),可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneConstructorExample</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CloneConstructorExample</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CloneConstructorExample</span><span class="hljs-params">(CloneConstructorExample original)</span> </span>&#123;</span><br><span class="line">        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[original.arr.length];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; original.arr.length; i++) &#123;</span><br><span class="line">            arr[i] = original.arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CloneConstructorExample e1 = <span class="hljs-keyword">new</span> CloneConstructorExample();</span><br><span class="line">CloneConstructorExample e2 = <span class="hljs-keyword">new</span> CloneConstructorExample(e1);</span><br><span class="line">e1.set(<span class="hljs-number">2</span>, <span class="hljs-number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="六、关键字"><a href="#六、关键字" class="headerlink" title="六、关键字"></a>六、关键字</h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1. 数据"></a><strong>1. 数据</strong></h3><p>声明数据为常量,可以是编译时常量,也可以是在运行时被初始化后不能被改变的常量。</p><ul><li>对于基本类型,final 使数值不变；</li><li>对于引用类型,final 使引用不变,也就不能引用其它对象,但是被引用的对象本身是可以修改的。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-comment">// x = 2;  // cannot assign value to final variable 'x'</span></span><br><span class="line"><span class="hljs-keyword">final</span> A y = <span class="hljs-keyword">new</span> A();</span><br><span class="line">y.a = <span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a><strong>2. 方法</strong></h3><p>声明方法不能被子类重写。</p><p>private 方法隐式地被指定为 final,如果在子类中定义的方法和基类中的一个 private 方法签名相同,此时子类的方法不是重写基类方法,而是在子类中定义了一个新的方法。</p><h3 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a><strong>3. 类</strong></h3><p>声明类不允许被继承。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="1-静态变量"><a href="#1-静态变量" class="headerlink" title="1. 静态变量"></a><strong>1. 静态变量</strong></h3><ul><li>静态变量：又称为类变量,也就是说这个变量属于类的,类所有的实例都共享静态变量,可以直接通过类名来访问它；静态变量在内存中只存在一份。</li><li>实例变量：每创建一个实例就会产生一个实例变量,它与该实例同生共死。</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;         <span class="hljs-comment">// 实例变量</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> y;  <span class="hljs-comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// int x = A.x;  // Non-static field 'x' cannot be referenced from a static context</span></span><br><span class="line">        A a = <span class="hljs-keyword">new</span> A();</span><br><span class="line">        <span class="hljs-keyword">int</span> x = a.x;</span><br><span class="line">        <span class="hljs-keyword">int</span> y = A.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a><strong>2. 静态方法</strong></h3><p>静态方法在类加载的时候就存在了,它不依赖于任何实例。所以静态方法必须有实现,也就是说它不能是抽象方法（abstract）。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// public abstract static void func2();  // Illegal combination of modifiers: 'abstract' and 'static'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能访问所属类的静态字段和静态方法,方法中不能有 this 和 super 关键字。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> a = x;</span><br><span class="line">        <span class="hljs-comment">// int b = y;  // Non-static field 'y' cannot be referenced from a static context</span></span><br><span class="line">        <span class="hljs-comment">// int b = this.y;     // 'A.this' cannot be referenced from a static context</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-静态语句块"><a href="#3-静态语句块" class="headerlink" title="3. 静态语句块"></a><strong>3. 静态语句块</strong></h3><p>静态语句块在类初始化时运行一次。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="hljs-keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="hljs-keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4. 静态内部类"></a><strong>4. 静态内部类</strong></h3><p>非静态内部类依赖于外部类的实例,而静态内部类不需要。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// InnerClass innerClass = new InnerClass(); // 'OuterClass.this' cannot be referenced from a static context</span></span><br><span class="line">        OuterClass outerClass = <span class="hljs-keyword">new</span> OuterClass();</span><br><span class="line">        InnerClass innerClass = outerClass.<span class="hljs-keyword">new</span> InnerClass();</span><br><span class="line">        StaticInnerClass staticInnerClass = <span class="hljs-keyword">new</span> StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类不能访问外部类的非静态的变量和方法。</p><h3 id="5-静态导包"><a href="#5-静态导包" class="headerlink" title="5. 静态导包"></a><strong>5. 静态导包</strong></h3><p>在使用静态变量和方法时不用再指明 ClassName,从而简化代码,但可读性大大降低。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.xxx.ClassName.*</span><br></pre></td></tr></table></figure><h3 id="6-初始化顺序"><a href="#6-初始化顺序" class="headerlink" title="6. 初始化顺序"></a><strong>6. 初始化顺序</strong></h3><p>静态变量和静态语句块优先于实例变量和普通语句块,静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String staticField = <span class="hljs-string">"静态变量"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"静态语句块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String field = <span class="hljs-string">"实例变量"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"普通语句块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后才是构造函数的初始化。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InitialOrderTest</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"构造函数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在继承的情况下,初始化顺序为：</p><ul><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ul><h1 id="七、反射"><a href="#七、反射" class="headerlink" title="七、反射"></a>七、反射</h1><p>每个类都有一个  <strong>Class</strong>  对象,包含了与类有关的信息。当编译一个新类时,会产生一个同名的 .class 文件,该文件内容保存着 Class 对象。</p><p>类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中,可以使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>这种方式来控制类的加载,该方法会返回一个 Class 对象。</p><p>反射可以提供运行时的类信息,并且这个类可以在运行时才加载进来,甚至在编译时期该类的 .class 不存在也可以加载进来。</p><p>Class 和 java.lang.reflect 一起对反射提供了支持,java.lang.reflect 类库主要包含了以下三个类：</p><ul><li><strong>Field</strong> ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；</li><li><strong>Method</strong> ：可以使用 invoke() 方法调用与 Method 对象关联的方法；</li><li><strong>Constructor</strong> ：可以用 Constructor 创建新的对象。</li></ul><p><strong>Advantages of Using Reflection:</strong> </p><ul><li><strong>Extensibility Features</strong>  : An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</li><li><strong>Class Browsers and Visual Development Environments</strong>  :  A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.</li><li><strong>Debuggers and Test Tools</strong>  : Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.</li></ul><p><strong>Drawbacks of Reflection:</strong> </p><p>Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</p><ul><li><strong>Performance Overhead</strong>  : Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</li><li><strong>Security Restrictions</strong>  : Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.</li><li><strong>Exposure of Internals</strong>  :Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</li></ul><ul><li><a href="https://docs.oracle.com/javase/tutorial/reflect/index.html" target="_blank" rel="noopener">Trail: The Reflection API</a></li><li><a href="http://www.sczyh30.com/posts/Java/java-reflection-1/" target="_blank" rel="noopener">深入解析 Java 反射（1）- 基础</a></li></ul><h1 id="八、异常"><a href="#八、异常" class="headerlink" title="八、异常"></a>八、异常</h1><p>Throwable 可以用来表示任何可以作为异常抛出的类,分为两种： <strong>Error</strong>  和 <strong>Exception</strong>。其中 Error 用来表示 JVM 无法处理的错误,Exception 分为两种：</p><ul><li><strong>受检异常</strong> ：需要用 try…catch… 语句捕获并进行处理,并且可以从异常中恢复；</li><li><strong>非受检异常</strong> ：是程序运行时错误,例如除 0 会引发 Arithmetic Exception,此时程序崩溃并且无法恢复。</li></ul><ul><li><a href="https://www.tianmaying.com/tutorial/Java-Exception" target="_blank" rel="noopener">Java 入门之异常处理</a></li><li><a href="http://www.importnew.com/7383.html" target="_blank" rel="noopener">Java 异常的面试问题及答案 -Part 1</a></li></ul><h1 id="九、泛型"><a href="#九、泛型" class="headerlink" title="九、泛型"></a>九、泛型</h1><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Box</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// T stands for "Type"</span></span><br><span class="line">    <span class="hljs-keyword">private</span> T t;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T t)</span> </span>&#123; <span class="hljs-keyword">this</span>.t = t; &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> t; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.importnew.com/24029.html" target="_blank" rel="noopener">Java 泛型详解</a></li><li><a href="https://cloud.tencent.com/developer/article/1033693" target="_blank" rel="noopener">10 道 Java 泛型面试题</a></li></ul><h1 id="十、注解"><a href="#十、注解" class="headerlink" title="十、注解"></a>十、注解</h1><p>Java 注解是附加在代码中的一些元信息,用于一些工具在编译、运行时进行解析和使用,起到说明、配置的功能。注解不会也不能影响代码的实际逻辑,仅仅起到辅助性的作用。</p><p><a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html" target="_blank" rel="noopener">注解 Annotation 实现原理与自定义注解例子</a></p><h1 id="十一、特性"><a href="#十一、特性" class="headerlink" title="十一、特性"></a>十一、特性</h1><h2 id="Java-各版本的新特性"><a href="#Java-各版本的新特性" class="headerlink" title="Java 各版本的新特性"></a>Java 各版本的新特性</h2><h3 id="New-highlights-in-Java-SE-8"><a href="#New-highlights-in-Java-SE-8" class="headerlink" title="New highlights in Java SE 8"></a><strong>New highlights in Java SE 8</strong></h3><ol><li>Lambda Expressions</li><li>Pipelines and Streams</li><li>Date and Time API</li><li>Default Methods</li><li>Type Annotations</li><li>Nashhorn JavaScript Engine</li><li>Concurrent Accumulators</li><li>Parallel operations</li><li>PermGen Error Removed</li></ol><h3 id="New-highlights-in-Java-SE-7"><a href="#New-highlights-in-Java-SE-7" class="headerlink" title="New highlights in Java SE 7"></a><strong>New highlights in Java SE 7</strong></h3><ol><li>Strings in Switch Statement</li><li>Type Inference for Generic Instance Creation</li><li>Multiple Exception Handling</li><li>Support for Dynamic Languages</li><li>Try with Resources</li><li>Java nio Package</li><li>Binary Literals, Underscore in literals</li><li>Diamond Syntax</li></ol><ul><li><a href="http://www.selfgrowth.com/articles/difference-between-java-18-and-java-17" target="_blank" rel="noopener">Difference between Java 1.8 and Java 1.7?</a></li><li><a href="http://www.importnew.com/19345.html" target="_blank" rel="noopener">Java 8 特性</a></li></ul><h2 id="Java-与-C-的区别"><a href="#Java-与-C-的区别" class="headerlink" title="Java 与 C++ 的区别"></a>Java 与 C++ 的区别</h2><ul><li>Java 是纯粹的面向对象语言,所有的对象都继承自 java.lang.Object,C++ 为了兼容 C 即支持面向对象也支持面向过程。</li><li>Java 通过虚拟机从而实现跨平台特性,但是 C++ 依赖于特定的平台。</li><li>Java 没有指针,它的引用可以理解为安全指针,而 C++ 具有和 C 一样的指针。</li><li>Java 支持自动垃圾回收,而 C++ 需要手动回收。</li><li>Java 不支持多重继承,只能通过实现多个接口来达到相同目的,而 C++ 支持多重继承。</li><li>Java 不支持操作符重载,虽然可以对两个 String 对象支持加法运算,但是这是语言内置支持的操作,不属于操作符重载,而 C++ 可以。</li><li>Java 的 goto 是保留字,但是不可用,C++ 可以使用 goto。</li><li>Java 不支持条件编译,C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。</li></ul><p><a href="http://cs-fundamentals.com/tech-interview/java/differences-between-java-and-cpp.php" target="_blank" rel="noopener">What are the main differences between Java and C++?</a></p><h2 id="JRE-or-JDK"><a href="#JRE-or-JDK" class="headerlink" title="JRE or JDK"></a>JRE or JDK</h2><ul><li>JRE is the JVM program, Java application need to run on JRE.</li><li>JDK is a superset of JRE, JRE + tools for developing java programs. e.g, it provides the compiler “javac”</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Eckel B. Java 编程思想[M]. 机械工业出版社, 2002.</li><li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
